/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_CLOWNFISH_TEST_TESTLOCKFREEREGISTRY
#define H_CLOWNFISH_TEST_TESTLOCKFREEREGISTRY 1


#ifdef __cplusplus
extern "C" {
#endif

#include "testcfish_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/TestHarness/TestBatch.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_TESTCFISH_TESTLOCKFREEREGISTRY
extern uint32_t testcfish_TestLFReg_IVARS_OFFSET;
typedef struct testcfish_TestLockFreeRegistryIVARS testcfish_TestLockFreeRegistryIVARS;
static CFISH_INLINE testcfish_TestLockFreeRegistryIVARS*
testcfish_TestLFReg_IVARS(testcfish_TestLockFreeRegistry *self) {
   char *ptr = (char*)self + testcfish_TestLFReg_IVARS_OFFSET;
   return (testcfish_TestLockFreeRegistryIVARS*)ptr;
}
#ifdef TESTCFISH_USE_SHORT_NAMES
  #define TestLockFreeRegistryIVARS testcfish_TestLockFreeRegistryIVARS
  #define TestLFReg_IVARS testcfish_TestLFReg_IVARS
#endif


#endif /* C_TESTCFISH_TESTLOCKFREEREGISTRY */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

TESTCFISH_VISIBLE testcfish_TestLockFreeRegistry*
testcfish_TestLFReg_new(void);

void
TESTCFISH_TestLFReg_Run_IMP(testcfish_TestLockFreeRegistry* self, cfish_TestBatchRunner* runner);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*TESTCFISH_TestLFReg_To_Host_t)(testcfish_TestLockFreeRegistry* self, void* vcache);

typedef cfish_Obj*
(*TESTCFISH_TestLFReg_Clone_t)(testcfish_TestLockFreeRegistry* self);

typedef bool
(*TESTCFISH_TestLFReg_Equals_t)(testcfish_TestLockFreeRegistry* self, cfish_Obj* other);

typedef int32_t
(*TESTCFISH_TestLFReg_Compare_To_t)(testcfish_TestLockFreeRegistry* self, cfish_Obj* other);

typedef void
(*TESTCFISH_TestLFReg_Destroy_t)(testcfish_TestLockFreeRegistry* self);

typedef cfish_String*
(*TESTCFISH_TestLFReg_To_String_t)(testcfish_TestLockFreeRegistry* self);

typedef void
(*TESTCFISH_TestLFReg_Run_t)(testcfish_TestLockFreeRegistry* self, cfish_TestBatchRunner* runner);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
testcfish_TestLFReg_get_class(testcfish_TestLockFreeRegistry *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
testcfish_TestLFReg_get_class_name(testcfish_TestLockFreeRegistry *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
testcfish_TestLFReg_is_a(testcfish_TestLockFreeRegistry *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestLFReg_To_Host_OFFSET;
static CFISH_INLINE void*
TESTCFISH_TestLFReg_To_Host(testcfish_TestLockFreeRegistry* self, void* vcache) {
    const TESTCFISH_TestLFReg_To_Host_t method = (TESTCFISH_TestLFReg_To_Host_t)cfish_obj_method(self, TESTCFISH_TestLFReg_To_Host_OFFSET);
    return method(self, vcache);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestLFReg_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTCFISH_TestLFReg_Clone(testcfish_TestLockFreeRegistry* self) {
    const TESTCFISH_TestLFReg_Clone_t method = (TESTCFISH_TestLFReg_Clone_t)cfish_obj_method(self, TESTCFISH_TestLFReg_Clone_OFFSET);
    return method(self);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestLFReg_Equals_OFFSET;
static CFISH_INLINE bool
TESTCFISH_TestLFReg_Equals(testcfish_TestLockFreeRegistry* self, cfish_Obj* other) {
    const TESTCFISH_TestLFReg_Equals_t method = (TESTCFISH_TestLFReg_Equals_t)cfish_obj_method(self, TESTCFISH_TestLFReg_Equals_OFFSET);
    return method(self, other);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestLFReg_Compare_To_OFFSET;
static CFISH_INLINE int32_t
TESTCFISH_TestLFReg_Compare_To(testcfish_TestLockFreeRegistry* self, cfish_Obj* other) {
    const TESTCFISH_TestLFReg_Compare_To_t method = (TESTCFISH_TestLFReg_Compare_To_t)cfish_obj_method(self, TESTCFISH_TestLFReg_Compare_To_OFFSET);
    return method(self, other);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestLFReg_Destroy_OFFSET;
static CFISH_INLINE void
TESTCFISH_TestLFReg_Destroy(testcfish_TestLockFreeRegistry* self) {
    const TESTCFISH_TestLFReg_Destroy_t method = (TESTCFISH_TestLFReg_Destroy_t)cfish_obj_method(self, TESTCFISH_TestLFReg_Destroy_OFFSET);
    method(self);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestLFReg_To_String_OFFSET;
static CFISH_INLINE cfish_String*
TESTCFISH_TestLFReg_To_String(testcfish_TestLockFreeRegistry* self) {
    const TESTCFISH_TestLFReg_To_String_t method = (TESTCFISH_TestLFReg_To_String_t)cfish_obj_method(self, TESTCFISH_TestLFReg_To_String_OFFSET);
    return method(self);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestLFReg_Run_OFFSET;
static CFISH_INLINE void
TESTCFISH_TestLFReg_Run(testcfish_TestLockFreeRegistry* self, cfish_TestBatchRunner* runner) {
    const TESTCFISH_TestLFReg_Run_t method = (TESTCFISH_TestLFReg_Run_t)cfish_obj_method(self, TESTCFISH_TestLFReg_Run_OFFSET);
    method(self, runner);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef TESTCFISH_USE_SHORT_NAMES
  #define TestLockFreeRegistry testcfish_TestLockFreeRegistry
  #define TESTLOCKFREEREGISTRY TESTCFISH_TESTLOCKFREEREGISTRY
  #define TestLFReg_new testcfish_TestLFReg_new
  #define TestLFReg_get_class testcfish_TestLFReg_get_class
  #define TestLFReg_get_class_name testcfish_TestLFReg_get_class_name
  #define TestLFReg_is_a testcfish_TestLFReg_is_a
  #define TestLFReg_Run_IMP TESTCFISH_TestLFReg_Run_IMP
  #define TestLFReg_To_Host TESTCFISH_TestLFReg_To_Host
  #define TestLFReg_To_Host_t TESTCFISH_TestLFReg_To_Host_t
  #define TestLFReg_Clone TESTCFISH_TestLFReg_Clone
  #define TestLFReg_Clone_t TESTCFISH_TestLFReg_Clone_t
  #define TestLFReg_Equals TESTCFISH_TestLFReg_Equals
  #define TestLFReg_Equals_t TESTCFISH_TestLFReg_Equals_t
  #define TestLFReg_Compare_To TESTCFISH_TestLFReg_Compare_To
  #define TestLFReg_Compare_To_t TESTCFISH_TestLFReg_Compare_To_t
  #define TestLFReg_Destroy TESTCFISH_TestLFReg_Destroy
  #define TestLFReg_Destroy_t TESTCFISH_TestLFReg_Destroy_t
  #define TestLFReg_To_String TESTCFISH_TestLFReg_To_String
  #define TestLFReg_To_String_t TESTCFISH_TestLFReg_To_String_t
  #define TestLFReg_Run TESTCFISH_TestLFReg_Run
  #define TestLFReg_Run_t TESTCFISH_TestLFReg_Run_t
#endif /* TESTCFISH_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_CLOWNFISH_TEST_TESTLOCKFREEREGISTRY */




