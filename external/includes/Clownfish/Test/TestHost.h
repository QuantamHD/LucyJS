/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_CLOWNFISH_TEST_TESTHOST
#define H_CLOWNFISH_TEST_TESTHOST 1


#ifdef __cplusplus
extern "C" {
#endif

#include "testcfish_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_TESTCFISH_TESTHOST
extern uint32_t testcfish_TestHost_IVARS_OFFSET;
typedef struct testcfish_TestHostIVARS testcfish_TestHostIVARS;
static CFISH_INLINE testcfish_TestHostIVARS*
testcfish_TestHost_IVARS(testcfish_TestHost *self) {
   char *ptr = (char*)self + testcfish_TestHost_IVARS_OFFSET;
   return (testcfish_TestHostIVARS*)ptr;
}
#ifdef TESTCFISH_USE_SHORT_NAMES
  #define TestHostIVARS testcfish_TestHostIVARS
  #define TestHost_IVARS testcfish_TestHost_IVARS
#endif


#endif /* C_TESTCFISH_TESTHOST */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

TESTCFISH_VISIBLE testcfish_TestHost*
testcfish_TestHost_new(void);

cfish_Obj*
TESTCFISH_TestHost_Test_Obj_Pos_Arg_IMP(testcfish_TestHost* self, cfish_Obj* arg);

cfish_Obj*
TESTCFISH_TestHost_Test_Obj_Pos_Arg_Def_IMP(testcfish_TestHost* self, cfish_Obj* arg);

cfish_Obj*
TESTCFISH_TestHost_Test_Obj_Label_Arg_IMP(testcfish_TestHost* self, cfish_Obj* arg, bool unused);

cfish_Obj*
TESTCFISH_TestHost_Test_Obj_Label_Arg_Def_IMP(testcfish_TestHost* self, cfish_Obj* arg, bool unused);

int32_t
TESTCFISH_TestHost_Test_Int32_Pos_Arg_IMP(testcfish_TestHost* self, int32_t arg);

int32_t
TESTCFISH_TestHost_Test_Int32_Pos_Arg_Def_IMP(testcfish_TestHost* self, int32_t arg);

int32_t
TESTCFISH_TestHost_Test_Int32_Label_Arg_IMP(testcfish_TestHost* self, int32_t arg, bool unused);

int32_t
TESTCFISH_TestHost_Test_Int32_Label_Arg_Def_IMP(testcfish_TestHost* self, int32_t arg, bool unused);

bool
TESTCFISH_TestHost_Test_Bool_Pos_Arg_IMP(testcfish_TestHost* self, bool arg);

bool
TESTCFISH_TestHost_Test_Bool_Pos_Arg_Def_IMP(testcfish_TestHost* self, bool arg);

bool
TESTCFISH_TestHost_Test_Bool_Label_Arg_IMP(testcfish_TestHost* self, bool arg, bool unused);

bool
TESTCFISH_TestHost_Test_Bool_Label_Arg_Def_IMP(testcfish_TestHost* self, bool arg, bool unused);

void*
TESTCFISH_TestHost_Invalid_Callback_IMP(testcfish_TestHost* self);

void
TESTCFISH_TestHost_Invoke_Invalid_Callback_From_C_IMP(testcfish_TestHost* self);

cfish_String*
TESTCFISH_TestHost_Aliased_IMP(testcfish_TestHost* self);

cfish_String*
TESTCFISH_TestHost_Invoke_Aliased_From_C_IMP(testcfish_TestHost* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*TESTCFISH_TestHost_To_Host_t)(testcfish_TestHost* self, void* vcache);

typedef cfish_Obj*
(*TESTCFISH_TestHost_Clone_t)(testcfish_TestHost* self);

typedef bool
(*TESTCFISH_TestHost_Equals_t)(testcfish_TestHost* self, cfish_Obj* other);

typedef int32_t
(*TESTCFISH_TestHost_Compare_To_t)(testcfish_TestHost* self, cfish_Obj* other);

typedef void
(*TESTCFISH_TestHost_Destroy_t)(testcfish_TestHost* self);

typedef cfish_String*
(*TESTCFISH_TestHost_To_String_t)(testcfish_TestHost* self);

typedef cfish_Obj*
(*TESTCFISH_TestHost_Test_Obj_Pos_Arg_t)(testcfish_TestHost* self, cfish_Obj* arg);

typedef cfish_Obj*
(*TESTCFISH_TestHost_Test_Obj_Pos_Arg_Def_t)(testcfish_TestHost* self, cfish_Obj* arg);

typedef cfish_Obj*
(*TESTCFISH_TestHost_Test_Obj_Label_Arg_t)(testcfish_TestHost* self, cfish_Obj* arg, bool unused);

typedef cfish_Obj*
(*TESTCFISH_TestHost_Test_Obj_Label_Arg_Def_t)(testcfish_TestHost* self, cfish_Obj* arg, bool unused);

typedef int32_t
(*TESTCFISH_TestHost_Test_Int32_Pos_Arg_t)(testcfish_TestHost* self, int32_t arg);

typedef int32_t
(*TESTCFISH_TestHost_Test_Int32_Pos_Arg_Def_t)(testcfish_TestHost* self, int32_t arg);

typedef int32_t
(*TESTCFISH_TestHost_Test_Int32_Label_Arg_t)(testcfish_TestHost* self, int32_t arg, bool unused);

typedef int32_t
(*TESTCFISH_TestHost_Test_Int32_Label_Arg_Def_t)(testcfish_TestHost* self, int32_t arg, bool unused);

typedef bool
(*TESTCFISH_TestHost_Test_Bool_Pos_Arg_t)(testcfish_TestHost* self, bool arg);

typedef bool
(*TESTCFISH_TestHost_Test_Bool_Pos_Arg_Def_t)(testcfish_TestHost* self, bool arg);

typedef bool
(*TESTCFISH_TestHost_Test_Bool_Label_Arg_t)(testcfish_TestHost* self, bool arg, bool unused);

typedef bool
(*TESTCFISH_TestHost_Test_Bool_Label_Arg_Def_t)(testcfish_TestHost* self, bool arg, bool unused);

typedef void*
(*TESTCFISH_TestHost_Invalid_Callback_t)(testcfish_TestHost* self);

typedef void
(*TESTCFISH_TestHost_Invoke_Invalid_Callback_From_C_t)(testcfish_TestHost* self);

typedef cfish_String*
(*TESTCFISH_TestHost_Aliased_t)(testcfish_TestHost* self);

typedef cfish_String*
(*TESTCFISH_TestHost_Invoke_Aliased_From_C_t)(testcfish_TestHost* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
testcfish_TestHost_get_class(testcfish_TestHost *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
testcfish_TestHost_get_class_name(testcfish_TestHost *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
testcfish_TestHost_is_a(testcfish_TestHost *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_To_Host_OFFSET;
static CFISH_INLINE void*
TESTCFISH_TestHost_To_Host(testcfish_TestHost* self, void* vcache) {
    const TESTCFISH_TestHost_To_Host_t method = (TESTCFISH_TestHost_To_Host_t)cfish_obj_method(self, TESTCFISH_TestHost_To_Host_OFFSET);
    return method(self, vcache);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTCFISH_TestHost_Clone(testcfish_TestHost* self) {
    const TESTCFISH_TestHost_Clone_t method = (TESTCFISH_TestHost_Clone_t)cfish_obj_method(self, TESTCFISH_TestHost_Clone_OFFSET);
    return method(self);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Equals_OFFSET;
static CFISH_INLINE bool
TESTCFISH_TestHost_Equals(testcfish_TestHost* self, cfish_Obj* other) {
    const TESTCFISH_TestHost_Equals_t method = (TESTCFISH_TestHost_Equals_t)cfish_obj_method(self, TESTCFISH_TestHost_Equals_OFFSET);
    return method(self, other);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Compare_To_OFFSET;
static CFISH_INLINE int32_t
TESTCFISH_TestHost_Compare_To(testcfish_TestHost* self, cfish_Obj* other) {
    const TESTCFISH_TestHost_Compare_To_t method = (TESTCFISH_TestHost_Compare_To_t)cfish_obj_method(self, TESTCFISH_TestHost_Compare_To_OFFSET);
    return method(self, other);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Destroy_OFFSET;
static CFISH_INLINE void
TESTCFISH_TestHost_Destroy(testcfish_TestHost* self) {
    const TESTCFISH_TestHost_Destroy_t method = (TESTCFISH_TestHost_Destroy_t)cfish_obj_method(self, TESTCFISH_TestHost_Destroy_OFFSET);
    method(self);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_To_String_OFFSET;
static CFISH_INLINE cfish_String*
TESTCFISH_TestHost_To_String(testcfish_TestHost* self) {
    const TESTCFISH_TestHost_To_String_t method = (TESTCFISH_TestHost_To_String_t)cfish_obj_method(self, TESTCFISH_TestHost_To_String_OFFSET);
    return method(self);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Test_Obj_Pos_Arg_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTCFISH_TestHost_Test_Obj_Pos_Arg(testcfish_TestHost* self, cfish_Obj* arg) {
    const TESTCFISH_TestHost_Test_Obj_Pos_Arg_t method = (TESTCFISH_TestHost_Test_Obj_Pos_Arg_t)cfish_obj_method(self, TESTCFISH_TestHost_Test_Obj_Pos_Arg_OFFSET);
    return method(self, arg);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Test_Obj_Pos_Arg_Def_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTCFISH_TestHost_Test_Obj_Pos_Arg_Def(testcfish_TestHost* self, cfish_Obj* arg) {
    const TESTCFISH_TestHost_Test_Obj_Pos_Arg_Def_t method = (TESTCFISH_TestHost_Test_Obj_Pos_Arg_Def_t)cfish_obj_method(self, TESTCFISH_TestHost_Test_Obj_Pos_Arg_Def_OFFSET);
    return method(self, arg);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Test_Obj_Label_Arg_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTCFISH_TestHost_Test_Obj_Label_Arg(testcfish_TestHost* self, cfish_Obj* arg, bool unused) {
    const TESTCFISH_TestHost_Test_Obj_Label_Arg_t method = (TESTCFISH_TestHost_Test_Obj_Label_Arg_t)cfish_obj_method(self, TESTCFISH_TestHost_Test_Obj_Label_Arg_OFFSET);
    return method(self, arg, unused);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Test_Obj_Label_Arg_Def_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTCFISH_TestHost_Test_Obj_Label_Arg_Def(testcfish_TestHost* self, cfish_Obj* arg, bool unused) {
    const TESTCFISH_TestHost_Test_Obj_Label_Arg_Def_t method = (TESTCFISH_TestHost_Test_Obj_Label_Arg_Def_t)cfish_obj_method(self, TESTCFISH_TestHost_Test_Obj_Label_Arg_Def_OFFSET);
    return method(self, arg, unused);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Test_Int32_Pos_Arg_OFFSET;
static CFISH_INLINE int32_t
TESTCFISH_TestHost_Test_Int32_Pos_Arg(testcfish_TestHost* self, int32_t arg) {
    const TESTCFISH_TestHost_Test_Int32_Pos_Arg_t method = (TESTCFISH_TestHost_Test_Int32_Pos_Arg_t)cfish_obj_method(self, TESTCFISH_TestHost_Test_Int32_Pos_Arg_OFFSET);
    return method(self, arg);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Test_Int32_Pos_Arg_Def_OFFSET;
static CFISH_INLINE int32_t
TESTCFISH_TestHost_Test_Int32_Pos_Arg_Def(testcfish_TestHost* self, int32_t arg) {
    const TESTCFISH_TestHost_Test_Int32_Pos_Arg_Def_t method = (TESTCFISH_TestHost_Test_Int32_Pos_Arg_Def_t)cfish_obj_method(self, TESTCFISH_TestHost_Test_Int32_Pos_Arg_Def_OFFSET);
    return method(self, arg);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Test_Int32_Label_Arg_OFFSET;
static CFISH_INLINE int32_t
TESTCFISH_TestHost_Test_Int32_Label_Arg(testcfish_TestHost* self, int32_t arg, bool unused) {
    const TESTCFISH_TestHost_Test_Int32_Label_Arg_t method = (TESTCFISH_TestHost_Test_Int32_Label_Arg_t)cfish_obj_method(self, TESTCFISH_TestHost_Test_Int32_Label_Arg_OFFSET);
    return method(self, arg, unused);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Test_Int32_Label_Arg_Def_OFFSET;
static CFISH_INLINE int32_t
TESTCFISH_TestHost_Test_Int32_Label_Arg_Def(testcfish_TestHost* self, int32_t arg, bool unused) {
    const TESTCFISH_TestHost_Test_Int32_Label_Arg_Def_t method = (TESTCFISH_TestHost_Test_Int32_Label_Arg_Def_t)cfish_obj_method(self, TESTCFISH_TestHost_Test_Int32_Label_Arg_Def_OFFSET);
    return method(self, arg, unused);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Test_Bool_Pos_Arg_OFFSET;
static CFISH_INLINE bool
TESTCFISH_TestHost_Test_Bool_Pos_Arg(testcfish_TestHost* self, bool arg) {
    const TESTCFISH_TestHost_Test_Bool_Pos_Arg_t method = (TESTCFISH_TestHost_Test_Bool_Pos_Arg_t)cfish_obj_method(self, TESTCFISH_TestHost_Test_Bool_Pos_Arg_OFFSET);
    return method(self, arg);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Test_Bool_Pos_Arg_Def_OFFSET;
static CFISH_INLINE bool
TESTCFISH_TestHost_Test_Bool_Pos_Arg_Def(testcfish_TestHost* self, bool arg) {
    const TESTCFISH_TestHost_Test_Bool_Pos_Arg_Def_t method = (TESTCFISH_TestHost_Test_Bool_Pos_Arg_Def_t)cfish_obj_method(self, TESTCFISH_TestHost_Test_Bool_Pos_Arg_Def_OFFSET);
    return method(self, arg);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Test_Bool_Label_Arg_OFFSET;
static CFISH_INLINE bool
TESTCFISH_TestHost_Test_Bool_Label_Arg(testcfish_TestHost* self, bool arg, bool unused) {
    const TESTCFISH_TestHost_Test_Bool_Label_Arg_t method = (TESTCFISH_TestHost_Test_Bool_Label_Arg_t)cfish_obj_method(self, TESTCFISH_TestHost_Test_Bool_Label_Arg_OFFSET);
    return method(self, arg, unused);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Test_Bool_Label_Arg_Def_OFFSET;
static CFISH_INLINE bool
TESTCFISH_TestHost_Test_Bool_Label_Arg_Def(testcfish_TestHost* self, bool arg, bool unused) {
    const TESTCFISH_TestHost_Test_Bool_Label_Arg_Def_t method = (TESTCFISH_TestHost_Test_Bool_Label_Arg_Def_t)cfish_obj_method(self, TESTCFISH_TestHost_Test_Bool_Label_Arg_Def_OFFSET);
    return method(self, arg, unused);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Invalid_Callback_OFFSET;
static CFISH_INLINE void*
TESTCFISH_TestHost_Invalid_Callback(testcfish_TestHost* self) {
    const TESTCFISH_TestHost_Invalid_Callback_t method = (TESTCFISH_TestHost_Invalid_Callback_t)cfish_obj_method(self, TESTCFISH_TestHost_Invalid_Callback_OFFSET);
    return method(self);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Invoke_Invalid_Callback_From_C_OFFSET;
static CFISH_INLINE void
TESTCFISH_TestHost_Invoke_Invalid_Callback_From_C(testcfish_TestHost* self) {
    const TESTCFISH_TestHost_Invoke_Invalid_Callback_From_C_t method = (TESTCFISH_TestHost_Invoke_Invalid_Callback_From_C_t)cfish_obj_method(self, TESTCFISH_TestHost_Invoke_Invalid_Callback_From_C_OFFSET);
    method(self);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Aliased_OFFSET;
static CFISH_INLINE cfish_String*
TESTCFISH_TestHost_Aliased(testcfish_TestHost* self) {
    const TESTCFISH_TestHost_Aliased_t method = (TESTCFISH_TestHost_Aliased_t)cfish_obj_method(self, TESTCFISH_TestHost_Aliased_OFFSET);
    return method(self);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestHost_Invoke_Aliased_From_C_OFFSET;
static CFISH_INLINE cfish_String*
TESTCFISH_TestHost_Invoke_Aliased_From_C(testcfish_TestHost* self) {
    const TESTCFISH_TestHost_Invoke_Aliased_From_C_t method = (TESTCFISH_TestHost_Invoke_Aliased_From_C_t)cfish_obj_method(self, TESTCFISH_TestHost_Invoke_Aliased_From_C_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define TestCfish_TestHost_Test_Obj_Pos_Arg_OVERRIDE NULL
#define TestCfish_TestHost_Test_Obj_Pos_Arg_Def_OVERRIDE NULL
#define TestCfish_TestHost_Test_Obj_Label_Arg_OVERRIDE NULL
#define TestCfish_TestHost_Test_Obj_Label_Arg_Def_OVERRIDE NULL
#define TestCfish_TestHost_Test_Int32_Pos_Arg_OVERRIDE NULL
#define TestCfish_TestHost_Test_Int32_Pos_Arg_Def_OVERRIDE NULL
#define TestCfish_TestHost_Test_Int32_Label_Arg_OVERRIDE NULL
#define TestCfish_TestHost_Test_Int32_Label_Arg_Def_OVERRIDE NULL
#define TestCfish_TestHost_Test_Bool_Pos_Arg_OVERRIDE NULL
#define TestCfish_TestHost_Test_Bool_Pos_Arg_Def_OVERRIDE NULL
#define TestCfish_TestHost_Test_Bool_Label_Arg_OVERRIDE NULL
#define TestCfish_TestHost_Test_Bool_Label_Arg_Def_OVERRIDE NULL
#define TestCfish_TestHost_Invalid_Callback_OVERRIDE NULL
#define TestCfish_TestHost_Invoke_Invalid_Callback_From_C_OVERRIDE NULL
#define TestCfish_TestHost_Aliased_OVERRIDE NULL
#define TestCfish_TestHost_Invoke_Aliased_From_C_OVERRIDE NULL
#else
cfish_Obj*
TestCfish_TestHost_Test_Obj_Pos_Arg_OVERRIDE(testcfish_TestHost* self, cfish_Obj* arg);
cfish_Obj*
TestCfish_TestHost_Test_Obj_Pos_Arg_Def_OVERRIDE(testcfish_TestHost* self, cfish_Obj* arg);
cfish_Obj*
TestCfish_TestHost_Test_Obj_Label_Arg_OVERRIDE(testcfish_TestHost* self, cfish_Obj* arg, bool unused);
cfish_Obj*
TestCfish_TestHost_Test_Obj_Label_Arg_Def_OVERRIDE(testcfish_TestHost* self, cfish_Obj* arg, bool unused);
int32_t
TestCfish_TestHost_Test_Int32_Pos_Arg_OVERRIDE(testcfish_TestHost* self, int32_t arg);
int32_t
TestCfish_TestHost_Test_Int32_Pos_Arg_Def_OVERRIDE(testcfish_TestHost* self, int32_t arg);
int32_t
TestCfish_TestHost_Test_Int32_Label_Arg_OVERRIDE(testcfish_TestHost* self, int32_t arg, bool unused);
int32_t
TestCfish_TestHost_Test_Int32_Label_Arg_Def_OVERRIDE(testcfish_TestHost* self, int32_t arg, bool unused);
bool
TestCfish_TestHost_Test_Bool_Pos_Arg_OVERRIDE(testcfish_TestHost* self, bool arg);
bool
TestCfish_TestHost_Test_Bool_Pos_Arg_Def_OVERRIDE(testcfish_TestHost* self, bool arg);
bool
TestCfish_TestHost_Test_Bool_Label_Arg_OVERRIDE(testcfish_TestHost* self, bool arg, bool unused);
bool
TestCfish_TestHost_Test_Bool_Label_Arg_Def_OVERRIDE(testcfish_TestHost* self, bool arg, bool unused);
void*
TestCfish_TestHost_Invalid_Callback_OVERRIDE(testcfish_TestHost* self);
void
TestCfish_TestHost_Invoke_Invalid_Callback_From_C_OVERRIDE(testcfish_TestHost* self);
cfish_String*
TestCfish_TestHost_Aliased_OVERRIDE(testcfish_TestHost* self);
cfish_String*
TestCfish_TestHost_Invoke_Aliased_From_C_OVERRIDE(testcfish_TestHost* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef TESTCFISH_USE_SHORT_NAMES
  #define TestHost testcfish_TestHost
  #define TESTHOST TESTCFISH_TESTHOST
  #define TestHost_new testcfish_TestHost_new
  #define TestHost_get_class testcfish_TestHost_get_class
  #define TestHost_get_class_name testcfish_TestHost_get_class_name
  #define TestHost_is_a testcfish_TestHost_is_a
  #define TestHost_Test_Obj_Pos_Arg_IMP TESTCFISH_TestHost_Test_Obj_Pos_Arg_IMP
  #define TestHost_Test_Obj_Pos_Arg_Def_IMP TESTCFISH_TestHost_Test_Obj_Pos_Arg_Def_IMP
  #define TestHost_Test_Obj_Label_Arg_IMP TESTCFISH_TestHost_Test_Obj_Label_Arg_IMP
  #define TestHost_Test_Obj_Label_Arg_Def_IMP TESTCFISH_TestHost_Test_Obj_Label_Arg_Def_IMP
  #define TestHost_Test_Int32_Pos_Arg_IMP TESTCFISH_TestHost_Test_Int32_Pos_Arg_IMP
  #define TestHost_Test_Int32_Pos_Arg_Def_IMP TESTCFISH_TestHost_Test_Int32_Pos_Arg_Def_IMP
  #define TestHost_Test_Int32_Label_Arg_IMP TESTCFISH_TestHost_Test_Int32_Label_Arg_IMP
  #define TestHost_Test_Int32_Label_Arg_Def_IMP TESTCFISH_TestHost_Test_Int32_Label_Arg_Def_IMP
  #define TestHost_Test_Bool_Pos_Arg_IMP TESTCFISH_TestHost_Test_Bool_Pos_Arg_IMP
  #define TestHost_Test_Bool_Pos_Arg_Def_IMP TESTCFISH_TestHost_Test_Bool_Pos_Arg_Def_IMP
  #define TestHost_Test_Bool_Label_Arg_IMP TESTCFISH_TestHost_Test_Bool_Label_Arg_IMP
  #define TestHost_Test_Bool_Label_Arg_Def_IMP TESTCFISH_TestHost_Test_Bool_Label_Arg_Def_IMP
  #define TestHost_Invalid_Callback_IMP TESTCFISH_TestHost_Invalid_Callback_IMP
  #define TestHost_Invoke_Invalid_Callback_From_C_IMP TESTCFISH_TestHost_Invoke_Invalid_Callback_From_C_IMP
  #define TestHost_Aliased_IMP TESTCFISH_TestHost_Aliased_IMP
  #define TestHost_Invoke_Aliased_From_C_IMP TESTCFISH_TestHost_Invoke_Aliased_From_C_IMP
  #define TestHost_To_Host TESTCFISH_TestHost_To_Host
  #define TestHost_To_Host_t TESTCFISH_TestHost_To_Host_t
  #define TestHost_Clone TESTCFISH_TestHost_Clone
  #define TestHost_Clone_t TESTCFISH_TestHost_Clone_t
  #define TestHost_Equals TESTCFISH_TestHost_Equals
  #define TestHost_Equals_t TESTCFISH_TestHost_Equals_t
  #define TestHost_Compare_To TESTCFISH_TestHost_Compare_To
  #define TestHost_Compare_To_t TESTCFISH_TestHost_Compare_To_t
  #define TestHost_Destroy TESTCFISH_TestHost_Destroy
  #define TestHost_Destroy_t TESTCFISH_TestHost_Destroy_t
  #define TestHost_To_String TESTCFISH_TestHost_To_String
  #define TestHost_To_String_t TESTCFISH_TestHost_To_String_t
  #define TestHost_Test_Obj_Pos_Arg TESTCFISH_TestHost_Test_Obj_Pos_Arg
  #define TestHost_Test_Obj_Pos_Arg_t TESTCFISH_TestHost_Test_Obj_Pos_Arg_t
  #define TestHost_Test_Obj_Pos_Arg_Def TESTCFISH_TestHost_Test_Obj_Pos_Arg_Def
  #define TestHost_Test_Obj_Pos_Arg_Def_t TESTCFISH_TestHost_Test_Obj_Pos_Arg_Def_t
  #define TestHost_Test_Obj_Label_Arg TESTCFISH_TestHost_Test_Obj_Label_Arg
  #define TestHost_Test_Obj_Label_Arg_t TESTCFISH_TestHost_Test_Obj_Label_Arg_t
  #define TestHost_Test_Obj_Label_Arg_Def TESTCFISH_TestHost_Test_Obj_Label_Arg_Def
  #define TestHost_Test_Obj_Label_Arg_Def_t TESTCFISH_TestHost_Test_Obj_Label_Arg_Def_t
  #define TestHost_Test_Int32_Pos_Arg TESTCFISH_TestHost_Test_Int32_Pos_Arg
  #define TestHost_Test_Int32_Pos_Arg_t TESTCFISH_TestHost_Test_Int32_Pos_Arg_t
  #define TestHost_Test_Int32_Pos_Arg_Def TESTCFISH_TestHost_Test_Int32_Pos_Arg_Def
  #define TestHost_Test_Int32_Pos_Arg_Def_t TESTCFISH_TestHost_Test_Int32_Pos_Arg_Def_t
  #define TestHost_Test_Int32_Label_Arg TESTCFISH_TestHost_Test_Int32_Label_Arg
  #define TestHost_Test_Int32_Label_Arg_t TESTCFISH_TestHost_Test_Int32_Label_Arg_t
  #define TestHost_Test_Int32_Label_Arg_Def TESTCFISH_TestHost_Test_Int32_Label_Arg_Def
  #define TestHost_Test_Int32_Label_Arg_Def_t TESTCFISH_TestHost_Test_Int32_Label_Arg_Def_t
  #define TestHost_Test_Bool_Pos_Arg TESTCFISH_TestHost_Test_Bool_Pos_Arg
  #define TestHost_Test_Bool_Pos_Arg_t TESTCFISH_TestHost_Test_Bool_Pos_Arg_t
  #define TestHost_Test_Bool_Pos_Arg_Def TESTCFISH_TestHost_Test_Bool_Pos_Arg_Def
  #define TestHost_Test_Bool_Pos_Arg_Def_t TESTCFISH_TestHost_Test_Bool_Pos_Arg_Def_t
  #define TestHost_Test_Bool_Label_Arg TESTCFISH_TestHost_Test_Bool_Label_Arg
  #define TestHost_Test_Bool_Label_Arg_t TESTCFISH_TestHost_Test_Bool_Label_Arg_t
  #define TestHost_Test_Bool_Label_Arg_Def TESTCFISH_TestHost_Test_Bool_Label_Arg_Def
  #define TestHost_Test_Bool_Label_Arg_Def_t TESTCFISH_TestHost_Test_Bool_Label_Arg_Def_t
  #define TestHost_Invalid_Callback TESTCFISH_TestHost_Invalid_Callback
  #define TestHost_Invalid_Callback_t TESTCFISH_TestHost_Invalid_Callback_t
  #define TestHost_Invoke_Invalid_Callback_From_C TESTCFISH_TestHost_Invoke_Invalid_Callback_From_C
  #define TestHost_Invoke_Invalid_Callback_From_C_t TESTCFISH_TestHost_Invoke_Invalid_Callback_From_C_t
  #define TestHost_Aliased TESTCFISH_TestHost_Aliased
  #define TestHost_Aliased_t TESTCFISH_TestHost_Aliased_t
  #define TestHost_Invoke_Aliased_From_C TESTCFISH_TestHost_Invoke_Aliased_From_C
  #define TestHost_Invoke_Aliased_From_C_t TESTCFISH_TestHost_Invoke_Aliased_From_C_t
#endif /* TESTCFISH_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_CLOWNFISH_TEST_TESTHOST */




