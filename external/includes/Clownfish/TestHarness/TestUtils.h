/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_CLOWNFISH_TESTHARNESS_TESTUTILS
#define H_CLOWNFISH_TESTHARNESS_TESTUTILS 1


#ifdef __cplusplus
extern "C" {
#endif

#include "cfish_parcel.h"

typedef void (*cfish_thread_routine_t)(void *arg);

typedef struct cfish_Thread cfish_Thread;


/* Declare this class's inert variables.
 */

extern CFISH_VISIBLE bool cfish_TestUtils_has_threads;


/* Declare this class's inert functions.
 */

CFISH_VISIBLE cfish_String*
cfish_TestUtils_get_str(const char* utf8);

CFISH_VISIBLE uint64_t
cfish_TestUtils_random_u64(void);

CFISH_VISIBLE int64_t*
cfish_TestUtils_random_i64s(int64_t* buf, size_t count, int64_t min, int64_t limit);

CFISH_VISIBLE uint64_t*
cfish_TestUtils_random_u64s(uint64_t* buf, size_t count, uint64_t min, uint64_t limit);

CFISH_VISIBLE double*
cfish_TestUtils_random_f64s(double* buf, size_t count);

CFISH_VISIBLE cfish_String*
cfish_TestUtils_random_string(size_t length);

CFISH_VISIBLE uint64_t
cfish_TestUtils_time(void);

CFISH_VISIBLE void
cfish_TestUtils_usleep(uint64_t microseconds);

CFISH_VISIBLE cfish_Thread*
cfish_TestUtils_thread_create(cfish_thread_routine_t routine, void* arg, void* host_runtime);

CFISH_VISIBLE void
cfish_TestUtils_thread_yield(void);

CFISH_VISIBLE void
cfish_TestUtils_thread_join(cfish_Thread* thread);

CFISH_VISIBLE void*
cfish_TestUtils_clone_host_runtime(void);

CFISH_VISIBLE void
cfish_TestUtils_set_host_runtime(void* runtime);

CFISH_VISIBLE void
cfish_TestUtils_destroy_host_runtime(void* runtime);



/* Define "short names" for this class's symbols.
 */

#ifdef CFISH_USE_SHORT_NAMES
  #define TestUtils_get_str cfish_TestUtils_get_str
  #define TestUtils_random_u64 cfish_TestUtils_random_u64
  #define TestUtils_random_i64s cfish_TestUtils_random_i64s
  #define TestUtils_random_u64s cfish_TestUtils_random_u64s
  #define TestUtils_random_f64s cfish_TestUtils_random_f64s
  #define TestUtils_random_string cfish_TestUtils_random_string
  #define TestUtils_time cfish_TestUtils_time
  #define TestUtils_usleep cfish_TestUtils_usleep
  #define TestUtils_thread_create cfish_TestUtils_thread_create
  #define TestUtils_thread_yield cfish_TestUtils_thread_yield
  #define TestUtils_thread_join cfish_TestUtils_thread_join
  #define TestUtils_clone_host_runtime cfish_TestUtils_clone_host_runtime
  #define TestUtils_set_host_runtime cfish_TestUtils_set_host_runtime
  #define TestUtils_destroy_host_runtime cfish_TestUtils_destroy_host_runtime
  #define TestUtils_has_threads cfish_TestUtils_has_threads
#endif /* CFISH_USE_SHORT_NAMES */



#ifdef CFISH_USE_SHORT_NAMES
  #define Thread                cfish_Thread
  #define thread_routine_t      cfish_thread_routine_t
#endif




#ifdef __cplusplus
}
#endif

#endif /* H_CLOWNFISH_TESTHARNESS_TESTUTILS */




