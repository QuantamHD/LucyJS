/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_UTIL_PRIORITYQUEUE
#define H_LUCY_UTIL_PRIORITYQUEUE 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_PRIORITYQUEUE
extern uint32_t lucy_PriQ_IVARS_OFFSET;
typedef struct lucy_PriorityQueueIVARS lucy_PriorityQueueIVARS;
static CFISH_INLINE lucy_PriorityQueueIVARS*
lucy_PriQ_IVARS(lucy_PriorityQueue *self) {
   char *ptr = (char*)self + lucy_PriQ_IVARS_OFFSET;
   return (lucy_PriorityQueueIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define PriorityQueueIVARS lucy_PriorityQueueIVARS
  #define PriQ_IVARS lucy_PriQ_IVARS
#endif

struct lucy_PriorityQueueIVARS {
    uint32_t size;
    uint32_t max_size;
    cfish_Obj** heap;
};

#endif /* C_LUCY_PRIORITYQUEUE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_PriorityQueue*
lucy_PriQ_init(lucy_PriorityQueue* self, uint32_t max_size);

bool
LUCY_PriQ_Less_Than_IMP(lucy_PriorityQueue* self, cfish_Obj* a, cfish_Obj* b);

bool
LUCY_PriQ_Insert_IMP(lucy_PriorityQueue* self, cfish_Obj* element);

cfish_Obj*
LUCY_PriQ_Jostle_IMP(lucy_PriorityQueue* self, cfish_Obj* element);

cfish_Obj*
LUCY_PriQ_Pop_IMP(lucy_PriorityQueue* self);

cfish_Vector*
LUCY_PriQ_Pop_All_IMP(lucy_PriorityQueue* self);

cfish_Obj*
LUCY_PriQ_Peek_IMP(lucy_PriorityQueue* self);

uint32_t
LUCY_PriQ_Get_Size_IMP(lucy_PriorityQueue* self);

void
LUCY_PriQ_Destroy_IMP(lucy_PriorityQueue* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_PriQ_To_Host_t)(lucy_PriorityQueue* self, void* vcache);

typedef cfish_Obj*
(*LUCY_PriQ_Clone_t)(lucy_PriorityQueue* self);

typedef bool
(*LUCY_PriQ_Equals_t)(lucy_PriorityQueue* self, cfish_Obj* other);

typedef int32_t
(*LUCY_PriQ_Compare_To_t)(lucy_PriorityQueue* self, cfish_Obj* other);

typedef void
(*LUCY_PriQ_Destroy_t)(lucy_PriorityQueue* self);

typedef cfish_String*
(*LUCY_PriQ_To_String_t)(lucy_PriorityQueue* self);

typedef bool
(*LUCY_PriQ_Less_Than_t)(lucy_PriorityQueue* self, cfish_Obj* a, cfish_Obj* b);

typedef bool
(*LUCY_PriQ_Insert_t)(lucy_PriorityQueue* self, cfish_Obj* element);

typedef cfish_Obj*
(*LUCY_PriQ_Jostle_t)(lucy_PriorityQueue* self, cfish_Obj* element);

typedef cfish_Obj*
(*LUCY_PriQ_Pop_t)(lucy_PriorityQueue* self);

typedef cfish_Vector*
(*LUCY_PriQ_Pop_All_t)(lucy_PriorityQueue* self);

typedef cfish_Obj*
(*LUCY_PriQ_Peek_t)(lucy_PriorityQueue* self);

typedef uint32_t
(*LUCY_PriQ_Get_Size_t)(lucy_PriorityQueue* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_PriQ_get_class(lucy_PriorityQueue *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_PriQ_get_class_name(lucy_PriorityQueue *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_PriQ_is_a(lucy_PriorityQueue *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_PriQ_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_PriQ_To_Host(lucy_PriorityQueue* self, void* vcache) {
    const LUCY_PriQ_To_Host_t method = (LUCY_PriQ_To_Host_t)cfish_obj_method(self, LUCY_PriQ_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_PriQ_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PriQ_Clone(lucy_PriorityQueue* self) {
    const LUCY_PriQ_Clone_t method = (LUCY_PriQ_Clone_t)cfish_obj_method(self, LUCY_PriQ_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PriQ_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_PriQ_Equals(lucy_PriorityQueue* self, cfish_Obj* other) {
    const LUCY_PriQ_Equals_t method = (LUCY_PriQ_Equals_t)cfish_obj_method(self, LUCY_PriQ_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PriQ_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_PriQ_Compare_To(lucy_PriorityQueue* self, cfish_Obj* other) {
    const LUCY_PriQ_Compare_To_t method = (LUCY_PriQ_Compare_To_t)cfish_obj_method(self, LUCY_PriQ_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PriQ_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_PriQ_Destroy(lucy_PriorityQueue* self) {
    const LUCY_PriQ_Destroy_t method = (LUCY_PriQ_Destroy_t)cfish_obj_method(self, LUCY_PriQ_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PriQ_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_PriQ_To_String(lucy_PriorityQueue* self) {
    const LUCY_PriQ_To_String_t method = (LUCY_PriQ_To_String_t)cfish_obj_method(self, LUCY_PriQ_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PriQ_Less_Than_OFFSET;
static CFISH_INLINE bool
LUCY_PriQ_Less_Than(lucy_PriorityQueue* self, cfish_Obj* a, cfish_Obj* b) {
    const LUCY_PriQ_Less_Than_t method = (LUCY_PriQ_Less_Than_t)cfish_obj_method(self, LUCY_PriQ_Less_Than_OFFSET);
    return method(self, a, b);
}

extern LUCY_VISIBLE uint32_t LUCY_PriQ_Insert_OFFSET;
static CFISH_INLINE bool
LUCY_PriQ_Insert(lucy_PriorityQueue* self, cfish_Obj* element) {
    const LUCY_PriQ_Insert_t method = (LUCY_PriQ_Insert_t)cfish_obj_method(self, LUCY_PriQ_Insert_OFFSET);
    return method(self, element);
}

extern LUCY_VISIBLE uint32_t LUCY_PriQ_Jostle_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PriQ_Jostle(lucy_PriorityQueue* self, cfish_Obj* element) {
    const LUCY_PriQ_Jostle_t method = (LUCY_PriQ_Jostle_t)cfish_obj_method(self, LUCY_PriQ_Jostle_OFFSET);
    return method(self, element);
}

extern LUCY_VISIBLE uint32_t LUCY_PriQ_Pop_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PriQ_Pop(lucy_PriorityQueue* self) {
    const LUCY_PriQ_Pop_t method = (LUCY_PriQ_Pop_t)cfish_obj_method(self, LUCY_PriQ_Pop_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PriQ_Pop_All_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_PriQ_Pop_All(lucy_PriorityQueue* self) {
    const LUCY_PriQ_Pop_All_t method = (LUCY_PriQ_Pop_All_t)cfish_obj_method(self, LUCY_PriQ_Pop_All_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PriQ_Peek_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PriQ_Peek(lucy_PriorityQueue* self) {
    const LUCY_PriQ_Peek_t method = (LUCY_PriQ_Peek_t)cfish_obj_method(self, LUCY_PriQ_Peek_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PriQ_Get_Size_OFFSET;
static CFISH_INLINE uint32_t
LUCY_PriQ_Get_Size(lucy_PriorityQueue* self) {
    const LUCY_PriQ_Get_Size_t method = (LUCY_PriQ_Get_Size_t)cfish_obj_method(self, LUCY_PriQ_Get_Size_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_PriQ_Less_Than_OVERRIDE NULL
#define Lucy_PriQ_Insert_OVERRIDE NULL
#define Lucy_PriQ_Jostle_OVERRIDE NULL
#define Lucy_PriQ_Pop_OVERRIDE NULL
#define Lucy_PriQ_Pop_All_OVERRIDE NULL
#define Lucy_PriQ_Peek_OVERRIDE NULL
#define Lucy_PriQ_Get_Size_OVERRIDE NULL
#else
bool
Lucy_PriQ_Less_Than_OVERRIDE(lucy_PriorityQueue* self, cfish_Obj* a, cfish_Obj* b);
bool
Lucy_PriQ_Insert_OVERRIDE(lucy_PriorityQueue* self, cfish_Obj* element);
cfish_Obj*
Lucy_PriQ_Jostle_OVERRIDE(lucy_PriorityQueue* self, cfish_Obj* element);
cfish_Obj*
Lucy_PriQ_Pop_OVERRIDE(lucy_PriorityQueue* self);
cfish_Vector*
Lucy_PriQ_Pop_All_OVERRIDE(lucy_PriorityQueue* self);
cfish_Obj*
Lucy_PriQ_Peek_OVERRIDE(lucy_PriorityQueue* self);
uint32_t
Lucy_PriQ_Get_Size_OVERRIDE(lucy_PriorityQueue* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define PriorityQueue lucy_PriorityQueue
  #define PRIORITYQUEUE LUCY_PRIORITYQUEUE
  #define PriQ_init lucy_PriQ_init
  #define PriQ_get_class lucy_PriQ_get_class
  #define PriQ_get_class_name lucy_PriQ_get_class_name
  #define PriQ_is_a lucy_PriQ_is_a
  #define PriQ_Less_Than_IMP LUCY_PriQ_Less_Than_IMP
  #define PriQ_Insert_IMP LUCY_PriQ_Insert_IMP
  #define PriQ_Jostle_IMP LUCY_PriQ_Jostle_IMP
  #define PriQ_Pop_IMP LUCY_PriQ_Pop_IMP
  #define PriQ_Pop_All_IMP LUCY_PriQ_Pop_All_IMP
  #define PriQ_Peek_IMP LUCY_PriQ_Peek_IMP
  #define PriQ_Get_Size_IMP LUCY_PriQ_Get_Size_IMP
  #define PriQ_Destroy_IMP LUCY_PriQ_Destroy_IMP
  #define PriQ_To_Host LUCY_PriQ_To_Host
  #define PriQ_To_Host_t LUCY_PriQ_To_Host_t
  #define PriQ_Clone LUCY_PriQ_Clone
  #define PriQ_Clone_t LUCY_PriQ_Clone_t
  #define PriQ_Equals LUCY_PriQ_Equals
  #define PriQ_Equals_t LUCY_PriQ_Equals_t
  #define PriQ_Compare_To LUCY_PriQ_Compare_To
  #define PriQ_Compare_To_t LUCY_PriQ_Compare_To_t
  #define PriQ_Destroy LUCY_PriQ_Destroy
  #define PriQ_Destroy_t LUCY_PriQ_Destroy_t
  #define PriQ_To_String LUCY_PriQ_To_String
  #define PriQ_To_String_t LUCY_PriQ_To_String_t
  #define PriQ_Less_Than LUCY_PriQ_Less_Than
  #define PriQ_Less_Than_t LUCY_PriQ_Less_Than_t
  #define PriQ_Insert LUCY_PriQ_Insert
  #define PriQ_Insert_t LUCY_PriQ_Insert_t
  #define PriQ_Jostle LUCY_PriQ_Jostle
  #define PriQ_Jostle_t LUCY_PriQ_Jostle_t
  #define PriQ_Pop LUCY_PriQ_Pop
  #define PriQ_Pop_t LUCY_PriQ_Pop_t
  #define PriQ_Pop_All LUCY_PriQ_Pop_All
  #define PriQ_Pop_All_t LUCY_PriQ_Pop_All_t
  #define PriQ_Peek LUCY_PriQ_Peek
  #define PriQ_Peek_t LUCY_PriQ_Peek_t
  #define PriQ_Get_Size LUCY_PriQ_Get_Size
  #define PriQ_Get_Size_t LUCY_PriQ_Get_Size_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_UTIL_PRIORITYQUEUE */




