/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_UTIL_MEMORYPOOL
#define H_LUCY_UTIL_MEMORYPOOL 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_MEMORYPOOL
extern uint32_t lucy_MemPool_IVARS_OFFSET;
typedef struct lucy_MemoryPoolIVARS lucy_MemoryPoolIVARS;
static CFISH_INLINE lucy_MemoryPoolIVARS*
lucy_MemPool_IVARS(lucy_MemoryPool *self) {
   char *ptr = (char*)self + lucy_MemPool_IVARS_OFFSET;
   return (lucy_MemoryPoolIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define MemoryPoolIVARS lucy_MemoryPoolIVARS
  #define MemPool_IVARS lucy_MemPool_IVARS
#endif

struct lucy_MemoryPoolIVARS {
    uint32_t arena_size;
    cfish_Vector* arenas;
    int32_t tick;
    char* buf;
    char* last_buf;
    char* limit;
    size_t consumed;
};

#endif /* C_LUCY_MEMORYPOOL */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_MemoryPool*
lucy_MemPool_new(uint32_t arena_size);

LUCY_VISIBLE lucy_MemoryPool*
lucy_MemPool_init(lucy_MemoryPool* self, uint32_t arena_size);

void*
LUCY_MemPool_Grab_IMP(lucy_MemoryPool* self, size_t amount);

void
LUCY_MemPool_Resize_IMP(lucy_MemoryPool* self, void* ptr, size_t revised_amount);

void
LUCY_MemPool_Release_All_IMP(lucy_MemoryPool* self);

size_t
LUCY_MemPool_Get_Consumed_IMP(lucy_MemoryPool* self);

void
LUCY_MemPool_Destroy_IMP(lucy_MemoryPool* self);

char*
LUCY_MemPool_Get_Buf_IMP(lucy_MemoryPool* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_MemPool_To_Host_t)(lucy_MemoryPool* self, void* vcache);

typedef cfish_Obj*
(*LUCY_MemPool_Clone_t)(lucy_MemoryPool* self);

typedef bool
(*LUCY_MemPool_Equals_t)(lucy_MemoryPool* self, cfish_Obj* other);

typedef int32_t
(*LUCY_MemPool_Compare_To_t)(lucy_MemoryPool* self, cfish_Obj* other);

typedef void
(*LUCY_MemPool_Destroy_t)(lucy_MemoryPool* self);

typedef cfish_String*
(*LUCY_MemPool_To_String_t)(lucy_MemoryPool* self);

typedef void*
(*LUCY_MemPool_Grab_t)(lucy_MemoryPool* self, size_t amount);

typedef void
(*LUCY_MemPool_Resize_t)(lucy_MemoryPool* self, void* ptr, size_t revised_amount);

typedef void
(*LUCY_MemPool_Release_All_t)(lucy_MemoryPool* self);

typedef size_t
(*LUCY_MemPool_Get_Consumed_t)(lucy_MemoryPool* self);

typedef char*
(*LUCY_MemPool_Get_Buf_t)(lucy_MemoryPool* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_MemPool_get_class(lucy_MemoryPool *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_MemPool_get_class_name(lucy_MemoryPool *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_MemPool_is_a(lucy_MemoryPool *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_MemPool_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_MemPool_To_Host(lucy_MemoryPool* self, void* vcache) {
    const LUCY_MemPool_To_Host_t method = (LUCY_MemPool_To_Host_t)cfish_obj_method(self, LUCY_MemPool_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_MemPool_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_MemPool_Clone(lucy_MemoryPool* self) {
    const LUCY_MemPool_Clone_t method = (LUCY_MemPool_Clone_t)cfish_obj_method(self, LUCY_MemPool_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MemPool_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_MemPool_Equals(lucy_MemoryPool* self, cfish_Obj* other) {
    const LUCY_MemPool_Equals_t method = (LUCY_MemPool_Equals_t)cfish_obj_method(self, LUCY_MemPool_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_MemPool_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_MemPool_Compare_To(lucy_MemoryPool* self, cfish_Obj* other) {
    const LUCY_MemPool_Compare_To_t method = (LUCY_MemPool_Compare_To_t)cfish_obj_method(self, LUCY_MemPool_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_MemPool_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_MemPool_Destroy(lucy_MemoryPool* self) {
    const LUCY_MemPool_Destroy_t method = (LUCY_MemPool_Destroy_t)cfish_obj_method(self, LUCY_MemPool_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MemPool_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_MemPool_To_String(lucy_MemoryPool* self) {
    const LUCY_MemPool_To_String_t method = (LUCY_MemPool_To_String_t)cfish_obj_method(self, LUCY_MemPool_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MemPool_Grab_OFFSET;
static CFISH_INLINE void*
LUCY_MemPool_Grab(lucy_MemoryPool* self, size_t amount) {
    const LUCY_MemPool_Grab_t method = (LUCY_MemPool_Grab_t)cfish_obj_method(self, LUCY_MemPool_Grab_OFFSET);
    return method(self, amount);
}

extern LUCY_VISIBLE uint32_t LUCY_MemPool_Resize_OFFSET;
static CFISH_INLINE void
LUCY_MemPool_Resize(lucy_MemoryPool* self, void* ptr, size_t revised_amount) {
    const LUCY_MemPool_Resize_t method = (LUCY_MemPool_Resize_t)cfish_obj_method(self, LUCY_MemPool_Resize_OFFSET);
    method(self, ptr, revised_amount);
}

extern LUCY_VISIBLE uint32_t LUCY_MemPool_Release_All_OFFSET;
static CFISH_INLINE void
LUCY_MemPool_Release_All(lucy_MemoryPool* self) {
    const LUCY_MemPool_Release_All_t method = (LUCY_MemPool_Release_All_t)cfish_obj_method(self, LUCY_MemPool_Release_All_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MemPool_Get_Consumed_OFFSET;
static CFISH_INLINE size_t
LUCY_MemPool_Get_Consumed(lucy_MemoryPool* self) {
    const LUCY_MemPool_Get_Consumed_t method = (LUCY_MemPool_Get_Consumed_t)cfish_obj_method(self, LUCY_MemPool_Get_Consumed_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MemPool_Get_Buf_OFFSET;
static CFISH_INLINE char*
LUCY_MemPool_Get_Buf(lucy_MemoryPool* self) {
    const LUCY_MemPool_Get_Buf_t method = (LUCY_MemPool_Get_Buf_t)cfish_obj_method(self, LUCY_MemPool_Get_Buf_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_MemPool_Grab_OVERRIDE NULL
#define Lucy_MemPool_Resize_OVERRIDE NULL
#define Lucy_MemPool_Release_All_OVERRIDE NULL
#define Lucy_MemPool_Get_Consumed_OVERRIDE NULL
#define Lucy_MemPool_Get_Buf_OVERRIDE NULL
#else
void*
Lucy_MemPool_Grab_OVERRIDE(lucy_MemoryPool* self, size_t amount);
void
Lucy_MemPool_Resize_OVERRIDE(lucy_MemoryPool* self, void* ptr, size_t revised_amount);
void
Lucy_MemPool_Release_All_OVERRIDE(lucy_MemoryPool* self);
size_t
Lucy_MemPool_Get_Consumed_OVERRIDE(lucy_MemoryPool* self);
char*
Lucy_MemPool_Get_Buf_OVERRIDE(lucy_MemoryPool* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define MemoryPool lucy_MemoryPool
  #define MEMORYPOOL LUCY_MEMORYPOOL
  #define MemPool_new lucy_MemPool_new
  #define MemPool_init lucy_MemPool_init
  #define MemPool_get_class lucy_MemPool_get_class
  #define MemPool_get_class_name lucy_MemPool_get_class_name
  #define MemPool_is_a lucy_MemPool_is_a
  #define MemPool_Grab_IMP LUCY_MemPool_Grab_IMP
  #define MemPool_Resize_IMP LUCY_MemPool_Resize_IMP
  #define MemPool_Release_All_IMP LUCY_MemPool_Release_All_IMP
  #define MemPool_Get_Consumed_IMP LUCY_MemPool_Get_Consumed_IMP
  #define MemPool_Destroy_IMP LUCY_MemPool_Destroy_IMP
  #define MemPool_Get_Buf_IMP LUCY_MemPool_Get_Buf_IMP
  #define MemPool_To_Host LUCY_MemPool_To_Host
  #define MemPool_To_Host_t LUCY_MemPool_To_Host_t
  #define MemPool_Clone LUCY_MemPool_Clone
  #define MemPool_Clone_t LUCY_MemPool_Clone_t
  #define MemPool_Equals LUCY_MemPool_Equals
  #define MemPool_Equals_t LUCY_MemPool_Equals_t
  #define MemPool_Compare_To LUCY_MemPool_Compare_To
  #define MemPool_Compare_To_t LUCY_MemPool_Compare_To_t
  #define MemPool_Destroy LUCY_MemPool_Destroy
  #define MemPool_Destroy_t LUCY_MemPool_Destroy_t
  #define MemPool_To_String LUCY_MemPool_To_String
  #define MemPool_To_String_t LUCY_MemPool_To_String_t
  #define MemPool_Grab LUCY_MemPool_Grab
  #define MemPool_Grab_t LUCY_MemPool_Grab_t
  #define MemPool_Resize LUCY_MemPool_Resize
  #define MemPool_Resize_t LUCY_MemPool_Resize_t
  #define MemPool_Release_All LUCY_MemPool_Release_All
  #define MemPool_Release_All_t LUCY_MemPool_Release_All_t
  #define MemPool_Get_Consumed LUCY_MemPool_Get_Consumed
  #define MemPool_Get_Consumed_t LUCY_MemPool_Get_Consumed_t
  #define MemPool_Get_Buf LUCY_MemPool_Get_Buf
  #define MemPool_Get_Buf_t LUCY_MemPool_Get_Buf_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_UTIL_MEMORYPOOL */




