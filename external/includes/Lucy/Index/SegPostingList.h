/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_SEGPOSTINGLIST
#define H_LUCY_INDEX_SEGPOSTINGLIST 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Index/PostingList.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_SEGPOSTINGLIST
extern uint32_t lucy_SegPList_IVARS_OFFSET;
typedef struct lucy_SegPostingListIVARS lucy_SegPostingListIVARS;
static CFISH_INLINE lucy_SegPostingListIVARS*
lucy_SegPList_IVARS(lucy_SegPostingList *self) {
   char *ptr = (char*)self + lucy_SegPList_IVARS_OFFSET;
   return (lucy_SegPostingListIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define SegPostingListIVARS lucy_SegPostingListIVARS
  #define SegPList_IVARS lucy_SegPList_IVARS
#endif

struct lucy_SegPostingListIVARS {
    lucy_PostingListReader* plist_reader;
    cfish_String* field;
    lucy_Posting* posting;
    lucy_InStream* post_stream;
    lucy_InStream* skip_stream;
    lucy_SkipStepper* skip_stepper;
    int32_t skip_interval;
    uint32_t count;
    uint32_t doc_freq;
    uint32_t skip_count;
    uint32_t num_skips;
    int32_t field_num;
};

#endif /* C_LUCY_SEGPOSTINGLIST */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_SegPostingList*
lucy_SegPList_new(lucy_PostingListReader* plist_reader, cfish_String* field);

LUCY_VISIBLE lucy_SegPostingList*
lucy_SegPList_init(lucy_SegPostingList* self, lucy_PostingListReader* plist_reader, cfish_String* field);

lucy_InStream*
LUCY_SegPList_Get_Post_Stream_IMP(lucy_SegPostingList* self);

uint32_t
LUCY_SegPList_Get_Count_IMP(lucy_SegPostingList* self);

void
LUCY_SegPList_Destroy_IMP(lucy_SegPostingList* self);

uint32_t
LUCY_SegPList_Get_Doc_Freq_IMP(lucy_SegPostingList* self);

int32_t
LUCY_SegPList_Get_Doc_ID_IMP(lucy_SegPostingList* self);

lucy_Posting*
LUCY_SegPList_Get_Posting_IMP(lucy_SegPostingList* self);

int32_t
LUCY_SegPList_Next_IMP(lucy_SegPostingList* self);

int32_t
LUCY_SegPList_Advance_IMP(lucy_SegPostingList* self, int32_t target);

void
LUCY_SegPList_Seek_IMP(lucy_SegPostingList* self, cfish_Obj* target);

void
LUCY_SegPList_Seek_Lex_IMP(lucy_SegPostingList* self, lucy_Lexicon* lexicon);

lucy_Matcher*
LUCY_SegPList_Make_Matcher_IMP(lucy_SegPostingList* self, lucy_Similarity* similarity, lucy_Compiler* compiler, bool need_score);

lucy_RawPosting*
LUCY_SegPList_Read_Raw_IMP(lucy_SegPostingList* self, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_SegPList_To_Host_t)(lucy_SegPostingList* self, void* vcache);

typedef cfish_Obj*
(*LUCY_SegPList_Clone_t)(lucy_SegPostingList* self);

typedef bool
(*LUCY_SegPList_Equals_t)(lucy_SegPostingList* self, cfish_Obj* other);

typedef int32_t
(*LUCY_SegPList_Compare_To_t)(lucy_SegPostingList* self, cfish_Obj* other);

typedef void
(*LUCY_SegPList_Destroy_t)(lucy_SegPostingList* self);

typedef cfish_String*
(*LUCY_SegPList_To_String_t)(lucy_SegPostingList* self);

typedef int32_t
(*LUCY_SegPList_Next_t)(lucy_SegPostingList* self);

typedef int32_t
(*LUCY_SegPList_Advance_t)(lucy_SegPostingList* self, int32_t target);

typedef int32_t
(*LUCY_SegPList_Get_Doc_ID_t)(lucy_SegPostingList* self);

typedef float
(*LUCY_SegPList_Score_t)(lucy_SegPostingList* self);

typedef void
(*LUCY_SegPList_Collect_t)(lucy_SegPostingList* self, lucy_Collector* collector, lucy_Matcher* deletions);

typedef lucy_Posting*
(*LUCY_SegPList_Get_Posting_t)(lucy_SegPostingList* self);

typedef uint32_t
(*LUCY_SegPList_Get_Doc_Freq_t)(lucy_SegPostingList* self);

typedef void
(*LUCY_SegPList_Seek_t)(lucy_SegPostingList* self, cfish_Obj* target);

typedef void
(*LUCY_SegPList_Seek_Lex_t)(lucy_SegPostingList* self, lucy_Lexicon* lexicon);

typedef lucy_Matcher*
(*LUCY_SegPList_Make_Matcher_t)(lucy_SegPostingList* self, lucy_Similarity* similarity, lucy_Compiler* compiler, bool need_score);

typedef lucy_RawPosting*
(*LUCY_SegPList_Read_Raw_t)(lucy_SegPostingList* self, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool);

typedef lucy_InStream*
(*LUCY_SegPList_Get_Post_Stream_t)(lucy_SegPostingList* self);

typedef uint32_t
(*LUCY_SegPList_Get_Count_t)(lucy_SegPostingList* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_SegPList_get_class(lucy_SegPostingList *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_SegPList_get_class_name(lucy_SegPostingList *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_SegPList_is_a(lucy_SegPostingList *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_SegPList_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_SegPList_To_Host(lucy_SegPostingList* self, void* vcache) {
    const LUCY_SegPList_To_Host_t method = (LUCY_SegPList_To_Host_t)cfish_obj_method(self, LUCY_SegPList_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_SegPList_Clone(lucy_SegPostingList* self) {
    const LUCY_SegPList_Clone_t method = (LUCY_SegPList_Clone_t)cfish_obj_method(self, LUCY_SegPList_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_SegPList_Equals(lucy_SegPostingList* self, cfish_Obj* other) {
    const LUCY_SegPList_Equals_t method = (LUCY_SegPList_Equals_t)cfish_obj_method(self, LUCY_SegPList_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_SegPList_Compare_To(lucy_SegPostingList* self, cfish_Obj* other) {
    const LUCY_SegPList_Compare_To_t method = (LUCY_SegPList_Compare_To_t)cfish_obj_method(self, LUCY_SegPList_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_SegPList_Destroy(lucy_SegPostingList* self) {
    const LUCY_SegPList_Destroy_t method = (LUCY_SegPList_Destroy_t)cfish_obj_method(self, LUCY_SegPList_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_SegPList_To_String(lucy_SegPostingList* self) {
    const LUCY_SegPList_To_String_t method = (LUCY_SegPList_To_String_t)cfish_obj_method(self, LUCY_SegPList_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_Next_OFFSET;
static CFISH_INLINE int32_t
LUCY_SegPList_Next(lucy_SegPostingList* self) {
    const LUCY_SegPList_Next_t method = (LUCY_SegPList_Next_t)cfish_obj_method(self, LUCY_SegPList_Next_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_Advance_OFFSET;
static CFISH_INLINE int32_t
LUCY_SegPList_Advance(lucy_SegPostingList* self, int32_t target) {
    const LUCY_SegPList_Advance_t method = (LUCY_SegPList_Advance_t)cfish_obj_method(self, LUCY_SegPList_Advance_OFFSET);
    return method(self, target);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_Get_Doc_ID_OFFSET;
static CFISH_INLINE int32_t
LUCY_SegPList_Get_Doc_ID(lucy_SegPostingList* self) {
    const LUCY_SegPList_Get_Doc_ID_t method = (LUCY_SegPList_Get_Doc_ID_t)cfish_obj_method(self, LUCY_SegPList_Get_Doc_ID_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_Score_OFFSET;
static CFISH_INLINE float
LUCY_SegPList_Score(lucy_SegPostingList* self) {
    const LUCY_SegPList_Score_t method = (LUCY_SegPList_Score_t)cfish_obj_method(self, LUCY_SegPList_Score_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_Collect_OFFSET;
static CFISH_INLINE void
LUCY_SegPList_Collect(lucy_SegPostingList* self, lucy_Collector* collector, lucy_Matcher* deletions) {
    const LUCY_SegPList_Collect_t method = (LUCY_SegPList_Collect_t)cfish_obj_method(self, LUCY_SegPList_Collect_OFFSET);
    method(self, collector, deletions);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_Get_Posting_OFFSET;
static CFISH_INLINE lucy_Posting*
LUCY_SegPList_Get_Posting(lucy_SegPostingList* self) {
    const LUCY_SegPList_Get_Posting_t method = (LUCY_SegPList_Get_Posting_t)cfish_obj_method(self, LUCY_SegPList_Get_Posting_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_Get_Doc_Freq_OFFSET;
static CFISH_INLINE uint32_t
LUCY_SegPList_Get_Doc_Freq(lucy_SegPostingList* self) {
    const LUCY_SegPList_Get_Doc_Freq_t method = (LUCY_SegPList_Get_Doc_Freq_t)cfish_obj_method(self, LUCY_SegPList_Get_Doc_Freq_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_Seek_OFFSET;
static CFISH_INLINE void
LUCY_SegPList_Seek(lucy_SegPostingList* self, cfish_Obj* target) {
    const LUCY_SegPList_Seek_t method = (LUCY_SegPList_Seek_t)cfish_obj_method(self, LUCY_SegPList_Seek_OFFSET);
    method(self, target);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_Seek_Lex_OFFSET;
static CFISH_INLINE void
LUCY_SegPList_Seek_Lex(lucy_SegPostingList* self, lucy_Lexicon* lexicon) {
    const LUCY_SegPList_Seek_Lex_t method = (LUCY_SegPList_Seek_Lex_t)cfish_obj_method(self, LUCY_SegPList_Seek_Lex_OFFSET);
    method(self, lexicon);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_Make_Matcher_OFFSET;
static CFISH_INLINE lucy_Matcher*
LUCY_SegPList_Make_Matcher(lucy_SegPostingList* self, lucy_Similarity* similarity, lucy_Compiler* compiler, bool need_score) {
    const LUCY_SegPList_Make_Matcher_t method = (LUCY_SegPList_Make_Matcher_t)cfish_obj_method(self, LUCY_SegPList_Make_Matcher_OFFSET);
    return method(self, similarity, compiler, need_score);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_Read_Raw_OFFSET;
static CFISH_INLINE lucy_RawPosting*
LUCY_SegPList_Read_Raw(lucy_SegPostingList* self, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool) {
    const LUCY_SegPList_Read_Raw_t method = (LUCY_SegPList_Read_Raw_t)cfish_obj_method(self, LUCY_SegPList_Read_Raw_OFFSET);
    return method(self, last_doc_id, term_text, mem_pool);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_Get_Post_Stream_OFFSET;
static CFISH_INLINE lucy_InStream*
LUCY_SegPList_Get_Post_Stream(lucy_SegPostingList* self) {
    const LUCY_SegPList_Get_Post_Stream_t method = (LUCY_SegPList_Get_Post_Stream_t)cfish_obj_method(self, LUCY_SegPList_Get_Post_Stream_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegPList_Get_Count_OFFSET;
static CFISH_INLINE uint32_t
LUCY_SegPList_Get_Count(lucy_SegPostingList* self) {
    const LUCY_SegPList_Get_Count_t method = (LUCY_SegPList_Get_Count_t)cfish_obj_method(self, LUCY_SegPList_Get_Count_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_SegPList_Get_Post_Stream_OVERRIDE NULL
#define Lucy_SegPList_Get_Count_OVERRIDE NULL
#else
lucy_InStream*
Lucy_SegPList_Get_Post_Stream_OVERRIDE(lucy_SegPostingList* self);
uint32_t
Lucy_SegPList_Get_Count_OVERRIDE(lucy_SegPostingList* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define SegPostingList lucy_SegPostingList
  #define SEGPOSTINGLIST LUCY_SEGPOSTINGLIST
  #define SegPList_new lucy_SegPList_new
  #define SegPList_init lucy_SegPList_init
  #define SegPList_get_class lucy_SegPList_get_class
  #define SegPList_get_class_name lucy_SegPList_get_class_name
  #define SegPList_is_a lucy_SegPList_is_a
  #define SegPList_Get_Post_Stream_IMP LUCY_SegPList_Get_Post_Stream_IMP
  #define SegPList_Get_Count_IMP LUCY_SegPList_Get_Count_IMP
  #define SegPList_Destroy_IMP LUCY_SegPList_Destroy_IMP
  #define SegPList_Get_Doc_Freq_IMP LUCY_SegPList_Get_Doc_Freq_IMP
  #define SegPList_Get_Doc_ID_IMP LUCY_SegPList_Get_Doc_ID_IMP
  #define SegPList_Get_Posting_IMP LUCY_SegPList_Get_Posting_IMP
  #define SegPList_Next_IMP LUCY_SegPList_Next_IMP
  #define SegPList_Advance_IMP LUCY_SegPList_Advance_IMP
  #define SegPList_Seek_IMP LUCY_SegPList_Seek_IMP
  #define SegPList_Seek_Lex_IMP LUCY_SegPList_Seek_Lex_IMP
  #define SegPList_Make_Matcher_IMP LUCY_SegPList_Make_Matcher_IMP
  #define SegPList_Read_Raw_IMP LUCY_SegPList_Read_Raw_IMP
  #define SegPList_To_Host LUCY_SegPList_To_Host
  #define SegPList_To_Host_t LUCY_SegPList_To_Host_t
  #define SegPList_Clone LUCY_SegPList_Clone
  #define SegPList_Clone_t LUCY_SegPList_Clone_t
  #define SegPList_Equals LUCY_SegPList_Equals
  #define SegPList_Equals_t LUCY_SegPList_Equals_t
  #define SegPList_Compare_To LUCY_SegPList_Compare_To
  #define SegPList_Compare_To_t LUCY_SegPList_Compare_To_t
  #define SegPList_Destroy LUCY_SegPList_Destroy
  #define SegPList_Destroy_t LUCY_SegPList_Destroy_t
  #define SegPList_To_String LUCY_SegPList_To_String
  #define SegPList_To_String_t LUCY_SegPList_To_String_t
  #define SegPList_Next LUCY_SegPList_Next
  #define SegPList_Next_t LUCY_SegPList_Next_t
  #define SegPList_Advance LUCY_SegPList_Advance
  #define SegPList_Advance_t LUCY_SegPList_Advance_t
  #define SegPList_Get_Doc_ID LUCY_SegPList_Get_Doc_ID
  #define SegPList_Get_Doc_ID_t LUCY_SegPList_Get_Doc_ID_t
  #define SegPList_Score LUCY_SegPList_Score
  #define SegPList_Score_t LUCY_SegPList_Score_t
  #define SegPList_Collect LUCY_SegPList_Collect
  #define SegPList_Collect_t LUCY_SegPList_Collect_t
  #define SegPList_Get_Posting LUCY_SegPList_Get_Posting
  #define SegPList_Get_Posting_t LUCY_SegPList_Get_Posting_t
  #define SegPList_Get_Doc_Freq LUCY_SegPList_Get_Doc_Freq
  #define SegPList_Get_Doc_Freq_t LUCY_SegPList_Get_Doc_Freq_t
  #define SegPList_Seek LUCY_SegPList_Seek
  #define SegPList_Seek_t LUCY_SegPList_Seek_t
  #define SegPList_Seek_Lex LUCY_SegPList_Seek_Lex
  #define SegPList_Seek_Lex_t LUCY_SegPList_Seek_Lex_t
  #define SegPList_Make_Matcher LUCY_SegPList_Make_Matcher
  #define SegPList_Make_Matcher_t LUCY_SegPList_Make_Matcher_t
  #define SegPList_Read_Raw LUCY_SegPList_Read_Raw
  #define SegPList_Read_Raw_t LUCY_SegPList_Read_Raw_t
  #define SegPList_Get_Post_Stream LUCY_SegPList_Get_Post_Stream
  #define SegPList_Get_Post_Stream_t LUCY_SegPList_Get_Post_Stream_t
  #define SegPList_Get_Count LUCY_SegPList_Get_Count
  #define SegPList_Get_Count_t LUCY_SegPList_Get_Count_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_SEGPOSTINGLIST */




