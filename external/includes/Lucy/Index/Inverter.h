/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_INVERTER
#define H_LUCY_INDEX_INVERTER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_INVERTER
extern uint32_t lucy_Inverter_IVARS_OFFSET;
typedef struct lucy_InverterIVARS lucy_InverterIVARS;
static CFISH_INLINE lucy_InverterIVARS*
lucy_Inverter_IVARS(lucy_Inverter *self) {
   char *ptr = (char*)self + lucy_Inverter_IVARS_OFFSET;
   return (lucy_InverterIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define InverterIVARS lucy_InverterIVARS
  #define Inverter_IVARS lucy_Inverter_IVARS
#endif

struct lucy_InverterIVARS {
    lucy_Schema* schema;
    lucy_Segment* segment;
    lucy_Doc* doc;
    cfish_Vector* entries;
    cfish_Vector* entry_pool;
    lucy_InverterEntry* current;
    lucy_InverterEntry* blank;
    float boost;
    int32_t tick;
    bool sorted;
};

#endif /* C_LUCY_INVERTER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_Inverter*
lucy_Inverter_new(lucy_Schema* schema, lucy_Segment* segment);

LUCY_VISIBLE lucy_Inverter*
lucy_Inverter_init(lucy_Inverter* self, lucy_Schema* schema, lucy_Segment* segment);

void
LUCY_Inverter_Invert_Doc_IMP(lucy_Inverter* self, lucy_Doc* doc);

void
LUCY_Inverter_Set_Doc_IMP(lucy_Inverter* self, lucy_Doc* doc);

void
LUCY_Inverter_Set_Boost_IMP(lucy_Inverter* self, float boost);

void
LUCY_Inverter_Add_Field_IMP(lucy_Inverter* self, lucy_InverterEntry* entry);

void
LUCY_Inverter_Clear_IMP(lucy_Inverter* self);

uint32_t
LUCY_Inverter_Iterate_IMP(lucy_Inverter* self);

int32_t
LUCY_Inverter_Next_IMP(lucy_Inverter* self);

lucy_Doc*
LUCY_Inverter_Get_Doc_IMP(lucy_Inverter* self);

float
LUCY_Inverter_Get_Boost_IMP(lucy_Inverter* self);

cfish_String*
LUCY_Inverter_Get_Field_Name_IMP(lucy_Inverter* self);

cfish_Obj*
LUCY_Inverter_Get_Value_IMP(lucy_Inverter* self);

lucy_FieldType*
LUCY_Inverter_Get_Type_IMP(lucy_Inverter* self);

lucy_Analyzer*
LUCY_Inverter_Get_Analyzer_IMP(lucy_Inverter* self);

lucy_Similarity*
LUCY_Inverter_Get_Similarity_IMP(lucy_Inverter* self);

lucy_Inversion*
LUCY_Inverter_Get_Inversion_IMP(lucy_Inverter* self);

void
LUCY_Inverter_Destroy_IMP(lucy_Inverter* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_Inverter_To_Host_t)(lucy_Inverter* self, void* vcache);

typedef cfish_Obj*
(*LUCY_Inverter_Clone_t)(lucy_Inverter* self);

typedef bool
(*LUCY_Inverter_Equals_t)(lucy_Inverter* self, cfish_Obj* other);

typedef int32_t
(*LUCY_Inverter_Compare_To_t)(lucy_Inverter* self, cfish_Obj* other);

typedef void
(*LUCY_Inverter_Destroy_t)(lucy_Inverter* self);

typedef cfish_String*
(*LUCY_Inverter_To_String_t)(lucy_Inverter* self);

typedef void
(*LUCY_Inverter_Invert_Doc_t)(lucy_Inverter* self, lucy_Doc* doc);

typedef void
(*LUCY_Inverter_Set_Doc_t)(lucy_Inverter* self, lucy_Doc* doc);

typedef void
(*LUCY_Inverter_Set_Boost_t)(lucy_Inverter* self, float boost);

typedef void
(*LUCY_Inverter_Add_Field_t)(lucy_Inverter* self, lucy_InverterEntry* entry);

typedef void
(*LUCY_Inverter_Clear_t)(lucy_Inverter* self);

typedef uint32_t
(*LUCY_Inverter_Iterate_t)(lucy_Inverter* self);

typedef int32_t
(*LUCY_Inverter_Next_t)(lucy_Inverter* self);

typedef lucy_Doc*
(*LUCY_Inverter_Get_Doc_t)(lucy_Inverter* self);

typedef float
(*LUCY_Inverter_Get_Boost_t)(lucy_Inverter* self);

typedef cfish_String*
(*LUCY_Inverter_Get_Field_Name_t)(lucy_Inverter* self);

typedef cfish_Obj*
(*LUCY_Inverter_Get_Value_t)(lucy_Inverter* self);

typedef lucy_FieldType*
(*LUCY_Inverter_Get_Type_t)(lucy_Inverter* self);

typedef lucy_Analyzer*
(*LUCY_Inverter_Get_Analyzer_t)(lucy_Inverter* self);

typedef lucy_Similarity*
(*LUCY_Inverter_Get_Similarity_t)(lucy_Inverter* self);

typedef lucy_Inversion*
(*LUCY_Inverter_Get_Inversion_t)(lucy_Inverter* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_Inverter_get_class(lucy_Inverter *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_Inverter_get_class_name(lucy_Inverter *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_Inverter_is_a(lucy_Inverter *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_Inverter_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_Inverter_To_Host(lucy_Inverter* self, void* vcache) {
    const LUCY_Inverter_To_Host_t method = (LUCY_Inverter_To_Host_t)cfish_obj_method(self, LUCY_Inverter_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_Inverter_Clone(lucy_Inverter* self) {
    const LUCY_Inverter_Clone_t method = (LUCY_Inverter_Clone_t)cfish_obj_method(self, LUCY_Inverter_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_Inverter_Equals(lucy_Inverter* self, cfish_Obj* other) {
    const LUCY_Inverter_Equals_t method = (LUCY_Inverter_Equals_t)cfish_obj_method(self, LUCY_Inverter_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_Inverter_Compare_To(lucy_Inverter* self, cfish_Obj* other) {
    const LUCY_Inverter_Compare_To_t method = (LUCY_Inverter_Compare_To_t)cfish_obj_method(self, LUCY_Inverter_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_Inverter_Destroy(lucy_Inverter* self) {
    const LUCY_Inverter_Destroy_t method = (LUCY_Inverter_Destroy_t)cfish_obj_method(self, LUCY_Inverter_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Inverter_To_String(lucy_Inverter* self) {
    const LUCY_Inverter_To_String_t method = (LUCY_Inverter_To_String_t)cfish_obj_method(self, LUCY_Inverter_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Invert_Doc_OFFSET;
static CFISH_INLINE void
LUCY_Inverter_Invert_Doc(lucy_Inverter* self, lucy_Doc* doc) {
    const LUCY_Inverter_Invert_Doc_t method = (LUCY_Inverter_Invert_Doc_t)cfish_obj_method(self, LUCY_Inverter_Invert_Doc_OFFSET);
    method(self, doc);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Set_Doc_OFFSET;
static CFISH_INLINE void
LUCY_Inverter_Set_Doc(lucy_Inverter* self, lucy_Doc* doc) {
    const LUCY_Inverter_Set_Doc_t method = (LUCY_Inverter_Set_Doc_t)cfish_obj_method(self, LUCY_Inverter_Set_Doc_OFFSET);
    method(self, doc);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_Inverter_Set_Boost(lucy_Inverter* self, float boost) {
    const LUCY_Inverter_Set_Boost_t method = (LUCY_Inverter_Set_Boost_t)cfish_obj_method(self, LUCY_Inverter_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Add_Field_OFFSET;
static CFISH_INLINE void
LUCY_Inverter_Add_Field(lucy_Inverter* self, lucy_InverterEntry* entry) {
    const LUCY_Inverter_Add_Field_t method = (LUCY_Inverter_Add_Field_t)cfish_obj_method(self, LUCY_Inverter_Add_Field_OFFSET);
    method(self, entry);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Clear_OFFSET;
static CFISH_INLINE void
LUCY_Inverter_Clear(lucy_Inverter* self) {
    const LUCY_Inverter_Clear_t method = (LUCY_Inverter_Clear_t)cfish_obj_method(self, LUCY_Inverter_Clear_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Iterate_OFFSET;
static CFISH_INLINE uint32_t
LUCY_Inverter_Iterate(lucy_Inverter* self) {
    const LUCY_Inverter_Iterate_t method = (LUCY_Inverter_Iterate_t)cfish_obj_method(self, LUCY_Inverter_Iterate_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Next_OFFSET;
static CFISH_INLINE int32_t
LUCY_Inverter_Next(lucy_Inverter* self) {
    const LUCY_Inverter_Next_t method = (LUCY_Inverter_Next_t)cfish_obj_method(self, LUCY_Inverter_Next_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Get_Doc_OFFSET;
static CFISH_INLINE lucy_Doc*
LUCY_Inverter_Get_Doc(lucy_Inverter* self) {
    const LUCY_Inverter_Get_Doc_t method = (LUCY_Inverter_Get_Doc_t)cfish_obj_method(self, LUCY_Inverter_Get_Doc_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_Inverter_Get_Boost(lucy_Inverter* self) {
    const LUCY_Inverter_Get_Boost_t method = (LUCY_Inverter_Get_Boost_t)cfish_obj_method(self, LUCY_Inverter_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Get_Field_Name_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Inverter_Get_Field_Name(lucy_Inverter* self) {
    const LUCY_Inverter_Get_Field_Name_t method = (LUCY_Inverter_Get_Field_Name_t)cfish_obj_method(self, LUCY_Inverter_Get_Field_Name_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Get_Value_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_Inverter_Get_Value(lucy_Inverter* self) {
    const LUCY_Inverter_Get_Value_t method = (LUCY_Inverter_Get_Value_t)cfish_obj_method(self, LUCY_Inverter_Get_Value_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Get_Type_OFFSET;
static CFISH_INLINE lucy_FieldType*
LUCY_Inverter_Get_Type(lucy_Inverter* self) {
    const LUCY_Inverter_Get_Type_t method = (LUCY_Inverter_Get_Type_t)cfish_obj_method(self, LUCY_Inverter_Get_Type_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Get_Analyzer_OFFSET;
static CFISH_INLINE lucy_Analyzer*
LUCY_Inverter_Get_Analyzer(lucy_Inverter* self) {
    const LUCY_Inverter_Get_Analyzer_t method = (LUCY_Inverter_Get_Analyzer_t)cfish_obj_method(self, LUCY_Inverter_Get_Analyzer_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Get_Similarity_OFFSET;
static CFISH_INLINE lucy_Similarity*
LUCY_Inverter_Get_Similarity(lucy_Inverter* self) {
    const LUCY_Inverter_Get_Similarity_t method = (LUCY_Inverter_Get_Similarity_t)cfish_obj_method(self, LUCY_Inverter_Get_Similarity_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inverter_Get_Inversion_OFFSET;
static CFISH_INLINE lucy_Inversion*
LUCY_Inverter_Get_Inversion(lucy_Inverter* self) {
    const LUCY_Inverter_Get_Inversion_t method = (LUCY_Inverter_Get_Inversion_t)cfish_obj_method(self, LUCY_Inverter_Get_Inversion_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_Inverter_Invert_Doc_OVERRIDE NULL
#define Lucy_Inverter_Set_Doc_OVERRIDE NULL
#define Lucy_Inverter_Set_Boost_OVERRIDE NULL
#define Lucy_Inverter_Add_Field_OVERRIDE NULL
#define Lucy_Inverter_Clear_OVERRIDE NULL
#define Lucy_Inverter_Iterate_OVERRIDE NULL
#define Lucy_Inverter_Next_OVERRIDE NULL
#define Lucy_Inverter_Get_Doc_OVERRIDE NULL
#define Lucy_Inverter_Get_Boost_OVERRIDE NULL
#define Lucy_Inverter_Get_Field_Name_OVERRIDE NULL
#define Lucy_Inverter_Get_Value_OVERRIDE NULL
#define Lucy_Inverter_Get_Type_OVERRIDE NULL
#define Lucy_Inverter_Get_Analyzer_OVERRIDE NULL
#define Lucy_Inverter_Get_Similarity_OVERRIDE NULL
#define Lucy_Inverter_Get_Inversion_OVERRIDE NULL
#else
void
Lucy_Inverter_Invert_Doc_OVERRIDE(lucy_Inverter* self, lucy_Doc* doc);
void
Lucy_Inverter_Set_Doc_OVERRIDE(lucy_Inverter* self, lucy_Doc* doc);
void
Lucy_Inverter_Set_Boost_OVERRIDE(lucy_Inverter* self, float boost);
void
Lucy_Inverter_Add_Field_OVERRIDE(lucy_Inverter* self, lucy_InverterEntry* entry);
void
Lucy_Inverter_Clear_OVERRIDE(lucy_Inverter* self);
uint32_t
Lucy_Inverter_Iterate_OVERRIDE(lucy_Inverter* self);
int32_t
Lucy_Inverter_Next_OVERRIDE(lucy_Inverter* self);
lucy_Doc*
Lucy_Inverter_Get_Doc_OVERRIDE(lucy_Inverter* self);
float
Lucy_Inverter_Get_Boost_OVERRIDE(lucy_Inverter* self);
cfish_String*
Lucy_Inverter_Get_Field_Name_OVERRIDE(lucy_Inverter* self);
cfish_Obj*
Lucy_Inverter_Get_Value_OVERRIDE(lucy_Inverter* self);
lucy_FieldType*
Lucy_Inverter_Get_Type_OVERRIDE(lucy_Inverter* self);
lucy_Analyzer*
Lucy_Inverter_Get_Analyzer_OVERRIDE(lucy_Inverter* self);
lucy_Similarity*
Lucy_Inverter_Get_Similarity_OVERRIDE(lucy_Inverter* self);
lucy_Inversion*
Lucy_Inverter_Get_Inversion_OVERRIDE(lucy_Inverter* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define Inverter lucy_Inverter
  #define INVERTER LUCY_INVERTER
  #define Inverter_new lucy_Inverter_new
  #define Inverter_init lucy_Inverter_init
  #define Inverter_get_class lucy_Inverter_get_class
  #define Inverter_get_class_name lucy_Inverter_get_class_name
  #define Inverter_is_a lucy_Inverter_is_a
  #define Inverter_Invert_Doc_IMP LUCY_Inverter_Invert_Doc_IMP
  #define Inverter_Set_Doc_IMP LUCY_Inverter_Set_Doc_IMP
  #define Inverter_Set_Boost_IMP LUCY_Inverter_Set_Boost_IMP
  #define Inverter_Add_Field_IMP LUCY_Inverter_Add_Field_IMP
  #define Inverter_Clear_IMP LUCY_Inverter_Clear_IMP
  #define Inverter_Iterate_IMP LUCY_Inverter_Iterate_IMP
  #define Inverter_Next_IMP LUCY_Inverter_Next_IMP
  #define Inverter_Get_Doc_IMP LUCY_Inverter_Get_Doc_IMP
  #define Inverter_Get_Boost_IMP LUCY_Inverter_Get_Boost_IMP
  #define Inverter_Get_Field_Name_IMP LUCY_Inverter_Get_Field_Name_IMP
  #define Inverter_Get_Value_IMP LUCY_Inverter_Get_Value_IMP
  #define Inverter_Get_Type_IMP LUCY_Inverter_Get_Type_IMP
  #define Inverter_Get_Analyzer_IMP LUCY_Inverter_Get_Analyzer_IMP
  #define Inverter_Get_Similarity_IMP LUCY_Inverter_Get_Similarity_IMP
  #define Inverter_Get_Inversion_IMP LUCY_Inverter_Get_Inversion_IMP
  #define Inverter_Destroy_IMP LUCY_Inverter_Destroy_IMP
  #define Inverter_To_Host LUCY_Inverter_To_Host
  #define Inverter_To_Host_t LUCY_Inverter_To_Host_t
  #define Inverter_Clone LUCY_Inverter_Clone
  #define Inverter_Clone_t LUCY_Inverter_Clone_t
  #define Inverter_Equals LUCY_Inverter_Equals
  #define Inverter_Equals_t LUCY_Inverter_Equals_t
  #define Inverter_Compare_To LUCY_Inverter_Compare_To
  #define Inverter_Compare_To_t LUCY_Inverter_Compare_To_t
  #define Inverter_Destroy LUCY_Inverter_Destroy
  #define Inverter_Destroy_t LUCY_Inverter_Destroy_t
  #define Inverter_To_String LUCY_Inverter_To_String
  #define Inverter_To_String_t LUCY_Inverter_To_String_t
  #define Inverter_Invert_Doc LUCY_Inverter_Invert_Doc
  #define Inverter_Invert_Doc_t LUCY_Inverter_Invert_Doc_t
  #define Inverter_Set_Doc LUCY_Inverter_Set_Doc
  #define Inverter_Set_Doc_t LUCY_Inverter_Set_Doc_t
  #define Inverter_Set_Boost LUCY_Inverter_Set_Boost
  #define Inverter_Set_Boost_t LUCY_Inverter_Set_Boost_t
  #define Inverter_Add_Field LUCY_Inverter_Add_Field
  #define Inverter_Add_Field_t LUCY_Inverter_Add_Field_t
  #define Inverter_Clear LUCY_Inverter_Clear
  #define Inverter_Clear_t LUCY_Inverter_Clear_t
  #define Inverter_Iterate LUCY_Inverter_Iterate
  #define Inverter_Iterate_t LUCY_Inverter_Iterate_t
  #define Inverter_Next LUCY_Inverter_Next
  #define Inverter_Next_t LUCY_Inverter_Next_t
  #define Inverter_Get_Doc LUCY_Inverter_Get_Doc
  #define Inverter_Get_Doc_t LUCY_Inverter_Get_Doc_t
  #define Inverter_Get_Boost LUCY_Inverter_Get_Boost
  #define Inverter_Get_Boost_t LUCY_Inverter_Get_Boost_t
  #define Inverter_Get_Field_Name LUCY_Inverter_Get_Field_Name
  #define Inverter_Get_Field_Name_t LUCY_Inverter_Get_Field_Name_t
  #define Inverter_Get_Value LUCY_Inverter_Get_Value
  #define Inverter_Get_Value_t LUCY_Inverter_Get_Value_t
  #define Inverter_Get_Type LUCY_Inverter_Get_Type
  #define Inverter_Get_Type_t LUCY_Inverter_Get_Type_t
  #define Inverter_Get_Analyzer LUCY_Inverter_Get_Analyzer
  #define Inverter_Get_Analyzer_t LUCY_Inverter_Get_Analyzer_t
  #define Inverter_Get_Similarity LUCY_Inverter_Get_Similarity
  #define Inverter_Get_Similarity_t LUCY_Inverter_Get_Similarity_t
  #define Inverter_Get_Inversion LUCY_Inverter_Get_Inversion
  #define Inverter_Get_Inversion_t LUCY_Inverter_Get_Inversion_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_INVERTERENTRY
extern uint32_t lucy_InvEntry_IVARS_OFFSET;
typedef struct lucy_InverterEntryIVARS lucy_InverterEntryIVARS;
static CFISH_INLINE lucy_InverterEntryIVARS*
lucy_InvEntry_IVARS(lucy_InverterEntry *self) {
   char *ptr = (char*)self + lucy_InvEntry_IVARS_OFFSET;
   return (lucy_InverterEntryIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define InverterEntryIVARS lucy_InverterEntryIVARS
  #define InvEntry_IVARS lucy_InvEntry_IVARS
#endif

struct lucy_InverterEntryIVARS {
    int32_t field_num;
    cfish_String* field;
    cfish_Obj* value;
    lucy_Inversion* inversion;
    lucy_FieldType* type;
    lucy_Analyzer* analyzer;
    lucy_Similarity* sim;
    bool indexed;
    bool highlightable;
};

#endif /* C_LUCY_INVERTERENTRY */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_InverterEntry*
lucy_InvEntry_new(lucy_Schema* schema, cfish_String* field_name, int32_t field_num);

LUCY_VISIBLE lucy_InverterEntry*
lucy_InvEntry_init(lucy_InverterEntry* self, lucy_Schema* schema, cfish_String* field_name, int32_t field_num);

int32_t
LUCY_InvEntry_Compare_To_IMP(lucy_InverterEntry* self, cfish_Obj* other);

void
LUCY_InvEntry_Clear_IMP(lucy_InverterEntry* self);

void
LUCY_InvEntry_Destroy_IMP(lucy_InverterEntry* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_InvEntry_To_Host_t)(lucy_InverterEntry* self, void* vcache);

typedef cfish_Obj*
(*LUCY_InvEntry_Clone_t)(lucy_InverterEntry* self);

typedef bool
(*LUCY_InvEntry_Equals_t)(lucy_InverterEntry* self, cfish_Obj* other);

typedef int32_t
(*LUCY_InvEntry_Compare_To_t)(lucy_InverterEntry* self, cfish_Obj* other);

typedef void
(*LUCY_InvEntry_Destroy_t)(lucy_InverterEntry* self);

typedef cfish_String*
(*LUCY_InvEntry_To_String_t)(lucy_InverterEntry* self);

typedef void
(*LUCY_InvEntry_Clear_t)(lucy_InverterEntry* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_InvEntry_get_class(lucy_InverterEntry *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_InvEntry_get_class_name(lucy_InverterEntry *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_InvEntry_is_a(lucy_InverterEntry *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_InvEntry_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_InvEntry_To_Host(lucy_InverterEntry* self, void* vcache) {
    const LUCY_InvEntry_To_Host_t method = (LUCY_InvEntry_To_Host_t)cfish_obj_method(self, LUCY_InvEntry_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_InvEntry_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_InvEntry_Clone(lucy_InverterEntry* self) {
    const LUCY_InvEntry_Clone_t method = (LUCY_InvEntry_Clone_t)cfish_obj_method(self, LUCY_InvEntry_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_InvEntry_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_InvEntry_Equals(lucy_InverterEntry* self, cfish_Obj* other) {
    const LUCY_InvEntry_Equals_t method = (LUCY_InvEntry_Equals_t)cfish_obj_method(self, LUCY_InvEntry_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_InvEntry_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_InvEntry_Compare_To(lucy_InverterEntry* self, cfish_Obj* other) {
#ifdef CFP_LUCY
    return LUCY_InvEntry_Compare_To_IMP(self, other);
#else
    const LUCY_InvEntry_Compare_To_t method = (LUCY_InvEntry_Compare_To_t)cfish_obj_method(self, LUCY_InvEntry_Compare_To_OFFSET);
    return method(self, other);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_InvEntry_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_InvEntry_Destroy(lucy_InverterEntry* self) {
#ifdef CFP_LUCY
    LUCY_InvEntry_Destroy_IMP(self);
#else
    const LUCY_InvEntry_Destroy_t method = (LUCY_InvEntry_Destroy_t)cfish_obj_method(self, LUCY_InvEntry_Destroy_OFFSET);
    method(self);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_InvEntry_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_InvEntry_To_String(lucy_InverterEntry* self) {
    const LUCY_InvEntry_To_String_t method = (LUCY_InvEntry_To_String_t)cfish_obj_method(self, LUCY_InvEntry_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_InvEntry_Clear_OFFSET;
static CFISH_INLINE void
LUCY_InvEntry_Clear(lucy_InverterEntry* self) {
#ifdef CFP_LUCY
    LUCY_InvEntry_Clear_IMP(self);
#else
    const LUCY_InvEntry_Clear_t method = (LUCY_InvEntry_Clear_t)cfish_obj_method(self, LUCY_InvEntry_Clear_OFFSET);
    method(self);
#endif
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define InverterEntry lucy_InverterEntry
  #define INVERTERENTRY LUCY_INVERTERENTRY
  #define InvEntry_new lucy_InvEntry_new
  #define InvEntry_init lucy_InvEntry_init
  #define InvEntry_get_class lucy_InvEntry_get_class
  #define InvEntry_get_class_name lucy_InvEntry_get_class_name
  #define InvEntry_is_a lucy_InvEntry_is_a
  #define InvEntry_Compare_To_IMP LUCY_InvEntry_Compare_To_IMP
  #define InvEntry_Clear_IMP LUCY_InvEntry_Clear_IMP
  #define InvEntry_Destroy_IMP LUCY_InvEntry_Destroy_IMP
  #define InvEntry_To_Host LUCY_InvEntry_To_Host
  #define InvEntry_To_Host_t LUCY_InvEntry_To_Host_t
  #define InvEntry_Clone LUCY_InvEntry_Clone
  #define InvEntry_Clone_t LUCY_InvEntry_Clone_t
  #define InvEntry_Equals LUCY_InvEntry_Equals
  #define InvEntry_Equals_t LUCY_InvEntry_Equals_t
  #define InvEntry_Compare_To LUCY_InvEntry_Compare_To
  #define InvEntry_Compare_To_t LUCY_InvEntry_Compare_To_t
  #define InvEntry_Destroy LUCY_InvEntry_Destroy
  #define InvEntry_Destroy_t LUCY_InvEntry_Destroy_t
  #define InvEntry_To_String LUCY_InvEntry_To_String
  #define InvEntry_To_String_t LUCY_InvEntry_To_String_t
  #define InvEntry_Clear LUCY_InvEntry_Clear
  #define InvEntry_Clear_t LUCY_InvEntry_Clear_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_INVERTER */




