/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_RAWLEXICON
#define H_LUCY_INDEX_RAWLEXICON 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Index/Lexicon.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_RAWLEXICON
extern uint32_t lucy_RawLex_IVARS_OFFSET;
typedef struct lucy_RawLexiconIVARS lucy_RawLexiconIVARS;
static CFISH_INLINE lucy_RawLexiconIVARS*
lucy_RawLex_IVARS(lucy_RawLexicon *self) {
   char *ptr = (char*)self + lucy_RawLex_IVARS_OFFSET;
   return (lucy_RawLexiconIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define RawLexiconIVARS lucy_RawLexiconIVARS
  #define RawLex_IVARS lucy_RawLex_IVARS
#endif

struct lucy_RawLexiconIVARS {
    cfish_String* field;
    lucy_InStream* instream;
    lucy_TermStepper* term_stepper;
    lucy_TermStepper* tinfo_stepper;
    int64_t start;
    int64_t end;
    int64_t len;
};

#endif /* C_LUCY_RAWLEXICON */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_RawLexicon*
lucy_RawLex_new(lucy_Schema* schema, cfish_String* field, lucy_InStream* instream, int64_t start, int64_t end);

LUCY_VISIBLE lucy_RawLexicon*
lucy_RawLex_init(lucy_RawLexicon* self, lucy_Schema* schema, cfish_String* field, lucy_InStream* instream, int64_t start, int64_t end);

void
LUCY_RawLex_Destroy_IMP(lucy_RawLexicon* self);

bool
LUCY_RawLex_Next_IMP(lucy_RawLexicon* self);

cfish_Obj*
LUCY_RawLex_Get_Term_IMP(lucy_RawLexicon* self);

int32_t
LUCY_RawLex_Doc_Freq_IMP(lucy_RawLexicon* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_RawLex_To_Host_t)(lucy_RawLexicon* self, void* vcache);

typedef cfish_Obj*
(*LUCY_RawLex_Clone_t)(lucy_RawLexicon* self);

typedef bool
(*LUCY_RawLex_Equals_t)(lucy_RawLexicon* self, cfish_Obj* other);

typedef int32_t
(*LUCY_RawLex_Compare_To_t)(lucy_RawLexicon* self, cfish_Obj* other);

typedef void
(*LUCY_RawLex_Destroy_t)(lucy_RawLexicon* self);

typedef cfish_String*
(*LUCY_RawLex_To_String_t)(lucy_RawLexicon* self);

typedef void
(*LUCY_RawLex_Seek_t)(lucy_RawLexicon* self, cfish_Obj* target);

typedef bool
(*LUCY_RawLex_Next_t)(lucy_RawLexicon* self);

typedef void
(*LUCY_RawLex_Reset_t)(lucy_RawLexicon* self);

typedef int32_t
(*LUCY_RawLex_Doc_Freq_t)(lucy_RawLexicon* self);

typedef cfish_Obj*
(*LUCY_RawLex_Get_Term_t)(lucy_RawLexicon* self);

typedef cfish_String*
(*LUCY_RawLex_Get_Field_t)(lucy_RawLexicon* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_RawLex_get_class(lucy_RawLexicon *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_RawLex_get_class_name(lucy_RawLexicon *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_RawLex_is_a(lucy_RawLexicon *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_RawLex_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_RawLex_To_Host(lucy_RawLexicon* self, void* vcache) {
    const LUCY_RawLex_To_Host_t method = (LUCY_RawLex_To_Host_t)cfish_obj_method(self, LUCY_RawLex_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_RawLex_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_RawLex_Clone(lucy_RawLexicon* self) {
    const LUCY_RawLex_Clone_t method = (LUCY_RawLex_Clone_t)cfish_obj_method(self, LUCY_RawLex_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawLex_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_RawLex_Equals(lucy_RawLexicon* self, cfish_Obj* other) {
    const LUCY_RawLex_Equals_t method = (LUCY_RawLex_Equals_t)cfish_obj_method(self, LUCY_RawLex_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_RawLex_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_RawLex_Compare_To(lucy_RawLexicon* self, cfish_Obj* other) {
    const LUCY_RawLex_Compare_To_t method = (LUCY_RawLex_Compare_To_t)cfish_obj_method(self, LUCY_RawLex_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_RawLex_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_RawLex_Destroy(lucy_RawLexicon* self) {
    const LUCY_RawLex_Destroy_t method = (LUCY_RawLex_Destroy_t)cfish_obj_method(self, LUCY_RawLex_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawLex_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_RawLex_To_String(lucy_RawLexicon* self) {
    const LUCY_RawLex_To_String_t method = (LUCY_RawLex_To_String_t)cfish_obj_method(self, LUCY_RawLex_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawLex_Seek_OFFSET;
static CFISH_INLINE void
LUCY_RawLex_Seek(lucy_RawLexicon* self, cfish_Obj* target) {
    const LUCY_RawLex_Seek_t method = (LUCY_RawLex_Seek_t)cfish_obj_method(self, LUCY_RawLex_Seek_OFFSET);
    method(self, target);
}

extern LUCY_VISIBLE uint32_t LUCY_RawLex_Next_OFFSET;
static CFISH_INLINE bool
LUCY_RawLex_Next(lucy_RawLexicon* self) {
    const LUCY_RawLex_Next_t method = (LUCY_RawLex_Next_t)cfish_obj_method(self, LUCY_RawLex_Next_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawLex_Reset_OFFSET;
static CFISH_INLINE void
LUCY_RawLex_Reset(lucy_RawLexicon* self) {
    const LUCY_RawLex_Reset_t method = (LUCY_RawLex_Reset_t)cfish_obj_method(self, LUCY_RawLex_Reset_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawLex_Doc_Freq_OFFSET;
static CFISH_INLINE int32_t
LUCY_RawLex_Doc_Freq(lucy_RawLexicon* self) {
    const LUCY_RawLex_Doc_Freq_t method = (LUCY_RawLex_Doc_Freq_t)cfish_obj_method(self, LUCY_RawLex_Doc_Freq_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawLex_Get_Term_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_RawLex_Get_Term(lucy_RawLexicon* self) {
    const LUCY_RawLex_Get_Term_t method = (LUCY_RawLex_Get_Term_t)cfish_obj_method(self, LUCY_RawLex_Get_Term_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawLex_Get_Field_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_RawLex_Get_Field(lucy_RawLexicon* self) {
    const LUCY_RawLex_Get_Field_t method = (LUCY_RawLex_Get_Field_t)cfish_obj_method(self, LUCY_RawLex_Get_Field_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define RawLexicon lucy_RawLexicon
  #define RAWLEXICON LUCY_RAWLEXICON
  #define RawLex_new lucy_RawLex_new
  #define RawLex_init lucy_RawLex_init
  #define RawLex_get_class lucy_RawLex_get_class
  #define RawLex_get_class_name lucy_RawLex_get_class_name
  #define RawLex_is_a lucy_RawLex_is_a
  #define RawLex_Destroy_IMP LUCY_RawLex_Destroy_IMP
  #define RawLex_Next_IMP LUCY_RawLex_Next_IMP
  #define RawLex_Get_Term_IMP LUCY_RawLex_Get_Term_IMP
  #define RawLex_Doc_Freq_IMP LUCY_RawLex_Doc_Freq_IMP
  #define RawLex_To_Host LUCY_RawLex_To_Host
  #define RawLex_To_Host_t LUCY_RawLex_To_Host_t
  #define RawLex_Clone LUCY_RawLex_Clone
  #define RawLex_Clone_t LUCY_RawLex_Clone_t
  #define RawLex_Equals LUCY_RawLex_Equals
  #define RawLex_Equals_t LUCY_RawLex_Equals_t
  #define RawLex_Compare_To LUCY_RawLex_Compare_To
  #define RawLex_Compare_To_t LUCY_RawLex_Compare_To_t
  #define RawLex_Destroy LUCY_RawLex_Destroy
  #define RawLex_Destroy_t LUCY_RawLex_Destroy_t
  #define RawLex_To_String LUCY_RawLex_To_String
  #define RawLex_To_String_t LUCY_RawLex_To_String_t
  #define RawLex_Seek LUCY_RawLex_Seek
  #define RawLex_Seek_t LUCY_RawLex_Seek_t
  #define RawLex_Next LUCY_RawLex_Next
  #define RawLex_Next_t LUCY_RawLex_Next_t
  #define RawLex_Reset LUCY_RawLex_Reset
  #define RawLex_Reset_t LUCY_RawLex_Reset_t
  #define RawLex_Doc_Freq LUCY_RawLex_Doc_Freq
  #define RawLex_Doc_Freq_t LUCY_RawLex_Doc_Freq_t
  #define RawLex_Get_Term LUCY_RawLex_Get_Term
  #define RawLex_Get_Term_t LUCY_RawLex_Get_Term_t
  #define RawLex_Get_Field LUCY_RawLex_Get_Field
  #define RawLex_Get_Field_t LUCY_RawLex_Get_Field_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_RAWLEXICON */




