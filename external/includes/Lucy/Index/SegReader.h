/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_SEGREADER
#define H_LUCY_INDEX_SEGREADER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Index/IndexReader.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_SEGREADER
extern uint32_t lucy_SegReader_IVARS_OFFSET;
typedef struct lucy_SegReaderIVARS lucy_SegReaderIVARS;
static CFISH_INLINE lucy_SegReaderIVARS*
lucy_SegReader_IVARS(lucy_SegReader *self) {
   char *ptr = (char*)self + lucy_SegReader_IVARS_OFFSET;
   return (lucy_SegReaderIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define SegReaderIVARS lucy_SegReaderIVARS
  #define SegReader_IVARS lucy_SegReader_IVARS
#endif

struct lucy_SegReaderIVARS {
    lucy_Schema* schema;
    lucy_Folder* folder;
    lucy_Snapshot* snapshot;
    cfish_Vector* segments;
    lucy_Segment* segment;
    int32_t seg_tick;
    cfish_Hash* components;
    lucy_IndexManager* manager;
    lucy_Lock* read_lock;
    lucy_Lock* deletion_lock;
    int32_t doc_max;
    int32_t del_count;
    int64_t seg_num;
    cfish_String* seg_name;
};

#endif /* C_LUCY_SEGREADER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_SegReader*
lucy_SegReader_new(lucy_Schema* schema, lucy_Folder* folder, lucy_Snapshot* snapshot, cfish_Vector* segments, int32_t seg_tick);

LUCY_VISIBLE lucy_SegReader*
lucy_SegReader_init(lucy_SegReader* self, lucy_Schema* schema, lucy_Folder* folder, lucy_Snapshot* snapshot, cfish_Vector* segments, int32_t seg_tick);

void
LUCY_SegReader_Destroy_IMP(lucy_SegReader* self);

void
LUCY_SegReader_Register_IMP(lucy_SegReader* self, cfish_String* api, lucy_DataReader* component);

cfish_String*
LUCY_SegReader_Get_Seg_Name_IMP(lucy_SegReader* self);

int64_t
LUCY_SegReader_Get_Seg_Num_IMP(lucy_SegReader* self);

int32_t
LUCY_SegReader_Del_Count_IMP(lucy_SegReader* self);

int32_t
LUCY_SegReader_Doc_Max_IMP(lucy_SegReader* self);

int32_t
LUCY_SegReader_Doc_Count_IMP(lucy_SegReader* self);

lucy_I32Array*
LUCY_SegReader_Offsets_IMP(lucy_SegReader* self);

cfish_Vector*
LUCY_SegReader_Seg_Readers_IMP(lucy_SegReader* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_SegReader_To_Host_t)(lucy_SegReader* self, void* vcache);

typedef cfish_Obj*
(*LUCY_SegReader_Clone_t)(lucy_SegReader* self);

typedef bool
(*LUCY_SegReader_Equals_t)(lucy_SegReader* self, cfish_Obj* other);

typedef int32_t
(*LUCY_SegReader_Compare_To_t)(lucy_SegReader* self, cfish_Obj* other);

typedef void
(*LUCY_SegReader_Destroy_t)(lucy_SegReader* self);

typedef cfish_String*
(*LUCY_SegReader_To_String_t)(lucy_SegReader* self);

typedef lucy_DataReader*
(*LUCY_SegReader_Aggregator_t)(lucy_SegReader* self, cfish_Vector* readers, lucy_I32Array* offsets);

typedef lucy_Schema*
(*LUCY_SegReader_Get_Schema_t)(lucy_SegReader* self);

typedef lucy_Folder*
(*LUCY_SegReader_Get_Folder_t)(lucy_SegReader* self);

typedef lucy_Snapshot*
(*LUCY_SegReader_Get_Snapshot_t)(lucy_SegReader* self);

typedef cfish_Vector*
(*LUCY_SegReader_Get_Segments_t)(lucy_SegReader* self);

typedef lucy_Segment*
(*LUCY_SegReader_Get_Segment_t)(lucy_SegReader* self);

typedef int32_t
(*LUCY_SegReader_Get_Seg_Tick_t)(lucy_SegReader* self);

typedef void
(*LUCY_SegReader_Close_t)(lucy_SegReader* self);

typedef int32_t
(*LUCY_SegReader_Doc_Max_t)(lucy_SegReader* self);

typedef int32_t
(*LUCY_SegReader_Doc_Count_t)(lucy_SegReader* self);

typedef int32_t
(*LUCY_SegReader_Del_Count_t)(lucy_SegReader* self);

typedef lucy_I32Array*
(*LUCY_SegReader_Offsets_t)(lucy_SegReader* self);

typedef cfish_Vector*
(*LUCY_SegReader_Seg_Readers_t)(lucy_SegReader* self);

typedef lucy_DataReader*
(*LUCY_SegReader_Obtain_t)(lucy_SegReader* self, cfish_String* api);

typedef lucy_DataReader*
(*LUCY_SegReader_Fetch_t)(lucy_SegReader* self, cfish_String* api);

typedef cfish_Hash*
(*LUCY_SegReader_Get_Components_t)(lucy_SegReader* self);

typedef void
(*LUCY_SegReader_Register_t)(lucy_SegReader* self, cfish_String* api, lucy_DataReader* component);

typedef cfish_String*
(*LUCY_SegReader_Get_Seg_Name_t)(lucy_SegReader* self);

typedef int64_t
(*LUCY_SegReader_Get_Seg_Num_t)(lucy_SegReader* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_SegReader_get_class(lucy_SegReader *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_SegReader_get_class_name(lucy_SegReader *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_SegReader_is_a(lucy_SegReader *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_SegReader_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_SegReader_To_Host(lucy_SegReader* self, void* vcache) {
    const LUCY_SegReader_To_Host_t method = (LUCY_SegReader_To_Host_t)cfish_obj_method(self, LUCY_SegReader_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_SegReader_Clone(lucy_SegReader* self) {
    const LUCY_SegReader_Clone_t method = (LUCY_SegReader_Clone_t)cfish_obj_method(self, LUCY_SegReader_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_SegReader_Equals(lucy_SegReader* self, cfish_Obj* other) {
    const LUCY_SegReader_Equals_t method = (LUCY_SegReader_Equals_t)cfish_obj_method(self, LUCY_SegReader_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_SegReader_Compare_To(lucy_SegReader* self, cfish_Obj* other) {
    const LUCY_SegReader_Compare_To_t method = (LUCY_SegReader_Compare_To_t)cfish_obj_method(self, LUCY_SegReader_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_SegReader_Destroy(lucy_SegReader* self) {
    const LUCY_SegReader_Destroy_t method = (LUCY_SegReader_Destroy_t)cfish_obj_method(self, LUCY_SegReader_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_SegReader_To_String(lucy_SegReader* self) {
    const LUCY_SegReader_To_String_t method = (LUCY_SegReader_To_String_t)cfish_obj_method(self, LUCY_SegReader_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Aggregator_OFFSET;
static CFISH_INLINE lucy_DataReader*
LUCY_SegReader_Aggregator(lucy_SegReader* self, cfish_Vector* readers, lucy_I32Array* offsets) {
    const LUCY_SegReader_Aggregator_t method = (LUCY_SegReader_Aggregator_t)cfish_obj_method(self, LUCY_SegReader_Aggregator_OFFSET);
    return method(self, readers, offsets);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Get_Schema_OFFSET;
static CFISH_INLINE lucy_Schema*
LUCY_SegReader_Get_Schema(lucy_SegReader* self) {
    const LUCY_SegReader_Get_Schema_t method = (LUCY_SegReader_Get_Schema_t)cfish_obj_method(self, LUCY_SegReader_Get_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Get_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_SegReader_Get_Folder(lucy_SegReader* self) {
    const LUCY_SegReader_Get_Folder_t method = (LUCY_SegReader_Get_Folder_t)cfish_obj_method(self, LUCY_SegReader_Get_Folder_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Get_Snapshot_OFFSET;
static CFISH_INLINE lucy_Snapshot*
LUCY_SegReader_Get_Snapshot(lucy_SegReader* self) {
    const LUCY_SegReader_Get_Snapshot_t method = (LUCY_SegReader_Get_Snapshot_t)cfish_obj_method(self, LUCY_SegReader_Get_Snapshot_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Get_Segments_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_SegReader_Get_Segments(lucy_SegReader* self) {
    const LUCY_SegReader_Get_Segments_t method = (LUCY_SegReader_Get_Segments_t)cfish_obj_method(self, LUCY_SegReader_Get_Segments_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Get_Segment_OFFSET;
static CFISH_INLINE lucy_Segment*
LUCY_SegReader_Get_Segment(lucy_SegReader* self) {
    const LUCY_SegReader_Get_Segment_t method = (LUCY_SegReader_Get_Segment_t)cfish_obj_method(self, LUCY_SegReader_Get_Segment_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Get_Seg_Tick_OFFSET;
static CFISH_INLINE int32_t
LUCY_SegReader_Get_Seg_Tick(lucy_SegReader* self) {
    const LUCY_SegReader_Get_Seg_Tick_t method = (LUCY_SegReader_Get_Seg_Tick_t)cfish_obj_method(self, LUCY_SegReader_Get_Seg_Tick_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Close_OFFSET;
static CFISH_INLINE void
LUCY_SegReader_Close(lucy_SegReader* self) {
    const LUCY_SegReader_Close_t method = (LUCY_SegReader_Close_t)cfish_obj_method(self, LUCY_SegReader_Close_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Doc_Max_OFFSET;
static CFISH_INLINE int32_t
LUCY_SegReader_Doc_Max(lucy_SegReader* self) {
    const LUCY_SegReader_Doc_Max_t method = (LUCY_SegReader_Doc_Max_t)cfish_obj_method(self, LUCY_SegReader_Doc_Max_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Doc_Count_OFFSET;
static CFISH_INLINE int32_t
LUCY_SegReader_Doc_Count(lucy_SegReader* self) {
    const LUCY_SegReader_Doc_Count_t method = (LUCY_SegReader_Doc_Count_t)cfish_obj_method(self, LUCY_SegReader_Doc_Count_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Del_Count_OFFSET;
static CFISH_INLINE int32_t
LUCY_SegReader_Del_Count(lucy_SegReader* self) {
    const LUCY_SegReader_Del_Count_t method = (LUCY_SegReader_Del_Count_t)cfish_obj_method(self, LUCY_SegReader_Del_Count_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Offsets_OFFSET;
static CFISH_INLINE lucy_I32Array*
LUCY_SegReader_Offsets(lucy_SegReader* self) {
    const LUCY_SegReader_Offsets_t method = (LUCY_SegReader_Offsets_t)cfish_obj_method(self, LUCY_SegReader_Offsets_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Seg_Readers_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_SegReader_Seg_Readers(lucy_SegReader* self) {
    const LUCY_SegReader_Seg_Readers_t method = (LUCY_SegReader_Seg_Readers_t)cfish_obj_method(self, LUCY_SegReader_Seg_Readers_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Obtain_OFFSET;
static CFISH_INLINE lucy_DataReader*
LUCY_SegReader_Obtain(lucy_SegReader* self, cfish_String* api) {
    const LUCY_SegReader_Obtain_t method = (LUCY_SegReader_Obtain_t)cfish_obj_method(self, LUCY_SegReader_Obtain_OFFSET);
    return method(self, api);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Fetch_OFFSET;
static CFISH_INLINE lucy_DataReader*
LUCY_SegReader_Fetch(lucy_SegReader* self, cfish_String* api) {
    const LUCY_SegReader_Fetch_t method = (LUCY_SegReader_Fetch_t)cfish_obj_method(self, LUCY_SegReader_Fetch_OFFSET);
    return method(self, api);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Get_Components_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_SegReader_Get_Components(lucy_SegReader* self) {
    const LUCY_SegReader_Get_Components_t method = (LUCY_SegReader_Get_Components_t)cfish_obj_method(self, LUCY_SegReader_Get_Components_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Register_OFFSET;
static CFISH_INLINE void
LUCY_SegReader_Register(lucy_SegReader* self, cfish_String* api, lucy_DataReader* component) {
    const LUCY_SegReader_Register_t method = (LUCY_SegReader_Register_t)cfish_obj_method(self, LUCY_SegReader_Register_OFFSET);
    method(self, api, component);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Get_Seg_Name_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_SegReader_Get_Seg_Name(lucy_SegReader* self) {
    const LUCY_SegReader_Get_Seg_Name_t method = (LUCY_SegReader_Get_Seg_Name_t)cfish_obj_method(self, LUCY_SegReader_Get_Seg_Name_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegReader_Get_Seg_Num_OFFSET;
static CFISH_INLINE int64_t
LUCY_SegReader_Get_Seg_Num(lucy_SegReader* self) {
    const LUCY_SegReader_Get_Seg_Num_t method = (LUCY_SegReader_Get_Seg_Num_t)cfish_obj_method(self, LUCY_SegReader_Get_Seg_Num_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_SegReader_Register_OVERRIDE NULL
#define Lucy_SegReader_Get_Seg_Name_OVERRIDE NULL
#define Lucy_SegReader_Get_Seg_Num_OVERRIDE NULL
#else
void
Lucy_SegReader_Register_OVERRIDE(lucy_SegReader* self, cfish_String* api, lucy_DataReader* component);
cfish_String*
Lucy_SegReader_Get_Seg_Name_OVERRIDE(lucy_SegReader* self);
int64_t
Lucy_SegReader_Get_Seg_Num_OVERRIDE(lucy_SegReader* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define SegReader lucy_SegReader
  #define SEGREADER LUCY_SEGREADER
  #define SegReader_new lucy_SegReader_new
  #define SegReader_init lucy_SegReader_init
  #define SegReader_get_class lucy_SegReader_get_class
  #define SegReader_get_class_name lucy_SegReader_get_class_name
  #define SegReader_is_a lucy_SegReader_is_a
  #define SegReader_Destroy_IMP LUCY_SegReader_Destroy_IMP
  #define SegReader_Register_IMP LUCY_SegReader_Register_IMP
  #define SegReader_Get_Seg_Name_IMP LUCY_SegReader_Get_Seg_Name_IMP
  #define SegReader_Get_Seg_Num_IMP LUCY_SegReader_Get_Seg_Num_IMP
  #define SegReader_Del_Count_IMP LUCY_SegReader_Del_Count_IMP
  #define SegReader_Doc_Max_IMP LUCY_SegReader_Doc_Max_IMP
  #define SegReader_Doc_Count_IMP LUCY_SegReader_Doc_Count_IMP
  #define SegReader_Offsets_IMP LUCY_SegReader_Offsets_IMP
  #define SegReader_Seg_Readers_IMP LUCY_SegReader_Seg_Readers_IMP
  #define SegReader_To_Host LUCY_SegReader_To_Host
  #define SegReader_To_Host_t LUCY_SegReader_To_Host_t
  #define SegReader_Clone LUCY_SegReader_Clone
  #define SegReader_Clone_t LUCY_SegReader_Clone_t
  #define SegReader_Equals LUCY_SegReader_Equals
  #define SegReader_Equals_t LUCY_SegReader_Equals_t
  #define SegReader_Compare_To LUCY_SegReader_Compare_To
  #define SegReader_Compare_To_t LUCY_SegReader_Compare_To_t
  #define SegReader_Destroy LUCY_SegReader_Destroy
  #define SegReader_Destroy_t LUCY_SegReader_Destroy_t
  #define SegReader_To_String LUCY_SegReader_To_String
  #define SegReader_To_String_t LUCY_SegReader_To_String_t
  #define SegReader_Aggregator LUCY_SegReader_Aggregator
  #define SegReader_Aggregator_t LUCY_SegReader_Aggregator_t
  #define SegReader_Get_Schema LUCY_SegReader_Get_Schema
  #define SegReader_Get_Schema_t LUCY_SegReader_Get_Schema_t
  #define SegReader_Get_Folder LUCY_SegReader_Get_Folder
  #define SegReader_Get_Folder_t LUCY_SegReader_Get_Folder_t
  #define SegReader_Get_Snapshot LUCY_SegReader_Get_Snapshot
  #define SegReader_Get_Snapshot_t LUCY_SegReader_Get_Snapshot_t
  #define SegReader_Get_Segments LUCY_SegReader_Get_Segments
  #define SegReader_Get_Segments_t LUCY_SegReader_Get_Segments_t
  #define SegReader_Get_Segment LUCY_SegReader_Get_Segment
  #define SegReader_Get_Segment_t LUCY_SegReader_Get_Segment_t
  #define SegReader_Get_Seg_Tick LUCY_SegReader_Get_Seg_Tick
  #define SegReader_Get_Seg_Tick_t LUCY_SegReader_Get_Seg_Tick_t
  #define SegReader_Close LUCY_SegReader_Close
  #define SegReader_Close_t LUCY_SegReader_Close_t
  #define SegReader_Doc_Max LUCY_SegReader_Doc_Max
  #define SegReader_Doc_Max_t LUCY_SegReader_Doc_Max_t
  #define SegReader_Doc_Count LUCY_SegReader_Doc_Count
  #define SegReader_Doc_Count_t LUCY_SegReader_Doc_Count_t
  #define SegReader_Del_Count LUCY_SegReader_Del_Count
  #define SegReader_Del_Count_t LUCY_SegReader_Del_Count_t
  #define SegReader_Offsets LUCY_SegReader_Offsets
  #define SegReader_Offsets_t LUCY_SegReader_Offsets_t
  #define SegReader_Seg_Readers LUCY_SegReader_Seg_Readers
  #define SegReader_Seg_Readers_t LUCY_SegReader_Seg_Readers_t
  #define SegReader_Obtain LUCY_SegReader_Obtain
  #define SegReader_Obtain_t LUCY_SegReader_Obtain_t
  #define SegReader_Fetch LUCY_SegReader_Fetch
  #define SegReader_Fetch_t LUCY_SegReader_Fetch_t
  #define SegReader_Get_Components LUCY_SegReader_Get_Components
  #define SegReader_Get_Components_t LUCY_SegReader_Get_Components_t
  #define SegReader_Register LUCY_SegReader_Register
  #define SegReader_Register_t LUCY_SegReader_Register_t
  #define SegReader_Get_Seg_Name LUCY_SegReader_Get_Seg_Name
  #define SegReader_Get_Seg_Name_t LUCY_SegReader_Get_Seg_Name_t
  #define SegReader_Get_Seg_Num LUCY_SegReader_Get_Seg_Num
  #define SegReader_Get_Seg_Num_t LUCY_SegReader_Get_Seg_Num_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_SEGREADER */




