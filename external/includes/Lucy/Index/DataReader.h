/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_DATAREADER
#define H_LUCY_INDEX_DATAREADER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_DATAREADER
extern uint32_t lucy_DataReader_IVARS_OFFSET;
typedef struct lucy_DataReaderIVARS lucy_DataReaderIVARS;
static CFISH_INLINE lucy_DataReaderIVARS*
lucy_DataReader_IVARS(lucy_DataReader *self) {
   char *ptr = (char*)self + lucy_DataReader_IVARS_OFFSET;
   return (lucy_DataReaderIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define DataReaderIVARS lucy_DataReaderIVARS
  #define DataReader_IVARS lucy_DataReader_IVARS
#endif

struct lucy_DataReaderIVARS {
    lucy_Schema* schema;
    lucy_Folder* folder;
    lucy_Snapshot* snapshot;
    cfish_Vector* segments;
    lucy_Segment* segment;
    int32_t seg_tick;
};

#endif /* C_LUCY_DATAREADER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_DataReader*
lucy_DataReader_init(lucy_DataReader* self, lucy_Schema* schema, lucy_Folder* folder, lucy_Snapshot* snapshot, cfish_Vector* segments, int32_t seg_tick);

lucy_DataReader*
LUCY_DataReader_Aggregator_IMP(lucy_DataReader* self, cfish_Vector* readers, lucy_I32Array* offsets);

lucy_Schema*
LUCY_DataReader_Get_Schema_IMP(lucy_DataReader* self);

lucy_Folder*
LUCY_DataReader_Get_Folder_IMP(lucy_DataReader* self);

lucy_Snapshot*
LUCY_DataReader_Get_Snapshot_IMP(lucy_DataReader* self);

cfish_Vector*
LUCY_DataReader_Get_Segments_IMP(lucy_DataReader* self);

lucy_Segment*
LUCY_DataReader_Get_Segment_IMP(lucy_DataReader* self);

int32_t
LUCY_DataReader_Get_Seg_Tick_IMP(lucy_DataReader* self);

void
LUCY_DataReader_Close_IMP(lucy_DataReader* self);

void
LUCY_DataReader_Destroy_IMP(lucy_DataReader* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_DataReader_To_Host_t)(lucy_DataReader* self, void* vcache);

typedef cfish_Obj*
(*LUCY_DataReader_Clone_t)(lucy_DataReader* self);

typedef bool
(*LUCY_DataReader_Equals_t)(lucy_DataReader* self, cfish_Obj* other);

typedef int32_t
(*LUCY_DataReader_Compare_To_t)(lucy_DataReader* self, cfish_Obj* other);

typedef void
(*LUCY_DataReader_Destroy_t)(lucy_DataReader* self);

typedef cfish_String*
(*LUCY_DataReader_To_String_t)(lucy_DataReader* self);

typedef lucy_DataReader*
(*LUCY_DataReader_Aggregator_t)(lucy_DataReader* self, cfish_Vector* readers, lucy_I32Array* offsets);

typedef lucy_Schema*
(*LUCY_DataReader_Get_Schema_t)(lucy_DataReader* self);

typedef lucy_Folder*
(*LUCY_DataReader_Get_Folder_t)(lucy_DataReader* self);

typedef lucy_Snapshot*
(*LUCY_DataReader_Get_Snapshot_t)(lucy_DataReader* self);

typedef cfish_Vector*
(*LUCY_DataReader_Get_Segments_t)(lucy_DataReader* self);

typedef lucy_Segment*
(*LUCY_DataReader_Get_Segment_t)(lucy_DataReader* self);

typedef int32_t
(*LUCY_DataReader_Get_Seg_Tick_t)(lucy_DataReader* self);

typedef void
(*LUCY_DataReader_Close_t)(lucy_DataReader* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_DataReader_get_class(lucy_DataReader *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_DataReader_get_class_name(lucy_DataReader *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_DataReader_is_a(lucy_DataReader *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_DataReader_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_DataReader_To_Host(lucy_DataReader* self, void* vcache) {
    const LUCY_DataReader_To_Host_t method = (LUCY_DataReader_To_Host_t)cfish_obj_method(self, LUCY_DataReader_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_DataReader_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_DataReader_Clone(lucy_DataReader* self) {
    const LUCY_DataReader_Clone_t method = (LUCY_DataReader_Clone_t)cfish_obj_method(self, LUCY_DataReader_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataReader_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_DataReader_Equals(lucy_DataReader* self, cfish_Obj* other) {
    const LUCY_DataReader_Equals_t method = (LUCY_DataReader_Equals_t)cfish_obj_method(self, LUCY_DataReader_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_DataReader_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_DataReader_Compare_To(lucy_DataReader* self, cfish_Obj* other) {
    const LUCY_DataReader_Compare_To_t method = (LUCY_DataReader_Compare_To_t)cfish_obj_method(self, LUCY_DataReader_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_DataReader_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_DataReader_Destroy(lucy_DataReader* self) {
    const LUCY_DataReader_Destroy_t method = (LUCY_DataReader_Destroy_t)cfish_obj_method(self, LUCY_DataReader_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataReader_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_DataReader_To_String(lucy_DataReader* self) {
    const LUCY_DataReader_To_String_t method = (LUCY_DataReader_To_String_t)cfish_obj_method(self, LUCY_DataReader_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataReader_Aggregator_OFFSET;
static CFISH_INLINE lucy_DataReader*
LUCY_DataReader_Aggregator(lucy_DataReader* self, cfish_Vector* readers, lucy_I32Array* offsets) {
    const LUCY_DataReader_Aggregator_t method = (LUCY_DataReader_Aggregator_t)cfish_obj_method(self, LUCY_DataReader_Aggregator_OFFSET);
    return method(self, readers, offsets);
}

extern LUCY_VISIBLE uint32_t LUCY_DataReader_Get_Schema_OFFSET;
static CFISH_INLINE lucy_Schema*
LUCY_DataReader_Get_Schema(lucy_DataReader* self) {
    const LUCY_DataReader_Get_Schema_t method = (LUCY_DataReader_Get_Schema_t)cfish_obj_method(self, LUCY_DataReader_Get_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataReader_Get_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_DataReader_Get_Folder(lucy_DataReader* self) {
    const LUCY_DataReader_Get_Folder_t method = (LUCY_DataReader_Get_Folder_t)cfish_obj_method(self, LUCY_DataReader_Get_Folder_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataReader_Get_Snapshot_OFFSET;
static CFISH_INLINE lucy_Snapshot*
LUCY_DataReader_Get_Snapshot(lucy_DataReader* self) {
    const LUCY_DataReader_Get_Snapshot_t method = (LUCY_DataReader_Get_Snapshot_t)cfish_obj_method(self, LUCY_DataReader_Get_Snapshot_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataReader_Get_Segments_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_DataReader_Get_Segments(lucy_DataReader* self) {
    const LUCY_DataReader_Get_Segments_t method = (LUCY_DataReader_Get_Segments_t)cfish_obj_method(self, LUCY_DataReader_Get_Segments_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataReader_Get_Segment_OFFSET;
static CFISH_INLINE lucy_Segment*
LUCY_DataReader_Get_Segment(lucy_DataReader* self) {
    const LUCY_DataReader_Get_Segment_t method = (LUCY_DataReader_Get_Segment_t)cfish_obj_method(self, LUCY_DataReader_Get_Segment_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataReader_Get_Seg_Tick_OFFSET;
static CFISH_INLINE int32_t
LUCY_DataReader_Get_Seg_Tick(lucy_DataReader* self) {
    const LUCY_DataReader_Get_Seg_Tick_t method = (LUCY_DataReader_Get_Seg_Tick_t)cfish_obj_method(self, LUCY_DataReader_Get_Seg_Tick_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataReader_Close_OFFSET;
static CFISH_INLINE void
LUCY_DataReader_Close(lucy_DataReader* self) {
    const LUCY_DataReader_Close_t method = (LUCY_DataReader_Close_t)cfish_obj_method(self, LUCY_DataReader_Close_OFFSET);
    method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_DataReader_Aggregator_OVERRIDE NULL
#define Lucy_DataReader_Get_Schema_OVERRIDE NULL
#define Lucy_DataReader_Get_Folder_OVERRIDE NULL
#define Lucy_DataReader_Get_Snapshot_OVERRIDE NULL
#define Lucy_DataReader_Get_Segments_OVERRIDE NULL
#define Lucy_DataReader_Get_Segment_OVERRIDE NULL
#define Lucy_DataReader_Get_Seg_Tick_OVERRIDE NULL
#define Lucy_DataReader_Close_OVERRIDE NULL
#else
lucy_DataReader*
Lucy_DataReader_Aggregator_OVERRIDE(lucy_DataReader* self, cfish_Vector* readers, lucy_I32Array* offsets);
lucy_Schema*
Lucy_DataReader_Get_Schema_OVERRIDE(lucy_DataReader* self);
lucy_Folder*
Lucy_DataReader_Get_Folder_OVERRIDE(lucy_DataReader* self);
lucy_Snapshot*
Lucy_DataReader_Get_Snapshot_OVERRIDE(lucy_DataReader* self);
cfish_Vector*
Lucy_DataReader_Get_Segments_OVERRIDE(lucy_DataReader* self);
lucy_Segment*
Lucy_DataReader_Get_Segment_OVERRIDE(lucy_DataReader* self);
int32_t
Lucy_DataReader_Get_Seg_Tick_OVERRIDE(lucy_DataReader* self);
void
Lucy_DataReader_Close_OVERRIDE(lucy_DataReader* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define DataReader lucy_DataReader
  #define DATAREADER LUCY_DATAREADER
  #define DataReader_init lucy_DataReader_init
  #define DataReader_get_class lucy_DataReader_get_class
  #define DataReader_get_class_name lucy_DataReader_get_class_name
  #define DataReader_is_a lucy_DataReader_is_a
  #define DataReader_Aggregator_IMP LUCY_DataReader_Aggregator_IMP
  #define DataReader_Get_Schema_IMP LUCY_DataReader_Get_Schema_IMP
  #define DataReader_Get_Folder_IMP LUCY_DataReader_Get_Folder_IMP
  #define DataReader_Get_Snapshot_IMP LUCY_DataReader_Get_Snapshot_IMP
  #define DataReader_Get_Segments_IMP LUCY_DataReader_Get_Segments_IMP
  #define DataReader_Get_Segment_IMP LUCY_DataReader_Get_Segment_IMP
  #define DataReader_Get_Seg_Tick_IMP LUCY_DataReader_Get_Seg_Tick_IMP
  #define DataReader_Close_IMP LUCY_DataReader_Close_IMP
  #define DataReader_Destroy_IMP LUCY_DataReader_Destroy_IMP
  #define DataReader_To_Host LUCY_DataReader_To_Host
  #define DataReader_To_Host_t LUCY_DataReader_To_Host_t
  #define DataReader_Clone LUCY_DataReader_Clone
  #define DataReader_Clone_t LUCY_DataReader_Clone_t
  #define DataReader_Equals LUCY_DataReader_Equals
  #define DataReader_Equals_t LUCY_DataReader_Equals_t
  #define DataReader_Compare_To LUCY_DataReader_Compare_To
  #define DataReader_Compare_To_t LUCY_DataReader_Compare_To_t
  #define DataReader_Destroy LUCY_DataReader_Destroy
  #define DataReader_Destroy_t LUCY_DataReader_Destroy_t
  #define DataReader_To_String LUCY_DataReader_To_String
  #define DataReader_To_String_t LUCY_DataReader_To_String_t
  #define DataReader_Aggregator LUCY_DataReader_Aggregator
  #define DataReader_Aggregator_t LUCY_DataReader_Aggregator_t
  #define DataReader_Get_Schema LUCY_DataReader_Get_Schema
  #define DataReader_Get_Schema_t LUCY_DataReader_Get_Schema_t
  #define DataReader_Get_Folder LUCY_DataReader_Get_Folder
  #define DataReader_Get_Folder_t LUCY_DataReader_Get_Folder_t
  #define DataReader_Get_Snapshot LUCY_DataReader_Get_Snapshot
  #define DataReader_Get_Snapshot_t LUCY_DataReader_Get_Snapshot_t
  #define DataReader_Get_Segments LUCY_DataReader_Get_Segments
  #define DataReader_Get_Segments_t LUCY_DataReader_Get_Segments_t
  #define DataReader_Get_Segment LUCY_DataReader_Get_Segment
  #define DataReader_Get_Segment_t LUCY_DataReader_Get_Segment_t
  #define DataReader_Get_Seg_Tick LUCY_DataReader_Get_Seg_Tick
  #define DataReader_Get_Seg_Tick_t LUCY_DataReader_Get_Seg_Tick_t
  #define DataReader_Close LUCY_DataReader_Close
  #define DataReader_Close_t LUCY_DataReader_Close_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_DATAREADER */




