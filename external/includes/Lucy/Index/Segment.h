/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_SEGMENT
#define H_LUCY_INDEX_SEGMENT 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_SEGMENT
extern uint32_t lucy_Seg_IVARS_OFFSET;
typedef struct lucy_SegmentIVARS lucy_SegmentIVARS;
static CFISH_INLINE lucy_SegmentIVARS*
lucy_Seg_IVARS(lucy_Segment *self) {
   char *ptr = (char*)self + lucy_Seg_IVARS_OFFSET;
   return (lucy_SegmentIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define SegmentIVARS lucy_SegmentIVARS
  #define Seg_IVARS lucy_Seg_IVARS
#endif

struct lucy_SegmentIVARS {
    cfish_String* name;
    int64_t count;
    int64_t number;
    cfish_Hash* by_name;
    cfish_Vector* by_num;
    cfish_Hash* metadata;
};

#endif /* C_LUCY_SEGMENT */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_Segment*
lucy_Seg_new(int64_t number);

LUCY_VISIBLE lucy_Segment*
lucy_Seg_init(lucy_Segment* self, int64_t number);

LUCY_VISIBLE cfish_String*
lucy_Seg_num_to_name(int64_t number);

LUCY_VISIBLE bool
lucy_Seg_valid_seg_name(cfish_String* name);

int32_t
LUCY_Seg_Add_Field_IMP(lucy_Segment* self, cfish_String* field);

void
LUCY_Seg_Store_Metadata_IMP(lucy_Segment* self, cfish_String* key, cfish_Obj* metadata);

void
LUCY_Seg_Store_Metadata_Utf8_IMP(lucy_Segment* self, const char* key, size_t len, cfish_Obj* value);

cfish_Obj*
LUCY_Seg_Fetch_Metadata_IMP(lucy_Segment* self, cfish_String* key);

cfish_Obj*
LUCY_Seg_Fetch_Metadata_Utf8_IMP(lucy_Segment* self, const char* key, size_t len);

int32_t
LUCY_Seg_Field_Num_IMP(lucy_Segment* self, cfish_String* field);

cfish_String*
LUCY_Seg_Field_Name_IMP(lucy_Segment* self, int32_t field_num);

cfish_String*
LUCY_Seg_Get_Name_IMP(lucy_Segment* self);

int64_t
LUCY_Seg_Get_Number_IMP(lucy_Segment* self);

void
LUCY_Seg_Set_Count_IMP(lucy_Segment* self, int64_t count);

int64_t
LUCY_Seg_Get_Count_IMP(lucy_Segment* self);

int64_t
LUCY_Seg_Increment_Count_IMP(lucy_Segment* self, int64_t increment);

cfish_Hash*
LUCY_Seg_Get_Metadata_IMP(lucy_Segment* self);

void
LUCY_Seg_Write_File_IMP(lucy_Segment* self, lucy_Folder* folder);

bool
LUCY_Seg_Read_File_IMP(lucy_Segment* self, lucy_Folder* folder);

int32_t
LUCY_Seg_Compare_To_IMP(lucy_Segment* self, cfish_Obj* other);

void
LUCY_Seg_Destroy_IMP(lucy_Segment* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_Seg_To_Host_t)(lucy_Segment* self, void* vcache);

typedef cfish_Obj*
(*LUCY_Seg_Clone_t)(lucy_Segment* self);

typedef bool
(*LUCY_Seg_Equals_t)(lucy_Segment* self, cfish_Obj* other);

typedef int32_t
(*LUCY_Seg_Compare_To_t)(lucy_Segment* self, cfish_Obj* other);

typedef void
(*LUCY_Seg_Destroy_t)(lucy_Segment* self);

typedef cfish_String*
(*LUCY_Seg_To_String_t)(lucy_Segment* self);

typedef int32_t
(*LUCY_Seg_Add_Field_t)(lucy_Segment* self, cfish_String* field);

typedef void
(*LUCY_Seg_Store_Metadata_t)(lucy_Segment* self, cfish_String* key, cfish_Obj* metadata);

typedef void
(*LUCY_Seg_Store_Metadata_Utf8_t)(lucy_Segment* self, const char* key, size_t len, cfish_Obj* value);

typedef cfish_Obj*
(*LUCY_Seg_Fetch_Metadata_t)(lucy_Segment* self, cfish_String* key);

typedef cfish_Obj*
(*LUCY_Seg_Fetch_Metadata_Utf8_t)(lucy_Segment* self, const char* key, size_t len);

typedef int32_t
(*LUCY_Seg_Field_Num_t)(lucy_Segment* self, cfish_String* field);

typedef cfish_String*
(*LUCY_Seg_Field_Name_t)(lucy_Segment* self, int32_t field_num);

typedef cfish_String*
(*LUCY_Seg_Get_Name_t)(lucy_Segment* self);

typedef int64_t
(*LUCY_Seg_Get_Number_t)(lucy_Segment* self);

typedef void
(*LUCY_Seg_Set_Count_t)(lucy_Segment* self, int64_t count);

typedef int64_t
(*LUCY_Seg_Get_Count_t)(lucy_Segment* self);

typedef int64_t
(*LUCY_Seg_Increment_Count_t)(lucy_Segment* self, int64_t increment);

typedef cfish_Hash*
(*LUCY_Seg_Get_Metadata_t)(lucy_Segment* self);

typedef void
(*LUCY_Seg_Write_File_t)(lucy_Segment* self, lucy_Folder* folder);

typedef bool
(*LUCY_Seg_Read_File_t)(lucy_Segment* self, lucy_Folder* folder);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_Seg_get_class(lucy_Segment *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_Seg_get_class_name(lucy_Segment *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_Seg_is_a(lucy_Segment *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_Seg_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_Seg_To_Host(lucy_Segment* self, void* vcache) {
    const LUCY_Seg_To_Host_t method = (LUCY_Seg_To_Host_t)cfish_obj_method(self, LUCY_Seg_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_Seg_Clone(lucy_Segment* self) {
    const LUCY_Seg_Clone_t method = (LUCY_Seg_Clone_t)cfish_obj_method(self, LUCY_Seg_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_Seg_Equals(lucy_Segment* self, cfish_Obj* other) {
    const LUCY_Seg_Equals_t method = (LUCY_Seg_Equals_t)cfish_obj_method(self, LUCY_Seg_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_Seg_Compare_To(lucy_Segment* self, cfish_Obj* other) {
    const LUCY_Seg_Compare_To_t method = (LUCY_Seg_Compare_To_t)cfish_obj_method(self, LUCY_Seg_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_Seg_Destroy(lucy_Segment* self) {
    const LUCY_Seg_Destroy_t method = (LUCY_Seg_Destroy_t)cfish_obj_method(self, LUCY_Seg_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Seg_To_String(lucy_Segment* self) {
    const LUCY_Seg_To_String_t method = (LUCY_Seg_To_String_t)cfish_obj_method(self, LUCY_Seg_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Add_Field_OFFSET;
static CFISH_INLINE int32_t
LUCY_Seg_Add_Field(lucy_Segment* self, cfish_String* field) {
    const LUCY_Seg_Add_Field_t method = (LUCY_Seg_Add_Field_t)cfish_obj_method(self, LUCY_Seg_Add_Field_OFFSET);
    return method(self, field);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Store_Metadata_OFFSET;
static CFISH_INLINE void
LUCY_Seg_Store_Metadata(lucy_Segment* self, cfish_String* key, cfish_Obj* metadata) {
    const LUCY_Seg_Store_Metadata_t method = (LUCY_Seg_Store_Metadata_t)cfish_obj_method(self, LUCY_Seg_Store_Metadata_OFFSET);
    method(self, key, metadata);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Store_Metadata_Utf8_OFFSET;
static CFISH_INLINE void
LUCY_Seg_Store_Metadata_Utf8(lucy_Segment* self, const char* key, size_t len, cfish_Obj* value) {
    const LUCY_Seg_Store_Metadata_Utf8_t method = (LUCY_Seg_Store_Metadata_Utf8_t)cfish_obj_method(self, LUCY_Seg_Store_Metadata_Utf8_OFFSET);
    method(self, key, len, value);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Fetch_Metadata_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_Seg_Fetch_Metadata(lucy_Segment* self, cfish_String* key) {
    const LUCY_Seg_Fetch_Metadata_t method = (LUCY_Seg_Fetch_Metadata_t)cfish_obj_method(self, LUCY_Seg_Fetch_Metadata_OFFSET);
    return method(self, key);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Fetch_Metadata_Utf8_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_Seg_Fetch_Metadata_Utf8(lucy_Segment* self, const char* key, size_t len) {
    const LUCY_Seg_Fetch_Metadata_Utf8_t method = (LUCY_Seg_Fetch_Metadata_Utf8_t)cfish_obj_method(self, LUCY_Seg_Fetch_Metadata_Utf8_OFFSET);
    return method(self, key, len);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Field_Num_OFFSET;
static CFISH_INLINE int32_t
LUCY_Seg_Field_Num(lucy_Segment* self, cfish_String* field) {
    const LUCY_Seg_Field_Num_t method = (LUCY_Seg_Field_Num_t)cfish_obj_method(self, LUCY_Seg_Field_Num_OFFSET);
    return method(self, field);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Field_Name_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Seg_Field_Name(lucy_Segment* self, int32_t field_num) {
    const LUCY_Seg_Field_Name_t method = (LUCY_Seg_Field_Name_t)cfish_obj_method(self, LUCY_Seg_Field_Name_OFFSET);
    return method(self, field_num);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Get_Name_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Seg_Get_Name(lucy_Segment* self) {
    const LUCY_Seg_Get_Name_t method = (LUCY_Seg_Get_Name_t)cfish_obj_method(self, LUCY_Seg_Get_Name_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Get_Number_OFFSET;
static CFISH_INLINE int64_t
LUCY_Seg_Get_Number(lucy_Segment* self) {
    const LUCY_Seg_Get_Number_t method = (LUCY_Seg_Get_Number_t)cfish_obj_method(self, LUCY_Seg_Get_Number_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Set_Count_OFFSET;
static CFISH_INLINE void
LUCY_Seg_Set_Count(lucy_Segment* self, int64_t count) {
    const LUCY_Seg_Set_Count_t method = (LUCY_Seg_Set_Count_t)cfish_obj_method(self, LUCY_Seg_Set_Count_OFFSET);
    method(self, count);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Get_Count_OFFSET;
static CFISH_INLINE int64_t
LUCY_Seg_Get_Count(lucy_Segment* self) {
    const LUCY_Seg_Get_Count_t method = (LUCY_Seg_Get_Count_t)cfish_obj_method(self, LUCY_Seg_Get_Count_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Increment_Count_OFFSET;
static CFISH_INLINE int64_t
LUCY_Seg_Increment_Count(lucy_Segment* self, int64_t increment) {
    const LUCY_Seg_Increment_Count_t method = (LUCY_Seg_Increment_Count_t)cfish_obj_method(self, LUCY_Seg_Increment_Count_OFFSET);
    return method(self, increment);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Get_Metadata_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_Seg_Get_Metadata(lucy_Segment* self) {
    const LUCY_Seg_Get_Metadata_t method = (LUCY_Seg_Get_Metadata_t)cfish_obj_method(self, LUCY_Seg_Get_Metadata_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Write_File_OFFSET;
static CFISH_INLINE void
LUCY_Seg_Write_File(lucy_Segment* self, lucy_Folder* folder) {
    const LUCY_Seg_Write_File_t method = (LUCY_Seg_Write_File_t)cfish_obj_method(self, LUCY_Seg_Write_File_OFFSET);
    method(self, folder);
}

extern LUCY_VISIBLE uint32_t LUCY_Seg_Read_File_OFFSET;
static CFISH_INLINE bool
LUCY_Seg_Read_File(lucy_Segment* self, lucy_Folder* folder) {
    const LUCY_Seg_Read_File_t method = (LUCY_Seg_Read_File_t)cfish_obj_method(self, LUCY_Seg_Read_File_OFFSET);
    return method(self, folder);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_Seg_Add_Field_OVERRIDE NULL
#define Lucy_Seg_Store_Metadata_OVERRIDE NULL
#define Lucy_Seg_Store_Metadata_Utf8_OVERRIDE NULL
#define Lucy_Seg_Fetch_Metadata_OVERRIDE NULL
#define Lucy_Seg_Fetch_Metadata_Utf8_OVERRIDE NULL
#define Lucy_Seg_Field_Num_OVERRIDE NULL
#define Lucy_Seg_Field_Name_OVERRIDE NULL
#define Lucy_Seg_Get_Name_OVERRIDE NULL
#define Lucy_Seg_Get_Number_OVERRIDE NULL
#define Lucy_Seg_Set_Count_OVERRIDE NULL
#define Lucy_Seg_Get_Count_OVERRIDE NULL
#define Lucy_Seg_Increment_Count_OVERRIDE NULL
#define Lucy_Seg_Get_Metadata_OVERRIDE NULL
#define Lucy_Seg_Write_File_OVERRIDE NULL
#define Lucy_Seg_Read_File_OVERRIDE NULL
#else
int32_t
Lucy_Seg_Add_Field_OVERRIDE(lucy_Segment* self, cfish_String* field);
void
Lucy_Seg_Store_Metadata_OVERRIDE(lucy_Segment* self, cfish_String* key, cfish_Obj* metadata);
void
Lucy_Seg_Store_Metadata_Utf8_OVERRIDE(lucy_Segment* self, const char* key, size_t len, cfish_Obj* value);
cfish_Obj*
Lucy_Seg_Fetch_Metadata_OVERRIDE(lucy_Segment* self, cfish_String* key);
cfish_Obj*
Lucy_Seg_Fetch_Metadata_Utf8_OVERRIDE(lucy_Segment* self, const char* key, size_t len);
int32_t
Lucy_Seg_Field_Num_OVERRIDE(lucy_Segment* self, cfish_String* field);
cfish_String*
Lucy_Seg_Field_Name_OVERRIDE(lucy_Segment* self, int32_t field_num);
cfish_String*
Lucy_Seg_Get_Name_OVERRIDE(lucy_Segment* self);
int64_t
Lucy_Seg_Get_Number_OVERRIDE(lucy_Segment* self);
void
Lucy_Seg_Set_Count_OVERRIDE(lucy_Segment* self, int64_t count);
int64_t
Lucy_Seg_Get_Count_OVERRIDE(lucy_Segment* self);
int64_t
Lucy_Seg_Increment_Count_OVERRIDE(lucy_Segment* self, int64_t increment);
cfish_Hash*
Lucy_Seg_Get_Metadata_OVERRIDE(lucy_Segment* self);
void
Lucy_Seg_Write_File_OVERRIDE(lucy_Segment* self, lucy_Folder* folder);
bool
Lucy_Seg_Read_File_OVERRIDE(lucy_Segment* self, lucy_Folder* folder);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define Segment lucy_Segment
  #define SEGMENT LUCY_SEGMENT
  #define Seg_new lucy_Seg_new
  #define Seg_init lucy_Seg_init
  #define Seg_num_to_name lucy_Seg_num_to_name
  #define Seg_valid_seg_name lucy_Seg_valid_seg_name
  #define Seg_get_class lucy_Seg_get_class
  #define Seg_get_class_name lucy_Seg_get_class_name
  #define Seg_is_a lucy_Seg_is_a
  #define Seg_Add_Field_IMP LUCY_Seg_Add_Field_IMP
  #define Seg_Store_Metadata_IMP LUCY_Seg_Store_Metadata_IMP
  #define Seg_Store_Metadata_Utf8_IMP LUCY_Seg_Store_Metadata_Utf8_IMP
  #define Seg_Fetch_Metadata_IMP LUCY_Seg_Fetch_Metadata_IMP
  #define Seg_Fetch_Metadata_Utf8_IMP LUCY_Seg_Fetch_Metadata_Utf8_IMP
  #define Seg_Field_Num_IMP LUCY_Seg_Field_Num_IMP
  #define Seg_Field_Name_IMP LUCY_Seg_Field_Name_IMP
  #define Seg_Get_Name_IMP LUCY_Seg_Get_Name_IMP
  #define Seg_Get_Number_IMP LUCY_Seg_Get_Number_IMP
  #define Seg_Set_Count_IMP LUCY_Seg_Set_Count_IMP
  #define Seg_Get_Count_IMP LUCY_Seg_Get_Count_IMP
  #define Seg_Increment_Count_IMP LUCY_Seg_Increment_Count_IMP
  #define Seg_Get_Metadata_IMP LUCY_Seg_Get_Metadata_IMP
  #define Seg_Write_File_IMP LUCY_Seg_Write_File_IMP
  #define Seg_Read_File_IMP LUCY_Seg_Read_File_IMP
  #define Seg_Compare_To_IMP LUCY_Seg_Compare_To_IMP
  #define Seg_Destroy_IMP LUCY_Seg_Destroy_IMP
  #define Seg_To_Host LUCY_Seg_To_Host
  #define Seg_To_Host_t LUCY_Seg_To_Host_t
  #define Seg_Clone LUCY_Seg_Clone
  #define Seg_Clone_t LUCY_Seg_Clone_t
  #define Seg_Equals LUCY_Seg_Equals
  #define Seg_Equals_t LUCY_Seg_Equals_t
  #define Seg_Compare_To LUCY_Seg_Compare_To
  #define Seg_Compare_To_t LUCY_Seg_Compare_To_t
  #define Seg_Destroy LUCY_Seg_Destroy
  #define Seg_Destroy_t LUCY_Seg_Destroy_t
  #define Seg_To_String LUCY_Seg_To_String
  #define Seg_To_String_t LUCY_Seg_To_String_t
  #define Seg_Add_Field LUCY_Seg_Add_Field
  #define Seg_Add_Field_t LUCY_Seg_Add_Field_t
  #define Seg_Store_Metadata LUCY_Seg_Store_Metadata
  #define Seg_Store_Metadata_t LUCY_Seg_Store_Metadata_t
  #define Seg_Store_Metadata_Utf8 LUCY_Seg_Store_Metadata_Utf8
  #define Seg_Store_Metadata_Utf8_t LUCY_Seg_Store_Metadata_Utf8_t
  #define Seg_Fetch_Metadata LUCY_Seg_Fetch_Metadata
  #define Seg_Fetch_Metadata_t LUCY_Seg_Fetch_Metadata_t
  #define Seg_Fetch_Metadata_Utf8 LUCY_Seg_Fetch_Metadata_Utf8
  #define Seg_Fetch_Metadata_Utf8_t LUCY_Seg_Fetch_Metadata_Utf8_t
  #define Seg_Field_Num LUCY_Seg_Field_Num
  #define Seg_Field_Num_t LUCY_Seg_Field_Num_t
  #define Seg_Field_Name LUCY_Seg_Field_Name
  #define Seg_Field_Name_t LUCY_Seg_Field_Name_t
  #define Seg_Get_Name LUCY_Seg_Get_Name
  #define Seg_Get_Name_t LUCY_Seg_Get_Name_t
  #define Seg_Get_Number LUCY_Seg_Get_Number
  #define Seg_Get_Number_t LUCY_Seg_Get_Number_t
  #define Seg_Set_Count LUCY_Seg_Set_Count
  #define Seg_Set_Count_t LUCY_Seg_Set_Count_t
  #define Seg_Get_Count LUCY_Seg_Get_Count
  #define Seg_Get_Count_t LUCY_Seg_Get_Count_t
  #define Seg_Increment_Count LUCY_Seg_Increment_Count
  #define Seg_Increment_Count_t LUCY_Seg_Increment_Count_t
  #define Seg_Get_Metadata LUCY_Seg_Get_Metadata
  #define Seg_Get_Metadata_t LUCY_Seg_Get_Metadata_t
  #define Seg_Write_File LUCY_Seg_Write_File
  #define Seg_Write_File_t LUCY_Seg_Write_File_t
  #define Seg_Read_File LUCY_Seg_Read_File
  #define Seg_Read_File_t LUCY_Seg_Read_File_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_SEGMENT */




