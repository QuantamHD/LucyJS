/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_LEXICON
#define H_LUCY_INDEX_LEXICON 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_LEXICON
extern uint32_t lucy_Lex_IVARS_OFFSET;
typedef struct lucy_LexiconIVARS lucy_LexiconIVARS;
static CFISH_INLINE lucy_LexiconIVARS*
lucy_Lex_IVARS(lucy_Lexicon *self) {
   char *ptr = (char*)self + lucy_Lex_IVARS_OFFSET;
   return (lucy_LexiconIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define LexiconIVARS lucy_LexiconIVARS
  #define Lex_IVARS lucy_Lex_IVARS
#endif

struct lucy_LexiconIVARS {
    cfish_String* field;
};

#endif /* C_LUCY_LEXICON */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_Lexicon*
lucy_Lex_init(lucy_Lexicon* self, cfish_String* field);

void
LUCY_Lex_Destroy_IMP(lucy_Lexicon* self);

void
LUCY_Lex_Seek_IMP(lucy_Lexicon* self, cfish_Obj* target);

bool
LUCY_Lex_Next_IMP(lucy_Lexicon* self);

void
LUCY_Lex_Reset_IMP(lucy_Lexicon* self);

int32_t
LUCY_Lex_Doc_Freq_IMP(lucy_Lexicon* self);

cfish_Obj*
LUCY_Lex_Get_Term_IMP(lucy_Lexicon* self);

cfish_String*
LUCY_Lex_Get_Field_IMP(lucy_Lexicon* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_Lex_To_Host_t)(lucy_Lexicon* self, void* vcache);

typedef cfish_Obj*
(*LUCY_Lex_Clone_t)(lucy_Lexicon* self);

typedef bool
(*LUCY_Lex_Equals_t)(lucy_Lexicon* self, cfish_Obj* other);

typedef int32_t
(*LUCY_Lex_Compare_To_t)(lucy_Lexicon* self, cfish_Obj* other);

typedef void
(*LUCY_Lex_Destroy_t)(lucy_Lexicon* self);

typedef cfish_String*
(*LUCY_Lex_To_String_t)(lucy_Lexicon* self);

typedef void
(*LUCY_Lex_Seek_t)(lucy_Lexicon* self, cfish_Obj* target);

typedef bool
(*LUCY_Lex_Next_t)(lucy_Lexicon* self);

typedef void
(*LUCY_Lex_Reset_t)(lucy_Lexicon* self);

typedef int32_t
(*LUCY_Lex_Doc_Freq_t)(lucy_Lexicon* self);

typedef cfish_Obj*
(*LUCY_Lex_Get_Term_t)(lucy_Lexicon* self);

typedef cfish_String*
(*LUCY_Lex_Get_Field_t)(lucy_Lexicon* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_Lex_get_class(lucy_Lexicon *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_Lex_get_class_name(lucy_Lexicon *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_Lex_is_a(lucy_Lexicon *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_Lex_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_Lex_To_Host(lucy_Lexicon* self, void* vcache) {
    const LUCY_Lex_To_Host_t method = (LUCY_Lex_To_Host_t)cfish_obj_method(self, LUCY_Lex_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_Lex_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_Lex_Clone(lucy_Lexicon* self) {
    const LUCY_Lex_Clone_t method = (LUCY_Lex_Clone_t)cfish_obj_method(self, LUCY_Lex_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lex_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_Lex_Equals(lucy_Lexicon* self, cfish_Obj* other) {
    const LUCY_Lex_Equals_t method = (LUCY_Lex_Equals_t)cfish_obj_method(self, LUCY_Lex_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Lex_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_Lex_Compare_To(lucy_Lexicon* self, cfish_Obj* other) {
    const LUCY_Lex_Compare_To_t method = (LUCY_Lex_Compare_To_t)cfish_obj_method(self, LUCY_Lex_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Lex_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_Lex_Destroy(lucy_Lexicon* self) {
    const LUCY_Lex_Destroy_t method = (LUCY_Lex_Destroy_t)cfish_obj_method(self, LUCY_Lex_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lex_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Lex_To_String(lucy_Lexicon* self) {
    const LUCY_Lex_To_String_t method = (LUCY_Lex_To_String_t)cfish_obj_method(self, LUCY_Lex_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lex_Seek_OFFSET;
static CFISH_INLINE void
LUCY_Lex_Seek(lucy_Lexicon* self, cfish_Obj* target) {
    const LUCY_Lex_Seek_t method = (LUCY_Lex_Seek_t)cfish_obj_method(self, LUCY_Lex_Seek_OFFSET);
    method(self, target);
}

extern LUCY_VISIBLE uint32_t LUCY_Lex_Next_OFFSET;
static CFISH_INLINE bool
LUCY_Lex_Next(lucy_Lexicon* self) {
    const LUCY_Lex_Next_t method = (LUCY_Lex_Next_t)cfish_obj_method(self, LUCY_Lex_Next_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lex_Reset_OFFSET;
static CFISH_INLINE void
LUCY_Lex_Reset(lucy_Lexicon* self) {
    const LUCY_Lex_Reset_t method = (LUCY_Lex_Reset_t)cfish_obj_method(self, LUCY_Lex_Reset_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lex_Doc_Freq_OFFSET;
static CFISH_INLINE int32_t
LUCY_Lex_Doc_Freq(lucy_Lexicon* self) {
    const LUCY_Lex_Doc_Freq_t method = (LUCY_Lex_Doc_Freq_t)cfish_obj_method(self, LUCY_Lex_Doc_Freq_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lex_Get_Term_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_Lex_Get_Term(lucy_Lexicon* self) {
    const LUCY_Lex_Get_Term_t method = (LUCY_Lex_Get_Term_t)cfish_obj_method(self, LUCY_Lex_Get_Term_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lex_Get_Field_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Lex_Get_Field(lucy_Lexicon* self) {
    const LUCY_Lex_Get_Field_t method = (LUCY_Lex_Get_Field_t)cfish_obj_method(self, LUCY_Lex_Get_Field_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_Lex_Seek_OVERRIDE NULL
#define Lucy_Lex_Next_OVERRIDE NULL
#define Lucy_Lex_Reset_OVERRIDE NULL
#define Lucy_Lex_Doc_Freq_OVERRIDE NULL
#define Lucy_Lex_Get_Term_OVERRIDE NULL
#define Lucy_Lex_Get_Field_OVERRIDE NULL
#else
void
Lucy_Lex_Seek_OVERRIDE(lucy_Lexicon* self, cfish_Obj* target);
bool
Lucy_Lex_Next_OVERRIDE(lucy_Lexicon* self);
void
Lucy_Lex_Reset_OVERRIDE(lucy_Lexicon* self);
int32_t
Lucy_Lex_Doc_Freq_OVERRIDE(lucy_Lexicon* self);
cfish_Obj*
Lucy_Lex_Get_Term_OVERRIDE(lucy_Lexicon* self);
cfish_String*
Lucy_Lex_Get_Field_OVERRIDE(lucy_Lexicon* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define Lexicon lucy_Lexicon
  #define LEXICON LUCY_LEXICON
  #define Lex_init lucy_Lex_init
  #define Lex_get_class lucy_Lex_get_class
  #define Lex_get_class_name lucy_Lex_get_class_name
  #define Lex_is_a lucy_Lex_is_a
  #define Lex_Destroy_IMP LUCY_Lex_Destroy_IMP
  #define Lex_Seek_IMP LUCY_Lex_Seek_IMP
  #define Lex_Next_IMP LUCY_Lex_Next_IMP
  #define Lex_Reset_IMP LUCY_Lex_Reset_IMP
  #define Lex_Doc_Freq_IMP LUCY_Lex_Doc_Freq_IMP
  #define Lex_Get_Term_IMP LUCY_Lex_Get_Term_IMP
  #define Lex_Get_Field_IMP LUCY_Lex_Get_Field_IMP
  #define Lex_To_Host LUCY_Lex_To_Host
  #define Lex_To_Host_t LUCY_Lex_To_Host_t
  #define Lex_Clone LUCY_Lex_Clone
  #define Lex_Clone_t LUCY_Lex_Clone_t
  #define Lex_Equals LUCY_Lex_Equals
  #define Lex_Equals_t LUCY_Lex_Equals_t
  #define Lex_Compare_To LUCY_Lex_Compare_To
  #define Lex_Compare_To_t LUCY_Lex_Compare_To_t
  #define Lex_Destroy LUCY_Lex_Destroy
  #define Lex_Destroy_t LUCY_Lex_Destroy_t
  #define Lex_To_String LUCY_Lex_To_String
  #define Lex_To_String_t LUCY_Lex_To_String_t
  #define Lex_Seek LUCY_Lex_Seek
  #define Lex_Seek_t LUCY_Lex_Seek_t
  #define Lex_Next LUCY_Lex_Next
  #define Lex_Next_t LUCY_Lex_Next_t
  #define Lex_Reset LUCY_Lex_Reset
  #define Lex_Reset_t LUCY_Lex_Reset_t
  #define Lex_Doc_Freq LUCY_Lex_Doc_Freq
  #define Lex_Doc_Freq_t LUCY_Lex_Doc_Freq_t
  #define Lex_Get_Term LUCY_Lex_Get_Term
  #define Lex_Get_Term_t LUCY_Lex_Get_Term_t
  #define Lex_Get_Field LUCY_Lex_Get_Field
  #define Lex_Get_Field_t LUCY_Lex_Get_Field_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_LEXICON */




