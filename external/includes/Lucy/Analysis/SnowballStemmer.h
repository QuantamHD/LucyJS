/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_ANALYSIS_SNOWBALLSTEMMER
#define H_LUCY_ANALYSIS_SNOWBALLSTEMMER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Analysis/Analyzer.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_SNOWBALLSTEMMER
extern uint32_t lucy_SnowStemmer_IVARS_OFFSET;
typedef struct lucy_SnowballStemmerIVARS lucy_SnowballStemmerIVARS;
static CFISH_INLINE lucy_SnowballStemmerIVARS*
lucy_SnowStemmer_IVARS(lucy_SnowballStemmer *self) {
   char *ptr = (char*)self + lucy_SnowStemmer_IVARS_OFFSET;
   return (lucy_SnowballStemmerIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define SnowballStemmerIVARS lucy_SnowballStemmerIVARS
  #define SnowStemmer_IVARS lucy_SnowStemmer_IVARS
#endif

struct lucy_SnowballStemmerIVARS {
    void* snowstemmer;
    cfish_String* language;
};

#endif /* C_LUCY_SNOWBALLSTEMMER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_SnowballStemmer*
lucy_SnowStemmer_new(cfish_String* language);

LUCY_VISIBLE lucy_SnowballStemmer*
lucy_SnowStemmer_init(lucy_SnowballStemmer* self, cfish_String* language);

lucy_Inversion*
LUCY_SnowStemmer_Transform_IMP(lucy_SnowballStemmer* self, lucy_Inversion* inversion);

cfish_Hash*
LUCY_SnowStemmer_Dump_IMP(lucy_SnowballStemmer* self);

lucy_SnowballStemmer*
LUCY_SnowStemmer_Load_IMP(lucy_SnowballStemmer* self, cfish_Obj* dump);

bool
LUCY_SnowStemmer_Equals_IMP(lucy_SnowballStemmer* self, cfish_Obj* other);

void
LUCY_SnowStemmer_Destroy_IMP(lucy_SnowballStemmer* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_SnowStemmer_To_Host_t)(lucy_SnowballStemmer* self, void* vcache);

typedef cfish_Obj*
(*LUCY_SnowStemmer_Clone_t)(lucy_SnowballStemmer* self);

typedef bool
(*LUCY_SnowStemmer_Equals_t)(lucy_SnowballStemmer* self, cfish_Obj* other);

typedef int32_t
(*LUCY_SnowStemmer_Compare_To_t)(lucy_SnowballStemmer* self, cfish_Obj* other);

typedef void
(*LUCY_SnowStemmer_Destroy_t)(lucy_SnowballStemmer* self);

typedef cfish_String*
(*LUCY_SnowStemmer_To_String_t)(lucy_SnowballStemmer* self);

typedef lucy_Inversion*
(*LUCY_SnowStemmer_Transform_t)(lucy_SnowballStemmer* self, lucy_Inversion* inversion);

typedef lucy_Inversion*
(*LUCY_SnowStemmer_Transform_Text_t)(lucy_SnowballStemmer* self, cfish_String* text);

typedef cfish_Vector*
(*LUCY_SnowStemmer_Split_t)(lucy_SnowballStemmer* self, cfish_String* text);

typedef cfish_Hash*
(*LUCY_SnowStemmer_Dump_t)(lucy_SnowballStemmer* self);

typedef lucy_SnowballStemmer*
(*LUCY_SnowStemmer_Load_t)(lucy_SnowballStemmer* self, cfish_Obj* dump);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_SnowStemmer_get_class(lucy_SnowballStemmer *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_SnowStemmer_get_class_name(lucy_SnowballStemmer *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_SnowStemmer_is_a(lucy_SnowballStemmer *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_SnowStemmer_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_SnowStemmer_To_Host(lucy_SnowballStemmer* self, void* vcache) {
    const LUCY_SnowStemmer_To_Host_t method = (LUCY_SnowStemmer_To_Host_t)cfish_obj_method(self, LUCY_SnowStemmer_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_SnowStemmer_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_SnowStemmer_Clone(lucy_SnowballStemmer* self) {
    const LUCY_SnowStemmer_Clone_t method = (LUCY_SnowStemmer_Clone_t)cfish_obj_method(self, LUCY_SnowStemmer_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SnowStemmer_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_SnowStemmer_Equals(lucy_SnowballStemmer* self, cfish_Obj* other) {
    const LUCY_SnowStemmer_Equals_t method = (LUCY_SnowStemmer_Equals_t)cfish_obj_method(self, LUCY_SnowStemmer_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_SnowStemmer_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_SnowStemmer_Compare_To(lucy_SnowballStemmer* self, cfish_Obj* other) {
    const LUCY_SnowStemmer_Compare_To_t method = (LUCY_SnowStemmer_Compare_To_t)cfish_obj_method(self, LUCY_SnowStemmer_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_SnowStemmer_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_SnowStemmer_Destroy(lucy_SnowballStemmer* self) {
    const LUCY_SnowStemmer_Destroy_t method = (LUCY_SnowStemmer_Destroy_t)cfish_obj_method(self, LUCY_SnowStemmer_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SnowStemmer_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_SnowStemmer_To_String(lucy_SnowballStemmer* self) {
    const LUCY_SnowStemmer_To_String_t method = (LUCY_SnowStemmer_To_String_t)cfish_obj_method(self, LUCY_SnowStemmer_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SnowStemmer_Transform_OFFSET;
static CFISH_INLINE lucy_Inversion*
LUCY_SnowStemmer_Transform(lucy_SnowballStemmer* self, lucy_Inversion* inversion) {
    const LUCY_SnowStemmer_Transform_t method = (LUCY_SnowStemmer_Transform_t)cfish_obj_method(self, LUCY_SnowStemmer_Transform_OFFSET);
    return method(self, inversion);
}

extern LUCY_VISIBLE uint32_t LUCY_SnowStemmer_Transform_Text_OFFSET;
static CFISH_INLINE lucy_Inversion*
LUCY_SnowStemmer_Transform_Text(lucy_SnowballStemmer* self, cfish_String* text) {
    const LUCY_SnowStemmer_Transform_Text_t method = (LUCY_SnowStemmer_Transform_Text_t)cfish_obj_method(self, LUCY_SnowStemmer_Transform_Text_OFFSET);
    return method(self, text);
}

extern LUCY_VISIBLE uint32_t LUCY_SnowStemmer_Split_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_SnowStemmer_Split(lucy_SnowballStemmer* self, cfish_String* text) {
    const LUCY_SnowStemmer_Split_t method = (LUCY_SnowStemmer_Split_t)cfish_obj_method(self, LUCY_SnowStemmer_Split_OFFSET);
    return method(self, text);
}

extern LUCY_VISIBLE uint32_t LUCY_SnowStemmer_Dump_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_SnowStemmer_Dump(lucy_SnowballStemmer* self) {
    const LUCY_SnowStemmer_Dump_t method = (LUCY_SnowStemmer_Dump_t)cfish_obj_method(self, LUCY_SnowStemmer_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SnowStemmer_Load_OFFSET;
static CFISH_INLINE lucy_SnowballStemmer*
LUCY_SnowStemmer_Load(lucy_SnowballStemmer* self, cfish_Obj* dump) {
    const LUCY_SnowStemmer_Load_t method = (LUCY_SnowStemmer_Load_t)cfish_obj_method(self, LUCY_SnowStemmer_Load_OFFSET);
    return method(self, dump);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define SnowballStemmer lucy_SnowballStemmer
  #define SNOWBALLSTEMMER LUCY_SNOWBALLSTEMMER
  #define SnowStemmer_new lucy_SnowStemmer_new
  #define SnowStemmer_init lucy_SnowStemmer_init
  #define SnowStemmer_get_class lucy_SnowStemmer_get_class
  #define SnowStemmer_get_class_name lucy_SnowStemmer_get_class_name
  #define SnowStemmer_is_a lucy_SnowStemmer_is_a
  #define SnowStemmer_Transform_IMP LUCY_SnowStemmer_Transform_IMP
  #define SnowStemmer_Dump_IMP LUCY_SnowStemmer_Dump_IMP
  #define SnowStemmer_Load_IMP LUCY_SnowStemmer_Load_IMP
  #define SnowStemmer_Equals_IMP LUCY_SnowStemmer_Equals_IMP
  #define SnowStemmer_Destroy_IMP LUCY_SnowStemmer_Destroy_IMP
  #define SnowStemmer_To_Host LUCY_SnowStemmer_To_Host
  #define SnowStemmer_To_Host_t LUCY_SnowStemmer_To_Host_t
  #define SnowStemmer_Clone LUCY_SnowStemmer_Clone
  #define SnowStemmer_Clone_t LUCY_SnowStemmer_Clone_t
  #define SnowStemmer_Equals LUCY_SnowStemmer_Equals
  #define SnowStemmer_Equals_t LUCY_SnowStemmer_Equals_t
  #define SnowStemmer_Compare_To LUCY_SnowStemmer_Compare_To
  #define SnowStemmer_Compare_To_t LUCY_SnowStemmer_Compare_To_t
  #define SnowStemmer_Destroy LUCY_SnowStemmer_Destroy
  #define SnowStemmer_Destroy_t LUCY_SnowStemmer_Destroy_t
  #define SnowStemmer_To_String LUCY_SnowStemmer_To_String
  #define SnowStemmer_To_String_t LUCY_SnowStemmer_To_String_t
  #define SnowStemmer_Transform LUCY_SnowStemmer_Transform
  #define SnowStemmer_Transform_t LUCY_SnowStemmer_Transform_t
  #define SnowStemmer_Transform_Text LUCY_SnowStemmer_Transform_Text
  #define SnowStemmer_Transform_Text_t LUCY_SnowStemmer_Transform_Text_t
  #define SnowStemmer_Split LUCY_SnowStemmer_Split
  #define SnowStemmer_Split_t LUCY_SnowStemmer_Split_t
  #define SnowStemmer_Dump LUCY_SnowStemmer_Dump
  #define SnowStemmer_Dump_t LUCY_SnowStemmer_Dump_t
  #define SnowStemmer_Load LUCY_SnowStemmer_Load
  #define SnowStemmer_Load_t LUCY_SnowStemmer_Load_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_ANALYSIS_SNOWBALLSTEMMER */




