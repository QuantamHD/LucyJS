/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_ANALYSIS_INVERSION
#define H_LUCY_ANALYSIS_INVERSION 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_INVERSION
extern uint32_t lucy_Inversion_IVARS_OFFSET;
typedef struct lucy_InversionIVARS lucy_InversionIVARS;
static CFISH_INLINE lucy_InversionIVARS*
lucy_Inversion_IVARS(lucy_Inversion *self) {
   char *ptr = (char*)self + lucy_Inversion_IVARS_OFFSET;
   return (lucy_InversionIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define InversionIVARS lucy_InversionIVARS
  #define Inversion_IVARS lucy_Inversion_IVARS
#endif

struct lucy_InversionIVARS {
    lucy_Token** tokens;
    uint32_t size;
    uint32_t cap;
    uint32_t cur;
    bool inverted;
    uint32_t* cluster_counts;
    uint32_t cluster_counts_size;
};

#endif /* C_LUCY_INVERSION */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_Inversion*
lucy_Inversion_new(lucy_Token* seed);

void
LUCY_Inversion_Append_IMP(lucy_Inversion* self, lucy_Token* token);

lucy_Token*
LUCY_Inversion_Next_IMP(lucy_Inversion* self);

void
LUCY_Inversion_Reset_IMP(lucy_Inversion* self);

void
LUCY_Inversion_Invert_IMP(lucy_Inversion* self);

lucy_Token**
LUCY_Inversion_Next_Cluster_IMP(lucy_Inversion* self, uint32_t* count);

uint32_t
LUCY_Inversion_Get_Size_IMP(lucy_Inversion* self);

void
LUCY_Inversion_Destroy_IMP(lucy_Inversion* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_Inversion_To_Host_t)(lucy_Inversion* self, void* vcache);

typedef cfish_Obj*
(*LUCY_Inversion_Clone_t)(lucy_Inversion* self);

typedef bool
(*LUCY_Inversion_Equals_t)(lucy_Inversion* self, cfish_Obj* other);

typedef int32_t
(*LUCY_Inversion_Compare_To_t)(lucy_Inversion* self, cfish_Obj* other);

typedef void
(*LUCY_Inversion_Destroy_t)(lucy_Inversion* self);

typedef cfish_String*
(*LUCY_Inversion_To_String_t)(lucy_Inversion* self);

typedef void
(*LUCY_Inversion_Append_t)(lucy_Inversion* self, lucy_Token* token);

typedef lucy_Token*
(*LUCY_Inversion_Next_t)(lucy_Inversion* self);

typedef void
(*LUCY_Inversion_Reset_t)(lucy_Inversion* self);

typedef void
(*LUCY_Inversion_Invert_t)(lucy_Inversion* self);

typedef lucy_Token**
(*LUCY_Inversion_Next_Cluster_t)(lucy_Inversion* self, uint32_t* count);

typedef uint32_t
(*LUCY_Inversion_Get_Size_t)(lucy_Inversion* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_Inversion_get_class(lucy_Inversion *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_Inversion_get_class_name(lucy_Inversion *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_Inversion_is_a(lucy_Inversion *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_Inversion_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_Inversion_To_Host(lucy_Inversion* self, void* vcache) {
    const LUCY_Inversion_To_Host_t method = (LUCY_Inversion_To_Host_t)cfish_obj_method(self, LUCY_Inversion_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_Inversion_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_Inversion_Clone(lucy_Inversion* self) {
    const LUCY_Inversion_Clone_t method = (LUCY_Inversion_Clone_t)cfish_obj_method(self, LUCY_Inversion_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inversion_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_Inversion_Equals(lucy_Inversion* self, cfish_Obj* other) {
    const LUCY_Inversion_Equals_t method = (LUCY_Inversion_Equals_t)cfish_obj_method(self, LUCY_Inversion_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Inversion_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_Inversion_Compare_To(lucy_Inversion* self, cfish_Obj* other) {
    const LUCY_Inversion_Compare_To_t method = (LUCY_Inversion_Compare_To_t)cfish_obj_method(self, LUCY_Inversion_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Inversion_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_Inversion_Destroy(lucy_Inversion* self) {
    const LUCY_Inversion_Destroy_t method = (LUCY_Inversion_Destroy_t)cfish_obj_method(self, LUCY_Inversion_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inversion_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Inversion_To_String(lucy_Inversion* self) {
    const LUCY_Inversion_To_String_t method = (LUCY_Inversion_To_String_t)cfish_obj_method(self, LUCY_Inversion_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inversion_Append_OFFSET;
static CFISH_INLINE void
LUCY_Inversion_Append(lucy_Inversion* self, lucy_Token* token) {
    const LUCY_Inversion_Append_t method = (LUCY_Inversion_Append_t)cfish_obj_method(self, LUCY_Inversion_Append_OFFSET);
    method(self, token);
}

extern LUCY_VISIBLE uint32_t LUCY_Inversion_Next_OFFSET;
static CFISH_INLINE lucy_Token*
LUCY_Inversion_Next(lucy_Inversion* self) {
    const LUCY_Inversion_Next_t method = (LUCY_Inversion_Next_t)cfish_obj_method(self, LUCY_Inversion_Next_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inversion_Reset_OFFSET;
static CFISH_INLINE void
LUCY_Inversion_Reset(lucy_Inversion* self) {
    const LUCY_Inversion_Reset_t method = (LUCY_Inversion_Reset_t)cfish_obj_method(self, LUCY_Inversion_Reset_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inversion_Invert_OFFSET;
static CFISH_INLINE void
LUCY_Inversion_Invert(lucy_Inversion* self) {
    const LUCY_Inversion_Invert_t method = (LUCY_Inversion_Invert_t)cfish_obj_method(self, LUCY_Inversion_Invert_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Inversion_Next_Cluster_OFFSET;
static CFISH_INLINE lucy_Token**
LUCY_Inversion_Next_Cluster(lucy_Inversion* self, uint32_t* count) {
    const LUCY_Inversion_Next_Cluster_t method = (LUCY_Inversion_Next_Cluster_t)cfish_obj_method(self, LUCY_Inversion_Next_Cluster_OFFSET);
    return method(self, count);
}

extern LUCY_VISIBLE uint32_t LUCY_Inversion_Get_Size_OFFSET;
static CFISH_INLINE uint32_t
LUCY_Inversion_Get_Size(lucy_Inversion* self) {
    const LUCY_Inversion_Get_Size_t method = (LUCY_Inversion_Get_Size_t)cfish_obj_method(self, LUCY_Inversion_Get_Size_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_Inversion_Append_OVERRIDE NULL
#define Lucy_Inversion_Next_OVERRIDE NULL
#define Lucy_Inversion_Reset_OVERRIDE NULL
#define Lucy_Inversion_Invert_OVERRIDE NULL
#define Lucy_Inversion_Next_Cluster_OVERRIDE NULL
#define Lucy_Inversion_Get_Size_OVERRIDE NULL
#else
void
Lucy_Inversion_Append_OVERRIDE(lucy_Inversion* self, lucy_Token* token);
lucy_Token*
Lucy_Inversion_Next_OVERRIDE(lucy_Inversion* self);
void
Lucy_Inversion_Reset_OVERRIDE(lucy_Inversion* self);
void
Lucy_Inversion_Invert_OVERRIDE(lucy_Inversion* self);
lucy_Token**
Lucy_Inversion_Next_Cluster_OVERRIDE(lucy_Inversion* self, uint32_t* count);
uint32_t
Lucy_Inversion_Get_Size_OVERRIDE(lucy_Inversion* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define Inversion lucy_Inversion
  #define INVERSION LUCY_INVERSION
  #define Inversion_new lucy_Inversion_new
  #define Inversion_get_class lucy_Inversion_get_class
  #define Inversion_get_class_name lucy_Inversion_get_class_name
  #define Inversion_is_a lucy_Inversion_is_a
  #define Inversion_Append_IMP LUCY_Inversion_Append_IMP
  #define Inversion_Next_IMP LUCY_Inversion_Next_IMP
  #define Inversion_Reset_IMP LUCY_Inversion_Reset_IMP
  #define Inversion_Invert_IMP LUCY_Inversion_Invert_IMP
  #define Inversion_Next_Cluster_IMP LUCY_Inversion_Next_Cluster_IMP
  #define Inversion_Get_Size_IMP LUCY_Inversion_Get_Size_IMP
  #define Inversion_Destroy_IMP LUCY_Inversion_Destroy_IMP
  #define Inversion_To_Host LUCY_Inversion_To_Host
  #define Inversion_To_Host_t LUCY_Inversion_To_Host_t
  #define Inversion_Clone LUCY_Inversion_Clone
  #define Inversion_Clone_t LUCY_Inversion_Clone_t
  #define Inversion_Equals LUCY_Inversion_Equals
  #define Inversion_Equals_t LUCY_Inversion_Equals_t
  #define Inversion_Compare_To LUCY_Inversion_Compare_To
  #define Inversion_Compare_To_t LUCY_Inversion_Compare_To_t
  #define Inversion_Destroy LUCY_Inversion_Destroy
  #define Inversion_Destroy_t LUCY_Inversion_Destroy_t
  #define Inversion_To_String LUCY_Inversion_To_String
  #define Inversion_To_String_t LUCY_Inversion_To_String_t
  #define Inversion_Append LUCY_Inversion_Append
  #define Inversion_Append_t LUCY_Inversion_Append_t
  #define Inversion_Next LUCY_Inversion_Next
  #define Inversion_Next_t LUCY_Inversion_Next_t
  #define Inversion_Reset LUCY_Inversion_Reset
  #define Inversion_Reset_t LUCY_Inversion_Reset_t
  #define Inversion_Invert LUCY_Inversion_Invert
  #define Inversion_Invert_t LUCY_Inversion_Invert_t
  #define Inversion_Next_Cluster LUCY_Inversion_Next_Cluster
  #define Inversion_Next_Cluster_t LUCY_Inversion_Next_Cluster_t
  #define Inversion_Get_Size LUCY_Inversion_Get_Size
  #define Inversion_Get_Size_t LUCY_Inversion_Get_Size_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_ANALYSIS_INVERSION */




