/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_TEST_INDEX_TESTSORTWRITER
#define H_LUCY_TEST_INDEX_TESTSORTWRITER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "testlucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/TestHarness/TestBatch.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_TESTLUCY_TESTSORTWRITER
extern uint32_t testlucy_TestSortWriter_IVARS_OFFSET;
typedef struct testlucy_TestSortWriterIVARS testlucy_TestSortWriterIVARS;
static CFISH_INLINE testlucy_TestSortWriterIVARS*
testlucy_TestSortWriter_IVARS(testlucy_TestSortWriter *self) {
   char *ptr = (char*)self + testlucy_TestSortWriter_IVARS_OFFSET;
   return (testlucy_TestSortWriterIVARS*)ptr;
}
#ifdef TESTLUCY_USE_SHORT_NAMES
  #define TestSortWriterIVARS testlucy_TestSortWriterIVARS
  #define TestSortWriter_IVARS testlucy_TestSortWriter_IVARS
#endif


#endif /* C_TESTLUCY_TESTSORTWRITER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

TESTLUCY_VISIBLE testlucy_TestSortWriter*
testlucy_TestSortWriter_new(void);

void
TESTLUCY_TestSortWriter_Run_IMP(testlucy_TestSortWriter* self, cfish_TestBatchRunner* runner);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*TESTLUCY_TestSortWriter_To_Host_t)(testlucy_TestSortWriter* self, void* vcache);

typedef cfish_Obj*
(*TESTLUCY_TestSortWriter_Clone_t)(testlucy_TestSortWriter* self);

typedef bool
(*TESTLUCY_TestSortWriter_Equals_t)(testlucy_TestSortWriter* self, cfish_Obj* other);

typedef int32_t
(*TESTLUCY_TestSortWriter_Compare_To_t)(testlucy_TestSortWriter* self, cfish_Obj* other);

typedef void
(*TESTLUCY_TestSortWriter_Destroy_t)(testlucy_TestSortWriter* self);

typedef cfish_String*
(*TESTLUCY_TestSortWriter_To_String_t)(testlucy_TestSortWriter* self);

typedef void
(*TESTLUCY_TestSortWriter_Run_t)(testlucy_TestSortWriter* self, cfish_TestBatchRunner* runner);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
testlucy_TestSortWriter_get_class(testlucy_TestSortWriter *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
testlucy_TestSortWriter_get_class_name(testlucy_TestSortWriter *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
testlucy_TestSortWriter_is_a(testlucy_TestSortWriter *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSortWriter_To_Host_OFFSET;
static CFISH_INLINE void*
TESTLUCY_TestSortWriter_To_Host(testlucy_TestSortWriter* self, void* vcache) {
    const TESTLUCY_TestSortWriter_To_Host_t method = (TESTLUCY_TestSortWriter_To_Host_t)cfish_obj_method(self, TESTLUCY_TestSortWriter_To_Host_OFFSET);
    return method(self, vcache);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSortWriter_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTLUCY_TestSortWriter_Clone(testlucy_TestSortWriter* self) {
    const TESTLUCY_TestSortWriter_Clone_t method = (TESTLUCY_TestSortWriter_Clone_t)cfish_obj_method(self, TESTLUCY_TestSortWriter_Clone_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSortWriter_Equals_OFFSET;
static CFISH_INLINE bool
TESTLUCY_TestSortWriter_Equals(testlucy_TestSortWriter* self, cfish_Obj* other) {
    const TESTLUCY_TestSortWriter_Equals_t method = (TESTLUCY_TestSortWriter_Equals_t)cfish_obj_method(self, TESTLUCY_TestSortWriter_Equals_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSortWriter_Compare_To_OFFSET;
static CFISH_INLINE int32_t
TESTLUCY_TestSortWriter_Compare_To(testlucy_TestSortWriter* self, cfish_Obj* other) {
    const TESTLUCY_TestSortWriter_Compare_To_t method = (TESTLUCY_TestSortWriter_Compare_To_t)cfish_obj_method(self, TESTLUCY_TestSortWriter_Compare_To_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSortWriter_Destroy_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestSortWriter_Destroy(testlucy_TestSortWriter* self) {
    const TESTLUCY_TestSortWriter_Destroy_t method = (TESTLUCY_TestSortWriter_Destroy_t)cfish_obj_method(self, TESTLUCY_TestSortWriter_Destroy_OFFSET);
    method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSortWriter_To_String_OFFSET;
static CFISH_INLINE cfish_String*
TESTLUCY_TestSortWriter_To_String(testlucy_TestSortWriter* self) {
    const TESTLUCY_TestSortWriter_To_String_t method = (TESTLUCY_TestSortWriter_To_String_t)cfish_obj_method(self, TESTLUCY_TestSortWriter_To_String_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSortWriter_Run_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestSortWriter_Run(testlucy_TestSortWriter* self, cfish_TestBatchRunner* runner) {
    const TESTLUCY_TestSortWriter_Run_t method = (TESTLUCY_TestSortWriter_Run_t)cfish_obj_method(self, TESTLUCY_TestSortWriter_Run_OFFSET);
    method(self, runner);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef TESTLUCY_USE_SHORT_NAMES
  #define TestSortWriter testlucy_TestSortWriter
  #define TESTSORTWRITER TESTLUCY_TESTSORTWRITER
  #define TestSortWriter_new testlucy_TestSortWriter_new
  #define TestSortWriter_get_class testlucy_TestSortWriter_get_class
  #define TestSortWriter_get_class_name testlucy_TestSortWriter_get_class_name
  #define TestSortWriter_is_a testlucy_TestSortWriter_is_a
  #define TestSortWriter_Run_IMP TESTLUCY_TestSortWriter_Run_IMP
  #define TestSortWriter_To_Host TESTLUCY_TestSortWriter_To_Host
  #define TestSortWriter_To_Host_t TESTLUCY_TestSortWriter_To_Host_t
  #define TestSortWriter_Clone TESTLUCY_TestSortWriter_Clone
  #define TestSortWriter_Clone_t TESTLUCY_TestSortWriter_Clone_t
  #define TestSortWriter_Equals TESTLUCY_TestSortWriter_Equals
  #define TestSortWriter_Equals_t TESTLUCY_TestSortWriter_Equals_t
  #define TestSortWriter_Compare_To TESTLUCY_TestSortWriter_Compare_To
  #define TestSortWriter_Compare_To_t TESTLUCY_TestSortWriter_Compare_To_t
  #define TestSortWriter_Destroy TESTLUCY_TestSortWriter_Destroy
  #define TestSortWriter_Destroy_t TESTLUCY_TestSortWriter_Destroy_t
  #define TestSortWriter_To_String TESTLUCY_TestSortWriter_To_String
  #define TestSortWriter_To_String_t TESTLUCY_TestSortWriter_To_String_t
  #define TestSortWriter_Run TESTLUCY_TestSortWriter_Run
  #define TestSortWriter_Run_t TESTLUCY_TestSortWriter_Run_t
#endif /* TESTLUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy/Index/IndexManager.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_TESTLUCY_NONMERGINGINDEXMANAGER
extern uint32_t testlucy_NMIxManager_IVARS_OFFSET;
typedef struct testlucy_NonMergingIndexManagerIVARS testlucy_NonMergingIndexManagerIVARS;
static CFISH_INLINE testlucy_NonMergingIndexManagerIVARS*
testlucy_NMIxManager_IVARS(testlucy_NonMergingIndexManager *self) {
   char *ptr = (char*)self + testlucy_NMIxManager_IVARS_OFFSET;
   return (testlucy_NonMergingIndexManagerIVARS*)ptr;
}
#ifdef TESTLUCY_USE_SHORT_NAMES
  #define NonMergingIndexManagerIVARS testlucy_NonMergingIndexManagerIVARS
  #define NMIxManager_IVARS testlucy_NMIxManager_IVARS
#endif


#endif /* C_TESTLUCY_NONMERGINGINDEXMANAGER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

TESTLUCY_VISIBLE testlucy_NonMergingIndexManager*
testlucy_NMIxManager_new(void);

TESTLUCY_VISIBLE testlucy_NonMergingIndexManager*
testlucy_NMIxManager_init(testlucy_NonMergingIndexManager* self);

cfish_Vector*
TESTLUCY_NMIxManager_Recycle_IMP(testlucy_NonMergingIndexManager* self, lucy_PolyReader* reader, lucy_DeletionsWriter* del_writer, int64_t cutoff, bool optimize);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*TESTLUCY_NMIxManager_To_Host_t)(testlucy_NonMergingIndexManager* self, void* vcache);

typedef cfish_Obj*
(*TESTLUCY_NMIxManager_Clone_t)(testlucy_NonMergingIndexManager* self);

typedef bool
(*TESTLUCY_NMIxManager_Equals_t)(testlucy_NonMergingIndexManager* self, cfish_Obj* other);

typedef int32_t
(*TESTLUCY_NMIxManager_Compare_To_t)(testlucy_NonMergingIndexManager* self, cfish_Obj* other);

typedef void
(*TESTLUCY_NMIxManager_Destroy_t)(testlucy_NonMergingIndexManager* self);

typedef cfish_String*
(*TESTLUCY_NMIxManager_To_String_t)(testlucy_NonMergingIndexManager* self);

typedef void
(*TESTLUCY_NMIxManager_Set_Folder_t)(testlucy_NonMergingIndexManager* self, lucy_Folder* folder);

typedef lucy_Folder*
(*TESTLUCY_NMIxManager_Get_Folder_t)(testlucy_NonMergingIndexManager* self);

typedef cfish_String*
(*TESTLUCY_NMIxManager_Get_Host_t)(testlucy_NonMergingIndexManager* self);

typedef cfish_Vector*
(*TESTLUCY_NMIxManager_Recycle_t)(testlucy_NonMergingIndexManager* self, lucy_PolyReader* reader, lucy_DeletionsWriter* del_writer, int64_t cutoff, bool optimize);

typedef uint32_t
(*TESTLUCY_NMIxManager_Choose_Sparse_t)(testlucy_NonMergingIndexManager* self, lucy_I32Array* doc_counts);

typedef lucy_Lock*
(*TESTLUCY_NMIxManager_Make_Write_Lock_t)(testlucy_NonMergingIndexManager* self);

typedef lucy_Lock*
(*TESTLUCY_NMIxManager_Make_Deletion_Lock_t)(testlucy_NonMergingIndexManager* self);

typedef lucy_Lock*
(*TESTLUCY_NMIxManager_Make_Merge_Lock_t)(testlucy_NonMergingIndexManager* self);

typedef void
(*TESTLUCY_NMIxManager_Write_Merge_Data_t)(testlucy_NonMergingIndexManager* self, int64_t cutoff);

typedef cfish_Hash*
(*TESTLUCY_NMIxManager_Read_Merge_Data_t)(testlucy_NonMergingIndexManager* self);

typedef bool
(*TESTLUCY_NMIxManager_Remove_Merge_Data_t)(testlucy_NonMergingIndexManager* self);

typedef lucy_Lock*
(*TESTLUCY_NMIxManager_Make_Snapshot_Read_Lock_t)(testlucy_NonMergingIndexManager* self, cfish_String* filename);

typedef int64_t
(*TESTLUCY_NMIxManager_Highest_Seg_Num_t)(testlucy_NonMergingIndexManager* self, lucy_Snapshot* snapshot);

typedef cfish_String*
(*TESTLUCY_NMIxManager_Make_Snapshot_Filename_t)(testlucy_NonMergingIndexManager* self);

typedef void
(*TESTLUCY_NMIxManager_Set_Write_Lock_Timeout_t)(testlucy_NonMergingIndexManager* self, uint32_t timeout);

typedef uint32_t
(*TESTLUCY_NMIxManager_Get_Write_Lock_Timeout_t)(testlucy_NonMergingIndexManager* self);

typedef void
(*TESTLUCY_NMIxManager_Set_Write_Lock_Interval_t)(testlucy_NonMergingIndexManager* self, uint32_t timeout);

typedef uint32_t
(*TESTLUCY_NMIxManager_Get_Write_Lock_Interval_t)(testlucy_NonMergingIndexManager* self);

typedef void
(*TESTLUCY_NMIxManager_Set_Merge_Lock_Timeout_t)(testlucy_NonMergingIndexManager* self, uint32_t timeout);

typedef uint32_t
(*TESTLUCY_NMIxManager_Get_Merge_Lock_Timeout_t)(testlucy_NonMergingIndexManager* self);

typedef void
(*TESTLUCY_NMIxManager_Set_Merge_Lock_Interval_t)(testlucy_NonMergingIndexManager* self, uint32_t timeout);

typedef uint32_t
(*TESTLUCY_NMIxManager_Get_Merge_Lock_Interval_t)(testlucy_NonMergingIndexManager* self);

typedef void
(*TESTLUCY_NMIxManager_Set_Deletion_Lock_Timeout_t)(testlucy_NonMergingIndexManager* self, uint32_t timeout);

typedef uint32_t
(*TESTLUCY_NMIxManager_Get_Deletion_Lock_Timeout_t)(testlucy_NonMergingIndexManager* self);

typedef void
(*TESTLUCY_NMIxManager_Set_Deletion_Lock_Interval_t)(testlucy_NonMergingIndexManager* self, uint32_t timeout);

typedef uint32_t
(*TESTLUCY_NMIxManager_Get_Deletion_Lock_Interval_t)(testlucy_NonMergingIndexManager* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
testlucy_NMIxManager_get_class(testlucy_NonMergingIndexManager *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
testlucy_NMIxManager_get_class_name(testlucy_NonMergingIndexManager *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
testlucy_NMIxManager_is_a(testlucy_NonMergingIndexManager *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_To_Host_OFFSET;
static CFISH_INLINE void*
TESTLUCY_NMIxManager_To_Host(testlucy_NonMergingIndexManager* self, void* vcache) {
    const TESTLUCY_NMIxManager_To_Host_t method = (TESTLUCY_NMIxManager_To_Host_t)cfish_obj_method(self, TESTLUCY_NMIxManager_To_Host_OFFSET);
    return method(self, vcache);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTLUCY_NMIxManager_Clone(testlucy_NonMergingIndexManager* self) {
    const TESTLUCY_NMIxManager_Clone_t method = (TESTLUCY_NMIxManager_Clone_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Clone_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Equals_OFFSET;
static CFISH_INLINE bool
TESTLUCY_NMIxManager_Equals(testlucy_NonMergingIndexManager* self, cfish_Obj* other) {
    const TESTLUCY_NMIxManager_Equals_t method = (TESTLUCY_NMIxManager_Equals_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Equals_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Compare_To_OFFSET;
static CFISH_INLINE int32_t
TESTLUCY_NMIxManager_Compare_To(testlucy_NonMergingIndexManager* self, cfish_Obj* other) {
    const TESTLUCY_NMIxManager_Compare_To_t method = (TESTLUCY_NMIxManager_Compare_To_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Compare_To_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Destroy_OFFSET;
static CFISH_INLINE void
TESTLUCY_NMIxManager_Destroy(testlucy_NonMergingIndexManager* self) {
    const TESTLUCY_NMIxManager_Destroy_t method = (TESTLUCY_NMIxManager_Destroy_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Destroy_OFFSET);
    method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_To_String_OFFSET;
static CFISH_INLINE cfish_String*
TESTLUCY_NMIxManager_To_String(testlucy_NonMergingIndexManager* self) {
    const TESTLUCY_NMIxManager_To_String_t method = (TESTLUCY_NMIxManager_To_String_t)cfish_obj_method(self, TESTLUCY_NMIxManager_To_String_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Set_Folder_OFFSET;
static CFISH_INLINE void
TESTLUCY_NMIxManager_Set_Folder(testlucy_NonMergingIndexManager* self, lucy_Folder* folder) {
    const TESTLUCY_NMIxManager_Set_Folder_t method = (TESTLUCY_NMIxManager_Set_Folder_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Set_Folder_OFFSET);
    method(self, folder);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Get_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
TESTLUCY_NMIxManager_Get_Folder(testlucy_NonMergingIndexManager* self) {
    const TESTLUCY_NMIxManager_Get_Folder_t method = (TESTLUCY_NMIxManager_Get_Folder_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Get_Folder_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Get_Host_OFFSET;
static CFISH_INLINE cfish_String*
TESTLUCY_NMIxManager_Get_Host(testlucy_NonMergingIndexManager* self) {
    const TESTLUCY_NMIxManager_Get_Host_t method = (TESTLUCY_NMIxManager_Get_Host_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Get_Host_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Recycle_OFFSET;
static CFISH_INLINE cfish_Vector*
TESTLUCY_NMIxManager_Recycle(testlucy_NonMergingIndexManager* self, lucy_PolyReader* reader, lucy_DeletionsWriter* del_writer, int64_t cutoff, bool optimize) {
    const TESTLUCY_NMIxManager_Recycle_t method = (TESTLUCY_NMIxManager_Recycle_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Recycle_OFFSET);
    return method(self, reader, del_writer, cutoff, optimize);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Choose_Sparse_OFFSET;
static CFISH_INLINE uint32_t
TESTLUCY_NMIxManager_Choose_Sparse(testlucy_NonMergingIndexManager* self, lucy_I32Array* doc_counts) {
    const TESTLUCY_NMIxManager_Choose_Sparse_t method = (TESTLUCY_NMIxManager_Choose_Sparse_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Choose_Sparse_OFFSET);
    return method(self, doc_counts);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Make_Write_Lock_OFFSET;
static CFISH_INLINE lucy_Lock*
TESTLUCY_NMIxManager_Make_Write_Lock(testlucy_NonMergingIndexManager* self) {
    const TESTLUCY_NMIxManager_Make_Write_Lock_t method = (TESTLUCY_NMIxManager_Make_Write_Lock_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Make_Write_Lock_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Make_Deletion_Lock_OFFSET;
static CFISH_INLINE lucy_Lock*
TESTLUCY_NMIxManager_Make_Deletion_Lock(testlucy_NonMergingIndexManager* self) {
    const TESTLUCY_NMIxManager_Make_Deletion_Lock_t method = (TESTLUCY_NMIxManager_Make_Deletion_Lock_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Make_Deletion_Lock_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Make_Merge_Lock_OFFSET;
static CFISH_INLINE lucy_Lock*
TESTLUCY_NMIxManager_Make_Merge_Lock(testlucy_NonMergingIndexManager* self) {
    const TESTLUCY_NMIxManager_Make_Merge_Lock_t method = (TESTLUCY_NMIxManager_Make_Merge_Lock_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Make_Merge_Lock_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Write_Merge_Data_OFFSET;
static CFISH_INLINE void
TESTLUCY_NMIxManager_Write_Merge_Data(testlucy_NonMergingIndexManager* self, int64_t cutoff) {
    const TESTLUCY_NMIxManager_Write_Merge_Data_t method = (TESTLUCY_NMIxManager_Write_Merge_Data_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Write_Merge_Data_OFFSET);
    method(self, cutoff);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Read_Merge_Data_OFFSET;
static CFISH_INLINE cfish_Hash*
TESTLUCY_NMIxManager_Read_Merge_Data(testlucy_NonMergingIndexManager* self) {
    const TESTLUCY_NMIxManager_Read_Merge_Data_t method = (TESTLUCY_NMIxManager_Read_Merge_Data_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Read_Merge_Data_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Remove_Merge_Data_OFFSET;
static CFISH_INLINE bool
TESTLUCY_NMIxManager_Remove_Merge_Data(testlucy_NonMergingIndexManager* self) {
    const TESTLUCY_NMIxManager_Remove_Merge_Data_t method = (TESTLUCY_NMIxManager_Remove_Merge_Data_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Remove_Merge_Data_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Make_Snapshot_Read_Lock_OFFSET;
static CFISH_INLINE lucy_Lock*
TESTLUCY_NMIxManager_Make_Snapshot_Read_Lock(testlucy_NonMergingIndexManager* self, cfish_String* filename) {
    const TESTLUCY_NMIxManager_Make_Snapshot_Read_Lock_t method = (TESTLUCY_NMIxManager_Make_Snapshot_Read_Lock_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Make_Snapshot_Read_Lock_OFFSET);
    return method(self, filename);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Highest_Seg_Num_OFFSET;
static CFISH_INLINE int64_t
TESTLUCY_NMIxManager_Highest_Seg_Num(testlucy_NonMergingIndexManager* self, lucy_Snapshot* snapshot) {
    const TESTLUCY_NMIxManager_Highest_Seg_Num_t method = (TESTLUCY_NMIxManager_Highest_Seg_Num_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Highest_Seg_Num_OFFSET);
    return method(self, snapshot);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Make_Snapshot_Filename_OFFSET;
static CFISH_INLINE cfish_String*
TESTLUCY_NMIxManager_Make_Snapshot_Filename(testlucy_NonMergingIndexManager* self) {
    const TESTLUCY_NMIxManager_Make_Snapshot_Filename_t method = (TESTLUCY_NMIxManager_Make_Snapshot_Filename_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Make_Snapshot_Filename_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Set_Write_Lock_Timeout_OFFSET;
static CFISH_INLINE void
TESTLUCY_NMIxManager_Set_Write_Lock_Timeout(testlucy_NonMergingIndexManager* self, uint32_t timeout) {
    const TESTLUCY_NMIxManager_Set_Write_Lock_Timeout_t method = (TESTLUCY_NMIxManager_Set_Write_Lock_Timeout_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Set_Write_Lock_Timeout_OFFSET);
    method(self, timeout);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Get_Write_Lock_Timeout_OFFSET;
static CFISH_INLINE uint32_t
TESTLUCY_NMIxManager_Get_Write_Lock_Timeout(testlucy_NonMergingIndexManager* self) {
    const TESTLUCY_NMIxManager_Get_Write_Lock_Timeout_t method = (TESTLUCY_NMIxManager_Get_Write_Lock_Timeout_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Get_Write_Lock_Timeout_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Set_Write_Lock_Interval_OFFSET;
static CFISH_INLINE void
TESTLUCY_NMIxManager_Set_Write_Lock_Interval(testlucy_NonMergingIndexManager* self, uint32_t timeout) {
    const TESTLUCY_NMIxManager_Set_Write_Lock_Interval_t method = (TESTLUCY_NMIxManager_Set_Write_Lock_Interval_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Set_Write_Lock_Interval_OFFSET);
    method(self, timeout);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Get_Write_Lock_Interval_OFFSET;
static CFISH_INLINE uint32_t
TESTLUCY_NMIxManager_Get_Write_Lock_Interval(testlucy_NonMergingIndexManager* self) {
    const TESTLUCY_NMIxManager_Get_Write_Lock_Interval_t method = (TESTLUCY_NMIxManager_Get_Write_Lock_Interval_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Get_Write_Lock_Interval_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Set_Merge_Lock_Timeout_OFFSET;
static CFISH_INLINE void
TESTLUCY_NMIxManager_Set_Merge_Lock_Timeout(testlucy_NonMergingIndexManager* self, uint32_t timeout) {
    const TESTLUCY_NMIxManager_Set_Merge_Lock_Timeout_t method = (TESTLUCY_NMIxManager_Set_Merge_Lock_Timeout_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Set_Merge_Lock_Timeout_OFFSET);
    method(self, timeout);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Get_Merge_Lock_Timeout_OFFSET;
static CFISH_INLINE uint32_t
TESTLUCY_NMIxManager_Get_Merge_Lock_Timeout(testlucy_NonMergingIndexManager* self) {
    const TESTLUCY_NMIxManager_Get_Merge_Lock_Timeout_t method = (TESTLUCY_NMIxManager_Get_Merge_Lock_Timeout_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Get_Merge_Lock_Timeout_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Set_Merge_Lock_Interval_OFFSET;
static CFISH_INLINE void
TESTLUCY_NMIxManager_Set_Merge_Lock_Interval(testlucy_NonMergingIndexManager* self, uint32_t timeout) {
    const TESTLUCY_NMIxManager_Set_Merge_Lock_Interval_t method = (TESTLUCY_NMIxManager_Set_Merge_Lock_Interval_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Set_Merge_Lock_Interval_OFFSET);
    method(self, timeout);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Get_Merge_Lock_Interval_OFFSET;
static CFISH_INLINE uint32_t
TESTLUCY_NMIxManager_Get_Merge_Lock_Interval(testlucy_NonMergingIndexManager* self) {
    const TESTLUCY_NMIxManager_Get_Merge_Lock_Interval_t method = (TESTLUCY_NMIxManager_Get_Merge_Lock_Interval_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Get_Merge_Lock_Interval_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Set_Deletion_Lock_Timeout_OFFSET;
static CFISH_INLINE void
TESTLUCY_NMIxManager_Set_Deletion_Lock_Timeout(testlucy_NonMergingIndexManager* self, uint32_t timeout) {
    const TESTLUCY_NMIxManager_Set_Deletion_Lock_Timeout_t method = (TESTLUCY_NMIxManager_Set_Deletion_Lock_Timeout_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Set_Deletion_Lock_Timeout_OFFSET);
    method(self, timeout);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Get_Deletion_Lock_Timeout_OFFSET;
static CFISH_INLINE uint32_t
TESTLUCY_NMIxManager_Get_Deletion_Lock_Timeout(testlucy_NonMergingIndexManager* self) {
    const TESTLUCY_NMIxManager_Get_Deletion_Lock_Timeout_t method = (TESTLUCY_NMIxManager_Get_Deletion_Lock_Timeout_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Get_Deletion_Lock_Timeout_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Set_Deletion_Lock_Interval_OFFSET;
static CFISH_INLINE void
TESTLUCY_NMIxManager_Set_Deletion_Lock_Interval(testlucy_NonMergingIndexManager* self, uint32_t timeout) {
    const TESTLUCY_NMIxManager_Set_Deletion_Lock_Interval_t method = (TESTLUCY_NMIxManager_Set_Deletion_Lock_Interval_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Set_Deletion_Lock_Interval_OFFSET);
    method(self, timeout);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NMIxManager_Get_Deletion_Lock_Interval_OFFSET;
static CFISH_INLINE uint32_t
TESTLUCY_NMIxManager_Get_Deletion_Lock_Interval(testlucy_NonMergingIndexManager* self) {
    const TESTLUCY_NMIxManager_Get_Deletion_Lock_Interval_t method = (TESTLUCY_NMIxManager_Get_Deletion_Lock_Interval_t)cfish_obj_method(self, TESTLUCY_NMIxManager_Get_Deletion_Lock_Interval_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef TESTLUCY_USE_SHORT_NAMES
  #define NonMergingIndexManager testlucy_NonMergingIndexManager
  #define NONMERGINGINDEXMANAGER TESTLUCY_NONMERGINGINDEXMANAGER
  #define NMIxManager_new testlucy_NMIxManager_new
  #define NMIxManager_init testlucy_NMIxManager_init
  #define NMIxManager_get_class testlucy_NMIxManager_get_class
  #define NMIxManager_get_class_name testlucy_NMIxManager_get_class_name
  #define NMIxManager_is_a testlucy_NMIxManager_is_a
  #define NMIxManager_Recycle_IMP TESTLUCY_NMIxManager_Recycle_IMP
  #define NMIxManager_To_Host TESTLUCY_NMIxManager_To_Host
  #define NMIxManager_To_Host_t TESTLUCY_NMIxManager_To_Host_t
  #define NMIxManager_Clone TESTLUCY_NMIxManager_Clone
  #define NMIxManager_Clone_t TESTLUCY_NMIxManager_Clone_t
  #define NMIxManager_Equals TESTLUCY_NMIxManager_Equals
  #define NMIxManager_Equals_t TESTLUCY_NMIxManager_Equals_t
  #define NMIxManager_Compare_To TESTLUCY_NMIxManager_Compare_To
  #define NMIxManager_Compare_To_t TESTLUCY_NMIxManager_Compare_To_t
  #define NMIxManager_Destroy TESTLUCY_NMIxManager_Destroy
  #define NMIxManager_Destroy_t TESTLUCY_NMIxManager_Destroy_t
  #define NMIxManager_To_String TESTLUCY_NMIxManager_To_String
  #define NMIxManager_To_String_t TESTLUCY_NMIxManager_To_String_t
  #define NMIxManager_Set_Folder TESTLUCY_NMIxManager_Set_Folder
  #define NMIxManager_Set_Folder_t TESTLUCY_NMIxManager_Set_Folder_t
  #define NMIxManager_Get_Folder TESTLUCY_NMIxManager_Get_Folder
  #define NMIxManager_Get_Folder_t TESTLUCY_NMIxManager_Get_Folder_t
  #define NMIxManager_Get_Host TESTLUCY_NMIxManager_Get_Host
  #define NMIxManager_Get_Host_t TESTLUCY_NMIxManager_Get_Host_t
  #define NMIxManager_Recycle TESTLUCY_NMIxManager_Recycle
  #define NMIxManager_Recycle_t TESTLUCY_NMIxManager_Recycle_t
  #define NMIxManager_Choose_Sparse TESTLUCY_NMIxManager_Choose_Sparse
  #define NMIxManager_Choose_Sparse_t TESTLUCY_NMIxManager_Choose_Sparse_t
  #define NMIxManager_Make_Write_Lock TESTLUCY_NMIxManager_Make_Write_Lock
  #define NMIxManager_Make_Write_Lock_t TESTLUCY_NMIxManager_Make_Write_Lock_t
  #define NMIxManager_Make_Deletion_Lock TESTLUCY_NMIxManager_Make_Deletion_Lock
  #define NMIxManager_Make_Deletion_Lock_t TESTLUCY_NMIxManager_Make_Deletion_Lock_t
  #define NMIxManager_Make_Merge_Lock TESTLUCY_NMIxManager_Make_Merge_Lock
  #define NMIxManager_Make_Merge_Lock_t TESTLUCY_NMIxManager_Make_Merge_Lock_t
  #define NMIxManager_Write_Merge_Data TESTLUCY_NMIxManager_Write_Merge_Data
  #define NMIxManager_Write_Merge_Data_t TESTLUCY_NMIxManager_Write_Merge_Data_t
  #define NMIxManager_Read_Merge_Data TESTLUCY_NMIxManager_Read_Merge_Data
  #define NMIxManager_Read_Merge_Data_t TESTLUCY_NMIxManager_Read_Merge_Data_t
  #define NMIxManager_Remove_Merge_Data TESTLUCY_NMIxManager_Remove_Merge_Data
  #define NMIxManager_Remove_Merge_Data_t TESTLUCY_NMIxManager_Remove_Merge_Data_t
  #define NMIxManager_Make_Snapshot_Read_Lock TESTLUCY_NMIxManager_Make_Snapshot_Read_Lock
  #define NMIxManager_Make_Snapshot_Read_Lock_t TESTLUCY_NMIxManager_Make_Snapshot_Read_Lock_t
  #define NMIxManager_Highest_Seg_Num TESTLUCY_NMIxManager_Highest_Seg_Num
  #define NMIxManager_Highest_Seg_Num_t TESTLUCY_NMIxManager_Highest_Seg_Num_t
  #define NMIxManager_Make_Snapshot_Filename TESTLUCY_NMIxManager_Make_Snapshot_Filename
  #define NMIxManager_Make_Snapshot_Filename_t TESTLUCY_NMIxManager_Make_Snapshot_Filename_t
  #define NMIxManager_Set_Write_Lock_Timeout TESTLUCY_NMIxManager_Set_Write_Lock_Timeout
  #define NMIxManager_Set_Write_Lock_Timeout_t TESTLUCY_NMIxManager_Set_Write_Lock_Timeout_t
  #define NMIxManager_Get_Write_Lock_Timeout TESTLUCY_NMIxManager_Get_Write_Lock_Timeout
  #define NMIxManager_Get_Write_Lock_Timeout_t TESTLUCY_NMIxManager_Get_Write_Lock_Timeout_t
  #define NMIxManager_Set_Write_Lock_Interval TESTLUCY_NMIxManager_Set_Write_Lock_Interval
  #define NMIxManager_Set_Write_Lock_Interval_t TESTLUCY_NMIxManager_Set_Write_Lock_Interval_t
  #define NMIxManager_Get_Write_Lock_Interval TESTLUCY_NMIxManager_Get_Write_Lock_Interval
  #define NMIxManager_Get_Write_Lock_Interval_t TESTLUCY_NMIxManager_Get_Write_Lock_Interval_t
  #define NMIxManager_Set_Merge_Lock_Timeout TESTLUCY_NMIxManager_Set_Merge_Lock_Timeout
  #define NMIxManager_Set_Merge_Lock_Timeout_t TESTLUCY_NMIxManager_Set_Merge_Lock_Timeout_t
  #define NMIxManager_Get_Merge_Lock_Timeout TESTLUCY_NMIxManager_Get_Merge_Lock_Timeout
  #define NMIxManager_Get_Merge_Lock_Timeout_t TESTLUCY_NMIxManager_Get_Merge_Lock_Timeout_t
  #define NMIxManager_Set_Merge_Lock_Interval TESTLUCY_NMIxManager_Set_Merge_Lock_Interval
  #define NMIxManager_Set_Merge_Lock_Interval_t TESTLUCY_NMIxManager_Set_Merge_Lock_Interval_t
  #define NMIxManager_Get_Merge_Lock_Interval TESTLUCY_NMIxManager_Get_Merge_Lock_Interval
  #define NMIxManager_Get_Merge_Lock_Interval_t TESTLUCY_NMIxManager_Get_Merge_Lock_Interval_t
  #define NMIxManager_Set_Deletion_Lock_Timeout TESTLUCY_NMIxManager_Set_Deletion_Lock_Timeout
  #define NMIxManager_Set_Deletion_Lock_Timeout_t TESTLUCY_NMIxManager_Set_Deletion_Lock_Timeout_t
  #define NMIxManager_Get_Deletion_Lock_Timeout TESTLUCY_NMIxManager_Get_Deletion_Lock_Timeout
  #define NMIxManager_Get_Deletion_Lock_Timeout_t TESTLUCY_NMIxManager_Get_Deletion_Lock_Timeout_t
  #define NMIxManager_Set_Deletion_Lock_Interval TESTLUCY_NMIxManager_Set_Deletion_Lock_Interval
  #define NMIxManager_Set_Deletion_Lock_Interval_t TESTLUCY_NMIxManager_Set_Deletion_Lock_Interval_t
  #define NMIxManager_Get_Deletion_Lock_Interval TESTLUCY_NMIxManager_Get_Deletion_Lock_Interval
  #define NMIxManager_Get_Deletion_Lock_Interval_t TESTLUCY_NMIxManager_Get_Deletion_Lock_Interval_t
#endif /* TESTLUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_TEST_INDEX_TESTSORTWRITER */




