/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_TEST_UTIL_TESTPRIORITYQUEUE
#define H_LUCY_TEST_UTIL_TESTPRIORITYQUEUE 1


#ifdef __cplusplus
extern "C" {
#endif

#include "testlucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Util/PriorityQueue.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_TESTLUCY_NUMPRIORITYQUEUE
extern uint32_t testlucy_NumPriQ_IVARS_OFFSET;
typedef struct testlucy_NumPriorityQueueIVARS testlucy_NumPriorityQueueIVARS;
static CFISH_INLINE testlucy_NumPriorityQueueIVARS*
testlucy_NumPriQ_IVARS(testlucy_NumPriorityQueue *self) {
   char *ptr = (char*)self + testlucy_NumPriQ_IVARS_OFFSET;
   return (testlucy_NumPriorityQueueIVARS*)ptr;
}
#ifdef TESTLUCY_USE_SHORT_NAMES
  #define NumPriorityQueueIVARS testlucy_NumPriorityQueueIVARS
  #define NumPriQ_IVARS testlucy_NumPriQ_IVARS
#endif


#endif /* C_TESTLUCY_NUMPRIORITYQUEUE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

TESTLUCY_VISIBLE testlucy_NumPriorityQueue*
testlucy_NumPriQ_new(uint32_t max_size);

bool
TESTLUCY_NumPriQ_Less_Than_IMP(testlucy_NumPriorityQueue* self, cfish_Obj* a, cfish_Obj* b);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*TESTLUCY_NumPriQ_To_Host_t)(testlucy_NumPriorityQueue* self, void* vcache);

typedef cfish_Obj*
(*TESTLUCY_NumPriQ_Clone_t)(testlucy_NumPriorityQueue* self);

typedef bool
(*TESTLUCY_NumPriQ_Equals_t)(testlucy_NumPriorityQueue* self, cfish_Obj* other);

typedef int32_t
(*TESTLUCY_NumPriQ_Compare_To_t)(testlucy_NumPriorityQueue* self, cfish_Obj* other);

typedef void
(*TESTLUCY_NumPriQ_Destroy_t)(testlucy_NumPriorityQueue* self);

typedef cfish_String*
(*TESTLUCY_NumPriQ_To_String_t)(testlucy_NumPriorityQueue* self);

typedef bool
(*TESTLUCY_NumPriQ_Less_Than_t)(testlucy_NumPriorityQueue* self, cfish_Obj* a, cfish_Obj* b);

typedef bool
(*TESTLUCY_NumPriQ_Insert_t)(testlucy_NumPriorityQueue* self, cfish_Obj* element);

typedef cfish_Obj*
(*TESTLUCY_NumPriQ_Jostle_t)(testlucy_NumPriorityQueue* self, cfish_Obj* element);

typedef cfish_Obj*
(*TESTLUCY_NumPriQ_Pop_t)(testlucy_NumPriorityQueue* self);

typedef cfish_Vector*
(*TESTLUCY_NumPriQ_Pop_All_t)(testlucy_NumPriorityQueue* self);

typedef cfish_Obj*
(*TESTLUCY_NumPriQ_Peek_t)(testlucy_NumPriorityQueue* self);

typedef uint32_t
(*TESTLUCY_NumPriQ_Get_Size_t)(testlucy_NumPriorityQueue* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
testlucy_NumPriQ_get_class(testlucy_NumPriorityQueue *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
testlucy_NumPriQ_get_class_name(testlucy_NumPriorityQueue *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
testlucy_NumPriQ_is_a(testlucy_NumPriorityQueue *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NumPriQ_To_Host_OFFSET;
static CFISH_INLINE void*
TESTLUCY_NumPriQ_To_Host(testlucy_NumPriorityQueue* self, void* vcache) {
    const TESTLUCY_NumPriQ_To_Host_t method = (TESTLUCY_NumPriQ_To_Host_t)cfish_obj_method(self, TESTLUCY_NumPriQ_To_Host_OFFSET);
    return method(self, vcache);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NumPriQ_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTLUCY_NumPriQ_Clone(testlucy_NumPriorityQueue* self) {
    const TESTLUCY_NumPriQ_Clone_t method = (TESTLUCY_NumPriQ_Clone_t)cfish_obj_method(self, TESTLUCY_NumPriQ_Clone_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NumPriQ_Equals_OFFSET;
static CFISH_INLINE bool
TESTLUCY_NumPriQ_Equals(testlucy_NumPriorityQueue* self, cfish_Obj* other) {
    const TESTLUCY_NumPriQ_Equals_t method = (TESTLUCY_NumPriQ_Equals_t)cfish_obj_method(self, TESTLUCY_NumPriQ_Equals_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NumPriQ_Compare_To_OFFSET;
static CFISH_INLINE int32_t
TESTLUCY_NumPriQ_Compare_To(testlucy_NumPriorityQueue* self, cfish_Obj* other) {
    const TESTLUCY_NumPriQ_Compare_To_t method = (TESTLUCY_NumPriQ_Compare_To_t)cfish_obj_method(self, TESTLUCY_NumPriQ_Compare_To_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NumPriQ_Destroy_OFFSET;
static CFISH_INLINE void
TESTLUCY_NumPriQ_Destroy(testlucy_NumPriorityQueue* self) {
    const TESTLUCY_NumPriQ_Destroy_t method = (TESTLUCY_NumPriQ_Destroy_t)cfish_obj_method(self, TESTLUCY_NumPriQ_Destroy_OFFSET);
    method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NumPriQ_To_String_OFFSET;
static CFISH_INLINE cfish_String*
TESTLUCY_NumPriQ_To_String(testlucy_NumPriorityQueue* self) {
    const TESTLUCY_NumPriQ_To_String_t method = (TESTLUCY_NumPriQ_To_String_t)cfish_obj_method(self, TESTLUCY_NumPriQ_To_String_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NumPriQ_Less_Than_OFFSET;
static CFISH_INLINE bool
TESTLUCY_NumPriQ_Less_Than(testlucy_NumPriorityQueue* self, cfish_Obj* a, cfish_Obj* b) {
    const TESTLUCY_NumPriQ_Less_Than_t method = (TESTLUCY_NumPriQ_Less_Than_t)cfish_obj_method(self, TESTLUCY_NumPriQ_Less_Than_OFFSET);
    return method(self, a, b);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NumPriQ_Insert_OFFSET;
static CFISH_INLINE bool
TESTLUCY_NumPriQ_Insert(testlucy_NumPriorityQueue* self, cfish_Obj* element) {
    const TESTLUCY_NumPriQ_Insert_t method = (TESTLUCY_NumPriQ_Insert_t)cfish_obj_method(self, TESTLUCY_NumPriQ_Insert_OFFSET);
    return method(self, element);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NumPriQ_Jostle_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTLUCY_NumPriQ_Jostle(testlucy_NumPriorityQueue* self, cfish_Obj* element) {
    const TESTLUCY_NumPriQ_Jostle_t method = (TESTLUCY_NumPriQ_Jostle_t)cfish_obj_method(self, TESTLUCY_NumPriQ_Jostle_OFFSET);
    return method(self, element);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NumPriQ_Pop_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTLUCY_NumPriQ_Pop(testlucy_NumPriorityQueue* self) {
    const TESTLUCY_NumPriQ_Pop_t method = (TESTLUCY_NumPriQ_Pop_t)cfish_obj_method(self, TESTLUCY_NumPriQ_Pop_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NumPriQ_Pop_All_OFFSET;
static CFISH_INLINE cfish_Vector*
TESTLUCY_NumPriQ_Pop_All(testlucy_NumPriorityQueue* self) {
    const TESTLUCY_NumPriQ_Pop_All_t method = (TESTLUCY_NumPriQ_Pop_All_t)cfish_obj_method(self, TESTLUCY_NumPriQ_Pop_All_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NumPriQ_Peek_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTLUCY_NumPriQ_Peek(testlucy_NumPriorityQueue* self) {
    const TESTLUCY_NumPriQ_Peek_t method = (TESTLUCY_NumPriQ_Peek_t)cfish_obj_method(self, TESTLUCY_NumPriQ_Peek_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_NumPriQ_Get_Size_OFFSET;
static CFISH_INLINE uint32_t
TESTLUCY_NumPriQ_Get_Size(testlucy_NumPriorityQueue* self) {
    const TESTLUCY_NumPriQ_Get_Size_t method = (TESTLUCY_NumPriQ_Get_Size_t)cfish_obj_method(self, TESTLUCY_NumPriQ_Get_Size_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef TESTLUCY_USE_SHORT_NAMES
  #define NumPriorityQueue testlucy_NumPriorityQueue
  #define NUMPRIORITYQUEUE TESTLUCY_NUMPRIORITYQUEUE
  #define NumPriQ_new testlucy_NumPriQ_new
  #define NumPriQ_get_class testlucy_NumPriQ_get_class
  #define NumPriQ_get_class_name testlucy_NumPriQ_get_class_name
  #define NumPriQ_is_a testlucy_NumPriQ_is_a
  #define NumPriQ_Less_Than_IMP TESTLUCY_NumPriQ_Less_Than_IMP
  #define NumPriQ_To_Host TESTLUCY_NumPriQ_To_Host
  #define NumPriQ_To_Host_t TESTLUCY_NumPriQ_To_Host_t
  #define NumPriQ_Clone TESTLUCY_NumPriQ_Clone
  #define NumPriQ_Clone_t TESTLUCY_NumPriQ_Clone_t
  #define NumPriQ_Equals TESTLUCY_NumPriQ_Equals
  #define NumPriQ_Equals_t TESTLUCY_NumPriQ_Equals_t
  #define NumPriQ_Compare_To TESTLUCY_NumPriQ_Compare_To
  #define NumPriQ_Compare_To_t TESTLUCY_NumPriQ_Compare_To_t
  #define NumPriQ_Destroy TESTLUCY_NumPriQ_Destroy
  #define NumPriQ_Destroy_t TESTLUCY_NumPriQ_Destroy_t
  #define NumPriQ_To_String TESTLUCY_NumPriQ_To_String
  #define NumPriQ_To_String_t TESTLUCY_NumPriQ_To_String_t
  #define NumPriQ_Less_Than TESTLUCY_NumPriQ_Less_Than
  #define NumPriQ_Less_Than_t TESTLUCY_NumPriQ_Less_Than_t
  #define NumPriQ_Insert TESTLUCY_NumPriQ_Insert
  #define NumPriQ_Insert_t TESTLUCY_NumPriQ_Insert_t
  #define NumPriQ_Jostle TESTLUCY_NumPriQ_Jostle
  #define NumPriQ_Jostle_t TESTLUCY_NumPriQ_Jostle_t
  #define NumPriQ_Pop TESTLUCY_NumPriQ_Pop
  #define NumPriQ_Pop_t TESTLUCY_NumPriQ_Pop_t
  #define NumPriQ_Pop_All TESTLUCY_NumPriQ_Pop_All
  #define NumPriQ_Pop_All_t TESTLUCY_NumPriQ_Pop_All_t
  #define NumPriQ_Peek TESTLUCY_NumPriQ_Peek
  #define NumPriQ_Peek_t TESTLUCY_NumPriQ_Peek_t
  #define NumPriQ_Get_Size TESTLUCY_NumPriQ_Get_Size
  #define NumPriQ_Get_Size_t TESTLUCY_NumPriQ_Get_Size_t
#endif /* TESTLUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Clownfish/TestHarness/TestBatch.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_TESTLUCY_TESTPRIORITYQUEUE
extern uint32_t testlucy_TestPriQ_IVARS_OFFSET;
typedef struct testlucy_TestPriorityQueueIVARS testlucy_TestPriorityQueueIVARS;
static CFISH_INLINE testlucy_TestPriorityQueueIVARS*
testlucy_TestPriQ_IVARS(testlucy_TestPriorityQueue *self) {
   char *ptr = (char*)self + testlucy_TestPriQ_IVARS_OFFSET;
   return (testlucy_TestPriorityQueueIVARS*)ptr;
}
#ifdef TESTLUCY_USE_SHORT_NAMES
  #define TestPriorityQueueIVARS testlucy_TestPriorityQueueIVARS
  #define TestPriQ_IVARS testlucy_TestPriQ_IVARS
#endif


#endif /* C_TESTLUCY_TESTPRIORITYQUEUE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

TESTLUCY_VISIBLE testlucy_TestPriorityQueue*
testlucy_TestPriQ_new(void);

void
TESTLUCY_TestPriQ_Run_IMP(testlucy_TestPriorityQueue* self, cfish_TestBatchRunner* runner);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*TESTLUCY_TestPriQ_To_Host_t)(testlucy_TestPriorityQueue* self, void* vcache);

typedef cfish_Obj*
(*TESTLUCY_TestPriQ_Clone_t)(testlucy_TestPriorityQueue* self);

typedef bool
(*TESTLUCY_TestPriQ_Equals_t)(testlucy_TestPriorityQueue* self, cfish_Obj* other);

typedef int32_t
(*TESTLUCY_TestPriQ_Compare_To_t)(testlucy_TestPriorityQueue* self, cfish_Obj* other);

typedef void
(*TESTLUCY_TestPriQ_Destroy_t)(testlucy_TestPriorityQueue* self);

typedef cfish_String*
(*TESTLUCY_TestPriQ_To_String_t)(testlucy_TestPriorityQueue* self);

typedef void
(*TESTLUCY_TestPriQ_Run_t)(testlucy_TestPriorityQueue* self, cfish_TestBatchRunner* runner);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
testlucy_TestPriQ_get_class(testlucy_TestPriorityQueue *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
testlucy_TestPriQ_get_class_name(testlucy_TestPriorityQueue *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
testlucy_TestPriQ_is_a(testlucy_TestPriorityQueue *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestPriQ_To_Host_OFFSET;
static CFISH_INLINE void*
TESTLUCY_TestPriQ_To_Host(testlucy_TestPriorityQueue* self, void* vcache) {
    const TESTLUCY_TestPriQ_To_Host_t method = (TESTLUCY_TestPriQ_To_Host_t)cfish_obj_method(self, TESTLUCY_TestPriQ_To_Host_OFFSET);
    return method(self, vcache);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestPriQ_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTLUCY_TestPriQ_Clone(testlucy_TestPriorityQueue* self) {
    const TESTLUCY_TestPriQ_Clone_t method = (TESTLUCY_TestPriQ_Clone_t)cfish_obj_method(self, TESTLUCY_TestPriQ_Clone_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestPriQ_Equals_OFFSET;
static CFISH_INLINE bool
TESTLUCY_TestPriQ_Equals(testlucy_TestPriorityQueue* self, cfish_Obj* other) {
    const TESTLUCY_TestPriQ_Equals_t method = (TESTLUCY_TestPriQ_Equals_t)cfish_obj_method(self, TESTLUCY_TestPriQ_Equals_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestPriQ_Compare_To_OFFSET;
static CFISH_INLINE int32_t
TESTLUCY_TestPriQ_Compare_To(testlucy_TestPriorityQueue* self, cfish_Obj* other) {
    const TESTLUCY_TestPriQ_Compare_To_t method = (TESTLUCY_TestPriQ_Compare_To_t)cfish_obj_method(self, TESTLUCY_TestPriQ_Compare_To_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestPriQ_Destroy_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestPriQ_Destroy(testlucy_TestPriorityQueue* self) {
    const TESTLUCY_TestPriQ_Destroy_t method = (TESTLUCY_TestPriQ_Destroy_t)cfish_obj_method(self, TESTLUCY_TestPriQ_Destroy_OFFSET);
    method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestPriQ_To_String_OFFSET;
static CFISH_INLINE cfish_String*
TESTLUCY_TestPriQ_To_String(testlucy_TestPriorityQueue* self) {
    const TESTLUCY_TestPriQ_To_String_t method = (TESTLUCY_TestPriQ_To_String_t)cfish_obj_method(self, TESTLUCY_TestPriQ_To_String_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestPriQ_Run_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestPriQ_Run(testlucy_TestPriorityQueue* self, cfish_TestBatchRunner* runner) {
    const TESTLUCY_TestPriQ_Run_t method = (TESTLUCY_TestPriQ_Run_t)cfish_obj_method(self, TESTLUCY_TestPriQ_Run_OFFSET);
    method(self, runner);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef TESTLUCY_USE_SHORT_NAMES
  #define TestPriorityQueue testlucy_TestPriorityQueue
  #define TESTPRIORITYQUEUE TESTLUCY_TESTPRIORITYQUEUE
  #define TestPriQ_new testlucy_TestPriQ_new
  #define TestPriQ_get_class testlucy_TestPriQ_get_class
  #define TestPriQ_get_class_name testlucy_TestPriQ_get_class_name
  #define TestPriQ_is_a testlucy_TestPriQ_is_a
  #define TestPriQ_Run_IMP TESTLUCY_TestPriQ_Run_IMP
  #define TestPriQ_To_Host TESTLUCY_TestPriQ_To_Host
  #define TestPriQ_To_Host_t TESTLUCY_TestPriQ_To_Host_t
  #define TestPriQ_Clone TESTLUCY_TestPriQ_Clone
  #define TestPriQ_Clone_t TESTLUCY_TestPriQ_Clone_t
  #define TestPriQ_Equals TESTLUCY_TestPriQ_Equals
  #define TestPriQ_Equals_t TESTLUCY_TestPriQ_Equals_t
  #define TestPriQ_Compare_To TESTLUCY_TestPriQ_Compare_To
  #define TestPriQ_Compare_To_t TESTLUCY_TestPriQ_Compare_To_t
  #define TestPriQ_Destroy TESTLUCY_TestPriQ_Destroy
  #define TestPriQ_Destroy_t TESTLUCY_TestPriQ_Destroy_t
  #define TestPriQ_To_String TESTLUCY_TestPriQ_To_String
  #define TestPriQ_To_String_t TESTLUCY_TestPriQ_To_String_t
  #define TestPriQ_Run TESTLUCY_TestPriQ_Run
  #define TestPriQ_Run_t TESTLUCY_TestPriQ_Run_t
#endif /* TESTLUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_TEST_UTIL_TESTPRIORITYQUEUE */




