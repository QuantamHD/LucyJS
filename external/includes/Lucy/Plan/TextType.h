/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_PLAN_TEXTTYPE
#define H_LUCY_PLAN_TEXTTYPE 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Plan/FieldType.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_TEXTTYPE
extern uint32_t lucy_TextType_IVARS_OFFSET;
typedef struct lucy_TextTypeIVARS lucy_TextTypeIVARS;
static CFISH_INLINE lucy_TextTypeIVARS*
lucy_TextType_IVARS(lucy_TextType *self) {
   char *ptr = (char*)self + lucy_TextType_IVARS_OFFSET;
   return (lucy_TextTypeIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define TextTypeIVARS lucy_TextTypeIVARS
  #define TextType_IVARS lucy_TextType_IVARS
#endif

struct lucy_TextTypeIVARS {
    float boost;
    bool indexed;
    bool stored;
    bool sortable;
};

#endif /* C_LUCY_TEXTTYPE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

lucy_TermStepper*
LUCY_TextType_Make_Term_Stepper_IMP(lucy_TextType* self);

int8_t
LUCY_TextType_Primitive_ID_IMP(lucy_TextType* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_TextType_To_Host_t)(lucy_TextType* self, void* vcache);

typedef cfish_Obj*
(*LUCY_TextType_Clone_t)(lucy_TextType* self);

typedef bool
(*LUCY_TextType_Equals_t)(lucy_TextType* self, cfish_Obj* other);

typedef int32_t
(*LUCY_TextType_Compare_To_t)(lucy_TextType* self, cfish_Obj* other);

typedef void
(*LUCY_TextType_Destroy_t)(lucy_TextType* self);

typedef cfish_String*
(*LUCY_TextType_To_String_t)(lucy_TextType* self);

typedef void
(*LUCY_TextType_Set_Boost_t)(lucy_TextType* self, float boost);

typedef float
(*LUCY_TextType_Get_Boost_t)(lucy_TextType* self);

typedef void
(*LUCY_TextType_Set_Indexed_t)(lucy_TextType* self, bool indexed);

typedef bool
(*LUCY_TextType_Indexed_t)(lucy_TextType* self);

typedef void
(*LUCY_TextType_Set_Stored_t)(lucy_TextType* self, bool stored);

typedef bool
(*LUCY_TextType_Stored_t)(lucy_TextType* self);

typedef void
(*LUCY_TextType_Set_Sortable_t)(lucy_TextType* self, bool sortable);

typedef bool
(*LUCY_TextType_Sortable_t)(lucy_TextType* self);

typedef bool
(*LUCY_TextType_Binary_t)(lucy_TextType* self);

typedef int32_t
(*LUCY_TextType_Compare_Values_t)(lucy_TextType* self, cfish_Obj* a, cfish_Obj* b);

typedef lucy_TermStepper*
(*LUCY_TextType_Make_Term_Stepper_t)(lucy_TextType* self);

typedef int8_t
(*LUCY_TextType_Primitive_ID_t)(lucy_TextType* self);

typedef cfish_Hash*
(*LUCY_TextType_Dump_For_Schema_t)(lucy_TextType* self);

typedef cfish_Obj*
(*LUCY_TextType_Dump_t)(lucy_TextType* self);

typedef cfish_Obj*
(*LUCY_TextType_Load_t)(lucy_TextType* self, cfish_Obj* dump);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_TextType_get_class(lucy_TextType *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_TextType_get_class_name(lucy_TextType *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_TextType_is_a(lucy_TextType *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_TextType_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_TextType_To_Host(lucy_TextType* self, void* vcache) {
    const LUCY_TextType_To_Host_t method = (LUCY_TextType_To_Host_t)cfish_obj_method(self, LUCY_TextType_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_TextType_Clone(lucy_TextType* self) {
    const LUCY_TextType_Clone_t method = (LUCY_TextType_Clone_t)cfish_obj_method(self, LUCY_TextType_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_TextType_Equals(lucy_TextType* self, cfish_Obj* other) {
    const LUCY_TextType_Equals_t method = (LUCY_TextType_Equals_t)cfish_obj_method(self, LUCY_TextType_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_TextType_Compare_To(lucy_TextType* self, cfish_Obj* other) {
    const LUCY_TextType_Compare_To_t method = (LUCY_TextType_Compare_To_t)cfish_obj_method(self, LUCY_TextType_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_TextType_Destroy(lucy_TextType* self) {
    const LUCY_TextType_Destroy_t method = (LUCY_TextType_Destroy_t)cfish_obj_method(self, LUCY_TextType_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_TextType_To_String(lucy_TextType* self) {
    const LUCY_TextType_To_String_t method = (LUCY_TextType_To_String_t)cfish_obj_method(self, LUCY_TextType_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_TextType_Set_Boost(lucy_TextType* self, float boost) {
    const LUCY_TextType_Set_Boost_t method = (LUCY_TextType_Set_Boost_t)cfish_obj_method(self, LUCY_TextType_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_TextType_Get_Boost(lucy_TextType* self) {
    const LUCY_TextType_Get_Boost_t method = (LUCY_TextType_Get_Boost_t)cfish_obj_method(self, LUCY_TextType_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Set_Indexed_OFFSET;
static CFISH_INLINE void
LUCY_TextType_Set_Indexed(lucy_TextType* self, bool indexed) {
    const LUCY_TextType_Set_Indexed_t method = (LUCY_TextType_Set_Indexed_t)cfish_obj_method(self, LUCY_TextType_Set_Indexed_OFFSET);
    method(self, indexed);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Indexed_OFFSET;
static CFISH_INLINE bool
LUCY_TextType_Indexed(lucy_TextType* self) {
    const LUCY_TextType_Indexed_t method = (LUCY_TextType_Indexed_t)cfish_obj_method(self, LUCY_TextType_Indexed_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Set_Stored_OFFSET;
static CFISH_INLINE void
LUCY_TextType_Set_Stored(lucy_TextType* self, bool stored) {
    const LUCY_TextType_Set_Stored_t method = (LUCY_TextType_Set_Stored_t)cfish_obj_method(self, LUCY_TextType_Set_Stored_OFFSET);
    method(self, stored);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Stored_OFFSET;
static CFISH_INLINE bool
LUCY_TextType_Stored(lucy_TextType* self) {
    const LUCY_TextType_Stored_t method = (LUCY_TextType_Stored_t)cfish_obj_method(self, LUCY_TextType_Stored_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Set_Sortable_OFFSET;
static CFISH_INLINE void
LUCY_TextType_Set_Sortable(lucy_TextType* self, bool sortable) {
    const LUCY_TextType_Set_Sortable_t method = (LUCY_TextType_Set_Sortable_t)cfish_obj_method(self, LUCY_TextType_Set_Sortable_OFFSET);
    method(self, sortable);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Sortable_OFFSET;
static CFISH_INLINE bool
LUCY_TextType_Sortable(lucy_TextType* self) {
    const LUCY_TextType_Sortable_t method = (LUCY_TextType_Sortable_t)cfish_obj_method(self, LUCY_TextType_Sortable_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Binary_OFFSET;
static CFISH_INLINE bool
LUCY_TextType_Binary(lucy_TextType* self) {
    const LUCY_TextType_Binary_t method = (LUCY_TextType_Binary_t)cfish_obj_method(self, LUCY_TextType_Binary_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Compare_Values_OFFSET;
static CFISH_INLINE int32_t
LUCY_TextType_Compare_Values(lucy_TextType* self, cfish_Obj* a, cfish_Obj* b) {
    const LUCY_TextType_Compare_Values_t method = (LUCY_TextType_Compare_Values_t)cfish_obj_method(self, LUCY_TextType_Compare_Values_OFFSET);
    return method(self, a, b);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Make_Term_Stepper_OFFSET;
static CFISH_INLINE lucy_TermStepper*
LUCY_TextType_Make_Term_Stepper(lucy_TextType* self) {
    const LUCY_TextType_Make_Term_Stepper_t method = (LUCY_TextType_Make_Term_Stepper_t)cfish_obj_method(self, LUCY_TextType_Make_Term_Stepper_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Primitive_ID_OFFSET;
static CFISH_INLINE int8_t
LUCY_TextType_Primitive_ID(lucy_TextType* self) {
    const LUCY_TextType_Primitive_ID_t method = (LUCY_TextType_Primitive_ID_t)cfish_obj_method(self, LUCY_TextType_Primitive_ID_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Dump_For_Schema_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_TextType_Dump_For_Schema(lucy_TextType* self) {
    const LUCY_TextType_Dump_For_Schema_t method = (LUCY_TextType_Dump_For_Schema_t)cfish_obj_method(self, LUCY_TextType_Dump_For_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Dump_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_TextType_Dump(lucy_TextType* self) {
    const LUCY_TextType_Dump_t method = (LUCY_TextType_Dump_t)cfish_obj_method(self, LUCY_TextType_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TextType_Load_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_TextType_Load(lucy_TextType* self, cfish_Obj* dump) {
    const LUCY_TextType_Load_t method = (LUCY_TextType_Load_t)cfish_obj_method(self, LUCY_TextType_Load_OFFSET);
    return method(self, dump);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define TextType lucy_TextType
  #define TEXTTYPE LUCY_TEXTTYPE
  #define TextType_get_class lucy_TextType_get_class
  #define TextType_get_class_name lucy_TextType_get_class_name
  #define TextType_is_a lucy_TextType_is_a
  #define TextType_Make_Term_Stepper_IMP LUCY_TextType_Make_Term_Stepper_IMP
  #define TextType_Primitive_ID_IMP LUCY_TextType_Primitive_ID_IMP
  #define TextType_To_Host LUCY_TextType_To_Host
  #define TextType_To_Host_t LUCY_TextType_To_Host_t
  #define TextType_Clone LUCY_TextType_Clone
  #define TextType_Clone_t LUCY_TextType_Clone_t
  #define TextType_Equals LUCY_TextType_Equals
  #define TextType_Equals_t LUCY_TextType_Equals_t
  #define TextType_Compare_To LUCY_TextType_Compare_To
  #define TextType_Compare_To_t LUCY_TextType_Compare_To_t
  #define TextType_Destroy LUCY_TextType_Destroy
  #define TextType_Destroy_t LUCY_TextType_Destroy_t
  #define TextType_To_String LUCY_TextType_To_String
  #define TextType_To_String_t LUCY_TextType_To_String_t
  #define TextType_Set_Boost LUCY_TextType_Set_Boost
  #define TextType_Set_Boost_t LUCY_TextType_Set_Boost_t
  #define TextType_Get_Boost LUCY_TextType_Get_Boost
  #define TextType_Get_Boost_t LUCY_TextType_Get_Boost_t
  #define TextType_Set_Indexed LUCY_TextType_Set_Indexed
  #define TextType_Set_Indexed_t LUCY_TextType_Set_Indexed_t
  #define TextType_Indexed LUCY_TextType_Indexed
  #define TextType_Indexed_t LUCY_TextType_Indexed_t
  #define TextType_Set_Stored LUCY_TextType_Set_Stored
  #define TextType_Set_Stored_t LUCY_TextType_Set_Stored_t
  #define TextType_Stored LUCY_TextType_Stored
  #define TextType_Stored_t LUCY_TextType_Stored_t
  #define TextType_Set_Sortable LUCY_TextType_Set_Sortable
  #define TextType_Set_Sortable_t LUCY_TextType_Set_Sortable_t
  #define TextType_Sortable LUCY_TextType_Sortable
  #define TextType_Sortable_t LUCY_TextType_Sortable_t
  #define TextType_Binary LUCY_TextType_Binary
  #define TextType_Binary_t LUCY_TextType_Binary_t
  #define TextType_Compare_Values LUCY_TextType_Compare_Values
  #define TextType_Compare_Values_t LUCY_TextType_Compare_Values_t
  #define TextType_Make_Term_Stepper LUCY_TextType_Make_Term_Stepper
  #define TextType_Make_Term_Stepper_t LUCY_TextType_Make_Term_Stepper_t
  #define TextType_Primitive_ID LUCY_TextType_Primitive_ID
  #define TextType_Primitive_ID_t LUCY_TextType_Primitive_ID_t
  #define TextType_Dump_For_Schema LUCY_TextType_Dump_For_Schema
  #define TextType_Dump_For_Schema_t LUCY_TextType_Dump_For_Schema_t
  #define TextType_Dump LUCY_TextType_Dump
  #define TextType_Dump_t LUCY_TextType_Dump_t
  #define TextType_Load LUCY_TextType_Load
  #define TextType_Load_t LUCY_TextType_Load_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy/Index/TermStepper.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_TEXTTERMSTEPPER
extern uint32_t lucy_TextTermStepper_IVARS_OFFSET;
typedef struct lucy_TextTermStepperIVARS lucy_TextTermStepperIVARS;
static CFISH_INLINE lucy_TextTermStepperIVARS*
lucy_TextTermStepper_IVARS(lucy_TextTermStepper *self) {
   char *ptr = (char*)self + lucy_TextTermStepper_IVARS_OFFSET;
   return (lucy_TextTermStepperIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define TextTermStepperIVARS lucy_TextTermStepperIVARS
  #define TextTermStepper_IVARS lucy_TextTermStepper_IVARS
#endif

struct lucy_TextTermStepperIVARS {
    cfish_Obj* value;
    cfish_ByteBuf* bytebuf;
};

#endif /* C_LUCY_TEXTTERMSTEPPER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_TextTermStepper*
lucy_TextTermStepper_new(void);

LUCY_VISIBLE lucy_TextTermStepper*
lucy_TextTermStepper_init(lucy_TextTermStepper* self);

void
LUCY_TextTermStepper_Destroy_IMP(lucy_TextTermStepper* self);

void
LUCY_TextTermStepper_Reset_IMP(lucy_TextTermStepper* self);

void
LUCY_TextTermStepper_Set_Value_IMP(lucy_TextTermStepper* self, cfish_Obj* value);

cfish_Obj*
LUCY_TextTermStepper_Get_Value_IMP(lucy_TextTermStepper* self);

void
LUCY_TextTermStepper_Write_Key_Frame_IMP(lucy_TextTermStepper* self, lucy_OutStream* outstream, cfish_Obj* value);

void
LUCY_TextTermStepper_Write_Delta_IMP(lucy_TextTermStepper* self, lucy_OutStream* outstream, cfish_Obj* value);

void
LUCY_TextTermStepper_Read_Key_Frame_IMP(lucy_TextTermStepper* self, lucy_InStream* instream);

void
LUCY_TextTermStepper_Read_Delta_IMP(lucy_TextTermStepper* self, lucy_InStream* instream);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_TextTermStepper_To_Host_t)(lucy_TextTermStepper* self, void* vcache);

typedef cfish_Obj*
(*LUCY_TextTermStepper_Clone_t)(lucy_TextTermStepper* self);

typedef bool
(*LUCY_TextTermStepper_Equals_t)(lucy_TextTermStepper* self, cfish_Obj* other);

typedef int32_t
(*LUCY_TextTermStepper_Compare_To_t)(lucy_TextTermStepper* self, cfish_Obj* other);

typedef void
(*LUCY_TextTermStepper_Destroy_t)(lucy_TextTermStepper* self);

typedef cfish_String*
(*LUCY_TextTermStepper_To_String_t)(lucy_TextTermStepper* self);

typedef void
(*LUCY_TextTermStepper_Reset_t)(lucy_TextTermStepper* self);

typedef void
(*LUCY_TextTermStepper_Write_Key_Frame_t)(lucy_TextTermStepper* self, lucy_OutStream* outstream, cfish_Obj* value);

typedef void
(*LUCY_TextTermStepper_Write_Delta_t)(lucy_TextTermStepper* self, lucy_OutStream* outstream, cfish_Obj* value);

typedef void
(*LUCY_TextTermStepper_Read_Key_Frame_t)(lucy_TextTermStepper* self, lucy_InStream* instream);

typedef void
(*LUCY_TextTermStepper_Read_Delta_t)(lucy_TextTermStepper* self, lucy_InStream* instream);

typedef void
(*LUCY_TextTermStepper_Read_Record_t)(lucy_TextTermStepper* self, lucy_InStream* instream);

typedef void
(*LUCY_TextTermStepper_Set_Value_t)(lucy_TextTermStepper* self, cfish_Obj* value);

typedef cfish_Obj*
(*LUCY_TextTermStepper_Get_Value_t)(lucy_TextTermStepper* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_TextTermStepper_get_class(lucy_TextTermStepper *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_TextTermStepper_get_class_name(lucy_TextTermStepper *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_TextTermStepper_is_a(lucy_TextTermStepper *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_TextTermStepper_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_TextTermStepper_To_Host(lucy_TextTermStepper* self, void* vcache) {
    const LUCY_TextTermStepper_To_Host_t method = (LUCY_TextTermStepper_To_Host_t)cfish_obj_method(self, LUCY_TextTermStepper_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_TextTermStepper_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_TextTermStepper_Clone(lucy_TextTermStepper* self) {
    const LUCY_TextTermStepper_Clone_t method = (LUCY_TextTermStepper_Clone_t)cfish_obj_method(self, LUCY_TextTermStepper_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TextTermStepper_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_TextTermStepper_Equals(lucy_TextTermStepper* self, cfish_Obj* other) {
    const LUCY_TextTermStepper_Equals_t method = (LUCY_TextTermStepper_Equals_t)cfish_obj_method(self, LUCY_TextTermStepper_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_TextTermStepper_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_TextTermStepper_Compare_To(lucy_TextTermStepper* self, cfish_Obj* other) {
    const LUCY_TextTermStepper_Compare_To_t method = (LUCY_TextTermStepper_Compare_To_t)cfish_obj_method(self, LUCY_TextTermStepper_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_TextTermStepper_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_TextTermStepper_Destroy(lucy_TextTermStepper* self) {
    const LUCY_TextTermStepper_Destroy_t method = (LUCY_TextTermStepper_Destroy_t)cfish_obj_method(self, LUCY_TextTermStepper_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TextTermStepper_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_TextTermStepper_To_String(lucy_TextTermStepper* self) {
    const LUCY_TextTermStepper_To_String_t method = (LUCY_TextTermStepper_To_String_t)cfish_obj_method(self, LUCY_TextTermStepper_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TextTermStepper_Reset_OFFSET;
static CFISH_INLINE void
LUCY_TextTermStepper_Reset(lucy_TextTermStepper* self) {
    const LUCY_TextTermStepper_Reset_t method = (LUCY_TextTermStepper_Reset_t)cfish_obj_method(self, LUCY_TextTermStepper_Reset_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TextTermStepper_Write_Key_Frame_OFFSET;
static CFISH_INLINE void
LUCY_TextTermStepper_Write_Key_Frame(lucy_TextTermStepper* self, lucy_OutStream* outstream, cfish_Obj* value) {
    const LUCY_TextTermStepper_Write_Key_Frame_t method = (LUCY_TextTermStepper_Write_Key_Frame_t)cfish_obj_method(self, LUCY_TextTermStepper_Write_Key_Frame_OFFSET);
    method(self, outstream, value);
}

extern LUCY_VISIBLE uint32_t LUCY_TextTermStepper_Write_Delta_OFFSET;
static CFISH_INLINE void
LUCY_TextTermStepper_Write_Delta(lucy_TextTermStepper* self, lucy_OutStream* outstream, cfish_Obj* value) {
    const LUCY_TextTermStepper_Write_Delta_t method = (LUCY_TextTermStepper_Write_Delta_t)cfish_obj_method(self, LUCY_TextTermStepper_Write_Delta_OFFSET);
    method(self, outstream, value);
}

extern LUCY_VISIBLE uint32_t LUCY_TextTermStepper_Read_Key_Frame_OFFSET;
static CFISH_INLINE void
LUCY_TextTermStepper_Read_Key_Frame(lucy_TextTermStepper* self, lucy_InStream* instream) {
    const LUCY_TextTermStepper_Read_Key_Frame_t method = (LUCY_TextTermStepper_Read_Key_Frame_t)cfish_obj_method(self, LUCY_TextTermStepper_Read_Key_Frame_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_TextTermStepper_Read_Delta_OFFSET;
static CFISH_INLINE void
LUCY_TextTermStepper_Read_Delta(lucy_TextTermStepper* self, lucy_InStream* instream) {
    const LUCY_TextTermStepper_Read_Delta_t method = (LUCY_TextTermStepper_Read_Delta_t)cfish_obj_method(self, LUCY_TextTermStepper_Read_Delta_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_TextTermStepper_Read_Record_OFFSET;
static CFISH_INLINE void
LUCY_TextTermStepper_Read_Record(lucy_TextTermStepper* self, lucy_InStream* instream) {
    const LUCY_TextTermStepper_Read_Record_t method = (LUCY_TextTermStepper_Read_Record_t)cfish_obj_method(self, LUCY_TextTermStepper_Read_Record_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_TextTermStepper_Set_Value_OFFSET;
static CFISH_INLINE void
LUCY_TextTermStepper_Set_Value(lucy_TextTermStepper* self, cfish_Obj* value) {
    const LUCY_TextTermStepper_Set_Value_t method = (LUCY_TextTermStepper_Set_Value_t)cfish_obj_method(self, LUCY_TextTermStepper_Set_Value_OFFSET);
    method(self, value);
}

extern LUCY_VISIBLE uint32_t LUCY_TextTermStepper_Get_Value_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_TextTermStepper_Get_Value(lucy_TextTermStepper* self) {
    const LUCY_TextTermStepper_Get_Value_t method = (LUCY_TextTermStepper_Get_Value_t)cfish_obj_method(self, LUCY_TextTermStepper_Get_Value_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define TextTermStepper lucy_TextTermStepper
  #define TEXTTERMSTEPPER LUCY_TEXTTERMSTEPPER
  #define TextTermStepper_new lucy_TextTermStepper_new
  #define TextTermStepper_init lucy_TextTermStepper_init
  #define TextTermStepper_get_class lucy_TextTermStepper_get_class
  #define TextTermStepper_get_class_name lucy_TextTermStepper_get_class_name
  #define TextTermStepper_is_a lucy_TextTermStepper_is_a
  #define TextTermStepper_Destroy_IMP LUCY_TextTermStepper_Destroy_IMP
  #define TextTermStepper_Reset_IMP LUCY_TextTermStepper_Reset_IMP
  #define TextTermStepper_Set_Value_IMP LUCY_TextTermStepper_Set_Value_IMP
  #define TextTermStepper_Get_Value_IMP LUCY_TextTermStepper_Get_Value_IMP
  #define TextTermStepper_Write_Key_Frame_IMP LUCY_TextTermStepper_Write_Key_Frame_IMP
  #define TextTermStepper_Write_Delta_IMP LUCY_TextTermStepper_Write_Delta_IMP
  #define TextTermStepper_Read_Key_Frame_IMP LUCY_TextTermStepper_Read_Key_Frame_IMP
  #define TextTermStepper_Read_Delta_IMP LUCY_TextTermStepper_Read_Delta_IMP
  #define TextTermStepper_To_Host LUCY_TextTermStepper_To_Host
  #define TextTermStepper_To_Host_t LUCY_TextTermStepper_To_Host_t
  #define TextTermStepper_Clone LUCY_TextTermStepper_Clone
  #define TextTermStepper_Clone_t LUCY_TextTermStepper_Clone_t
  #define TextTermStepper_Equals LUCY_TextTermStepper_Equals
  #define TextTermStepper_Equals_t LUCY_TextTermStepper_Equals_t
  #define TextTermStepper_Compare_To LUCY_TextTermStepper_Compare_To
  #define TextTermStepper_Compare_To_t LUCY_TextTermStepper_Compare_To_t
  #define TextTermStepper_Destroy LUCY_TextTermStepper_Destroy
  #define TextTermStepper_Destroy_t LUCY_TextTermStepper_Destroy_t
  #define TextTermStepper_To_String LUCY_TextTermStepper_To_String
  #define TextTermStepper_To_String_t LUCY_TextTermStepper_To_String_t
  #define TextTermStepper_Reset LUCY_TextTermStepper_Reset
  #define TextTermStepper_Reset_t LUCY_TextTermStepper_Reset_t
  #define TextTermStepper_Write_Key_Frame LUCY_TextTermStepper_Write_Key_Frame
  #define TextTermStepper_Write_Key_Frame_t LUCY_TextTermStepper_Write_Key_Frame_t
  #define TextTermStepper_Write_Delta LUCY_TextTermStepper_Write_Delta
  #define TextTermStepper_Write_Delta_t LUCY_TextTermStepper_Write_Delta_t
  #define TextTermStepper_Read_Key_Frame LUCY_TextTermStepper_Read_Key_Frame
  #define TextTermStepper_Read_Key_Frame_t LUCY_TextTermStepper_Read_Key_Frame_t
  #define TextTermStepper_Read_Delta LUCY_TextTermStepper_Read_Delta
  #define TextTermStepper_Read_Delta_t LUCY_TextTermStepper_Read_Delta_t
  #define TextTermStepper_Read_Record LUCY_TextTermStepper_Read_Record
  #define TextTermStepper_Read_Record_t LUCY_TextTermStepper_Read_Record_t
  #define TextTermStepper_Set_Value LUCY_TextTermStepper_Set_Value
  #define TextTermStepper_Set_Value_t LUCY_TextTermStepper_Set_Value_t
  #define TextTermStepper_Get_Value LUCY_TextTermStepper_Get_Value
  #define TextTermStepper_Get_Value_t LUCY_TextTermStepper_Get_Value_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_PLAN_TEXTTYPE */




