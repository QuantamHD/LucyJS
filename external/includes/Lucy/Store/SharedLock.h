/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_STORE_SHAREDLOCK
#define H_LUCY_STORE_SHAREDLOCK 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Store/Lock.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_SHAREDLOCK
extern uint32_t lucy_ShLock_IVARS_OFFSET;
typedef struct lucy_SharedLockIVARS lucy_SharedLockIVARS;
static CFISH_INLINE lucy_SharedLockIVARS*
lucy_ShLock_IVARS(lucy_SharedLock *self) {
   char *ptr = (char*)self + lucy_ShLock_IVARS_OFFSET;
   return (lucy_SharedLockIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define SharedLockIVARS lucy_SharedLockIVARS
  #define ShLock_IVARS lucy_ShLock_IVARS
#endif

struct lucy_SharedLockIVARS {
    lucy_Folder* folder;
    cfish_String* name;
    cfish_String* lock_path;
    cfish_String* host;
    int32_t timeout;
    int32_t interval;
    cfish_String* link_path;
};

#endif /* C_LUCY_SHAREDLOCK */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_SharedLock*
lucy_ShLock_new(lucy_Folder* folder, cfish_String* name, cfish_String* host, int32_t timeout, int32_t interval);

LUCY_VISIBLE lucy_SharedLock*
lucy_ShLock_init(lucy_SharedLock* self, lucy_Folder* folder, cfish_String* name, cfish_String* host, int32_t timeout, int32_t interval);

bool
LUCY_ShLock_Shared_IMP(lucy_SharedLock* self);

bool
LUCY_ShLock_Request_IMP(lucy_SharedLock* self);

void
LUCY_ShLock_Release_IMP(lucy_SharedLock* self);

bool
LUCY_ShLock_Is_Locked_IMP(lucy_SharedLock* self);

void
LUCY_ShLock_Clear_Stale_IMP(lucy_SharedLock* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_ShLock_To_Host_t)(lucy_SharedLock* self, void* vcache);

typedef cfish_Obj*
(*LUCY_ShLock_Clone_t)(lucy_SharedLock* self);

typedef bool
(*LUCY_ShLock_Equals_t)(lucy_SharedLock* self, cfish_Obj* other);

typedef int32_t
(*LUCY_ShLock_Compare_To_t)(lucy_SharedLock* self, cfish_Obj* other);

typedef void
(*LUCY_ShLock_Destroy_t)(lucy_SharedLock* self);

typedef cfish_String*
(*LUCY_ShLock_To_String_t)(lucy_SharedLock* self);

typedef bool
(*LUCY_ShLock_Shared_t)(lucy_SharedLock* self);

typedef bool
(*LUCY_ShLock_Obtain_t)(lucy_SharedLock* self);

typedef bool
(*LUCY_ShLock_Request_t)(lucy_SharedLock* self);

typedef void
(*LUCY_ShLock_Release_t)(lucy_SharedLock* self);

typedef bool
(*LUCY_ShLock_Is_Locked_t)(lucy_SharedLock* self);

typedef void
(*LUCY_ShLock_Clear_Stale_t)(lucy_SharedLock* self);

typedef cfish_String*
(*LUCY_ShLock_Get_Name_t)(lucy_SharedLock* self);

typedef cfish_String*
(*LUCY_ShLock_Get_Host_t)(lucy_SharedLock* self);

typedef cfish_String*
(*LUCY_ShLock_Get_Lock_Path_t)(lucy_SharedLock* self);

typedef bool
(*LUCY_ShLock_Maybe_Delete_File_t)(lucy_SharedLock* self, cfish_String* filepath, bool delete_mine, bool delete_other);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_ShLock_get_class(lucy_SharedLock *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_ShLock_get_class_name(lucy_SharedLock *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_ShLock_is_a(lucy_SharedLock *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_ShLock_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_ShLock_To_Host(lucy_SharedLock* self, void* vcache) {
    const LUCY_ShLock_To_Host_t method = (LUCY_ShLock_To_Host_t)cfish_obj_method(self, LUCY_ShLock_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_ShLock_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_ShLock_Clone(lucy_SharedLock* self) {
    const LUCY_ShLock_Clone_t method = (LUCY_ShLock_Clone_t)cfish_obj_method(self, LUCY_ShLock_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ShLock_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_ShLock_Equals(lucy_SharedLock* self, cfish_Obj* other) {
    const LUCY_ShLock_Equals_t method = (LUCY_ShLock_Equals_t)cfish_obj_method(self, LUCY_ShLock_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_ShLock_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_ShLock_Compare_To(lucy_SharedLock* self, cfish_Obj* other) {
    const LUCY_ShLock_Compare_To_t method = (LUCY_ShLock_Compare_To_t)cfish_obj_method(self, LUCY_ShLock_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_ShLock_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_ShLock_Destroy(lucy_SharedLock* self) {
    const LUCY_ShLock_Destroy_t method = (LUCY_ShLock_Destroy_t)cfish_obj_method(self, LUCY_ShLock_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ShLock_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_ShLock_To_String(lucy_SharedLock* self) {
    const LUCY_ShLock_To_String_t method = (LUCY_ShLock_To_String_t)cfish_obj_method(self, LUCY_ShLock_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ShLock_Shared_OFFSET;
static CFISH_INLINE bool
LUCY_ShLock_Shared(lucy_SharedLock* self) {
    const LUCY_ShLock_Shared_t method = (LUCY_ShLock_Shared_t)cfish_obj_method(self, LUCY_ShLock_Shared_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ShLock_Obtain_OFFSET;
static CFISH_INLINE bool
LUCY_ShLock_Obtain(lucy_SharedLock* self) {
    const LUCY_ShLock_Obtain_t method = (LUCY_ShLock_Obtain_t)cfish_obj_method(self, LUCY_ShLock_Obtain_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ShLock_Request_OFFSET;
static CFISH_INLINE bool
LUCY_ShLock_Request(lucy_SharedLock* self) {
    const LUCY_ShLock_Request_t method = (LUCY_ShLock_Request_t)cfish_obj_method(self, LUCY_ShLock_Request_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ShLock_Release_OFFSET;
static CFISH_INLINE void
LUCY_ShLock_Release(lucy_SharedLock* self) {
    const LUCY_ShLock_Release_t method = (LUCY_ShLock_Release_t)cfish_obj_method(self, LUCY_ShLock_Release_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ShLock_Is_Locked_OFFSET;
static CFISH_INLINE bool
LUCY_ShLock_Is_Locked(lucy_SharedLock* self) {
    const LUCY_ShLock_Is_Locked_t method = (LUCY_ShLock_Is_Locked_t)cfish_obj_method(self, LUCY_ShLock_Is_Locked_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ShLock_Clear_Stale_OFFSET;
static CFISH_INLINE void
LUCY_ShLock_Clear_Stale(lucy_SharedLock* self) {
    const LUCY_ShLock_Clear_Stale_t method = (LUCY_ShLock_Clear_Stale_t)cfish_obj_method(self, LUCY_ShLock_Clear_Stale_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ShLock_Get_Name_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_ShLock_Get_Name(lucy_SharedLock* self) {
    const LUCY_ShLock_Get_Name_t method = (LUCY_ShLock_Get_Name_t)cfish_obj_method(self, LUCY_ShLock_Get_Name_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ShLock_Get_Host_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_ShLock_Get_Host(lucy_SharedLock* self) {
    const LUCY_ShLock_Get_Host_t method = (LUCY_ShLock_Get_Host_t)cfish_obj_method(self, LUCY_ShLock_Get_Host_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ShLock_Get_Lock_Path_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_ShLock_Get_Lock_Path(lucy_SharedLock* self) {
    const LUCY_ShLock_Get_Lock_Path_t method = (LUCY_ShLock_Get_Lock_Path_t)cfish_obj_method(self, LUCY_ShLock_Get_Lock_Path_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ShLock_Maybe_Delete_File_OFFSET;
static CFISH_INLINE bool
LUCY_ShLock_Maybe_Delete_File(lucy_SharedLock* self, cfish_String* filepath, bool delete_mine, bool delete_other) {
    const LUCY_ShLock_Maybe_Delete_File_t method = (LUCY_ShLock_Maybe_Delete_File_t)cfish_obj_method(self, LUCY_ShLock_Maybe_Delete_File_OFFSET);
    return method(self, filepath, delete_mine, delete_other);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define SharedLock lucy_SharedLock
  #define SHAREDLOCK LUCY_SHAREDLOCK
  #define ShLock_new lucy_ShLock_new
  #define ShLock_init lucy_ShLock_init
  #define ShLock_get_class lucy_ShLock_get_class
  #define ShLock_get_class_name lucy_ShLock_get_class_name
  #define ShLock_is_a lucy_ShLock_is_a
  #define ShLock_Shared_IMP LUCY_ShLock_Shared_IMP
  #define ShLock_Request_IMP LUCY_ShLock_Request_IMP
  #define ShLock_Release_IMP LUCY_ShLock_Release_IMP
  #define ShLock_Is_Locked_IMP LUCY_ShLock_Is_Locked_IMP
  #define ShLock_Clear_Stale_IMP LUCY_ShLock_Clear_Stale_IMP
  #define ShLock_To_Host LUCY_ShLock_To_Host
  #define ShLock_To_Host_t LUCY_ShLock_To_Host_t
  #define ShLock_Clone LUCY_ShLock_Clone
  #define ShLock_Clone_t LUCY_ShLock_Clone_t
  #define ShLock_Equals LUCY_ShLock_Equals
  #define ShLock_Equals_t LUCY_ShLock_Equals_t
  #define ShLock_Compare_To LUCY_ShLock_Compare_To
  #define ShLock_Compare_To_t LUCY_ShLock_Compare_To_t
  #define ShLock_Destroy LUCY_ShLock_Destroy
  #define ShLock_Destroy_t LUCY_ShLock_Destroy_t
  #define ShLock_To_String LUCY_ShLock_To_String
  #define ShLock_To_String_t LUCY_ShLock_To_String_t
  #define ShLock_Shared LUCY_ShLock_Shared
  #define ShLock_Shared_t LUCY_ShLock_Shared_t
  #define ShLock_Obtain LUCY_ShLock_Obtain
  #define ShLock_Obtain_t LUCY_ShLock_Obtain_t
  #define ShLock_Request LUCY_ShLock_Request
  #define ShLock_Request_t LUCY_ShLock_Request_t
  #define ShLock_Release LUCY_ShLock_Release
  #define ShLock_Release_t LUCY_ShLock_Release_t
  #define ShLock_Is_Locked LUCY_ShLock_Is_Locked
  #define ShLock_Is_Locked_t LUCY_ShLock_Is_Locked_t
  #define ShLock_Clear_Stale LUCY_ShLock_Clear_Stale
  #define ShLock_Clear_Stale_t LUCY_ShLock_Clear_Stale_t
  #define ShLock_Get_Name LUCY_ShLock_Get_Name
  #define ShLock_Get_Name_t LUCY_ShLock_Get_Name_t
  #define ShLock_Get_Host LUCY_ShLock_Get_Host
  #define ShLock_Get_Host_t LUCY_ShLock_Get_Host_t
  #define ShLock_Get_Lock_Path LUCY_ShLock_Get_Lock_Path
  #define ShLock_Get_Lock_Path_t LUCY_ShLock_Get_Lock_Path_t
  #define ShLock_Maybe_Delete_File LUCY_ShLock_Maybe_Delete_File
  #define ShLock_Maybe_Delete_File_t LUCY_ShLock_Maybe_Delete_File_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_STORE_SHAREDLOCK */




