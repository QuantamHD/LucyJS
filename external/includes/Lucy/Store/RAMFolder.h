/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_STORE_RAMFOLDER
#define H_LUCY_STORE_RAMFOLDER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Store/Folder.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_RAMFOLDER
extern uint32_t lucy_RAMFolder_IVARS_OFFSET;
typedef struct lucy_RAMFolderIVARS lucy_RAMFolderIVARS;
static CFISH_INLINE lucy_RAMFolderIVARS*
lucy_RAMFolder_IVARS(lucy_RAMFolder *self) {
   char *ptr = (char*)self + lucy_RAMFolder_IVARS_OFFSET;
   return (lucy_RAMFolderIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define RAMFolderIVARS lucy_RAMFolderIVARS
  #define RAMFolder_IVARS lucy_RAMFolder_IVARS
#endif

struct lucy_RAMFolderIVARS {
    cfish_String* path;
    cfish_Hash* entries;
};

#endif /* C_LUCY_RAMFOLDER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_RAMFolder*
lucy_RAMFolder_new(cfish_String* path);

LUCY_VISIBLE lucy_RAMFolder*
lucy_RAMFolder_init(lucy_RAMFolder* self, cfish_String* path);

void
LUCY_RAMFolder_Initialize_IMP(lucy_RAMFolder* self);

bool
LUCY_RAMFolder_Check_IMP(lucy_RAMFolder* self);

void
LUCY_RAMFolder_Close_IMP(lucy_RAMFolder* self);

lucy_FileHandle*
LUCY_RAMFolder_Local_Open_FileHandle_IMP(lucy_RAMFolder* self, cfish_String* name, uint32_t flags);

lucy_DirHandle*
LUCY_RAMFolder_Local_Open_Dir_IMP(lucy_RAMFolder* self);

bool
LUCY_RAMFolder_Local_MkDir_IMP(lucy_RAMFolder* self, cfish_String* name);

bool
LUCY_RAMFolder_Local_Exists_IMP(lucy_RAMFolder* self, cfish_String* name);

bool
LUCY_RAMFolder_Local_Is_Directory_IMP(lucy_RAMFolder* self, cfish_String* name);

lucy_Folder*
LUCY_RAMFolder_Local_Find_Folder_IMP(lucy_RAMFolder* self, cfish_String* name);

bool
LUCY_RAMFolder_Local_Delete_IMP(lucy_RAMFolder* self, cfish_String* name);

bool
LUCY_RAMFolder_Rename_IMP(lucy_RAMFolder* self, cfish_String* from, cfish_String* to);

bool
LUCY_RAMFolder_Hard_Link_IMP(lucy_RAMFolder* self, cfish_String* from, cfish_String* to);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_RAMFolder_To_Host_t)(lucy_RAMFolder* self, void* vcache);

typedef cfish_Obj*
(*LUCY_RAMFolder_Clone_t)(lucy_RAMFolder* self);

typedef bool
(*LUCY_RAMFolder_Equals_t)(lucy_RAMFolder* self, cfish_Obj* other);

typedef int32_t
(*LUCY_RAMFolder_Compare_To_t)(lucy_RAMFolder* self, cfish_Obj* other);

typedef void
(*LUCY_RAMFolder_Destroy_t)(lucy_RAMFolder* self);

typedef cfish_String*
(*LUCY_RAMFolder_To_String_t)(lucy_RAMFolder* self);

typedef cfish_String*
(*LUCY_RAMFolder_Get_Path_t)(lucy_RAMFolder* self);

typedef void
(*LUCY_RAMFolder_Set_Path_t)(lucy_RAMFolder* self, cfish_String* path);

typedef lucy_OutStream*
(*LUCY_RAMFolder_Open_Out_t)(lucy_RAMFolder* self, cfish_String* path);

typedef lucy_InStream*
(*LUCY_RAMFolder_Open_In_t)(lucy_RAMFolder* self, cfish_String* path);

typedef lucy_FileHandle*
(*LUCY_RAMFolder_Open_FileHandle_t)(lucy_RAMFolder* self, cfish_String* path, uint32_t flags);

typedef lucy_DirHandle*
(*LUCY_RAMFolder_Open_Dir_t)(lucy_RAMFolder* self, cfish_String* path);

typedef bool
(*LUCY_RAMFolder_MkDir_t)(lucy_RAMFolder* self, cfish_String* path);

typedef cfish_Vector*
(*LUCY_RAMFolder_List_t)(lucy_RAMFolder* self, cfish_String* path);

typedef cfish_Vector*
(*LUCY_RAMFolder_List_R_t)(lucy_RAMFolder* self, cfish_String* path);

typedef bool
(*LUCY_RAMFolder_Exists_t)(lucy_RAMFolder* self, cfish_String* path);

typedef bool
(*LUCY_RAMFolder_Is_Directory_t)(lucy_RAMFolder* self, cfish_String* path);

typedef bool
(*LUCY_RAMFolder_Delete_t)(lucy_RAMFolder* self, cfish_String* path);

typedef bool
(*LUCY_RAMFolder_Delete_Tree_t)(lucy_RAMFolder* self, cfish_String* path);

typedef bool
(*LUCY_RAMFolder_Rename_t)(lucy_RAMFolder* self, cfish_String* from, cfish_String* to);

typedef bool
(*LUCY_RAMFolder_Hard_Link_t)(lucy_RAMFolder* self, cfish_String* from, cfish_String* to);

typedef cfish_Blob*
(*LUCY_RAMFolder_Slurp_File_t)(lucy_RAMFolder* self, cfish_String* path);

typedef void
(*LUCY_RAMFolder_Consolidate_t)(lucy_RAMFolder* self, cfish_String* path);

typedef lucy_Folder*
(*LUCY_RAMFolder_Enclosing_Folder_t)(lucy_RAMFolder* self, cfish_String* path);

typedef lucy_Folder*
(*LUCY_RAMFolder_Find_Folder_t)(lucy_RAMFolder* self, cfish_String* path);

typedef void
(*LUCY_RAMFolder_Initialize_t)(lucy_RAMFolder* self);

typedef bool
(*LUCY_RAMFolder_Check_t)(lucy_RAMFolder* self);

typedef void
(*LUCY_RAMFolder_Close_t)(lucy_RAMFolder* self);

typedef lucy_FileHandle*
(*LUCY_RAMFolder_Local_Open_FileHandle_t)(lucy_RAMFolder* self, cfish_String* name, uint32_t flags);

typedef lucy_InStream*
(*LUCY_RAMFolder_Local_Open_In_t)(lucy_RAMFolder* self, cfish_String* name);

typedef lucy_DirHandle*
(*LUCY_RAMFolder_Local_Open_Dir_t)(lucy_RAMFolder* self);

typedef bool
(*LUCY_RAMFolder_Local_MkDir_t)(lucy_RAMFolder* self, cfish_String* name);

typedef bool
(*LUCY_RAMFolder_Local_Exists_t)(lucy_RAMFolder* self, cfish_String* name);

typedef bool
(*LUCY_RAMFolder_Local_Is_Directory_t)(lucy_RAMFolder* self, cfish_String* name);

typedef lucy_Folder*
(*LUCY_RAMFolder_Local_Find_Folder_t)(lucy_RAMFolder* self, cfish_String* name);

typedef bool
(*LUCY_RAMFolder_Local_Delete_t)(lucy_RAMFolder* self, cfish_String* name);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_RAMFolder_get_class(lucy_RAMFolder *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_RAMFolder_get_class_name(lucy_RAMFolder *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_RAMFolder_is_a(lucy_RAMFolder *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_RAMFolder_To_Host(lucy_RAMFolder* self, void* vcache) {
    const LUCY_RAMFolder_To_Host_t method = (LUCY_RAMFolder_To_Host_t)cfish_obj_method(self, LUCY_RAMFolder_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_RAMFolder_Clone(lucy_RAMFolder* self) {
    const LUCY_RAMFolder_Clone_t method = (LUCY_RAMFolder_Clone_t)cfish_obj_method(self, LUCY_RAMFolder_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_RAMFolder_Equals(lucy_RAMFolder* self, cfish_Obj* other) {
    const LUCY_RAMFolder_Equals_t method = (LUCY_RAMFolder_Equals_t)cfish_obj_method(self, LUCY_RAMFolder_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_RAMFolder_Compare_To(lucy_RAMFolder* self, cfish_Obj* other) {
    const LUCY_RAMFolder_Compare_To_t method = (LUCY_RAMFolder_Compare_To_t)cfish_obj_method(self, LUCY_RAMFolder_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_RAMFolder_Destroy(lucy_RAMFolder* self) {
    const LUCY_RAMFolder_Destroy_t method = (LUCY_RAMFolder_Destroy_t)cfish_obj_method(self, LUCY_RAMFolder_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_RAMFolder_To_String(lucy_RAMFolder* self) {
    const LUCY_RAMFolder_To_String_t method = (LUCY_RAMFolder_To_String_t)cfish_obj_method(self, LUCY_RAMFolder_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Get_Path_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_RAMFolder_Get_Path(lucy_RAMFolder* self) {
    const LUCY_RAMFolder_Get_Path_t method = (LUCY_RAMFolder_Get_Path_t)cfish_obj_method(self, LUCY_RAMFolder_Get_Path_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Set_Path_OFFSET;
static CFISH_INLINE void
LUCY_RAMFolder_Set_Path(lucy_RAMFolder* self, cfish_String* path) {
    const LUCY_RAMFolder_Set_Path_t method = (LUCY_RAMFolder_Set_Path_t)cfish_obj_method(self, LUCY_RAMFolder_Set_Path_OFFSET);
    method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Open_Out_OFFSET;
static CFISH_INLINE lucy_OutStream*
LUCY_RAMFolder_Open_Out(lucy_RAMFolder* self, cfish_String* path) {
    const LUCY_RAMFolder_Open_Out_t method = (LUCY_RAMFolder_Open_Out_t)cfish_obj_method(self, LUCY_RAMFolder_Open_Out_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Open_In_OFFSET;
static CFISH_INLINE lucy_InStream*
LUCY_RAMFolder_Open_In(lucy_RAMFolder* self, cfish_String* path) {
    const LUCY_RAMFolder_Open_In_t method = (LUCY_RAMFolder_Open_In_t)cfish_obj_method(self, LUCY_RAMFolder_Open_In_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Open_FileHandle_OFFSET;
static CFISH_INLINE lucy_FileHandle*
LUCY_RAMFolder_Open_FileHandle(lucy_RAMFolder* self, cfish_String* path, uint32_t flags) {
    const LUCY_RAMFolder_Open_FileHandle_t method = (LUCY_RAMFolder_Open_FileHandle_t)cfish_obj_method(self, LUCY_RAMFolder_Open_FileHandle_OFFSET);
    return method(self, path, flags);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Open_Dir_OFFSET;
static CFISH_INLINE lucy_DirHandle*
LUCY_RAMFolder_Open_Dir(lucy_RAMFolder* self, cfish_String* path) {
    const LUCY_RAMFolder_Open_Dir_t method = (LUCY_RAMFolder_Open_Dir_t)cfish_obj_method(self, LUCY_RAMFolder_Open_Dir_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_MkDir_OFFSET;
static CFISH_INLINE bool
LUCY_RAMFolder_MkDir(lucy_RAMFolder* self, cfish_String* path) {
    const LUCY_RAMFolder_MkDir_t method = (LUCY_RAMFolder_MkDir_t)cfish_obj_method(self, LUCY_RAMFolder_MkDir_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_List_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_RAMFolder_List(lucy_RAMFolder* self, cfish_String* path) {
    const LUCY_RAMFolder_List_t method = (LUCY_RAMFolder_List_t)cfish_obj_method(self, LUCY_RAMFolder_List_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_List_R_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_RAMFolder_List_R(lucy_RAMFolder* self, cfish_String* path) {
    const LUCY_RAMFolder_List_R_t method = (LUCY_RAMFolder_List_R_t)cfish_obj_method(self, LUCY_RAMFolder_List_R_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Exists_OFFSET;
static CFISH_INLINE bool
LUCY_RAMFolder_Exists(lucy_RAMFolder* self, cfish_String* path) {
    const LUCY_RAMFolder_Exists_t method = (LUCY_RAMFolder_Exists_t)cfish_obj_method(self, LUCY_RAMFolder_Exists_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Is_Directory_OFFSET;
static CFISH_INLINE bool
LUCY_RAMFolder_Is_Directory(lucy_RAMFolder* self, cfish_String* path) {
    const LUCY_RAMFolder_Is_Directory_t method = (LUCY_RAMFolder_Is_Directory_t)cfish_obj_method(self, LUCY_RAMFolder_Is_Directory_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Delete_OFFSET;
static CFISH_INLINE bool
LUCY_RAMFolder_Delete(lucy_RAMFolder* self, cfish_String* path) {
    const LUCY_RAMFolder_Delete_t method = (LUCY_RAMFolder_Delete_t)cfish_obj_method(self, LUCY_RAMFolder_Delete_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Delete_Tree_OFFSET;
static CFISH_INLINE bool
LUCY_RAMFolder_Delete_Tree(lucy_RAMFolder* self, cfish_String* path) {
    const LUCY_RAMFolder_Delete_Tree_t method = (LUCY_RAMFolder_Delete_Tree_t)cfish_obj_method(self, LUCY_RAMFolder_Delete_Tree_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Rename_OFFSET;
static CFISH_INLINE bool
LUCY_RAMFolder_Rename(lucy_RAMFolder* self, cfish_String* from, cfish_String* to) {
    const LUCY_RAMFolder_Rename_t method = (LUCY_RAMFolder_Rename_t)cfish_obj_method(self, LUCY_RAMFolder_Rename_OFFSET);
    return method(self, from, to);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Hard_Link_OFFSET;
static CFISH_INLINE bool
LUCY_RAMFolder_Hard_Link(lucy_RAMFolder* self, cfish_String* from, cfish_String* to) {
    const LUCY_RAMFolder_Hard_Link_t method = (LUCY_RAMFolder_Hard_Link_t)cfish_obj_method(self, LUCY_RAMFolder_Hard_Link_OFFSET);
    return method(self, from, to);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Slurp_File_OFFSET;
static CFISH_INLINE cfish_Blob*
LUCY_RAMFolder_Slurp_File(lucy_RAMFolder* self, cfish_String* path) {
    const LUCY_RAMFolder_Slurp_File_t method = (LUCY_RAMFolder_Slurp_File_t)cfish_obj_method(self, LUCY_RAMFolder_Slurp_File_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Consolidate_OFFSET;
static CFISH_INLINE void
LUCY_RAMFolder_Consolidate(lucy_RAMFolder* self, cfish_String* path) {
    const LUCY_RAMFolder_Consolidate_t method = (LUCY_RAMFolder_Consolidate_t)cfish_obj_method(self, LUCY_RAMFolder_Consolidate_OFFSET);
    method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Enclosing_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_RAMFolder_Enclosing_Folder(lucy_RAMFolder* self, cfish_String* path) {
    const LUCY_RAMFolder_Enclosing_Folder_t method = (LUCY_RAMFolder_Enclosing_Folder_t)cfish_obj_method(self, LUCY_RAMFolder_Enclosing_Folder_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Find_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_RAMFolder_Find_Folder(lucy_RAMFolder* self, cfish_String* path) {
    const LUCY_RAMFolder_Find_Folder_t method = (LUCY_RAMFolder_Find_Folder_t)cfish_obj_method(self, LUCY_RAMFolder_Find_Folder_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Initialize_OFFSET;
static CFISH_INLINE void
LUCY_RAMFolder_Initialize(lucy_RAMFolder* self) {
    const LUCY_RAMFolder_Initialize_t method = (LUCY_RAMFolder_Initialize_t)cfish_obj_method(self, LUCY_RAMFolder_Initialize_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Check_OFFSET;
static CFISH_INLINE bool
LUCY_RAMFolder_Check(lucy_RAMFolder* self) {
    const LUCY_RAMFolder_Check_t method = (LUCY_RAMFolder_Check_t)cfish_obj_method(self, LUCY_RAMFolder_Check_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Close_OFFSET;
static CFISH_INLINE void
LUCY_RAMFolder_Close(lucy_RAMFolder* self) {
    const LUCY_RAMFolder_Close_t method = (LUCY_RAMFolder_Close_t)cfish_obj_method(self, LUCY_RAMFolder_Close_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Local_Open_FileHandle_OFFSET;
static CFISH_INLINE lucy_FileHandle*
LUCY_RAMFolder_Local_Open_FileHandle(lucy_RAMFolder* self, cfish_String* name, uint32_t flags) {
    const LUCY_RAMFolder_Local_Open_FileHandle_t method = (LUCY_RAMFolder_Local_Open_FileHandle_t)cfish_obj_method(self, LUCY_RAMFolder_Local_Open_FileHandle_OFFSET);
    return method(self, name, flags);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Local_Open_In_OFFSET;
static CFISH_INLINE lucy_InStream*
LUCY_RAMFolder_Local_Open_In(lucy_RAMFolder* self, cfish_String* name) {
    const LUCY_RAMFolder_Local_Open_In_t method = (LUCY_RAMFolder_Local_Open_In_t)cfish_obj_method(self, LUCY_RAMFolder_Local_Open_In_OFFSET);
    return method(self, name);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Local_Open_Dir_OFFSET;
static CFISH_INLINE lucy_DirHandle*
LUCY_RAMFolder_Local_Open_Dir(lucy_RAMFolder* self) {
    const LUCY_RAMFolder_Local_Open_Dir_t method = (LUCY_RAMFolder_Local_Open_Dir_t)cfish_obj_method(self, LUCY_RAMFolder_Local_Open_Dir_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Local_MkDir_OFFSET;
static CFISH_INLINE bool
LUCY_RAMFolder_Local_MkDir(lucy_RAMFolder* self, cfish_String* name) {
    const LUCY_RAMFolder_Local_MkDir_t method = (LUCY_RAMFolder_Local_MkDir_t)cfish_obj_method(self, LUCY_RAMFolder_Local_MkDir_OFFSET);
    return method(self, name);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Local_Exists_OFFSET;
static CFISH_INLINE bool
LUCY_RAMFolder_Local_Exists(lucy_RAMFolder* self, cfish_String* name) {
    const LUCY_RAMFolder_Local_Exists_t method = (LUCY_RAMFolder_Local_Exists_t)cfish_obj_method(self, LUCY_RAMFolder_Local_Exists_OFFSET);
    return method(self, name);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Local_Is_Directory_OFFSET;
static CFISH_INLINE bool
LUCY_RAMFolder_Local_Is_Directory(lucy_RAMFolder* self, cfish_String* name) {
    const LUCY_RAMFolder_Local_Is_Directory_t method = (LUCY_RAMFolder_Local_Is_Directory_t)cfish_obj_method(self, LUCY_RAMFolder_Local_Is_Directory_OFFSET);
    return method(self, name);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Local_Find_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_RAMFolder_Local_Find_Folder(lucy_RAMFolder* self, cfish_String* name) {
    const LUCY_RAMFolder_Local_Find_Folder_t method = (LUCY_RAMFolder_Local_Find_Folder_t)cfish_obj_method(self, LUCY_RAMFolder_Local_Find_Folder_OFFSET);
    return method(self, name);
}

extern LUCY_VISIBLE uint32_t LUCY_RAMFolder_Local_Delete_OFFSET;
static CFISH_INLINE bool
LUCY_RAMFolder_Local_Delete(lucy_RAMFolder* self, cfish_String* name) {
    const LUCY_RAMFolder_Local_Delete_t method = (LUCY_RAMFolder_Local_Delete_t)cfish_obj_method(self, LUCY_RAMFolder_Local_Delete_OFFSET);
    return method(self, name);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define RAMFolder lucy_RAMFolder
  #define RAMFOLDER LUCY_RAMFOLDER
  #define RAMFolder_new lucy_RAMFolder_new
  #define RAMFolder_init lucy_RAMFolder_init
  #define RAMFolder_get_class lucy_RAMFolder_get_class
  #define RAMFolder_get_class_name lucy_RAMFolder_get_class_name
  #define RAMFolder_is_a lucy_RAMFolder_is_a
  #define RAMFolder_Initialize_IMP LUCY_RAMFolder_Initialize_IMP
  #define RAMFolder_Check_IMP LUCY_RAMFolder_Check_IMP
  #define RAMFolder_Close_IMP LUCY_RAMFolder_Close_IMP
  #define RAMFolder_Local_Open_FileHandle_IMP LUCY_RAMFolder_Local_Open_FileHandle_IMP
  #define RAMFolder_Local_Open_Dir_IMP LUCY_RAMFolder_Local_Open_Dir_IMP
  #define RAMFolder_Local_MkDir_IMP LUCY_RAMFolder_Local_MkDir_IMP
  #define RAMFolder_Local_Exists_IMP LUCY_RAMFolder_Local_Exists_IMP
  #define RAMFolder_Local_Is_Directory_IMP LUCY_RAMFolder_Local_Is_Directory_IMP
  #define RAMFolder_Local_Find_Folder_IMP LUCY_RAMFolder_Local_Find_Folder_IMP
  #define RAMFolder_Local_Delete_IMP LUCY_RAMFolder_Local_Delete_IMP
  #define RAMFolder_Rename_IMP LUCY_RAMFolder_Rename_IMP
  #define RAMFolder_Hard_Link_IMP LUCY_RAMFolder_Hard_Link_IMP
  #define RAMFolder_To_Host LUCY_RAMFolder_To_Host
  #define RAMFolder_To_Host_t LUCY_RAMFolder_To_Host_t
  #define RAMFolder_Clone LUCY_RAMFolder_Clone
  #define RAMFolder_Clone_t LUCY_RAMFolder_Clone_t
  #define RAMFolder_Equals LUCY_RAMFolder_Equals
  #define RAMFolder_Equals_t LUCY_RAMFolder_Equals_t
  #define RAMFolder_Compare_To LUCY_RAMFolder_Compare_To
  #define RAMFolder_Compare_To_t LUCY_RAMFolder_Compare_To_t
  #define RAMFolder_Destroy LUCY_RAMFolder_Destroy
  #define RAMFolder_Destroy_t LUCY_RAMFolder_Destroy_t
  #define RAMFolder_To_String LUCY_RAMFolder_To_String
  #define RAMFolder_To_String_t LUCY_RAMFolder_To_String_t
  #define RAMFolder_Get_Path LUCY_RAMFolder_Get_Path
  #define RAMFolder_Get_Path_t LUCY_RAMFolder_Get_Path_t
  #define RAMFolder_Set_Path LUCY_RAMFolder_Set_Path
  #define RAMFolder_Set_Path_t LUCY_RAMFolder_Set_Path_t
  #define RAMFolder_Open_Out LUCY_RAMFolder_Open_Out
  #define RAMFolder_Open_Out_t LUCY_RAMFolder_Open_Out_t
  #define RAMFolder_Open_In LUCY_RAMFolder_Open_In
  #define RAMFolder_Open_In_t LUCY_RAMFolder_Open_In_t
  #define RAMFolder_Open_FileHandle LUCY_RAMFolder_Open_FileHandle
  #define RAMFolder_Open_FileHandle_t LUCY_RAMFolder_Open_FileHandle_t
  #define RAMFolder_Open_Dir LUCY_RAMFolder_Open_Dir
  #define RAMFolder_Open_Dir_t LUCY_RAMFolder_Open_Dir_t
  #define RAMFolder_MkDir LUCY_RAMFolder_MkDir
  #define RAMFolder_MkDir_t LUCY_RAMFolder_MkDir_t
  #define RAMFolder_List LUCY_RAMFolder_List
  #define RAMFolder_List_t LUCY_RAMFolder_List_t
  #define RAMFolder_List_R LUCY_RAMFolder_List_R
  #define RAMFolder_List_R_t LUCY_RAMFolder_List_R_t
  #define RAMFolder_Exists LUCY_RAMFolder_Exists
  #define RAMFolder_Exists_t LUCY_RAMFolder_Exists_t
  #define RAMFolder_Is_Directory LUCY_RAMFolder_Is_Directory
  #define RAMFolder_Is_Directory_t LUCY_RAMFolder_Is_Directory_t
  #define RAMFolder_Delete LUCY_RAMFolder_Delete
  #define RAMFolder_Delete_t LUCY_RAMFolder_Delete_t
  #define RAMFolder_Delete_Tree LUCY_RAMFolder_Delete_Tree
  #define RAMFolder_Delete_Tree_t LUCY_RAMFolder_Delete_Tree_t
  #define RAMFolder_Rename LUCY_RAMFolder_Rename
  #define RAMFolder_Rename_t LUCY_RAMFolder_Rename_t
  #define RAMFolder_Hard_Link LUCY_RAMFolder_Hard_Link
  #define RAMFolder_Hard_Link_t LUCY_RAMFolder_Hard_Link_t
  #define RAMFolder_Slurp_File LUCY_RAMFolder_Slurp_File
  #define RAMFolder_Slurp_File_t LUCY_RAMFolder_Slurp_File_t
  #define RAMFolder_Consolidate LUCY_RAMFolder_Consolidate
  #define RAMFolder_Consolidate_t LUCY_RAMFolder_Consolidate_t
  #define RAMFolder_Enclosing_Folder LUCY_RAMFolder_Enclosing_Folder
  #define RAMFolder_Enclosing_Folder_t LUCY_RAMFolder_Enclosing_Folder_t
  #define RAMFolder_Find_Folder LUCY_RAMFolder_Find_Folder
  #define RAMFolder_Find_Folder_t LUCY_RAMFolder_Find_Folder_t
  #define RAMFolder_Initialize LUCY_RAMFolder_Initialize
  #define RAMFolder_Initialize_t LUCY_RAMFolder_Initialize_t
  #define RAMFolder_Check LUCY_RAMFolder_Check
  #define RAMFolder_Check_t LUCY_RAMFolder_Check_t
  #define RAMFolder_Close LUCY_RAMFolder_Close
  #define RAMFolder_Close_t LUCY_RAMFolder_Close_t
  #define RAMFolder_Local_Open_FileHandle LUCY_RAMFolder_Local_Open_FileHandle
  #define RAMFolder_Local_Open_FileHandle_t LUCY_RAMFolder_Local_Open_FileHandle_t
  #define RAMFolder_Local_Open_In LUCY_RAMFolder_Local_Open_In
  #define RAMFolder_Local_Open_In_t LUCY_RAMFolder_Local_Open_In_t
  #define RAMFolder_Local_Open_Dir LUCY_RAMFolder_Local_Open_Dir
  #define RAMFolder_Local_Open_Dir_t LUCY_RAMFolder_Local_Open_Dir_t
  #define RAMFolder_Local_MkDir LUCY_RAMFolder_Local_MkDir
  #define RAMFolder_Local_MkDir_t LUCY_RAMFolder_Local_MkDir_t
  #define RAMFolder_Local_Exists LUCY_RAMFolder_Local_Exists
  #define RAMFolder_Local_Exists_t LUCY_RAMFolder_Local_Exists_t
  #define RAMFolder_Local_Is_Directory LUCY_RAMFolder_Local_Is_Directory
  #define RAMFolder_Local_Is_Directory_t LUCY_RAMFolder_Local_Is_Directory_t
  #define RAMFolder_Local_Find_Folder LUCY_RAMFolder_Local_Find_Folder
  #define RAMFolder_Local_Find_Folder_t LUCY_RAMFolder_Local_Find_Folder_t
  #define RAMFolder_Local_Delete LUCY_RAMFolder_Local_Delete
  #define RAMFolder_Local_Delete_t LUCY_RAMFolder_Local_Delete_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_STORE_RAMFOLDER */




