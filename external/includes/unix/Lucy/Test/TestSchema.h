/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_TEST_TESTSCHEMA
#define H_LUCY_TEST_TESTSCHEMA 1


#ifdef __cplusplus
extern "C" {
#endif

#include "testlucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Plan/Schema.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_TESTLUCY_TESTSCHEMA
extern uint32_t testlucy_TestSchema_IVARS_OFFSET;
typedef struct testlucy_TestSchemaIVARS testlucy_TestSchemaIVARS;
static CFISH_INLINE testlucy_TestSchemaIVARS*
testlucy_TestSchema_IVARS(testlucy_TestSchema *self) {
   char *ptr = (char*)self + testlucy_TestSchema_IVARS_OFFSET;
   return (testlucy_TestSchemaIVARS*)ptr;
}
#ifdef TESTLUCY_USE_SHORT_NAMES
  #define TestSchemaIVARS testlucy_TestSchemaIVARS
  #define TestSchema_IVARS testlucy_TestSchema_IVARS
#endif

struct testlucy_TestSchemaIVARS {
    bool use_alt_arch;
};

#endif /* C_TESTLUCY_TESTSCHEMA */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

TESTLUCY_VISIBLE testlucy_TestSchema*
testlucy_TestSchema_new(bool use_alt_arch);

TESTLUCY_VISIBLE testlucy_TestSchema*
testlucy_TestSchema_init(testlucy_TestSchema* self, bool use_alt_arch);

lucy_Architecture*
TESTLUCY_TestSchema_Architecture_IMP(testlucy_TestSchema* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*TESTLUCY_TestSchema_To_Host_t)(testlucy_TestSchema* self, void* vcache);

typedef cfish_Obj*
(*TESTLUCY_TestSchema_Clone_t)(testlucy_TestSchema* self);

typedef bool
(*TESTLUCY_TestSchema_Equals_t)(testlucy_TestSchema* self, cfish_Obj* other);

typedef int32_t
(*TESTLUCY_TestSchema_Compare_To_t)(testlucy_TestSchema* self, cfish_Obj* other);

typedef void
(*TESTLUCY_TestSchema_Destroy_t)(testlucy_TestSchema* self);

typedef cfish_String*
(*TESTLUCY_TestSchema_To_String_t)(testlucy_TestSchema* self);

typedef lucy_Architecture*
(*TESTLUCY_TestSchema_Architecture_t)(testlucy_TestSchema* self);

typedef void
(*TESTLUCY_TestSchema_Spec_Field_t)(testlucy_TestSchema* self, cfish_String* name, lucy_FieldType* type);

typedef lucy_FieldType*
(*TESTLUCY_TestSchema_Fetch_Type_t)(testlucy_TestSchema* self, cfish_String* field);

typedef lucy_Analyzer*
(*TESTLUCY_TestSchema_Fetch_Analyzer_t)(testlucy_TestSchema* self, cfish_String* field);

typedef lucy_Similarity*
(*TESTLUCY_TestSchema_Fetch_Sim_t)(testlucy_TestSchema* self, cfish_String* field);

typedef uint32_t
(*TESTLUCY_TestSchema_Num_Fields_t)(testlucy_TestSchema* self);

typedef cfish_Vector*
(*TESTLUCY_TestSchema_All_Fields_t)(testlucy_TestSchema* self);

typedef lucy_Architecture*
(*TESTLUCY_TestSchema_Get_Architecture_t)(testlucy_TestSchema* self);

typedef lucy_Similarity*
(*TESTLUCY_TestSchema_Get_Similarity_t)(testlucy_TestSchema* self);

typedef cfish_Hash*
(*TESTLUCY_TestSchema_Dump_t)(testlucy_TestSchema* self);

typedef lucy_Schema*
(*TESTLUCY_TestSchema_Load_t)(testlucy_TestSchema* self, cfish_Obj* dump);

typedef void
(*TESTLUCY_TestSchema_Eat_t)(testlucy_TestSchema* self, lucy_Schema* other);

typedef void
(*TESTLUCY_TestSchema_Write_t)(testlucy_TestSchema* self, lucy_Folder* folder, cfish_String* filename);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
testlucy_TestSchema_get_class(testlucy_TestSchema *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
testlucy_TestSchema_get_class_name(testlucy_TestSchema *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
testlucy_TestSchema_is_a(testlucy_TestSchema *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_To_Host_OFFSET;
static CFISH_INLINE void*
TESTLUCY_TestSchema_To_Host(testlucy_TestSchema* self, void* vcache) {
    const TESTLUCY_TestSchema_To_Host_t method = (TESTLUCY_TestSchema_To_Host_t)cfish_obj_method(self, TESTLUCY_TestSchema_To_Host_OFFSET);
    return method(self, vcache);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTLUCY_TestSchema_Clone(testlucy_TestSchema* self) {
    const TESTLUCY_TestSchema_Clone_t method = (TESTLUCY_TestSchema_Clone_t)cfish_obj_method(self, TESTLUCY_TestSchema_Clone_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_Equals_OFFSET;
static CFISH_INLINE bool
TESTLUCY_TestSchema_Equals(testlucy_TestSchema* self, cfish_Obj* other) {
    const TESTLUCY_TestSchema_Equals_t method = (TESTLUCY_TestSchema_Equals_t)cfish_obj_method(self, TESTLUCY_TestSchema_Equals_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_Compare_To_OFFSET;
static CFISH_INLINE int32_t
TESTLUCY_TestSchema_Compare_To(testlucy_TestSchema* self, cfish_Obj* other) {
    const TESTLUCY_TestSchema_Compare_To_t method = (TESTLUCY_TestSchema_Compare_To_t)cfish_obj_method(self, TESTLUCY_TestSchema_Compare_To_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_Destroy_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestSchema_Destroy(testlucy_TestSchema* self) {
    const TESTLUCY_TestSchema_Destroy_t method = (TESTLUCY_TestSchema_Destroy_t)cfish_obj_method(self, TESTLUCY_TestSchema_Destroy_OFFSET);
    method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_To_String_OFFSET;
static CFISH_INLINE cfish_String*
TESTLUCY_TestSchema_To_String(testlucy_TestSchema* self) {
    const TESTLUCY_TestSchema_To_String_t method = (TESTLUCY_TestSchema_To_String_t)cfish_obj_method(self, TESTLUCY_TestSchema_To_String_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_Architecture_OFFSET;
static CFISH_INLINE lucy_Architecture*
TESTLUCY_TestSchema_Architecture(testlucy_TestSchema* self) {
    const TESTLUCY_TestSchema_Architecture_t method = (TESTLUCY_TestSchema_Architecture_t)cfish_obj_method(self, TESTLUCY_TestSchema_Architecture_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_Spec_Field_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestSchema_Spec_Field(testlucy_TestSchema* self, cfish_String* name, lucy_FieldType* type) {
    const TESTLUCY_TestSchema_Spec_Field_t method = (TESTLUCY_TestSchema_Spec_Field_t)cfish_obj_method(self, TESTLUCY_TestSchema_Spec_Field_OFFSET);
    method(self, name, type);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_Fetch_Type_OFFSET;
static CFISH_INLINE lucy_FieldType*
TESTLUCY_TestSchema_Fetch_Type(testlucy_TestSchema* self, cfish_String* field) {
    const TESTLUCY_TestSchema_Fetch_Type_t method = (TESTLUCY_TestSchema_Fetch_Type_t)cfish_obj_method(self, TESTLUCY_TestSchema_Fetch_Type_OFFSET);
    return method(self, field);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_Fetch_Analyzer_OFFSET;
static CFISH_INLINE lucy_Analyzer*
TESTLUCY_TestSchema_Fetch_Analyzer(testlucy_TestSchema* self, cfish_String* field) {
    const TESTLUCY_TestSchema_Fetch_Analyzer_t method = (TESTLUCY_TestSchema_Fetch_Analyzer_t)cfish_obj_method(self, TESTLUCY_TestSchema_Fetch_Analyzer_OFFSET);
    return method(self, field);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_Fetch_Sim_OFFSET;
static CFISH_INLINE lucy_Similarity*
TESTLUCY_TestSchema_Fetch_Sim(testlucy_TestSchema* self, cfish_String* field) {
    const TESTLUCY_TestSchema_Fetch_Sim_t method = (TESTLUCY_TestSchema_Fetch_Sim_t)cfish_obj_method(self, TESTLUCY_TestSchema_Fetch_Sim_OFFSET);
    return method(self, field);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_Num_Fields_OFFSET;
static CFISH_INLINE uint32_t
TESTLUCY_TestSchema_Num_Fields(testlucy_TestSchema* self) {
    const TESTLUCY_TestSchema_Num_Fields_t method = (TESTLUCY_TestSchema_Num_Fields_t)cfish_obj_method(self, TESTLUCY_TestSchema_Num_Fields_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_All_Fields_OFFSET;
static CFISH_INLINE cfish_Vector*
TESTLUCY_TestSchema_All_Fields(testlucy_TestSchema* self) {
    const TESTLUCY_TestSchema_All_Fields_t method = (TESTLUCY_TestSchema_All_Fields_t)cfish_obj_method(self, TESTLUCY_TestSchema_All_Fields_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_Get_Architecture_OFFSET;
static CFISH_INLINE lucy_Architecture*
TESTLUCY_TestSchema_Get_Architecture(testlucy_TestSchema* self) {
    const TESTLUCY_TestSchema_Get_Architecture_t method = (TESTLUCY_TestSchema_Get_Architecture_t)cfish_obj_method(self, TESTLUCY_TestSchema_Get_Architecture_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_Get_Similarity_OFFSET;
static CFISH_INLINE lucy_Similarity*
TESTLUCY_TestSchema_Get_Similarity(testlucy_TestSchema* self) {
    const TESTLUCY_TestSchema_Get_Similarity_t method = (TESTLUCY_TestSchema_Get_Similarity_t)cfish_obj_method(self, TESTLUCY_TestSchema_Get_Similarity_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_Dump_OFFSET;
static CFISH_INLINE cfish_Hash*
TESTLUCY_TestSchema_Dump(testlucy_TestSchema* self) {
    const TESTLUCY_TestSchema_Dump_t method = (TESTLUCY_TestSchema_Dump_t)cfish_obj_method(self, TESTLUCY_TestSchema_Dump_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_Load_OFFSET;
static CFISH_INLINE lucy_Schema*
TESTLUCY_TestSchema_Load(testlucy_TestSchema* self, cfish_Obj* dump) {
    const TESTLUCY_TestSchema_Load_t method = (TESTLUCY_TestSchema_Load_t)cfish_obj_method(self, TESTLUCY_TestSchema_Load_OFFSET);
    return method(self, dump);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_Eat_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestSchema_Eat(testlucy_TestSchema* self, lucy_Schema* other) {
    const TESTLUCY_TestSchema_Eat_t method = (TESTLUCY_TestSchema_Eat_t)cfish_obj_method(self, TESTLUCY_TestSchema_Eat_OFFSET);
    method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestSchema_Write_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestSchema_Write(testlucy_TestSchema* self, lucy_Folder* folder, cfish_String* filename) {
    const TESTLUCY_TestSchema_Write_t method = (TESTLUCY_TestSchema_Write_t)cfish_obj_method(self, TESTLUCY_TestSchema_Write_OFFSET);
    method(self, folder, filename);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef TESTLUCY_USE_SHORT_NAMES
  #define TestSchema testlucy_TestSchema
  #define TESTSCHEMA TESTLUCY_TESTSCHEMA
  #define TestSchema_new testlucy_TestSchema_new
  #define TestSchema_init testlucy_TestSchema_init
  #define TestSchema_get_class testlucy_TestSchema_get_class
  #define TestSchema_get_class_name testlucy_TestSchema_get_class_name
  #define TestSchema_is_a testlucy_TestSchema_is_a
  #define TestSchema_Architecture_IMP TESTLUCY_TestSchema_Architecture_IMP
  #define TestSchema_To_Host TESTLUCY_TestSchema_To_Host
  #define TestSchema_To_Host_t TESTLUCY_TestSchema_To_Host_t
  #define TestSchema_Clone TESTLUCY_TestSchema_Clone
  #define TestSchema_Clone_t TESTLUCY_TestSchema_Clone_t
  #define TestSchema_Equals TESTLUCY_TestSchema_Equals
  #define TestSchema_Equals_t TESTLUCY_TestSchema_Equals_t
  #define TestSchema_Compare_To TESTLUCY_TestSchema_Compare_To
  #define TestSchema_Compare_To_t TESTLUCY_TestSchema_Compare_To_t
  #define TestSchema_Destroy TESTLUCY_TestSchema_Destroy
  #define TestSchema_Destroy_t TESTLUCY_TestSchema_Destroy_t
  #define TestSchema_To_String TESTLUCY_TestSchema_To_String
  #define TestSchema_To_String_t TESTLUCY_TestSchema_To_String_t
  #define TestSchema_Architecture TESTLUCY_TestSchema_Architecture
  #define TestSchema_Architecture_t TESTLUCY_TestSchema_Architecture_t
  #define TestSchema_Spec_Field TESTLUCY_TestSchema_Spec_Field
  #define TestSchema_Spec_Field_t TESTLUCY_TestSchema_Spec_Field_t
  #define TestSchema_Fetch_Type TESTLUCY_TestSchema_Fetch_Type
  #define TestSchema_Fetch_Type_t TESTLUCY_TestSchema_Fetch_Type_t
  #define TestSchema_Fetch_Analyzer TESTLUCY_TestSchema_Fetch_Analyzer
  #define TestSchema_Fetch_Analyzer_t TESTLUCY_TestSchema_Fetch_Analyzer_t
  #define TestSchema_Fetch_Sim TESTLUCY_TestSchema_Fetch_Sim
  #define TestSchema_Fetch_Sim_t TESTLUCY_TestSchema_Fetch_Sim_t
  #define TestSchema_Num_Fields TESTLUCY_TestSchema_Num_Fields
  #define TestSchema_Num_Fields_t TESTLUCY_TestSchema_Num_Fields_t
  #define TestSchema_All_Fields TESTLUCY_TestSchema_All_Fields
  #define TestSchema_All_Fields_t TESTLUCY_TestSchema_All_Fields_t
  #define TestSchema_Get_Architecture TESTLUCY_TestSchema_Get_Architecture
  #define TestSchema_Get_Architecture_t TESTLUCY_TestSchema_Get_Architecture_t
  #define TestSchema_Get_Similarity TESTLUCY_TestSchema_Get_Similarity
  #define TestSchema_Get_Similarity_t TESTLUCY_TestSchema_Get_Similarity_t
  #define TestSchema_Dump TESTLUCY_TestSchema_Dump
  #define TestSchema_Dump_t TESTLUCY_TestSchema_Dump_t
  #define TestSchema_Load TESTLUCY_TestSchema_Load
  #define TestSchema_Load_t TESTLUCY_TestSchema_Load_t
  #define TestSchema_Eat TESTLUCY_TestSchema_Eat
  #define TestSchema_Eat_t TESTLUCY_TestSchema_Eat_t
  #define TestSchema_Write TESTLUCY_TestSchema_Write
  #define TestSchema_Write_t TESTLUCY_TestSchema_Write_t
#endif /* TESTLUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Clownfish/TestHarness/TestBatch.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_TESTLUCY_TESTBATCHSCHEMA
extern uint32_t testlucy_TestBatchSchema_IVARS_OFFSET;
typedef struct testlucy_TestBatchSchemaIVARS testlucy_TestBatchSchemaIVARS;
static CFISH_INLINE testlucy_TestBatchSchemaIVARS*
testlucy_TestBatchSchema_IVARS(testlucy_TestBatchSchema *self) {
   char *ptr = (char*)self + testlucy_TestBatchSchema_IVARS_OFFSET;
   return (testlucy_TestBatchSchemaIVARS*)ptr;
}
#ifdef TESTLUCY_USE_SHORT_NAMES
  #define TestBatchSchemaIVARS testlucy_TestBatchSchemaIVARS
  #define TestBatchSchema_IVARS testlucy_TestBatchSchema_IVARS
#endif


#endif /* C_TESTLUCY_TESTBATCHSCHEMA */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

TESTLUCY_VISIBLE testlucy_TestBatchSchema*
testlucy_TestBatchSchema_new(void);

void
TESTLUCY_TestBatchSchema_Run_IMP(testlucy_TestBatchSchema* self, cfish_TestBatchRunner* runner);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*TESTLUCY_TestBatchSchema_To_Host_t)(testlucy_TestBatchSchema* self, void* vcache);

typedef cfish_Obj*
(*TESTLUCY_TestBatchSchema_Clone_t)(testlucy_TestBatchSchema* self);

typedef bool
(*TESTLUCY_TestBatchSchema_Equals_t)(testlucy_TestBatchSchema* self, cfish_Obj* other);

typedef int32_t
(*TESTLUCY_TestBatchSchema_Compare_To_t)(testlucy_TestBatchSchema* self, cfish_Obj* other);

typedef void
(*TESTLUCY_TestBatchSchema_Destroy_t)(testlucy_TestBatchSchema* self);

typedef cfish_String*
(*TESTLUCY_TestBatchSchema_To_String_t)(testlucy_TestBatchSchema* self);

typedef void
(*TESTLUCY_TestBatchSchema_Run_t)(testlucy_TestBatchSchema* self, cfish_TestBatchRunner* runner);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
testlucy_TestBatchSchema_get_class(testlucy_TestBatchSchema *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
testlucy_TestBatchSchema_get_class_name(testlucy_TestBatchSchema *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
testlucy_TestBatchSchema_is_a(testlucy_TestBatchSchema *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestBatchSchema_To_Host_OFFSET;
static CFISH_INLINE void*
TESTLUCY_TestBatchSchema_To_Host(testlucy_TestBatchSchema* self, void* vcache) {
    const TESTLUCY_TestBatchSchema_To_Host_t method = (TESTLUCY_TestBatchSchema_To_Host_t)cfish_obj_method(self, TESTLUCY_TestBatchSchema_To_Host_OFFSET);
    return method(self, vcache);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestBatchSchema_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTLUCY_TestBatchSchema_Clone(testlucy_TestBatchSchema* self) {
    const TESTLUCY_TestBatchSchema_Clone_t method = (TESTLUCY_TestBatchSchema_Clone_t)cfish_obj_method(self, TESTLUCY_TestBatchSchema_Clone_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestBatchSchema_Equals_OFFSET;
static CFISH_INLINE bool
TESTLUCY_TestBatchSchema_Equals(testlucy_TestBatchSchema* self, cfish_Obj* other) {
    const TESTLUCY_TestBatchSchema_Equals_t method = (TESTLUCY_TestBatchSchema_Equals_t)cfish_obj_method(self, TESTLUCY_TestBatchSchema_Equals_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestBatchSchema_Compare_To_OFFSET;
static CFISH_INLINE int32_t
TESTLUCY_TestBatchSchema_Compare_To(testlucy_TestBatchSchema* self, cfish_Obj* other) {
    const TESTLUCY_TestBatchSchema_Compare_To_t method = (TESTLUCY_TestBatchSchema_Compare_To_t)cfish_obj_method(self, TESTLUCY_TestBatchSchema_Compare_To_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestBatchSchema_Destroy_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestBatchSchema_Destroy(testlucy_TestBatchSchema* self) {
    const TESTLUCY_TestBatchSchema_Destroy_t method = (TESTLUCY_TestBatchSchema_Destroy_t)cfish_obj_method(self, TESTLUCY_TestBatchSchema_Destroy_OFFSET);
    method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestBatchSchema_To_String_OFFSET;
static CFISH_INLINE cfish_String*
TESTLUCY_TestBatchSchema_To_String(testlucy_TestBatchSchema* self) {
    const TESTLUCY_TestBatchSchema_To_String_t method = (TESTLUCY_TestBatchSchema_To_String_t)cfish_obj_method(self, TESTLUCY_TestBatchSchema_To_String_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestBatchSchema_Run_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestBatchSchema_Run(testlucy_TestBatchSchema* self, cfish_TestBatchRunner* runner) {
    const TESTLUCY_TestBatchSchema_Run_t method = (TESTLUCY_TestBatchSchema_Run_t)cfish_obj_method(self, TESTLUCY_TestBatchSchema_Run_OFFSET);
    method(self, runner);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef TESTLUCY_USE_SHORT_NAMES
  #define TestBatchSchema testlucy_TestBatchSchema
  #define TESTBATCHSCHEMA TESTLUCY_TESTBATCHSCHEMA
  #define TestBatchSchema_new testlucy_TestBatchSchema_new
  #define TestBatchSchema_get_class testlucy_TestBatchSchema_get_class
  #define TestBatchSchema_get_class_name testlucy_TestBatchSchema_get_class_name
  #define TestBatchSchema_is_a testlucy_TestBatchSchema_is_a
  #define TestBatchSchema_Run_IMP TESTLUCY_TestBatchSchema_Run_IMP
  #define TestBatchSchema_To_Host TESTLUCY_TestBatchSchema_To_Host
  #define TestBatchSchema_To_Host_t TESTLUCY_TestBatchSchema_To_Host_t
  #define TestBatchSchema_Clone TESTLUCY_TestBatchSchema_Clone
  #define TestBatchSchema_Clone_t TESTLUCY_TestBatchSchema_Clone_t
  #define TestBatchSchema_Equals TESTLUCY_TestBatchSchema_Equals
  #define TestBatchSchema_Equals_t TESTLUCY_TestBatchSchema_Equals_t
  #define TestBatchSchema_Compare_To TESTLUCY_TestBatchSchema_Compare_To
  #define TestBatchSchema_Compare_To_t TESTLUCY_TestBatchSchema_Compare_To_t
  #define TestBatchSchema_Destroy TESTLUCY_TestBatchSchema_Destroy
  #define TestBatchSchema_Destroy_t TESTLUCY_TestBatchSchema_Destroy_t
  #define TestBatchSchema_To_String TESTLUCY_TestBatchSchema_To_String
  #define TestBatchSchema_To_String_t TESTLUCY_TestBatchSchema_To_String_t
  #define TestBatchSchema_Run TESTLUCY_TestBatchSchema_Run
  #define TestBatchSchema_Run_t TESTLUCY_TestBatchSchema_Run_t
#endif /* TESTLUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_TEST_TESTSCHEMA */




