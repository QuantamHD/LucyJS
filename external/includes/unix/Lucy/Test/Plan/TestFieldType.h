/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_TEST_PLAN_TESTFIELDTYPE
#define H_LUCY_TEST_PLAN_TESTFIELDTYPE 1


#ifdef __cplusplus
extern "C" {
#endif

#include "testlucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/TestHarness/TestBatch.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_TESTLUCY_TESTFIELDTYPE
extern uint32_t testlucy_TestFType_IVARS_OFFSET;
typedef struct testlucy_TestFieldTypeIVARS testlucy_TestFieldTypeIVARS;
static CFISH_INLINE testlucy_TestFieldTypeIVARS*
testlucy_TestFType_IVARS(testlucy_TestFieldType *self) {
   char *ptr = (char*)self + testlucy_TestFType_IVARS_OFFSET;
   return (testlucy_TestFieldTypeIVARS*)ptr;
}
#ifdef TESTLUCY_USE_SHORT_NAMES
  #define TestFieldTypeIVARS testlucy_TestFieldTypeIVARS
  #define TestFType_IVARS testlucy_TestFType_IVARS
#endif


#endif /* C_TESTLUCY_TESTFIELDTYPE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

TESTLUCY_VISIBLE testlucy_TestFieldType*
testlucy_TestFType_new(void);

void
TESTLUCY_TestFType_Run_IMP(testlucy_TestFieldType* self, cfish_TestBatchRunner* runner);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*TESTLUCY_TestFType_To_Host_t)(testlucy_TestFieldType* self, void* vcache);

typedef cfish_Obj*
(*TESTLUCY_TestFType_Clone_t)(testlucy_TestFieldType* self);

typedef bool
(*TESTLUCY_TestFType_Equals_t)(testlucy_TestFieldType* self, cfish_Obj* other);

typedef int32_t
(*TESTLUCY_TestFType_Compare_To_t)(testlucy_TestFieldType* self, cfish_Obj* other);

typedef void
(*TESTLUCY_TestFType_Destroy_t)(testlucy_TestFieldType* self);

typedef cfish_String*
(*TESTLUCY_TestFType_To_String_t)(testlucy_TestFieldType* self);

typedef void
(*TESTLUCY_TestFType_Run_t)(testlucy_TestFieldType* self, cfish_TestBatchRunner* runner);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
testlucy_TestFType_get_class(testlucy_TestFieldType *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
testlucy_TestFType_get_class_name(testlucy_TestFieldType *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
testlucy_TestFType_is_a(testlucy_TestFieldType *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestFType_To_Host_OFFSET;
static CFISH_INLINE void*
TESTLUCY_TestFType_To_Host(testlucy_TestFieldType* self, void* vcache) {
    const TESTLUCY_TestFType_To_Host_t method = (TESTLUCY_TestFType_To_Host_t)cfish_obj_method(self, TESTLUCY_TestFType_To_Host_OFFSET);
    return method(self, vcache);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestFType_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTLUCY_TestFType_Clone(testlucy_TestFieldType* self) {
    const TESTLUCY_TestFType_Clone_t method = (TESTLUCY_TestFType_Clone_t)cfish_obj_method(self, TESTLUCY_TestFType_Clone_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestFType_Equals_OFFSET;
static CFISH_INLINE bool
TESTLUCY_TestFType_Equals(testlucy_TestFieldType* self, cfish_Obj* other) {
    const TESTLUCY_TestFType_Equals_t method = (TESTLUCY_TestFType_Equals_t)cfish_obj_method(self, TESTLUCY_TestFType_Equals_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestFType_Compare_To_OFFSET;
static CFISH_INLINE int32_t
TESTLUCY_TestFType_Compare_To(testlucy_TestFieldType* self, cfish_Obj* other) {
    const TESTLUCY_TestFType_Compare_To_t method = (TESTLUCY_TestFType_Compare_To_t)cfish_obj_method(self, TESTLUCY_TestFType_Compare_To_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestFType_Destroy_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestFType_Destroy(testlucy_TestFieldType* self) {
    const TESTLUCY_TestFType_Destroy_t method = (TESTLUCY_TestFType_Destroy_t)cfish_obj_method(self, TESTLUCY_TestFType_Destroy_OFFSET);
    method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestFType_To_String_OFFSET;
static CFISH_INLINE cfish_String*
TESTLUCY_TestFType_To_String(testlucy_TestFieldType* self) {
    const TESTLUCY_TestFType_To_String_t method = (TESTLUCY_TestFType_To_String_t)cfish_obj_method(self, TESTLUCY_TestFType_To_String_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestFType_Run_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestFType_Run(testlucy_TestFieldType* self, cfish_TestBatchRunner* runner) {
    const TESTLUCY_TestFType_Run_t method = (TESTLUCY_TestFType_Run_t)cfish_obj_method(self, TESTLUCY_TestFType_Run_OFFSET);
    method(self, runner);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef TESTLUCY_USE_SHORT_NAMES
  #define TestFieldType testlucy_TestFieldType
  #define TESTFIELDTYPE TESTLUCY_TESTFIELDTYPE
  #define TestFType_new testlucy_TestFType_new
  #define TestFType_get_class testlucy_TestFType_get_class
  #define TestFType_get_class_name testlucy_TestFType_get_class_name
  #define TestFType_is_a testlucy_TestFType_is_a
  #define TestFType_Run_IMP TESTLUCY_TestFType_Run_IMP
  #define TestFType_To_Host TESTLUCY_TestFType_To_Host
  #define TestFType_To_Host_t TESTLUCY_TestFType_To_Host_t
  #define TestFType_Clone TESTLUCY_TestFType_Clone
  #define TestFType_Clone_t TESTLUCY_TestFType_Clone_t
  #define TestFType_Equals TESTLUCY_TestFType_Equals
  #define TestFType_Equals_t TESTLUCY_TestFType_Equals_t
  #define TestFType_Compare_To TESTLUCY_TestFType_Compare_To
  #define TestFType_Compare_To_t TESTLUCY_TestFType_Compare_To_t
  #define TestFType_Destroy TESTLUCY_TestFType_Destroy
  #define TestFType_Destroy_t TESTLUCY_TestFType_Destroy_t
  #define TestFType_To_String TESTLUCY_TestFType_To_String
  #define TestFType_To_String_t TESTLUCY_TestFType_To_String_t
  #define TestFType_Run TESTLUCY_TestFType_Run
  #define TestFType_Run_t TESTLUCY_TestFType_Run_t
#endif /* TESTLUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy/Plan/FieldType.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_TESTLUCY_DUMMYFIELDTYPE
extern uint32_t testlucy_DummyFieldType_IVARS_OFFSET;
typedef struct testlucy_DummyFieldTypeIVARS testlucy_DummyFieldTypeIVARS;
static CFISH_INLINE testlucy_DummyFieldTypeIVARS*
testlucy_DummyFieldType_IVARS(testlucy_DummyFieldType *self) {
   char *ptr = (char*)self + testlucy_DummyFieldType_IVARS_OFFSET;
   return (testlucy_DummyFieldTypeIVARS*)ptr;
}
#ifdef TESTLUCY_USE_SHORT_NAMES
  #define DummyFieldTypeIVARS testlucy_DummyFieldTypeIVARS
  #define DummyFieldType_IVARS testlucy_DummyFieldType_IVARS
#endif


#endif /* C_TESTLUCY_DUMMYFIELDTYPE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

TESTLUCY_VISIBLE testlucy_DummyFieldType*
testlucy_DummyFieldType_new(void);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*TESTLUCY_DummyFieldType_To_Host_t)(testlucy_DummyFieldType* self, void* vcache);

typedef cfish_Obj*
(*TESTLUCY_DummyFieldType_Clone_t)(testlucy_DummyFieldType* self);

typedef bool
(*TESTLUCY_DummyFieldType_Equals_t)(testlucy_DummyFieldType* self, cfish_Obj* other);

typedef int32_t
(*TESTLUCY_DummyFieldType_Compare_To_t)(testlucy_DummyFieldType* self, cfish_Obj* other);

typedef void
(*TESTLUCY_DummyFieldType_Destroy_t)(testlucy_DummyFieldType* self);

typedef cfish_String*
(*TESTLUCY_DummyFieldType_To_String_t)(testlucy_DummyFieldType* self);

typedef void
(*TESTLUCY_DummyFieldType_Set_Boost_t)(testlucy_DummyFieldType* self, float boost);

typedef float
(*TESTLUCY_DummyFieldType_Get_Boost_t)(testlucy_DummyFieldType* self);

typedef void
(*TESTLUCY_DummyFieldType_Set_Indexed_t)(testlucy_DummyFieldType* self, bool indexed);

typedef bool
(*TESTLUCY_DummyFieldType_Indexed_t)(testlucy_DummyFieldType* self);

typedef void
(*TESTLUCY_DummyFieldType_Set_Stored_t)(testlucy_DummyFieldType* self, bool stored);

typedef bool
(*TESTLUCY_DummyFieldType_Stored_t)(testlucy_DummyFieldType* self);

typedef void
(*TESTLUCY_DummyFieldType_Set_Sortable_t)(testlucy_DummyFieldType* self, bool sortable);

typedef bool
(*TESTLUCY_DummyFieldType_Sortable_t)(testlucy_DummyFieldType* self);

typedef bool
(*TESTLUCY_DummyFieldType_Binary_t)(testlucy_DummyFieldType* self);

typedef int32_t
(*TESTLUCY_DummyFieldType_Compare_Values_t)(testlucy_DummyFieldType* self, cfish_Obj* a, cfish_Obj* b);

typedef lucy_TermStepper*
(*TESTLUCY_DummyFieldType_Make_Term_Stepper_t)(testlucy_DummyFieldType* self);

typedef int8_t
(*TESTLUCY_DummyFieldType_Primitive_ID_t)(testlucy_DummyFieldType* self);

typedef cfish_Hash*
(*TESTLUCY_DummyFieldType_Dump_For_Schema_t)(testlucy_DummyFieldType* self);

typedef cfish_Obj*
(*TESTLUCY_DummyFieldType_Dump_t)(testlucy_DummyFieldType* self);

typedef cfish_Obj*
(*TESTLUCY_DummyFieldType_Load_t)(testlucy_DummyFieldType* self, cfish_Obj* dump);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
testlucy_DummyFieldType_get_class(testlucy_DummyFieldType *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
testlucy_DummyFieldType_get_class_name(testlucy_DummyFieldType *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
testlucy_DummyFieldType_is_a(testlucy_DummyFieldType *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_To_Host_OFFSET;
static CFISH_INLINE void*
TESTLUCY_DummyFieldType_To_Host(testlucy_DummyFieldType* self, void* vcache) {
    const TESTLUCY_DummyFieldType_To_Host_t method = (TESTLUCY_DummyFieldType_To_Host_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_To_Host_OFFSET);
    return method(self, vcache);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTLUCY_DummyFieldType_Clone(testlucy_DummyFieldType* self) {
    const TESTLUCY_DummyFieldType_Clone_t method = (TESTLUCY_DummyFieldType_Clone_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Clone_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Equals_OFFSET;
static CFISH_INLINE bool
TESTLUCY_DummyFieldType_Equals(testlucy_DummyFieldType* self, cfish_Obj* other) {
    const TESTLUCY_DummyFieldType_Equals_t method = (TESTLUCY_DummyFieldType_Equals_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Equals_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Compare_To_OFFSET;
static CFISH_INLINE int32_t
TESTLUCY_DummyFieldType_Compare_To(testlucy_DummyFieldType* self, cfish_Obj* other) {
    const TESTLUCY_DummyFieldType_Compare_To_t method = (TESTLUCY_DummyFieldType_Compare_To_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Compare_To_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Destroy_OFFSET;
static CFISH_INLINE void
TESTLUCY_DummyFieldType_Destroy(testlucy_DummyFieldType* self) {
    const TESTLUCY_DummyFieldType_Destroy_t method = (TESTLUCY_DummyFieldType_Destroy_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Destroy_OFFSET);
    method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_To_String_OFFSET;
static CFISH_INLINE cfish_String*
TESTLUCY_DummyFieldType_To_String(testlucy_DummyFieldType* self) {
    const TESTLUCY_DummyFieldType_To_String_t method = (TESTLUCY_DummyFieldType_To_String_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_To_String_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Set_Boost_OFFSET;
static CFISH_INLINE void
TESTLUCY_DummyFieldType_Set_Boost(testlucy_DummyFieldType* self, float boost) {
    const TESTLUCY_DummyFieldType_Set_Boost_t method = (TESTLUCY_DummyFieldType_Set_Boost_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Set_Boost_OFFSET);
    method(self, boost);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Get_Boost_OFFSET;
static CFISH_INLINE float
TESTLUCY_DummyFieldType_Get_Boost(testlucy_DummyFieldType* self) {
    const TESTLUCY_DummyFieldType_Get_Boost_t method = (TESTLUCY_DummyFieldType_Get_Boost_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Get_Boost_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Set_Indexed_OFFSET;
static CFISH_INLINE void
TESTLUCY_DummyFieldType_Set_Indexed(testlucy_DummyFieldType* self, bool indexed) {
    const TESTLUCY_DummyFieldType_Set_Indexed_t method = (TESTLUCY_DummyFieldType_Set_Indexed_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Set_Indexed_OFFSET);
    method(self, indexed);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Indexed_OFFSET;
static CFISH_INLINE bool
TESTLUCY_DummyFieldType_Indexed(testlucy_DummyFieldType* self) {
    const TESTLUCY_DummyFieldType_Indexed_t method = (TESTLUCY_DummyFieldType_Indexed_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Indexed_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Set_Stored_OFFSET;
static CFISH_INLINE void
TESTLUCY_DummyFieldType_Set_Stored(testlucy_DummyFieldType* self, bool stored) {
    const TESTLUCY_DummyFieldType_Set_Stored_t method = (TESTLUCY_DummyFieldType_Set_Stored_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Set_Stored_OFFSET);
    method(self, stored);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Stored_OFFSET;
static CFISH_INLINE bool
TESTLUCY_DummyFieldType_Stored(testlucy_DummyFieldType* self) {
    const TESTLUCY_DummyFieldType_Stored_t method = (TESTLUCY_DummyFieldType_Stored_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Stored_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Set_Sortable_OFFSET;
static CFISH_INLINE void
TESTLUCY_DummyFieldType_Set_Sortable(testlucy_DummyFieldType* self, bool sortable) {
    const TESTLUCY_DummyFieldType_Set_Sortable_t method = (TESTLUCY_DummyFieldType_Set_Sortable_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Set_Sortable_OFFSET);
    method(self, sortable);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Sortable_OFFSET;
static CFISH_INLINE bool
TESTLUCY_DummyFieldType_Sortable(testlucy_DummyFieldType* self) {
    const TESTLUCY_DummyFieldType_Sortable_t method = (TESTLUCY_DummyFieldType_Sortable_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Sortable_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Binary_OFFSET;
static CFISH_INLINE bool
TESTLUCY_DummyFieldType_Binary(testlucy_DummyFieldType* self) {
    const TESTLUCY_DummyFieldType_Binary_t method = (TESTLUCY_DummyFieldType_Binary_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Binary_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Compare_Values_OFFSET;
static CFISH_INLINE int32_t
TESTLUCY_DummyFieldType_Compare_Values(testlucy_DummyFieldType* self, cfish_Obj* a, cfish_Obj* b) {
    const TESTLUCY_DummyFieldType_Compare_Values_t method = (TESTLUCY_DummyFieldType_Compare_Values_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Compare_Values_OFFSET);
    return method(self, a, b);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Make_Term_Stepper_OFFSET;
static CFISH_INLINE lucy_TermStepper*
TESTLUCY_DummyFieldType_Make_Term_Stepper(testlucy_DummyFieldType* self) {
    const TESTLUCY_DummyFieldType_Make_Term_Stepper_t method = (TESTLUCY_DummyFieldType_Make_Term_Stepper_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Make_Term_Stepper_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Primitive_ID_OFFSET;
static CFISH_INLINE int8_t
TESTLUCY_DummyFieldType_Primitive_ID(testlucy_DummyFieldType* self) {
    const TESTLUCY_DummyFieldType_Primitive_ID_t method = (TESTLUCY_DummyFieldType_Primitive_ID_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Primitive_ID_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Dump_For_Schema_OFFSET;
static CFISH_INLINE cfish_Hash*
TESTLUCY_DummyFieldType_Dump_For_Schema(testlucy_DummyFieldType* self) {
    const TESTLUCY_DummyFieldType_Dump_For_Schema_t method = (TESTLUCY_DummyFieldType_Dump_For_Schema_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Dump_For_Schema_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Dump_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTLUCY_DummyFieldType_Dump(testlucy_DummyFieldType* self) {
    const TESTLUCY_DummyFieldType_Dump_t method = (TESTLUCY_DummyFieldType_Dump_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Dump_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_DummyFieldType_Load_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTLUCY_DummyFieldType_Load(testlucy_DummyFieldType* self, cfish_Obj* dump) {
    const TESTLUCY_DummyFieldType_Load_t method = (TESTLUCY_DummyFieldType_Load_t)cfish_obj_method(self, TESTLUCY_DummyFieldType_Load_OFFSET);
    return method(self, dump);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef TESTLUCY_USE_SHORT_NAMES
  #define DummyFieldType testlucy_DummyFieldType
  #define DUMMYFIELDTYPE TESTLUCY_DUMMYFIELDTYPE
  #define DummyFieldType_new testlucy_DummyFieldType_new
  #define DummyFieldType_get_class testlucy_DummyFieldType_get_class
  #define DummyFieldType_get_class_name testlucy_DummyFieldType_get_class_name
  #define DummyFieldType_is_a testlucy_DummyFieldType_is_a
  #define DummyFieldType_To_Host TESTLUCY_DummyFieldType_To_Host
  #define DummyFieldType_To_Host_t TESTLUCY_DummyFieldType_To_Host_t
  #define DummyFieldType_Clone TESTLUCY_DummyFieldType_Clone
  #define DummyFieldType_Clone_t TESTLUCY_DummyFieldType_Clone_t
  #define DummyFieldType_Equals TESTLUCY_DummyFieldType_Equals
  #define DummyFieldType_Equals_t TESTLUCY_DummyFieldType_Equals_t
  #define DummyFieldType_Compare_To TESTLUCY_DummyFieldType_Compare_To
  #define DummyFieldType_Compare_To_t TESTLUCY_DummyFieldType_Compare_To_t
  #define DummyFieldType_Destroy TESTLUCY_DummyFieldType_Destroy
  #define DummyFieldType_Destroy_t TESTLUCY_DummyFieldType_Destroy_t
  #define DummyFieldType_To_String TESTLUCY_DummyFieldType_To_String
  #define DummyFieldType_To_String_t TESTLUCY_DummyFieldType_To_String_t
  #define DummyFieldType_Set_Boost TESTLUCY_DummyFieldType_Set_Boost
  #define DummyFieldType_Set_Boost_t TESTLUCY_DummyFieldType_Set_Boost_t
  #define DummyFieldType_Get_Boost TESTLUCY_DummyFieldType_Get_Boost
  #define DummyFieldType_Get_Boost_t TESTLUCY_DummyFieldType_Get_Boost_t
  #define DummyFieldType_Set_Indexed TESTLUCY_DummyFieldType_Set_Indexed
  #define DummyFieldType_Set_Indexed_t TESTLUCY_DummyFieldType_Set_Indexed_t
  #define DummyFieldType_Indexed TESTLUCY_DummyFieldType_Indexed
  #define DummyFieldType_Indexed_t TESTLUCY_DummyFieldType_Indexed_t
  #define DummyFieldType_Set_Stored TESTLUCY_DummyFieldType_Set_Stored
  #define DummyFieldType_Set_Stored_t TESTLUCY_DummyFieldType_Set_Stored_t
  #define DummyFieldType_Stored TESTLUCY_DummyFieldType_Stored
  #define DummyFieldType_Stored_t TESTLUCY_DummyFieldType_Stored_t
  #define DummyFieldType_Set_Sortable TESTLUCY_DummyFieldType_Set_Sortable
  #define DummyFieldType_Set_Sortable_t TESTLUCY_DummyFieldType_Set_Sortable_t
  #define DummyFieldType_Sortable TESTLUCY_DummyFieldType_Sortable
  #define DummyFieldType_Sortable_t TESTLUCY_DummyFieldType_Sortable_t
  #define DummyFieldType_Binary TESTLUCY_DummyFieldType_Binary
  #define DummyFieldType_Binary_t TESTLUCY_DummyFieldType_Binary_t
  #define DummyFieldType_Compare_Values TESTLUCY_DummyFieldType_Compare_Values
  #define DummyFieldType_Compare_Values_t TESTLUCY_DummyFieldType_Compare_Values_t
  #define DummyFieldType_Make_Term_Stepper TESTLUCY_DummyFieldType_Make_Term_Stepper
  #define DummyFieldType_Make_Term_Stepper_t TESTLUCY_DummyFieldType_Make_Term_Stepper_t
  #define DummyFieldType_Primitive_ID TESTLUCY_DummyFieldType_Primitive_ID
  #define DummyFieldType_Primitive_ID_t TESTLUCY_DummyFieldType_Primitive_ID_t
  #define DummyFieldType_Dump_For_Schema TESTLUCY_DummyFieldType_Dump_For_Schema
  #define DummyFieldType_Dump_For_Schema_t TESTLUCY_DummyFieldType_Dump_For_Schema_t
  #define DummyFieldType_Dump TESTLUCY_DummyFieldType_Dump
  #define DummyFieldType_Dump_t TESTLUCY_DummyFieldType_Dump_t
  #define DummyFieldType_Load TESTLUCY_DummyFieldType_Load
  #define DummyFieldType_Load_t TESTLUCY_DummyFieldType_Load_t
#endif /* TESTLUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_TEST_PLAN_TESTFIELDTYPE */




