/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_DOCVECTOR
#define H_LUCY_INDEX_DOCVECTOR 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_DOCVECTOR
extern uint32_t lucy_DocVec_IVARS_OFFSET;
typedef struct lucy_DocVectorIVARS lucy_DocVectorIVARS;
static CFISH_INLINE lucy_DocVectorIVARS*
lucy_DocVec_IVARS(lucy_DocVector *self) {
   char *ptr = (char*)self + lucy_DocVec_IVARS_OFFSET;
   return (lucy_DocVectorIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define DocVectorIVARS lucy_DocVectorIVARS
  #define DocVec_IVARS lucy_DocVec_IVARS
#endif

struct lucy_DocVectorIVARS {
    cfish_Hash* field_bufs;
    cfish_Hash* field_vectors;
};

#endif /* C_LUCY_DOCVECTOR */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_DocVector*
lucy_DocVec_new(void);

LUCY_VISIBLE lucy_DocVector*
lucy_DocVec_init(lucy_DocVector* self);

lucy_TermVector*
LUCY_DocVec_Term_Vector_IMP(lucy_DocVector* self, cfish_String* field, cfish_String* term);

void
LUCY_DocVec_Add_Field_Buf_IMP(lucy_DocVector* self, cfish_String* field, cfish_Blob* field_buf);

cfish_Blob*
LUCY_DocVec_Field_Buf_IMP(lucy_DocVector* self, cfish_String* field);

void
LUCY_DocVec_Serialize_IMP(lucy_DocVector* self, lucy_OutStream* outstream);

lucy_DocVector*
LUCY_DocVec_Deserialize_IMP(lucy_DocVector* self, lucy_InStream* instream);

void
LUCY_DocVec_Destroy_IMP(lucy_DocVector* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_DocVec_To_Host_t)(lucy_DocVector* self, void* vcache);

typedef cfish_Obj*
(*LUCY_DocVec_Clone_t)(lucy_DocVector* self);

typedef bool
(*LUCY_DocVec_Equals_t)(lucy_DocVector* self, cfish_Obj* other);

typedef int32_t
(*LUCY_DocVec_Compare_To_t)(lucy_DocVector* self, cfish_Obj* other);

typedef void
(*LUCY_DocVec_Destroy_t)(lucy_DocVector* self);

typedef cfish_String*
(*LUCY_DocVec_To_String_t)(lucy_DocVector* self);

typedef lucy_TermVector*
(*LUCY_DocVec_Term_Vector_t)(lucy_DocVector* self, cfish_String* field, cfish_String* term);

typedef void
(*LUCY_DocVec_Add_Field_Buf_t)(lucy_DocVector* self, cfish_String* field, cfish_Blob* field_buf);

typedef cfish_Blob*
(*LUCY_DocVec_Field_Buf_t)(lucy_DocVector* self, cfish_String* field);

typedef void
(*LUCY_DocVec_Serialize_t)(lucy_DocVector* self, lucy_OutStream* outstream);

typedef lucy_DocVector*
(*LUCY_DocVec_Deserialize_t)(lucy_DocVector* self, lucy_InStream* instream);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_DocVec_get_class(lucy_DocVector *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_DocVec_get_class_name(lucy_DocVector *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_DocVec_is_a(lucy_DocVector *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_DocVec_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_DocVec_To_Host(lucy_DocVector* self, void* vcache) {
    const LUCY_DocVec_To_Host_t method = (LUCY_DocVec_To_Host_t)cfish_obj_method(self, LUCY_DocVec_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_DocVec_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_DocVec_Clone(lucy_DocVector* self) {
    const LUCY_DocVec_Clone_t method = (LUCY_DocVec_Clone_t)cfish_obj_method(self, LUCY_DocVec_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DocVec_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_DocVec_Equals(lucy_DocVector* self, cfish_Obj* other) {
    const LUCY_DocVec_Equals_t method = (LUCY_DocVec_Equals_t)cfish_obj_method(self, LUCY_DocVec_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_DocVec_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_DocVec_Compare_To(lucy_DocVector* self, cfish_Obj* other) {
    const LUCY_DocVec_Compare_To_t method = (LUCY_DocVec_Compare_To_t)cfish_obj_method(self, LUCY_DocVec_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_DocVec_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_DocVec_Destroy(lucy_DocVector* self) {
    const LUCY_DocVec_Destroy_t method = (LUCY_DocVec_Destroy_t)cfish_obj_method(self, LUCY_DocVec_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DocVec_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_DocVec_To_String(lucy_DocVector* self) {
    const LUCY_DocVec_To_String_t method = (LUCY_DocVec_To_String_t)cfish_obj_method(self, LUCY_DocVec_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DocVec_Term_Vector_OFFSET;
static CFISH_INLINE lucy_TermVector*
LUCY_DocVec_Term_Vector(lucy_DocVector* self, cfish_String* field, cfish_String* term) {
    const LUCY_DocVec_Term_Vector_t method = (LUCY_DocVec_Term_Vector_t)cfish_obj_method(self, LUCY_DocVec_Term_Vector_OFFSET);
    return method(self, field, term);
}

extern LUCY_VISIBLE uint32_t LUCY_DocVec_Add_Field_Buf_OFFSET;
static CFISH_INLINE void
LUCY_DocVec_Add_Field_Buf(lucy_DocVector* self, cfish_String* field, cfish_Blob* field_buf) {
    const LUCY_DocVec_Add_Field_Buf_t method = (LUCY_DocVec_Add_Field_Buf_t)cfish_obj_method(self, LUCY_DocVec_Add_Field_Buf_OFFSET);
    method(self, field, field_buf);
}

extern LUCY_VISIBLE uint32_t LUCY_DocVec_Field_Buf_OFFSET;
static CFISH_INLINE cfish_Blob*
LUCY_DocVec_Field_Buf(lucy_DocVector* self, cfish_String* field) {
    const LUCY_DocVec_Field_Buf_t method = (LUCY_DocVec_Field_Buf_t)cfish_obj_method(self, LUCY_DocVec_Field_Buf_OFFSET);
    return method(self, field);
}

extern LUCY_VISIBLE uint32_t LUCY_DocVec_Serialize_OFFSET;
static CFISH_INLINE void
LUCY_DocVec_Serialize(lucy_DocVector* self, lucy_OutStream* outstream) {
    const LUCY_DocVec_Serialize_t method = (LUCY_DocVec_Serialize_t)cfish_obj_method(self, LUCY_DocVec_Serialize_OFFSET);
    method(self, outstream);
}

extern LUCY_VISIBLE uint32_t LUCY_DocVec_Deserialize_OFFSET;
static CFISH_INLINE lucy_DocVector*
LUCY_DocVec_Deserialize(lucy_DocVector* self, lucy_InStream* instream) {
    const LUCY_DocVec_Deserialize_t method = (LUCY_DocVec_Deserialize_t)cfish_obj_method(self, LUCY_DocVec_Deserialize_OFFSET);
    return method(self, instream);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_DocVec_Term_Vector_OVERRIDE NULL
#define Lucy_DocVec_Add_Field_Buf_OVERRIDE NULL
#define Lucy_DocVec_Field_Buf_OVERRIDE NULL
#define Lucy_DocVec_Serialize_OVERRIDE NULL
#define Lucy_DocVec_Deserialize_OVERRIDE NULL
#else
lucy_TermVector*
Lucy_DocVec_Term_Vector_OVERRIDE(lucy_DocVector* self, cfish_String* field, cfish_String* term);
void
Lucy_DocVec_Add_Field_Buf_OVERRIDE(lucy_DocVector* self, cfish_String* field, cfish_Blob* field_buf);
cfish_Blob*
Lucy_DocVec_Field_Buf_OVERRIDE(lucy_DocVector* self, cfish_String* field);
void
Lucy_DocVec_Serialize_OVERRIDE(lucy_DocVector* self, lucy_OutStream* outstream);
lucy_DocVector*
Lucy_DocVec_Deserialize_OVERRIDE(lucy_DocVector* self, lucy_InStream* instream);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define DocVector lucy_DocVector
  #define DOCVECTOR LUCY_DOCVECTOR
  #define DocVec_new lucy_DocVec_new
  #define DocVec_init lucy_DocVec_init
  #define DocVec_get_class lucy_DocVec_get_class
  #define DocVec_get_class_name lucy_DocVec_get_class_name
  #define DocVec_is_a lucy_DocVec_is_a
  #define DocVec_Term_Vector_IMP LUCY_DocVec_Term_Vector_IMP
  #define DocVec_Add_Field_Buf_IMP LUCY_DocVec_Add_Field_Buf_IMP
  #define DocVec_Field_Buf_IMP LUCY_DocVec_Field_Buf_IMP
  #define DocVec_Serialize_IMP LUCY_DocVec_Serialize_IMP
  #define DocVec_Deserialize_IMP LUCY_DocVec_Deserialize_IMP
  #define DocVec_Destroy_IMP LUCY_DocVec_Destroy_IMP
  #define DocVec_To_Host LUCY_DocVec_To_Host
  #define DocVec_To_Host_t LUCY_DocVec_To_Host_t
  #define DocVec_Clone LUCY_DocVec_Clone
  #define DocVec_Clone_t LUCY_DocVec_Clone_t
  #define DocVec_Equals LUCY_DocVec_Equals
  #define DocVec_Equals_t LUCY_DocVec_Equals_t
  #define DocVec_Compare_To LUCY_DocVec_Compare_To
  #define DocVec_Compare_To_t LUCY_DocVec_Compare_To_t
  #define DocVec_Destroy LUCY_DocVec_Destroy
  #define DocVec_Destroy_t LUCY_DocVec_Destroy_t
  #define DocVec_To_String LUCY_DocVec_To_String
  #define DocVec_To_String_t LUCY_DocVec_To_String_t
  #define DocVec_Term_Vector LUCY_DocVec_Term_Vector
  #define DocVec_Term_Vector_t LUCY_DocVec_Term_Vector_t
  #define DocVec_Add_Field_Buf LUCY_DocVec_Add_Field_Buf
  #define DocVec_Add_Field_Buf_t LUCY_DocVec_Add_Field_Buf_t
  #define DocVec_Field_Buf LUCY_DocVec_Field_Buf
  #define DocVec_Field_Buf_t LUCY_DocVec_Field_Buf_t
  #define DocVec_Serialize LUCY_DocVec_Serialize
  #define DocVec_Serialize_t LUCY_DocVec_Serialize_t
  #define DocVec_Deserialize LUCY_DocVec_Deserialize
  #define DocVec_Deserialize_t LUCY_DocVec_Deserialize_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_DOCVECTOR */




