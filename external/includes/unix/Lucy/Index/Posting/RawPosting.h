/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_POSTING_RAWPOSTING
#define H_LUCY_INDEX_POSTING_RAWPOSTING 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Index/Posting.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_RAWPOSTING
extern uint32_t lucy_RawPost_IVARS_OFFSET;
typedef struct lucy_RawPostingIVARS lucy_RawPostingIVARS;
static CFISH_INLINE lucy_RawPostingIVARS*
lucy_RawPost_IVARS(lucy_RawPosting *self) {
   char *ptr = (char*)self + lucy_RawPost_IVARS_OFFSET;
   return (lucy_RawPostingIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define RawPostingIVARS lucy_RawPostingIVARS
  #define RawPost_IVARS lucy_RawPost_IVARS
#endif

struct lucy_RawPostingIVARS {
    int32_t doc_id;
    uint32_t freq;
    size_t content_len;
    size_t aux_len;
    char blob[1];
};

#endif /* C_LUCY_RAWPOSTING */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_RawPosting*
lucy_RawPost_new(void* pre_allocated_memory, int32_t doc_id, uint32_t freq, const char* term_text, size_t term_text_len);

int32_t
LUCY_RawPost_Compare_To_IMP(lucy_RawPosting* self, cfish_Obj* other);

void
LUCY_RawPost_Destroy_IMP(lucy_RawPosting* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_RawPost_To_Host_t)(lucy_RawPosting* self, void* vcache);

typedef cfish_Obj*
(*LUCY_RawPost_Clone_t)(lucy_RawPosting* self);

typedef bool
(*LUCY_RawPost_Equals_t)(lucy_RawPosting* self, cfish_Obj* other);

typedef int32_t
(*LUCY_RawPost_Compare_To_t)(lucy_RawPosting* self, cfish_Obj* other);

typedef void
(*LUCY_RawPost_Destroy_t)(lucy_RawPosting* self);

typedef cfish_String*
(*LUCY_RawPost_To_String_t)(lucy_RawPosting* self);

typedef void
(*LUCY_RawPost_Reset_t)(lucy_RawPosting* self);

typedef void
(*LUCY_RawPost_Write_Key_Frame_t)(lucy_RawPosting* self, lucy_OutStream* outstream, cfish_Obj* value);

typedef void
(*LUCY_RawPost_Write_Delta_t)(lucy_RawPosting* self, lucy_OutStream* outstream, cfish_Obj* value);

typedef void
(*LUCY_RawPost_Read_Key_Frame_t)(lucy_RawPosting* self, lucy_InStream* instream);

typedef void
(*LUCY_RawPost_Read_Delta_t)(lucy_RawPosting* self, lucy_InStream* instream);

typedef void
(*LUCY_RawPost_Read_Record_t)(lucy_RawPosting* self, lucy_InStream* instream);

typedef lucy_RawPosting*
(*LUCY_RawPost_Read_Raw_t)(lucy_RawPosting* self, lucy_InStream* instream, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool);

typedef void
(*LUCY_RawPost_Add_Inversion_To_Pool_t)(lucy_RawPosting* self, lucy_PostingPool* post_pool, lucy_Inversion* inversion, lucy_FieldType* type, int32_t doc_id, float doc_boost, float length_norm);

typedef void
(*LUCY_RawPost_Set_Doc_ID_t)(lucy_RawPosting* self, int32_t doc_id);

typedef int32_t
(*LUCY_RawPost_Get_Doc_ID_t)(lucy_RawPosting* self);

typedef lucy_Matcher*
(*LUCY_RawPost_Make_Matcher_t)(lucy_RawPosting* self, lucy_Similarity* sim, lucy_PostingList* plist, lucy_Compiler* compiler, bool need_score);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_RawPost_get_class(lucy_RawPosting *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_RawPost_get_class_name(lucy_RawPosting *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_RawPost_is_a(lucy_RawPosting *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_RawPost_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_RawPost_To_Host(lucy_RawPosting* self, void* vcache) {
    const LUCY_RawPost_To_Host_t method = (LUCY_RawPost_To_Host_t)cfish_obj_method(self, LUCY_RawPost_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPost_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_RawPost_Clone(lucy_RawPosting* self) {
    const LUCY_RawPost_Clone_t method = (LUCY_RawPost_Clone_t)cfish_obj_method(self, LUCY_RawPost_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPost_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_RawPost_Equals(lucy_RawPosting* self, cfish_Obj* other) {
    const LUCY_RawPost_Equals_t method = (LUCY_RawPost_Equals_t)cfish_obj_method(self, LUCY_RawPost_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPost_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_RawPost_Compare_To(lucy_RawPosting* self, cfish_Obj* other) {
    const LUCY_RawPost_Compare_To_t method = (LUCY_RawPost_Compare_To_t)cfish_obj_method(self, LUCY_RawPost_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPost_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_RawPost_Destroy(lucy_RawPosting* self) {
    const LUCY_RawPost_Destroy_t method = (LUCY_RawPost_Destroy_t)cfish_obj_method(self, LUCY_RawPost_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPost_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_RawPost_To_String(lucy_RawPosting* self) {
    const LUCY_RawPost_To_String_t method = (LUCY_RawPost_To_String_t)cfish_obj_method(self, LUCY_RawPost_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPost_Reset_OFFSET;
static CFISH_INLINE void
LUCY_RawPost_Reset(lucy_RawPosting* self) {
    const LUCY_RawPost_Reset_t method = (LUCY_RawPost_Reset_t)cfish_obj_method(self, LUCY_RawPost_Reset_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPost_Write_Key_Frame_OFFSET;
static CFISH_INLINE void
LUCY_RawPost_Write_Key_Frame(lucy_RawPosting* self, lucy_OutStream* outstream, cfish_Obj* value) {
    const LUCY_RawPost_Write_Key_Frame_t method = (LUCY_RawPost_Write_Key_Frame_t)cfish_obj_method(self, LUCY_RawPost_Write_Key_Frame_OFFSET);
    method(self, outstream, value);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPost_Write_Delta_OFFSET;
static CFISH_INLINE void
LUCY_RawPost_Write_Delta(lucy_RawPosting* self, lucy_OutStream* outstream, cfish_Obj* value) {
    const LUCY_RawPost_Write_Delta_t method = (LUCY_RawPost_Write_Delta_t)cfish_obj_method(self, LUCY_RawPost_Write_Delta_OFFSET);
    method(self, outstream, value);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPost_Read_Key_Frame_OFFSET;
static CFISH_INLINE void
LUCY_RawPost_Read_Key_Frame(lucy_RawPosting* self, lucy_InStream* instream) {
    const LUCY_RawPost_Read_Key_Frame_t method = (LUCY_RawPost_Read_Key_Frame_t)cfish_obj_method(self, LUCY_RawPost_Read_Key_Frame_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPost_Read_Delta_OFFSET;
static CFISH_INLINE void
LUCY_RawPost_Read_Delta(lucy_RawPosting* self, lucy_InStream* instream) {
    const LUCY_RawPost_Read_Delta_t method = (LUCY_RawPost_Read_Delta_t)cfish_obj_method(self, LUCY_RawPost_Read_Delta_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPost_Read_Record_OFFSET;
static CFISH_INLINE void
LUCY_RawPost_Read_Record(lucy_RawPosting* self, lucy_InStream* instream) {
    const LUCY_RawPost_Read_Record_t method = (LUCY_RawPost_Read_Record_t)cfish_obj_method(self, LUCY_RawPost_Read_Record_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPost_Read_Raw_OFFSET;
static CFISH_INLINE lucy_RawPosting*
LUCY_RawPost_Read_Raw(lucy_RawPosting* self, lucy_InStream* instream, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool) {
    const LUCY_RawPost_Read_Raw_t method = (LUCY_RawPost_Read_Raw_t)cfish_obj_method(self, LUCY_RawPost_Read_Raw_OFFSET);
    return method(self, instream, last_doc_id, term_text, mem_pool);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPost_Add_Inversion_To_Pool_OFFSET;
static CFISH_INLINE void
LUCY_RawPost_Add_Inversion_To_Pool(lucy_RawPosting* self, lucy_PostingPool* post_pool, lucy_Inversion* inversion, lucy_FieldType* type, int32_t doc_id, float doc_boost, float length_norm) {
    const LUCY_RawPost_Add_Inversion_To_Pool_t method = (LUCY_RawPost_Add_Inversion_To_Pool_t)cfish_obj_method(self, LUCY_RawPost_Add_Inversion_To_Pool_OFFSET);
    method(self, post_pool, inversion, type, doc_id, doc_boost, length_norm);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPost_Set_Doc_ID_OFFSET;
static CFISH_INLINE void
LUCY_RawPost_Set_Doc_ID(lucy_RawPosting* self, int32_t doc_id) {
    const LUCY_RawPost_Set_Doc_ID_t method = (LUCY_RawPost_Set_Doc_ID_t)cfish_obj_method(self, LUCY_RawPost_Set_Doc_ID_OFFSET);
    method(self, doc_id);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPost_Get_Doc_ID_OFFSET;
static CFISH_INLINE int32_t
LUCY_RawPost_Get_Doc_ID(lucy_RawPosting* self) {
    const LUCY_RawPost_Get_Doc_ID_t method = (LUCY_RawPost_Get_Doc_ID_t)cfish_obj_method(self, LUCY_RawPost_Get_Doc_ID_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPost_Make_Matcher_OFFSET;
static CFISH_INLINE lucy_Matcher*
LUCY_RawPost_Make_Matcher(lucy_RawPosting* self, lucy_Similarity* sim, lucy_PostingList* plist, lucy_Compiler* compiler, bool need_score) {
    const LUCY_RawPost_Make_Matcher_t method = (LUCY_RawPost_Make_Matcher_t)cfish_obj_method(self, LUCY_RawPost_Make_Matcher_OFFSET);
    return method(self, sim, plist, compiler, need_score);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define RawPosting lucy_RawPosting
  #define RAWPOSTING LUCY_RAWPOSTING
  #define RawPost_new lucy_RawPost_new
  #define RawPost_get_class lucy_RawPost_get_class
  #define RawPost_get_class_name lucy_RawPost_get_class_name
  #define RawPost_is_a lucy_RawPost_is_a
  #define RawPost_Compare_To_IMP LUCY_RawPost_Compare_To_IMP
  #define RawPost_Destroy_IMP LUCY_RawPost_Destroy_IMP
  #define RawPost_To_Host LUCY_RawPost_To_Host
  #define RawPost_To_Host_t LUCY_RawPost_To_Host_t
  #define RawPost_Clone LUCY_RawPost_Clone
  #define RawPost_Clone_t LUCY_RawPost_Clone_t
  #define RawPost_Equals LUCY_RawPost_Equals
  #define RawPost_Equals_t LUCY_RawPost_Equals_t
  #define RawPost_Compare_To LUCY_RawPost_Compare_To
  #define RawPost_Compare_To_t LUCY_RawPost_Compare_To_t
  #define RawPost_Destroy LUCY_RawPost_Destroy
  #define RawPost_Destroy_t LUCY_RawPost_Destroy_t
  #define RawPost_To_String LUCY_RawPost_To_String
  #define RawPost_To_String_t LUCY_RawPost_To_String_t
  #define RawPost_Reset LUCY_RawPost_Reset
  #define RawPost_Reset_t LUCY_RawPost_Reset_t
  #define RawPost_Write_Key_Frame LUCY_RawPost_Write_Key_Frame
  #define RawPost_Write_Key_Frame_t LUCY_RawPost_Write_Key_Frame_t
  #define RawPost_Write_Delta LUCY_RawPost_Write_Delta
  #define RawPost_Write_Delta_t LUCY_RawPost_Write_Delta_t
  #define RawPost_Read_Key_Frame LUCY_RawPost_Read_Key_Frame
  #define RawPost_Read_Key_Frame_t LUCY_RawPost_Read_Key_Frame_t
  #define RawPost_Read_Delta LUCY_RawPost_Read_Delta
  #define RawPost_Read_Delta_t LUCY_RawPost_Read_Delta_t
  #define RawPost_Read_Record LUCY_RawPost_Read_Record
  #define RawPost_Read_Record_t LUCY_RawPost_Read_Record_t
  #define RawPost_Read_Raw LUCY_RawPost_Read_Raw
  #define RawPost_Read_Raw_t LUCY_RawPost_Read_Raw_t
  #define RawPost_Add_Inversion_To_Pool LUCY_RawPost_Add_Inversion_To_Pool
  #define RawPost_Add_Inversion_To_Pool_t LUCY_RawPost_Add_Inversion_To_Pool_t
  #define RawPost_Set_Doc_ID LUCY_RawPost_Set_Doc_ID
  #define RawPost_Set_Doc_ID_t LUCY_RawPost_Set_Doc_ID_t
  #define RawPost_Get_Doc_ID LUCY_RawPost_Get_Doc_ID
  #define RawPost_Get_Doc_ID_t LUCY_RawPost_Get_Doc_ID_t
  #define RawPost_Make_Matcher LUCY_RawPost_Make_Matcher
  #define RawPost_Make_Matcher_t LUCY_RawPost_Make_Matcher_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy/Index/Posting.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_RAWPOSTINGWRITER
extern uint32_t lucy_RawPostWriter_IVARS_OFFSET;
typedef struct lucy_RawPostingWriterIVARS lucy_RawPostingWriterIVARS;
static CFISH_INLINE lucy_RawPostingWriterIVARS*
lucy_RawPostWriter_IVARS(lucy_RawPostingWriter *self) {
   char *ptr = (char*)self + lucy_RawPostWriter_IVARS_OFFSET;
   return (lucy_RawPostingWriterIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define RawPostingWriterIVARS lucy_RawPostingWriterIVARS
  #define RawPostWriter_IVARS lucy_RawPostWriter_IVARS
#endif

struct lucy_RawPostingWriterIVARS {
    lucy_Snapshot* snapshot;
    lucy_Segment* segment;
    lucy_PolyReader* polyreader;
    lucy_Schema* schema;
    lucy_Folder* folder;
    int32_t field_num;
    lucy_OutStream* outstream;
    int32_t last_doc_id;
};

#endif /* C_LUCY_RAWPOSTINGWRITER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_RawPostingWriter*
lucy_RawPostWriter_new(lucy_Schema* schema, lucy_Snapshot* snapshot, lucy_Segment* segment, lucy_PolyReader* polyreader, lucy_OutStream* outstream);

LUCY_VISIBLE lucy_RawPostingWriter*
lucy_RawPostWriter_init(lucy_RawPostingWriter* self, lucy_Schema* schema, lucy_Snapshot* snapshot, lucy_Segment* segment, lucy_PolyReader* polyreader, lucy_OutStream* outstream);

void
LUCY_RawPostWriter_Destroy_IMP(lucy_RawPostingWriter* self);

void
LUCY_RawPostWriter_Start_Term_IMP(lucy_RawPostingWriter* self, lucy_TermInfo* tinfo);

void
LUCY_RawPostWriter_Update_Skip_Info_IMP(lucy_RawPostingWriter* self, lucy_TermInfo* tinfo);

void
LUCY_RawPostWriter_Write_Posting_IMP(lucy_RawPostingWriter* self, lucy_RawPosting* posting);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_RawPostWriter_To_Host_t)(lucy_RawPostingWriter* self, void* vcache);

typedef cfish_Obj*
(*LUCY_RawPostWriter_Clone_t)(lucy_RawPostingWriter* self);

typedef bool
(*LUCY_RawPostWriter_Equals_t)(lucy_RawPostingWriter* self, cfish_Obj* other);

typedef int32_t
(*LUCY_RawPostWriter_Compare_To_t)(lucy_RawPostingWriter* self, cfish_Obj* other);

typedef void
(*LUCY_RawPostWriter_Destroy_t)(lucy_RawPostingWriter* self);

typedef cfish_String*
(*LUCY_RawPostWriter_To_String_t)(lucy_RawPostingWriter* self);

typedef void
(*LUCY_RawPostWriter_Add_Inverted_Doc_t)(lucy_RawPostingWriter* self, lucy_Inverter* inverter, int32_t doc_id);

typedef void
(*LUCY_RawPostWriter_Add_Segment_t)(lucy_RawPostingWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map);

typedef void
(*LUCY_RawPostWriter_Delete_Segment_t)(lucy_RawPostingWriter* self, lucy_SegReader* reader);

typedef void
(*LUCY_RawPostWriter_Merge_Segment_t)(lucy_RawPostingWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map);

typedef void
(*LUCY_RawPostWriter_Finish_t)(lucy_RawPostingWriter* self);

typedef cfish_Hash*
(*LUCY_RawPostWriter_Metadata_t)(lucy_RawPostingWriter* self);

typedef int32_t
(*LUCY_RawPostWriter_Format_t)(lucy_RawPostingWriter* self);

typedef lucy_Snapshot*
(*LUCY_RawPostWriter_Get_Snapshot_t)(lucy_RawPostingWriter* self);

typedef lucy_Segment*
(*LUCY_RawPostWriter_Get_Segment_t)(lucy_RawPostingWriter* self);

typedef lucy_PolyReader*
(*LUCY_RawPostWriter_Get_PolyReader_t)(lucy_RawPostingWriter* self);

typedef lucy_Schema*
(*LUCY_RawPostWriter_Get_Schema_t)(lucy_RawPostingWriter* self);

typedef lucy_Folder*
(*LUCY_RawPostWriter_Get_Folder_t)(lucy_RawPostingWriter* self);

typedef void
(*LUCY_RawPostWriter_Write_Posting_t)(lucy_RawPostingWriter* self, lucy_RawPosting* posting);

typedef void
(*LUCY_RawPostWriter_Start_Term_t)(lucy_RawPostingWriter* self, lucy_TermInfo* tinfo);

typedef void
(*LUCY_RawPostWriter_Update_Skip_Info_t)(lucy_RawPostingWriter* self, lucy_TermInfo* tinfo);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_RawPostWriter_get_class(lucy_RawPostingWriter *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_RawPostWriter_get_class_name(lucy_RawPostingWriter *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_RawPostWriter_is_a(lucy_RawPostingWriter *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_RawPostWriter_To_Host(lucy_RawPostingWriter* self, void* vcache) {
    const LUCY_RawPostWriter_To_Host_t method = (LUCY_RawPostWriter_To_Host_t)cfish_obj_method(self, LUCY_RawPostWriter_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_RawPostWriter_Clone(lucy_RawPostingWriter* self) {
    const LUCY_RawPostWriter_Clone_t method = (LUCY_RawPostWriter_Clone_t)cfish_obj_method(self, LUCY_RawPostWriter_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_RawPostWriter_Equals(lucy_RawPostingWriter* self, cfish_Obj* other) {
    const LUCY_RawPostWriter_Equals_t method = (LUCY_RawPostWriter_Equals_t)cfish_obj_method(self, LUCY_RawPostWriter_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_RawPostWriter_Compare_To(lucy_RawPostingWriter* self, cfish_Obj* other) {
    const LUCY_RawPostWriter_Compare_To_t method = (LUCY_RawPostWriter_Compare_To_t)cfish_obj_method(self, LUCY_RawPostWriter_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_RawPostWriter_Destroy(lucy_RawPostingWriter* self) {
    const LUCY_RawPostWriter_Destroy_t method = (LUCY_RawPostWriter_Destroy_t)cfish_obj_method(self, LUCY_RawPostWriter_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_RawPostWriter_To_String(lucy_RawPostingWriter* self) {
    const LUCY_RawPostWriter_To_String_t method = (LUCY_RawPostWriter_To_String_t)cfish_obj_method(self, LUCY_RawPostWriter_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Add_Inverted_Doc_OFFSET;
static CFISH_INLINE void
LUCY_RawPostWriter_Add_Inverted_Doc(lucy_RawPostingWriter* self, lucy_Inverter* inverter, int32_t doc_id) {
    const LUCY_RawPostWriter_Add_Inverted_Doc_t method = (LUCY_RawPostWriter_Add_Inverted_Doc_t)cfish_obj_method(self, LUCY_RawPostWriter_Add_Inverted_Doc_OFFSET);
    method(self, inverter, doc_id);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Add_Segment_OFFSET;
static CFISH_INLINE void
LUCY_RawPostWriter_Add_Segment(lucy_RawPostingWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map) {
    const LUCY_RawPostWriter_Add_Segment_t method = (LUCY_RawPostWriter_Add_Segment_t)cfish_obj_method(self, LUCY_RawPostWriter_Add_Segment_OFFSET);
    method(self, reader, doc_map);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Delete_Segment_OFFSET;
static CFISH_INLINE void
LUCY_RawPostWriter_Delete_Segment(lucy_RawPostingWriter* self, lucy_SegReader* reader) {
    const LUCY_RawPostWriter_Delete_Segment_t method = (LUCY_RawPostWriter_Delete_Segment_t)cfish_obj_method(self, LUCY_RawPostWriter_Delete_Segment_OFFSET);
    method(self, reader);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Merge_Segment_OFFSET;
static CFISH_INLINE void
LUCY_RawPostWriter_Merge_Segment(lucy_RawPostingWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map) {
    const LUCY_RawPostWriter_Merge_Segment_t method = (LUCY_RawPostWriter_Merge_Segment_t)cfish_obj_method(self, LUCY_RawPostWriter_Merge_Segment_OFFSET);
    method(self, reader, doc_map);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Finish_OFFSET;
static CFISH_INLINE void
LUCY_RawPostWriter_Finish(lucy_RawPostingWriter* self) {
    const LUCY_RawPostWriter_Finish_t method = (LUCY_RawPostWriter_Finish_t)cfish_obj_method(self, LUCY_RawPostWriter_Finish_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Metadata_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_RawPostWriter_Metadata(lucy_RawPostingWriter* self) {
    const LUCY_RawPostWriter_Metadata_t method = (LUCY_RawPostWriter_Metadata_t)cfish_obj_method(self, LUCY_RawPostWriter_Metadata_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Format_OFFSET;
static CFISH_INLINE int32_t
LUCY_RawPostWriter_Format(lucy_RawPostingWriter* self) {
    const LUCY_RawPostWriter_Format_t method = (LUCY_RawPostWriter_Format_t)cfish_obj_method(self, LUCY_RawPostWriter_Format_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Get_Snapshot_OFFSET;
static CFISH_INLINE lucy_Snapshot*
LUCY_RawPostWriter_Get_Snapshot(lucy_RawPostingWriter* self) {
    const LUCY_RawPostWriter_Get_Snapshot_t method = (LUCY_RawPostWriter_Get_Snapshot_t)cfish_obj_method(self, LUCY_RawPostWriter_Get_Snapshot_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Get_Segment_OFFSET;
static CFISH_INLINE lucy_Segment*
LUCY_RawPostWriter_Get_Segment(lucy_RawPostingWriter* self) {
    const LUCY_RawPostWriter_Get_Segment_t method = (LUCY_RawPostWriter_Get_Segment_t)cfish_obj_method(self, LUCY_RawPostWriter_Get_Segment_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Get_PolyReader_OFFSET;
static CFISH_INLINE lucy_PolyReader*
LUCY_RawPostWriter_Get_PolyReader(lucy_RawPostingWriter* self) {
    const LUCY_RawPostWriter_Get_PolyReader_t method = (LUCY_RawPostWriter_Get_PolyReader_t)cfish_obj_method(self, LUCY_RawPostWriter_Get_PolyReader_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Get_Schema_OFFSET;
static CFISH_INLINE lucy_Schema*
LUCY_RawPostWriter_Get_Schema(lucy_RawPostingWriter* self) {
    const LUCY_RawPostWriter_Get_Schema_t method = (LUCY_RawPostWriter_Get_Schema_t)cfish_obj_method(self, LUCY_RawPostWriter_Get_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Get_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_RawPostWriter_Get_Folder(lucy_RawPostingWriter* self) {
    const LUCY_RawPostWriter_Get_Folder_t method = (LUCY_RawPostWriter_Get_Folder_t)cfish_obj_method(self, LUCY_RawPostWriter_Get_Folder_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Write_Posting_OFFSET;
static CFISH_INLINE void
LUCY_RawPostWriter_Write_Posting(lucy_RawPostingWriter* self, lucy_RawPosting* posting) {
    const LUCY_RawPostWriter_Write_Posting_t method = (LUCY_RawPostWriter_Write_Posting_t)cfish_obj_method(self, LUCY_RawPostWriter_Write_Posting_OFFSET);
    method(self, posting);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Start_Term_OFFSET;
static CFISH_INLINE void
LUCY_RawPostWriter_Start_Term(lucy_RawPostingWriter* self, lucy_TermInfo* tinfo) {
    const LUCY_RawPostWriter_Start_Term_t method = (LUCY_RawPostWriter_Start_Term_t)cfish_obj_method(self, LUCY_RawPostWriter_Start_Term_OFFSET);
    method(self, tinfo);
}

extern LUCY_VISIBLE uint32_t LUCY_RawPostWriter_Update_Skip_Info_OFFSET;
static CFISH_INLINE void
LUCY_RawPostWriter_Update_Skip_Info(lucy_RawPostingWriter* self, lucy_TermInfo* tinfo) {
    const LUCY_RawPostWriter_Update_Skip_Info_t method = (LUCY_RawPostWriter_Update_Skip_Info_t)cfish_obj_method(self, LUCY_RawPostWriter_Update_Skip_Info_OFFSET);
    method(self, tinfo);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define RawPostingWriter lucy_RawPostingWriter
  #define RAWPOSTINGWRITER LUCY_RAWPOSTINGWRITER
  #define RawPostWriter_new lucy_RawPostWriter_new
  #define RawPostWriter_init lucy_RawPostWriter_init
  #define RawPostWriter_get_class lucy_RawPostWriter_get_class
  #define RawPostWriter_get_class_name lucy_RawPostWriter_get_class_name
  #define RawPostWriter_is_a lucy_RawPostWriter_is_a
  #define RawPostWriter_Destroy_IMP LUCY_RawPostWriter_Destroy_IMP
  #define RawPostWriter_Start_Term_IMP LUCY_RawPostWriter_Start_Term_IMP
  #define RawPostWriter_Update_Skip_Info_IMP LUCY_RawPostWriter_Update_Skip_Info_IMP
  #define RawPostWriter_Write_Posting_IMP LUCY_RawPostWriter_Write_Posting_IMP
  #define RawPostWriter_To_Host LUCY_RawPostWriter_To_Host
  #define RawPostWriter_To_Host_t LUCY_RawPostWriter_To_Host_t
  #define RawPostWriter_Clone LUCY_RawPostWriter_Clone
  #define RawPostWriter_Clone_t LUCY_RawPostWriter_Clone_t
  #define RawPostWriter_Equals LUCY_RawPostWriter_Equals
  #define RawPostWriter_Equals_t LUCY_RawPostWriter_Equals_t
  #define RawPostWriter_Compare_To LUCY_RawPostWriter_Compare_To
  #define RawPostWriter_Compare_To_t LUCY_RawPostWriter_Compare_To_t
  #define RawPostWriter_Destroy LUCY_RawPostWriter_Destroy
  #define RawPostWriter_Destroy_t LUCY_RawPostWriter_Destroy_t
  #define RawPostWriter_To_String LUCY_RawPostWriter_To_String
  #define RawPostWriter_To_String_t LUCY_RawPostWriter_To_String_t
  #define RawPostWriter_Add_Inverted_Doc LUCY_RawPostWriter_Add_Inverted_Doc
  #define RawPostWriter_Add_Inverted_Doc_t LUCY_RawPostWriter_Add_Inverted_Doc_t
  #define RawPostWriter_Add_Segment LUCY_RawPostWriter_Add_Segment
  #define RawPostWriter_Add_Segment_t LUCY_RawPostWriter_Add_Segment_t
  #define RawPostWriter_Delete_Segment LUCY_RawPostWriter_Delete_Segment
  #define RawPostWriter_Delete_Segment_t LUCY_RawPostWriter_Delete_Segment_t
  #define RawPostWriter_Merge_Segment LUCY_RawPostWriter_Merge_Segment
  #define RawPostWriter_Merge_Segment_t LUCY_RawPostWriter_Merge_Segment_t
  #define RawPostWriter_Finish LUCY_RawPostWriter_Finish
  #define RawPostWriter_Finish_t LUCY_RawPostWriter_Finish_t
  #define RawPostWriter_Metadata LUCY_RawPostWriter_Metadata
  #define RawPostWriter_Metadata_t LUCY_RawPostWriter_Metadata_t
  #define RawPostWriter_Format LUCY_RawPostWriter_Format
  #define RawPostWriter_Format_t LUCY_RawPostWriter_Format_t
  #define RawPostWriter_Get_Snapshot LUCY_RawPostWriter_Get_Snapshot
  #define RawPostWriter_Get_Snapshot_t LUCY_RawPostWriter_Get_Snapshot_t
  #define RawPostWriter_Get_Segment LUCY_RawPostWriter_Get_Segment
  #define RawPostWriter_Get_Segment_t LUCY_RawPostWriter_Get_Segment_t
  #define RawPostWriter_Get_PolyReader LUCY_RawPostWriter_Get_PolyReader
  #define RawPostWriter_Get_PolyReader_t LUCY_RawPostWriter_Get_PolyReader_t
  #define RawPostWriter_Get_Schema LUCY_RawPostWriter_Get_Schema
  #define RawPostWriter_Get_Schema_t LUCY_RawPostWriter_Get_Schema_t
  #define RawPostWriter_Get_Folder LUCY_RawPostWriter_Get_Folder
  #define RawPostWriter_Get_Folder_t LUCY_RawPostWriter_Get_Folder_t
  #define RawPostWriter_Write_Posting LUCY_RawPostWriter_Write_Posting
  #define RawPostWriter_Write_Posting_t LUCY_RawPostWriter_Write_Posting_t
  #define RawPostWriter_Start_Term LUCY_RawPostWriter_Start_Term
  #define RawPostWriter_Start_Term_t LUCY_RawPostWriter_Start_Term_t
  #define RawPostWriter_Update_Skip_Info LUCY_RawPostWriter_Update_Skip_Info
  #define RawPostWriter_Update_Skip_Info_t LUCY_RawPostWriter_Update_Skip_Info_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_POSTING_RAWPOSTING */




