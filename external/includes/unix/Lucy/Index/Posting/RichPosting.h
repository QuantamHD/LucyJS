/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_POSTING_RICHPOSTING
#define H_LUCY_INDEX_POSTING_RICHPOSTING 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Index/Posting/ScorePosting.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_RICHPOSTING
extern uint32_t lucy_RichPost_IVARS_OFFSET;
typedef struct lucy_RichPostingIVARS lucy_RichPostingIVARS;
static CFISH_INLINE lucy_RichPostingIVARS*
lucy_RichPost_IVARS(lucy_RichPosting *self) {
   char *ptr = (char*)self + lucy_RichPost_IVARS_OFFSET;
   return (lucy_RichPostingIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define RichPostingIVARS lucy_RichPostingIVARS
  #define RichPost_IVARS lucy_RichPost_IVARS
#endif

struct lucy_RichPostingIVARS {
    int32_t doc_id;
    lucy_Similarity* sim;
    uint32_t freq;
    float weight;
    float* norm_decoder;
    uint32_t* prox;
    uint32_t prox_cap;
    float* prox_boosts;
};

#endif /* C_LUCY_RICHPOSTING */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_RichPosting*
lucy_RichPost_new(lucy_Similarity* similarity);

LUCY_VISIBLE lucy_RichPosting*
lucy_RichPost_init(lucy_RichPosting* self, lucy_Similarity* similarity);

void
LUCY_RichPost_Destroy_IMP(lucy_RichPosting* self);

void
LUCY_RichPost_Read_Record_IMP(lucy_RichPosting* self, lucy_InStream* instream);

lucy_RawPosting*
LUCY_RichPost_Read_Raw_IMP(lucy_RichPosting* self, lucy_InStream* instream, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool);

void
LUCY_RichPost_Add_Inversion_To_Pool_IMP(lucy_RichPosting* self, lucy_PostingPool* post_pool, lucy_Inversion* inversion, lucy_FieldType* type, int32_t doc_id, float doc_boost, float length_norm);

lucy_RichPostingMatcher*
LUCY_RichPost_Make_Matcher_IMP(lucy_RichPosting* self, lucy_Similarity* sim, lucy_PostingList* plist, lucy_Compiler* compiler, bool need_score);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_RichPost_To_Host_t)(lucy_RichPosting* self, void* vcache);

typedef cfish_Obj*
(*LUCY_RichPost_Clone_t)(lucy_RichPosting* self);

typedef bool
(*LUCY_RichPost_Equals_t)(lucy_RichPosting* self, cfish_Obj* other);

typedef int32_t
(*LUCY_RichPost_Compare_To_t)(lucy_RichPosting* self, cfish_Obj* other);

typedef void
(*LUCY_RichPost_Destroy_t)(lucy_RichPosting* self);

typedef cfish_String*
(*LUCY_RichPost_To_String_t)(lucy_RichPosting* self);

typedef void
(*LUCY_RichPost_Reset_t)(lucy_RichPosting* self);

typedef void
(*LUCY_RichPost_Write_Key_Frame_t)(lucy_RichPosting* self, lucy_OutStream* outstream, cfish_Obj* value);

typedef void
(*LUCY_RichPost_Write_Delta_t)(lucy_RichPosting* self, lucy_OutStream* outstream, cfish_Obj* value);

typedef void
(*LUCY_RichPost_Read_Key_Frame_t)(lucy_RichPosting* self, lucy_InStream* instream);

typedef void
(*LUCY_RichPost_Read_Delta_t)(lucy_RichPosting* self, lucy_InStream* instream);

typedef void
(*LUCY_RichPost_Read_Record_t)(lucy_RichPosting* self, lucy_InStream* instream);

typedef lucy_RawPosting*
(*LUCY_RichPost_Read_Raw_t)(lucy_RichPosting* self, lucy_InStream* instream, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool);

typedef void
(*LUCY_RichPost_Add_Inversion_To_Pool_t)(lucy_RichPosting* self, lucy_PostingPool* post_pool, lucy_Inversion* inversion, lucy_FieldType* type, int32_t doc_id, float doc_boost, float length_norm);

typedef void
(*LUCY_RichPost_Set_Doc_ID_t)(lucy_RichPosting* self, int32_t doc_id);

typedef int32_t
(*LUCY_RichPost_Get_Doc_ID_t)(lucy_RichPosting* self);

typedef lucy_RichPostingMatcher*
(*LUCY_RichPost_Make_Matcher_t)(lucy_RichPosting* self, lucy_Similarity* sim, lucy_PostingList* plist, lucy_Compiler* compiler, bool need_score);

typedef int32_t
(*LUCY_RichPost_Get_Freq_t)(lucy_RichPosting* self);

typedef uint32_t*
(*LUCY_RichPost_Get_Prox_t)(lucy_RichPosting* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_RichPost_get_class(lucy_RichPosting *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_RichPost_get_class_name(lucy_RichPosting *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_RichPost_is_a(lucy_RichPosting *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_RichPost_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_RichPost_To_Host(lucy_RichPosting* self, void* vcache) {
    const LUCY_RichPost_To_Host_t method = (LUCY_RichPost_To_Host_t)cfish_obj_method(self, LUCY_RichPost_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_RichPost_Clone(lucy_RichPosting* self) {
    const LUCY_RichPost_Clone_t method = (LUCY_RichPost_Clone_t)cfish_obj_method(self, LUCY_RichPost_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_RichPost_Equals(lucy_RichPosting* self, cfish_Obj* other) {
    const LUCY_RichPost_Equals_t method = (LUCY_RichPost_Equals_t)cfish_obj_method(self, LUCY_RichPost_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_RichPost_Compare_To(lucy_RichPosting* self, cfish_Obj* other) {
    const LUCY_RichPost_Compare_To_t method = (LUCY_RichPost_Compare_To_t)cfish_obj_method(self, LUCY_RichPost_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_RichPost_Destroy(lucy_RichPosting* self) {
    const LUCY_RichPost_Destroy_t method = (LUCY_RichPost_Destroy_t)cfish_obj_method(self, LUCY_RichPost_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_RichPost_To_String(lucy_RichPosting* self) {
    const LUCY_RichPost_To_String_t method = (LUCY_RichPost_To_String_t)cfish_obj_method(self, LUCY_RichPost_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_Reset_OFFSET;
static CFISH_INLINE void
LUCY_RichPost_Reset(lucy_RichPosting* self) {
    const LUCY_RichPost_Reset_t method = (LUCY_RichPost_Reset_t)cfish_obj_method(self, LUCY_RichPost_Reset_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_Write_Key_Frame_OFFSET;
static CFISH_INLINE void
LUCY_RichPost_Write_Key_Frame(lucy_RichPosting* self, lucy_OutStream* outstream, cfish_Obj* value) {
    const LUCY_RichPost_Write_Key_Frame_t method = (LUCY_RichPost_Write_Key_Frame_t)cfish_obj_method(self, LUCY_RichPost_Write_Key_Frame_OFFSET);
    method(self, outstream, value);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_Write_Delta_OFFSET;
static CFISH_INLINE void
LUCY_RichPost_Write_Delta(lucy_RichPosting* self, lucy_OutStream* outstream, cfish_Obj* value) {
    const LUCY_RichPost_Write_Delta_t method = (LUCY_RichPost_Write_Delta_t)cfish_obj_method(self, LUCY_RichPost_Write_Delta_OFFSET);
    method(self, outstream, value);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_Read_Key_Frame_OFFSET;
static CFISH_INLINE void
LUCY_RichPost_Read_Key_Frame(lucy_RichPosting* self, lucy_InStream* instream) {
    const LUCY_RichPost_Read_Key_Frame_t method = (LUCY_RichPost_Read_Key_Frame_t)cfish_obj_method(self, LUCY_RichPost_Read_Key_Frame_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_Read_Delta_OFFSET;
static CFISH_INLINE void
LUCY_RichPost_Read_Delta(lucy_RichPosting* self, lucy_InStream* instream) {
    const LUCY_RichPost_Read_Delta_t method = (LUCY_RichPost_Read_Delta_t)cfish_obj_method(self, LUCY_RichPost_Read_Delta_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_Read_Record_OFFSET;
static CFISH_INLINE void
LUCY_RichPost_Read_Record(lucy_RichPosting* self, lucy_InStream* instream) {
    const LUCY_RichPost_Read_Record_t method = (LUCY_RichPost_Read_Record_t)cfish_obj_method(self, LUCY_RichPost_Read_Record_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_Read_Raw_OFFSET;
static CFISH_INLINE lucy_RawPosting*
LUCY_RichPost_Read_Raw(lucy_RichPosting* self, lucy_InStream* instream, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool) {
    const LUCY_RichPost_Read_Raw_t method = (LUCY_RichPost_Read_Raw_t)cfish_obj_method(self, LUCY_RichPost_Read_Raw_OFFSET);
    return method(self, instream, last_doc_id, term_text, mem_pool);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_Add_Inversion_To_Pool_OFFSET;
static CFISH_INLINE void
LUCY_RichPost_Add_Inversion_To_Pool(lucy_RichPosting* self, lucy_PostingPool* post_pool, lucy_Inversion* inversion, lucy_FieldType* type, int32_t doc_id, float doc_boost, float length_norm) {
    const LUCY_RichPost_Add_Inversion_To_Pool_t method = (LUCY_RichPost_Add_Inversion_To_Pool_t)cfish_obj_method(self, LUCY_RichPost_Add_Inversion_To_Pool_OFFSET);
    method(self, post_pool, inversion, type, doc_id, doc_boost, length_norm);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_Set_Doc_ID_OFFSET;
static CFISH_INLINE void
LUCY_RichPost_Set_Doc_ID(lucy_RichPosting* self, int32_t doc_id) {
    const LUCY_RichPost_Set_Doc_ID_t method = (LUCY_RichPost_Set_Doc_ID_t)cfish_obj_method(self, LUCY_RichPost_Set_Doc_ID_OFFSET);
    method(self, doc_id);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_Get_Doc_ID_OFFSET;
static CFISH_INLINE int32_t
LUCY_RichPost_Get_Doc_ID(lucy_RichPosting* self) {
    const LUCY_RichPost_Get_Doc_ID_t method = (LUCY_RichPost_Get_Doc_ID_t)cfish_obj_method(self, LUCY_RichPost_Get_Doc_ID_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_Make_Matcher_OFFSET;
static CFISH_INLINE lucy_RichPostingMatcher*
LUCY_RichPost_Make_Matcher(lucy_RichPosting* self, lucy_Similarity* sim, lucy_PostingList* plist, lucy_Compiler* compiler, bool need_score) {
    const LUCY_RichPost_Make_Matcher_t method = (LUCY_RichPost_Make_Matcher_t)cfish_obj_method(self, LUCY_RichPost_Make_Matcher_OFFSET);
    return method(self, sim, plist, compiler, need_score);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_Get_Freq_OFFSET;
static CFISH_INLINE int32_t
LUCY_RichPost_Get_Freq(lucy_RichPosting* self) {
    const LUCY_RichPost_Get_Freq_t method = (LUCY_RichPost_Get_Freq_t)cfish_obj_method(self, LUCY_RichPost_Get_Freq_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPost_Get_Prox_OFFSET;
static CFISH_INLINE uint32_t*
LUCY_RichPost_Get_Prox(lucy_RichPosting* self) {
    const LUCY_RichPost_Get_Prox_t method = (LUCY_RichPost_Get_Prox_t)cfish_obj_method(self, LUCY_RichPost_Get_Prox_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define RichPosting lucy_RichPosting
  #define RICHPOSTING LUCY_RICHPOSTING
  #define RichPost_new lucy_RichPost_new
  #define RichPost_init lucy_RichPost_init
  #define RichPost_get_class lucy_RichPost_get_class
  #define RichPost_get_class_name lucy_RichPost_get_class_name
  #define RichPost_is_a lucy_RichPost_is_a
  #define RichPost_Destroy_IMP LUCY_RichPost_Destroy_IMP
  #define RichPost_Read_Record_IMP LUCY_RichPost_Read_Record_IMP
  #define RichPost_Read_Raw_IMP LUCY_RichPost_Read_Raw_IMP
  #define RichPost_Add_Inversion_To_Pool_IMP LUCY_RichPost_Add_Inversion_To_Pool_IMP
  #define RichPost_Make_Matcher_IMP LUCY_RichPost_Make_Matcher_IMP
  #define RichPost_To_Host LUCY_RichPost_To_Host
  #define RichPost_To_Host_t LUCY_RichPost_To_Host_t
  #define RichPost_Clone LUCY_RichPost_Clone
  #define RichPost_Clone_t LUCY_RichPost_Clone_t
  #define RichPost_Equals LUCY_RichPost_Equals
  #define RichPost_Equals_t LUCY_RichPost_Equals_t
  #define RichPost_Compare_To LUCY_RichPost_Compare_To
  #define RichPost_Compare_To_t LUCY_RichPost_Compare_To_t
  #define RichPost_Destroy LUCY_RichPost_Destroy
  #define RichPost_Destroy_t LUCY_RichPost_Destroy_t
  #define RichPost_To_String LUCY_RichPost_To_String
  #define RichPost_To_String_t LUCY_RichPost_To_String_t
  #define RichPost_Reset LUCY_RichPost_Reset
  #define RichPost_Reset_t LUCY_RichPost_Reset_t
  #define RichPost_Write_Key_Frame LUCY_RichPost_Write_Key_Frame
  #define RichPost_Write_Key_Frame_t LUCY_RichPost_Write_Key_Frame_t
  #define RichPost_Write_Delta LUCY_RichPost_Write_Delta
  #define RichPost_Write_Delta_t LUCY_RichPost_Write_Delta_t
  #define RichPost_Read_Key_Frame LUCY_RichPost_Read_Key_Frame
  #define RichPost_Read_Key_Frame_t LUCY_RichPost_Read_Key_Frame_t
  #define RichPost_Read_Delta LUCY_RichPost_Read_Delta
  #define RichPost_Read_Delta_t LUCY_RichPost_Read_Delta_t
  #define RichPost_Read_Record LUCY_RichPost_Read_Record
  #define RichPost_Read_Record_t LUCY_RichPost_Read_Record_t
  #define RichPost_Read_Raw LUCY_RichPost_Read_Raw
  #define RichPost_Read_Raw_t LUCY_RichPost_Read_Raw_t
  #define RichPost_Add_Inversion_To_Pool LUCY_RichPost_Add_Inversion_To_Pool
  #define RichPost_Add_Inversion_To_Pool_t LUCY_RichPost_Add_Inversion_To_Pool_t
  #define RichPost_Set_Doc_ID LUCY_RichPost_Set_Doc_ID
  #define RichPost_Set_Doc_ID_t LUCY_RichPost_Set_Doc_ID_t
  #define RichPost_Get_Doc_ID LUCY_RichPost_Get_Doc_ID
  #define RichPost_Get_Doc_ID_t LUCY_RichPost_Get_Doc_ID_t
  #define RichPost_Make_Matcher LUCY_RichPost_Make_Matcher
  #define RichPost_Make_Matcher_t LUCY_RichPost_Make_Matcher_t
  #define RichPost_Get_Freq LUCY_RichPost_Get_Freq
  #define RichPost_Get_Freq_t LUCY_RichPost_Get_Freq_t
  #define RichPost_Get_Prox LUCY_RichPost_Get_Prox
  #define RichPost_Get_Prox_t LUCY_RichPost_Get_Prox_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy/Index/Posting/ScorePosting.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_RICHPOSTINGMATCHER
extern uint32_t lucy_RichPostMatcher_IVARS_OFFSET;
typedef struct lucy_RichPostingMatcherIVARS lucy_RichPostingMatcherIVARS;
static CFISH_INLINE lucy_RichPostingMatcherIVARS*
lucy_RichPostMatcher_IVARS(lucy_RichPostingMatcher *self) {
   char *ptr = (char*)self + lucy_RichPostMatcher_IVARS_OFFSET;
   return (lucy_RichPostingMatcherIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define RichPostingMatcherIVARS lucy_RichPostingMatcherIVARS
  #define RichPostMatcher_IVARS lucy_RichPostMatcher_IVARS
#endif

struct lucy_RichPostingMatcherIVARS {
    float weight;
    lucy_Compiler* compiler;
    lucy_Similarity* sim;
    lucy_PostingList* plist;
    lucy_Posting* posting;
    float* score_cache;
};

#endif /* C_LUCY_RICHPOSTINGMATCHER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_RichPostingMatcher*
lucy_RichPostMatcher_init(lucy_RichPostingMatcher* self, lucy_Similarity* similarity, lucy_PostingList* posting_list, lucy_Compiler* compiler);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_RichPostMatcher_To_Host_t)(lucy_RichPostingMatcher* self, void* vcache);

typedef cfish_Obj*
(*LUCY_RichPostMatcher_Clone_t)(lucy_RichPostingMatcher* self);

typedef bool
(*LUCY_RichPostMatcher_Equals_t)(lucy_RichPostingMatcher* self, cfish_Obj* other);

typedef int32_t
(*LUCY_RichPostMatcher_Compare_To_t)(lucy_RichPostingMatcher* self, cfish_Obj* other);

typedef void
(*LUCY_RichPostMatcher_Destroy_t)(lucy_RichPostingMatcher* self);

typedef cfish_String*
(*LUCY_RichPostMatcher_To_String_t)(lucy_RichPostingMatcher* self);

typedef int32_t
(*LUCY_RichPostMatcher_Next_t)(lucy_RichPostingMatcher* self);

typedef int32_t
(*LUCY_RichPostMatcher_Advance_t)(lucy_RichPostingMatcher* self, int32_t target);

typedef int32_t
(*LUCY_RichPostMatcher_Get_Doc_ID_t)(lucy_RichPostingMatcher* self);

typedef float
(*LUCY_RichPostMatcher_Score_t)(lucy_RichPostingMatcher* self);

typedef void
(*LUCY_RichPostMatcher_Collect_t)(lucy_RichPostingMatcher* self, lucy_Collector* collector, lucy_Matcher* deletions);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_RichPostMatcher_get_class(lucy_RichPostingMatcher *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_RichPostMatcher_get_class_name(lucy_RichPostingMatcher *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_RichPostMatcher_is_a(lucy_RichPostingMatcher *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_RichPostMatcher_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_RichPostMatcher_To_Host(lucy_RichPostingMatcher* self, void* vcache) {
    const LUCY_RichPostMatcher_To_Host_t method = (LUCY_RichPostMatcher_To_Host_t)cfish_obj_method(self, LUCY_RichPostMatcher_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPostMatcher_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_RichPostMatcher_Clone(lucy_RichPostingMatcher* self) {
    const LUCY_RichPostMatcher_Clone_t method = (LUCY_RichPostMatcher_Clone_t)cfish_obj_method(self, LUCY_RichPostMatcher_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPostMatcher_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_RichPostMatcher_Equals(lucy_RichPostingMatcher* self, cfish_Obj* other) {
    const LUCY_RichPostMatcher_Equals_t method = (LUCY_RichPostMatcher_Equals_t)cfish_obj_method(self, LUCY_RichPostMatcher_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPostMatcher_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_RichPostMatcher_Compare_To(lucy_RichPostingMatcher* self, cfish_Obj* other) {
    const LUCY_RichPostMatcher_Compare_To_t method = (LUCY_RichPostMatcher_Compare_To_t)cfish_obj_method(self, LUCY_RichPostMatcher_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPostMatcher_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_RichPostMatcher_Destroy(lucy_RichPostingMatcher* self) {
    const LUCY_RichPostMatcher_Destroy_t method = (LUCY_RichPostMatcher_Destroy_t)cfish_obj_method(self, LUCY_RichPostMatcher_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPostMatcher_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_RichPostMatcher_To_String(lucy_RichPostingMatcher* self) {
    const LUCY_RichPostMatcher_To_String_t method = (LUCY_RichPostMatcher_To_String_t)cfish_obj_method(self, LUCY_RichPostMatcher_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPostMatcher_Next_OFFSET;
static CFISH_INLINE int32_t
LUCY_RichPostMatcher_Next(lucy_RichPostingMatcher* self) {
    const LUCY_RichPostMatcher_Next_t method = (LUCY_RichPostMatcher_Next_t)cfish_obj_method(self, LUCY_RichPostMatcher_Next_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPostMatcher_Advance_OFFSET;
static CFISH_INLINE int32_t
LUCY_RichPostMatcher_Advance(lucy_RichPostingMatcher* self, int32_t target) {
    const LUCY_RichPostMatcher_Advance_t method = (LUCY_RichPostMatcher_Advance_t)cfish_obj_method(self, LUCY_RichPostMatcher_Advance_OFFSET);
    return method(self, target);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPostMatcher_Get_Doc_ID_OFFSET;
static CFISH_INLINE int32_t
LUCY_RichPostMatcher_Get_Doc_ID(lucy_RichPostingMatcher* self) {
    const LUCY_RichPostMatcher_Get_Doc_ID_t method = (LUCY_RichPostMatcher_Get_Doc_ID_t)cfish_obj_method(self, LUCY_RichPostMatcher_Get_Doc_ID_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPostMatcher_Score_OFFSET;
static CFISH_INLINE float
LUCY_RichPostMatcher_Score(lucy_RichPostingMatcher* self) {
    const LUCY_RichPostMatcher_Score_t method = (LUCY_RichPostMatcher_Score_t)cfish_obj_method(self, LUCY_RichPostMatcher_Score_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_RichPostMatcher_Collect_OFFSET;
static CFISH_INLINE void
LUCY_RichPostMatcher_Collect(lucy_RichPostingMatcher* self, lucy_Collector* collector, lucy_Matcher* deletions) {
    const LUCY_RichPostMatcher_Collect_t method = (LUCY_RichPostMatcher_Collect_t)cfish_obj_method(self, LUCY_RichPostMatcher_Collect_OFFSET);
    method(self, collector, deletions);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define RichPostingMatcher lucy_RichPostingMatcher
  #define RICHPOSTINGMATCHER LUCY_RICHPOSTINGMATCHER
  #define RichPostMatcher_init lucy_RichPostMatcher_init
  #define RichPostMatcher_get_class lucy_RichPostMatcher_get_class
  #define RichPostMatcher_get_class_name lucy_RichPostMatcher_get_class_name
  #define RichPostMatcher_is_a lucy_RichPostMatcher_is_a
  #define RichPostMatcher_To_Host LUCY_RichPostMatcher_To_Host
  #define RichPostMatcher_To_Host_t LUCY_RichPostMatcher_To_Host_t
  #define RichPostMatcher_Clone LUCY_RichPostMatcher_Clone
  #define RichPostMatcher_Clone_t LUCY_RichPostMatcher_Clone_t
  #define RichPostMatcher_Equals LUCY_RichPostMatcher_Equals
  #define RichPostMatcher_Equals_t LUCY_RichPostMatcher_Equals_t
  #define RichPostMatcher_Compare_To LUCY_RichPostMatcher_Compare_To
  #define RichPostMatcher_Compare_To_t LUCY_RichPostMatcher_Compare_To_t
  #define RichPostMatcher_Destroy LUCY_RichPostMatcher_Destroy
  #define RichPostMatcher_Destroy_t LUCY_RichPostMatcher_Destroy_t
  #define RichPostMatcher_To_String LUCY_RichPostMatcher_To_String
  #define RichPostMatcher_To_String_t LUCY_RichPostMatcher_To_String_t
  #define RichPostMatcher_Next LUCY_RichPostMatcher_Next
  #define RichPostMatcher_Next_t LUCY_RichPostMatcher_Next_t
  #define RichPostMatcher_Advance LUCY_RichPostMatcher_Advance
  #define RichPostMatcher_Advance_t LUCY_RichPostMatcher_Advance_t
  #define RichPostMatcher_Get_Doc_ID LUCY_RichPostMatcher_Get_Doc_ID
  #define RichPostMatcher_Get_Doc_ID_t LUCY_RichPostMatcher_Get_Doc_ID_t
  #define RichPostMatcher_Score LUCY_RichPostMatcher_Score
  #define RichPostMatcher_Score_t LUCY_RichPostMatcher_Score_t
  #define RichPostMatcher_Collect LUCY_RichPostMatcher_Collect
  #define RichPostMatcher_Collect_t LUCY_RichPostMatcher_Collect_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_POSTING_RICHPOSTING */




