/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_POSTING_MATCHPOSTING
#define H_LUCY_INDEX_POSTING_MATCHPOSTING 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Index/Posting.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_MATCHPOSTING
extern uint32_t lucy_MatchPost_IVARS_OFFSET;
typedef struct lucy_MatchPostingIVARS lucy_MatchPostingIVARS;
static CFISH_INLINE lucy_MatchPostingIVARS*
lucy_MatchPost_IVARS(lucy_MatchPosting *self) {
   char *ptr = (char*)self + lucy_MatchPost_IVARS_OFFSET;
   return (lucy_MatchPostingIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define MatchPostingIVARS lucy_MatchPostingIVARS
  #define MatchPost_IVARS lucy_MatchPost_IVARS
#endif

struct lucy_MatchPostingIVARS {
    int32_t doc_id;
    lucy_Similarity* sim;
    uint32_t freq;
};

#endif /* C_LUCY_MATCHPOSTING */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_MatchPosting*
lucy_MatchPost_new(lucy_Similarity* similarity);

LUCY_VISIBLE lucy_MatchPosting*
lucy_MatchPost_init(lucy_MatchPosting* self, lucy_Similarity* similarity);

void
LUCY_MatchPost_Destroy_IMP(lucy_MatchPosting* self);

int32_t
LUCY_MatchPost_Get_Freq_IMP(lucy_MatchPosting* self);

void
LUCY_MatchPost_Read_Record_IMP(lucy_MatchPosting* self, lucy_InStream* instream);

lucy_RawPosting*
LUCY_MatchPost_Read_Raw_IMP(lucy_MatchPosting* self, lucy_InStream* instream, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool);

void
LUCY_MatchPost_Add_Inversion_To_Pool_IMP(lucy_MatchPosting* self, lucy_PostingPool* post_pool, lucy_Inversion* inversion, lucy_FieldType* type, int32_t doc_id, float doc_boost, float length_norm);

void
LUCY_MatchPost_Reset_IMP(lucy_MatchPosting* self);

lucy_MatchPostingMatcher*
LUCY_MatchPost_Make_Matcher_IMP(lucy_MatchPosting* self, lucy_Similarity* sim, lucy_PostingList* plist, lucy_Compiler* compiler, bool need_score);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_MatchPost_To_Host_t)(lucy_MatchPosting* self, void* vcache);

typedef cfish_Obj*
(*LUCY_MatchPost_Clone_t)(lucy_MatchPosting* self);

typedef bool
(*LUCY_MatchPost_Equals_t)(lucy_MatchPosting* self, cfish_Obj* other);

typedef int32_t
(*LUCY_MatchPost_Compare_To_t)(lucy_MatchPosting* self, cfish_Obj* other);

typedef void
(*LUCY_MatchPost_Destroy_t)(lucy_MatchPosting* self);

typedef cfish_String*
(*LUCY_MatchPost_To_String_t)(lucy_MatchPosting* self);

typedef void
(*LUCY_MatchPost_Reset_t)(lucy_MatchPosting* self);

typedef void
(*LUCY_MatchPost_Write_Key_Frame_t)(lucy_MatchPosting* self, lucy_OutStream* outstream, cfish_Obj* value);

typedef void
(*LUCY_MatchPost_Write_Delta_t)(lucy_MatchPosting* self, lucy_OutStream* outstream, cfish_Obj* value);

typedef void
(*LUCY_MatchPost_Read_Key_Frame_t)(lucy_MatchPosting* self, lucy_InStream* instream);

typedef void
(*LUCY_MatchPost_Read_Delta_t)(lucy_MatchPosting* self, lucy_InStream* instream);

typedef void
(*LUCY_MatchPost_Read_Record_t)(lucy_MatchPosting* self, lucy_InStream* instream);

typedef lucy_RawPosting*
(*LUCY_MatchPost_Read_Raw_t)(lucy_MatchPosting* self, lucy_InStream* instream, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool);

typedef void
(*LUCY_MatchPost_Add_Inversion_To_Pool_t)(lucy_MatchPosting* self, lucy_PostingPool* post_pool, lucy_Inversion* inversion, lucy_FieldType* type, int32_t doc_id, float doc_boost, float length_norm);

typedef void
(*LUCY_MatchPost_Set_Doc_ID_t)(lucy_MatchPosting* self, int32_t doc_id);

typedef int32_t
(*LUCY_MatchPost_Get_Doc_ID_t)(lucy_MatchPosting* self);

typedef lucy_MatchPostingMatcher*
(*LUCY_MatchPost_Make_Matcher_t)(lucy_MatchPosting* self, lucy_Similarity* sim, lucy_PostingList* plist, lucy_Compiler* compiler, bool need_score);

typedef int32_t
(*LUCY_MatchPost_Get_Freq_t)(lucy_MatchPosting* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_MatchPost_get_class(lucy_MatchPosting *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_MatchPost_get_class_name(lucy_MatchPosting *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_MatchPost_is_a(lucy_MatchPosting *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_MatchPost_To_Host(lucy_MatchPosting* self, void* vcache) {
    const LUCY_MatchPost_To_Host_t method = (LUCY_MatchPost_To_Host_t)cfish_obj_method(self, LUCY_MatchPost_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_MatchPost_Clone(lucy_MatchPosting* self) {
    const LUCY_MatchPost_Clone_t method = (LUCY_MatchPost_Clone_t)cfish_obj_method(self, LUCY_MatchPost_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_MatchPost_Equals(lucy_MatchPosting* self, cfish_Obj* other) {
    const LUCY_MatchPost_Equals_t method = (LUCY_MatchPost_Equals_t)cfish_obj_method(self, LUCY_MatchPost_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_MatchPost_Compare_To(lucy_MatchPosting* self, cfish_Obj* other) {
    const LUCY_MatchPost_Compare_To_t method = (LUCY_MatchPost_Compare_To_t)cfish_obj_method(self, LUCY_MatchPost_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_MatchPost_Destroy(lucy_MatchPosting* self) {
    const LUCY_MatchPost_Destroy_t method = (LUCY_MatchPost_Destroy_t)cfish_obj_method(self, LUCY_MatchPost_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_MatchPost_To_String(lucy_MatchPosting* self) {
    const LUCY_MatchPost_To_String_t method = (LUCY_MatchPost_To_String_t)cfish_obj_method(self, LUCY_MatchPost_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_Reset_OFFSET;
static CFISH_INLINE void
LUCY_MatchPost_Reset(lucy_MatchPosting* self) {
    const LUCY_MatchPost_Reset_t method = (LUCY_MatchPost_Reset_t)cfish_obj_method(self, LUCY_MatchPost_Reset_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_Write_Key_Frame_OFFSET;
static CFISH_INLINE void
LUCY_MatchPost_Write_Key_Frame(lucy_MatchPosting* self, lucy_OutStream* outstream, cfish_Obj* value) {
    const LUCY_MatchPost_Write_Key_Frame_t method = (LUCY_MatchPost_Write_Key_Frame_t)cfish_obj_method(self, LUCY_MatchPost_Write_Key_Frame_OFFSET);
    method(self, outstream, value);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_Write_Delta_OFFSET;
static CFISH_INLINE void
LUCY_MatchPost_Write_Delta(lucy_MatchPosting* self, lucy_OutStream* outstream, cfish_Obj* value) {
    const LUCY_MatchPost_Write_Delta_t method = (LUCY_MatchPost_Write_Delta_t)cfish_obj_method(self, LUCY_MatchPost_Write_Delta_OFFSET);
    method(self, outstream, value);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_Read_Key_Frame_OFFSET;
static CFISH_INLINE void
LUCY_MatchPost_Read_Key_Frame(lucy_MatchPosting* self, lucy_InStream* instream) {
    const LUCY_MatchPost_Read_Key_Frame_t method = (LUCY_MatchPost_Read_Key_Frame_t)cfish_obj_method(self, LUCY_MatchPost_Read_Key_Frame_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_Read_Delta_OFFSET;
static CFISH_INLINE void
LUCY_MatchPost_Read_Delta(lucy_MatchPosting* self, lucy_InStream* instream) {
    const LUCY_MatchPost_Read_Delta_t method = (LUCY_MatchPost_Read_Delta_t)cfish_obj_method(self, LUCY_MatchPost_Read_Delta_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_Read_Record_OFFSET;
static CFISH_INLINE void
LUCY_MatchPost_Read_Record(lucy_MatchPosting* self, lucy_InStream* instream) {
    const LUCY_MatchPost_Read_Record_t method = (LUCY_MatchPost_Read_Record_t)cfish_obj_method(self, LUCY_MatchPost_Read_Record_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_Read_Raw_OFFSET;
static CFISH_INLINE lucy_RawPosting*
LUCY_MatchPost_Read_Raw(lucy_MatchPosting* self, lucy_InStream* instream, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool) {
    const LUCY_MatchPost_Read_Raw_t method = (LUCY_MatchPost_Read_Raw_t)cfish_obj_method(self, LUCY_MatchPost_Read_Raw_OFFSET);
    return method(self, instream, last_doc_id, term_text, mem_pool);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_Add_Inversion_To_Pool_OFFSET;
static CFISH_INLINE void
LUCY_MatchPost_Add_Inversion_To_Pool(lucy_MatchPosting* self, lucy_PostingPool* post_pool, lucy_Inversion* inversion, lucy_FieldType* type, int32_t doc_id, float doc_boost, float length_norm) {
    const LUCY_MatchPost_Add_Inversion_To_Pool_t method = (LUCY_MatchPost_Add_Inversion_To_Pool_t)cfish_obj_method(self, LUCY_MatchPost_Add_Inversion_To_Pool_OFFSET);
    method(self, post_pool, inversion, type, doc_id, doc_boost, length_norm);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_Set_Doc_ID_OFFSET;
static CFISH_INLINE void
LUCY_MatchPost_Set_Doc_ID(lucy_MatchPosting* self, int32_t doc_id) {
    const LUCY_MatchPost_Set_Doc_ID_t method = (LUCY_MatchPost_Set_Doc_ID_t)cfish_obj_method(self, LUCY_MatchPost_Set_Doc_ID_OFFSET);
    method(self, doc_id);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_Get_Doc_ID_OFFSET;
static CFISH_INLINE int32_t
LUCY_MatchPost_Get_Doc_ID(lucy_MatchPosting* self) {
    const LUCY_MatchPost_Get_Doc_ID_t method = (LUCY_MatchPost_Get_Doc_ID_t)cfish_obj_method(self, LUCY_MatchPost_Get_Doc_ID_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_Make_Matcher_OFFSET;
static CFISH_INLINE lucy_MatchPostingMatcher*
LUCY_MatchPost_Make_Matcher(lucy_MatchPosting* self, lucy_Similarity* sim, lucy_PostingList* plist, lucy_Compiler* compiler, bool need_score) {
    const LUCY_MatchPost_Make_Matcher_t method = (LUCY_MatchPost_Make_Matcher_t)cfish_obj_method(self, LUCY_MatchPost_Make_Matcher_OFFSET);
    return method(self, sim, plist, compiler, need_score);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPost_Get_Freq_OFFSET;
static CFISH_INLINE int32_t
LUCY_MatchPost_Get_Freq(lucy_MatchPosting* self) {
    const LUCY_MatchPost_Get_Freq_t method = (LUCY_MatchPost_Get_Freq_t)cfish_obj_method(self, LUCY_MatchPost_Get_Freq_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_MatchPost_Get_Freq_OVERRIDE NULL
#else
int32_t
Lucy_MatchPost_Get_Freq_OVERRIDE(lucy_MatchPosting* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define MatchPosting lucy_MatchPosting
  #define MATCHPOSTING LUCY_MATCHPOSTING
  #define MatchPost_new lucy_MatchPost_new
  #define MatchPost_init lucy_MatchPost_init
  #define MatchPost_get_class lucy_MatchPost_get_class
  #define MatchPost_get_class_name lucy_MatchPost_get_class_name
  #define MatchPost_is_a lucy_MatchPost_is_a
  #define MatchPost_Destroy_IMP LUCY_MatchPost_Destroy_IMP
  #define MatchPost_Get_Freq_IMP LUCY_MatchPost_Get_Freq_IMP
  #define MatchPost_Read_Record_IMP LUCY_MatchPost_Read_Record_IMP
  #define MatchPost_Read_Raw_IMP LUCY_MatchPost_Read_Raw_IMP
  #define MatchPost_Add_Inversion_To_Pool_IMP LUCY_MatchPost_Add_Inversion_To_Pool_IMP
  #define MatchPost_Reset_IMP LUCY_MatchPost_Reset_IMP
  #define MatchPost_Make_Matcher_IMP LUCY_MatchPost_Make_Matcher_IMP
  #define MatchPost_To_Host LUCY_MatchPost_To_Host
  #define MatchPost_To_Host_t LUCY_MatchPost_To_Host_t
  #define MatchPost_Clone LUCY_MatchPost_Clone
  #define MatchPost_Clone_t LUCY_MatchPost_Clone_t
  #define MatchPost_Equals LUCY_MatchPost_Equals
  #define MatchPost_Equals_t LUCY_MatchPost_Equals_t
  #define MatchPost_Compare_To LUCY_MatchPost_Compare_To
  #define MatchPost_Compare_To_t LUCY_MatchPost_Compare_To_t
  #define MatchPost_Destroy LUCY_MatchPost_Destroy
  #define MatchPost_Destroy_t LUCY_MatchPost_Destroy_t
  #define MatchPost_To_String LUCY_MatchPost_To_String
  #define MatchPost_To_String_t LUCY_MatchPost_To_String_t
  #define MatchPost_Reset LUCY_MatchPost_Reset
  #define MatchPost_Reset_t LUCY_MatchPost_Reset_t
  #define MatchPost_Write_Key_Frame LUCY_MatchPost_Write_Key_Frame
  #define MatchPost_Write_Key_Frame_t LUCY_MatchPost_Write_Key_Frame_t
  #define MatchPost_Write_Delta LUCY_MatchPost_Write_Delta
  #define MatchPost_Write_Delta_t LUCY_MatchPost_Write_Delta_t
  #define MatchPost_Read_Key_Frame LUCY_MatchPost_Read_Key_Frame
  #define MatchPost_Read_Key_Frame_t LUCY_MatchPost_Read_Key_Frame_t
  #define MatchPost_Read_Delta LUCY_MatchPost_Read_Delta
  #define MatchPost_Read_Delta_t LUCY_MatchPost_Read_Delta_t
  #define MatchPost_Read_Record LUCY_MatchPost_Read_Record
  #define MatchPost_Read_Record_t LUCY_MatchPost_Read_Record_t
  #define MatchPost_Read_Raw LUCY_MatchPost_Read_Raw
  #define MatchPost_Read_Raw_t LUCY_MatchPost_Read_Raw_t
  #define MatchPost_Add_Inversion_To_Pool LUCY_MatchPost_Add_Inversion_To_Pool
  #define MatchPost_Add_Inversion_To_Pool_t LUCY_MatchPost_Add_Inversion_To_Pool_t
  #define MatchPost_Set_Doc_ID LUCY_MatchPost_Set_Doc_ID
  #define MatchPost_Set_Doc_ID_t LUCY_MatchPost_Set_Doc_ID_t
  #define MatchPost_Get_Doc_ID LUCY_MatchPost_Get_Doc_ID
  #define MatchPost_Get_Doc_ID_t LUCY_MatchPost_Get_Doc_ID_t
  #define MatchPost_Make_Matcher LUCY_MatchPost_Make_Matcher
  #define MatchPost_Make_Matcher_t LUCY_MatchPost_Make_Matcher_t
  #define MatchPost_Get_Freq LUCY_MatchPost_Get_Freq
  #define MatchPost_Get_Freq_t LUCY_MatchPost_Get_Freq_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy/Search/TermMatcher.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_MATCHPOSTINGMATCHER
extern uint32_t lucy_MatchPostMatcher_IVARS_OFFSET;
typedef struct lucy_MatchPostingMatcherIVARS lucy_MatchPostingMatcherIVARS;
static CFISH_INLINE lucy_MatchPostingMatcherIVARS*
lucy_MatchPostMatcher_IVARS(lucy_MatchPostingMatcher *self) {
   char *ptr = (char*)self + lucy_MatchPostMatcher_IVARS_OFFSET;
   return (lucy_MatchPostingMatcherIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define MatchPostingMatcherIVARS lucy_MatchPostingMatcherIVARS
  #define MatchPostMatcher_IVARS lucy_MatchPostMatcher_IVARS
#endif

struct lucy_MatchPostingMatcherIVARS {
    float weight;
    lucy_Compiler* compiler;
    lucy_Similarity* sim;
    lucy_PostingList* plist;
    lucy_Posting* posting;
};

#endif /* C_LUCY_MATCHPOSTINGMATCHER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_MatchPostingMatcher*
lucy_MatchPostMatcher_init(lucy_MatchPostingMatcher* self, lucy_Similarity* similarity, lucy_PostingList* posting_list, lucy_Compiler* compiler);

float
LUCY_MatchPostMatcher_Score_IMP(lucy_MatchPostingMatcher* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_MatchPostMatcher_To_Host_t)(lucy_MatchPostingMatcher* self, void* vcache);

typedef cfish_Obj*
(*LUCY_MatchPostMatcher_Clone_t)(lucy_MatchPostingMatcher* self);

typedef bool
(*LUCY_MatchPostMatcher_Equals_t)(lucy_MatchPostingMatcher* self, cfish_Obj* other);

typedef int32_t
(*LUCY_MatchPostMatcher_Compare_To_t)(lucy_MatchPostingMatcher* self, cfish_Obj* other);

typedef void
(*LUCY_MatchPostMatcher_Destroy_t)(lucy_MatchPostingMatcher* self);

typedef cfish_String*
(*LUCY_MatchPostMatcher_To_String_t)(lucy_MatchPostingMatcher* self);

typedef int32_t
(*LUCY_MatchPostMatcher_Next_t)(lucy_MatchPostingMatcher* self);

typedef int32_t
(*LUCY_MatchPostMatcher_Advance_t)(lucy_MatchPostingMatcher* self, int32_t target);

typedef int32_t
(*LUCY_MatchPostMatcher_Get_Doc_ID_t)(lucy_MatchPostingMatcher* self);

typedef float
(*LUCY_MatchPostMatcher_Score_t)(lucy_MatchPostingMatcher* self);

typedef void
(*LUCY_MatchPostMatcher_Collect_t)(lucy_MatchPostingMatcher* self, lucy_Collector* collector, lucy_Matcher* deletions);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_MatchPostMatcher_get_class(lucy_MatchPostingMatcher *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_MatchPostMatcher_get_class_name(lucy_MatchPostingMatcher *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_MatchPostMatcher_is_a(lucy_MatchPostingMatcher *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_MatchPostMatcher_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_MatchPostMatcher_To_Host(lucy_MatchPostingMatcher* self, void* vcache) {
    const LUCY_MatchPostMatcher_To_Host_t method = (LUCY_MatchPostMatcher_To_Host_t)cfish_obj_method(self, LUCY_MatchPostMatcher_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostMatcher_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_MatchPostMatcher_Clone(lucy_MatchPostingMatcher* self) {
    const LUCY_MatchPostMatcher_Clone_t method = (LUCY_MatchPostMatcher_Clone_t)cfish_obj_method(self, LUCY_MatchPostMatcher_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostMatcher_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_MatchPostMatcher_Equals(lucy_MatchPostingMatcher* self, cfish_Obj* other) {
    const LUCY_MatchPostMatcher_Equals_t method = (LUCY_MatchPostMatcher_Equals_t)cfish_obj_method(self, LUCY_MatchPostMatcher_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostMatcher_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_MatchPostMatcher_Compare_To(lucy_MatchPostingMatcher* self, cfish_Obj* other) {
    const LUCY_MatchPostMatcher_Compare_To_t method = (LUCY_MatchPostMatcher_Compare_To_t)cfish_obj_method(self, LUCY_MatchPostMatcher_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostMatcher_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_MatchPostMatcher_Destroy(lucy_MatchPostingMatcher* self) {
    const LUCY_MatchPostMatcher_Destroy_t method = (LUCY_MatchPostMatcher_Destroy_t)cfish_obj_method(self, LUCY_MatchPostMatcher_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostMatcher_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_MatchPostMatcher_To_String(lucy_MatchPostingMatcher* self) {
    const LUCY_MatchPostMatcher_To_String_t method = (LUCY_MatchPostMatcher_To_String_t)cfish_obj_method(self, LUCY_MatchPostMatcher_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostMatcher_Next_OFFSET;
static CFISH_INLINE int32_t
LUCY_MatchPostMatcher_Next(lucy_MatchPostingMatcher* self) {
    const LUCY_MatchPostMatcher_Next_t method = (LUCY_MatchPostMatcher_Next_t)cfish_obj_method(self, LUCY_MatchPostMatcher_Next_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostMatcher_Advance_OFFSET;
static CFISH_INLINE int32_t
LUCY_MatchPostMatcher_Advance(lucy_MatchPostingMatcher* self, int32_t target) {
    const LUCY_MatchPostMatcher_Advance_t method = (LUCY_MatchPostMatcher_Advance_t)cfish_obj_method(self, LUCY_MatchPostMatcher_Advance_OFFSET);
    return method(self, target);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostMatcher_Get_Doc_ID_OFFSET;
static CFISH_INLINE int32_t
LUCY_MatchPostMatcher_Get_Doc_ID(lucy_MatchPostingMatcher* self) {
    const LUCY_MatchPostMatcher_Get_Doc_ID_t method = (LUCY_MatchPostMatcher_Get_Doc_ID_t)cfish_obj_method(self, LUCY_MatchPostMatcher_Get_Doc_ID_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostMatcher_Score_OFFSET;
static CFISH_INLINE float
LUCY_MatchPostMatcher_Score(lucy_MatchPostingMatcher* self) {
    const LUCY_MatchPostMatcher_Score_t method = (LUCY_MatchPostMatcher_Score_t)cfish_obj_method(self, LUCY_MatchPostMatcher_Score_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostMatcher_Collect_OFFSET;
static CFISH_INLINE void
LUCY_MatchPostMatcher_Collect(lucy_MatchPostingMatcher* self, lucy_Collector* collector, lucy_Matcher* deletions) {
    const LUCY_MatchPostMatcher_Collect_t method = (LUCY_MatchPostMatcher_Collect_t)cfish_obj_method(self, LUCY_MatchPostMatcher_Collect_OFFSET);
    method(self, collector, deletions);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define MatchPostingMatcher lucy_MatchPostingMatcher
  #define MATCHPOSTINGMATCHER LUCY_MATCHPOSTINGMATCHER
  #define MatchPostMatcher_init lucy_MatchPostMatcher_init
  #define MatchPostMatcher_get_class lucy_MatchPostMatcher_get_class
  #define MatchPostMatcher_get_class_name lucy_MatchPostMatcher_get_class_name
  #define MatchPostMatcher_is_a lucy_MatchPostMatcher_is_a
  #define MatchPostMatcher_Score_IMP LUCY_MatchPostMatcher_Score_IMP
  #define MatchPostMatcher_To_Host LUCY_MatchPostMatcher_To_Host
  #define MatchPostMatcher_To_Host_t LUCY_MatchPostMatcher_To_Host_t
  #define MatchPostMatcher_Clone LUCY_MatchPostMatcher_Clone
  #define MatchPostMatcher_Clone_t LUCY_MatchPostMatcher_Clone_t
  #define MatchPostMatcher_Equals LUCY_MatchPostMatcher_Equals
  #define MatchPostMatcher_Equals_t LUCY_MatchPostMatcher_Equals_t
  #define MatchPostMatcher_Compare_To LUCY_MatchPostMatcher_Compare_To
  #define MatchPostMatcher_Compare_To_t LUCY_MatchPostMatcher_Compare_To_t
  #define MatchPostMatcher_Destroy LUCY_MatchPostMatcher_Destroy
  #define MatchPostMatcher_Destroy_t LUCY_MatchPostMatcher_Destroy_t
  #define MatchPostMatcher_To_String LUCY_MatchPostMatcher_To_String
  #define MatchPostMatcher_To_String_t LUCY_MatchPostMatcher_To_String_t
  #define MatchPostMatcher_Next LUCY_MatchPostMatcher_Next
  #define MatchPostMatcher_Next_t LUCY_MatchPostMatcher_Next_t
  #define MatchPostMatcher_Advance LUCY_MatchPostMatcher_Advance
  #define MatchPostMatcher_Advance_t LUCY_MatchPostMatcher_Advance_t
  #define MatchPostMatcher_Get_Doc_ID LUCY_MatchPostMatcher_Get_Doc_ID
  #define MatchPostMatcher_Get_Doc_ID_t LUCY_MatchPostMatcher_Get_Doc_ID_t
  #define MatchPostMatcher_Score LUCY_MatchPostMatcher_Score
  #define MatchPostMatcher_Score_t LUCY_MatchPostMatcher_Score_t
  #define MatchPostMatcher_Collect LUCY_MatchPostMatcher_Collect
  #define MatchPostMatcher_Collect_t LUCY_MatchPostMatcher_Collect_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy/Index/Posting.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_MATCHPOSTINGWRITER
extern uint32_t lucy_MatchPostWriter_IVARS_OFFSET;
typedef struct lucy_MatchPostingWriterIVARS lucy_MatchPostingWriterIVARS;
static CFISH_INLINE lucy_MatchPostingWriterIVARS*
lucy_MatchPostWriter_IVARS(lucy_MatchPostingWriter *self) {
   char *ptr = (char*)self + lucy_MatchPostWriter_IVARS_OFFSET;
   return (lucy_MatchPostingWriterIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define MatchPostingWriterIVARS lucy_MatchPostingWriterIVARS
  #define MatchPostWriter_IVARS lucy_MatchPostWriter_IVARS
#endif

struct lucy_MatchPostingWriterIVARS {
    lucy_Snapshot* snapshot;
    lucy_Segment* segment;
    lucy_PolyReader* polyreader;
    lucy_Schema* schema;
    lucy_Folder* folder;
    int32_t field_num;
    lucy_OutStream* outstream;
    int32_t last_doc_id;
};

#endif /* C_LUCY_MATCHPOSTINGWRITER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_MatchPostingWriter*
lucy_MatchPostWriter_new(lucy_Schema* schema, lucy_Snapshot* snapshot, lucy_Segment* segment, lucy_PolyReader* polyreader, int32_t field_num);

LUCY_VISIBLE lucy_MatchPostingWriter*
lucy_MatchPostWriter_init(lucy_MatchPostingWriter* self, lucy_Schema* schema, lucy_Snapshot* snapshot, lucy_Segment* segment, lucy_PolyReader* polyreader, int32_t field_num);

void
LUCY_MatchPostWriter_Destroy_IMP(lucy_MatchPostingWriter* self);

void
LUCY_MatchPostWriter_Write_Posting_IMP(lucy_MatchPostingWriter* self, lucy_RawPosting* posting);

void
LUCY_MatchPostWriter_Start_Term_IMP(lucy_MatchPostingWriter* self, lucy_TermInfo* tinfo);

void
LUCY_MatchPostWriter_Update_Skip_Info_IMP(lucy_MatchPostingWriter* self, lucy_TermInfo* tinfo);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_MatchPostWriter_To_Host_t)(lucy_MatchPostingWriter* self, void* vcache);

typedef cfish_Obj*
(*LUCY_MatchPostWriter_Clone_t)(lucy_MatchPostingWriter* self);

typedef bool
(*LUCY_MatchPostWriter_Equals_t)(lucy_MatchPostingWriter* self, cfish_Obj* other);

typedef int32_t
(*LUCY_MatchPostWriter_Compare_To_t)(lucy_MatchPostingWriter* self, cfish_Obj* other);

typedef void
(*LUCY_MatchPostWriter_Destroy_t)(lucy_MatchPostingWriter* self);

typedef cfish_String*
(*LUCY_MatchPostWriter_To_String_t)(lucy_MatchPostingWriter* self);

typedef void
(*LUCY_MatchPostWriter_Add_Inverted_Doc_t)(lucy_MatchPostingWriter* self, lucy_Inverter* inverter, int32_t doc_id);

typedef void
(*LUCY_MatchPostWriter_Add_Segment_t)(lucy_MatchPostingWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map);

typedef void
(*LUCY_MatchPostWriter_Delete_Segment_t)(lucy_MatchPostingWriter* self, lucy_SegReader* reader);

typedef void
(*LUCY_MatchPostWriter_Merge_Segment_t)(lucy_MatchPostingWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map);

typedef void
(*LUCY_MatchPostWriter_Finish_t)(lucy_MatchPostingWriter* self);

typedef cfish_Hash*
(*LUCY_MatchPostWriter_Metadata_t)(lucy_MatchPostingWriter* self);

typedef int32_t
(*LUCY_MatchPostWriter_Format_t)(lucy_MatchPostingWriter* self);

typedef lucy_Snapshot*
(*LUCY_MatchPostWriter_Get_Snapshot_t)(lucy_MatchPostingWriter* self);

typedef lucy_Segment*
(*LUCY_MatchPostWriter_Get_Segment_t)(lucy_MatchPostingWriter* self);

typedef lucy_PolyReader*
(*LUCY_MatchPostWriter_Get_PolyReader_t)(lucy_MatchPostingWriter* self);

typedef lucy_Schema*
(*LUCY_MatchPostWriter_Get_Schema_t)(lucy_MatchPostingWriter* self);

typedef lucy_Folder*
(*LUCY_MatchPostWriter_Get_Folder_t)(lucy_MatchPostingWriter* self);

typedef void
(*LUCY_MatchPostWriter_Write_Posting_t)(lucy_MatchPostingWriter* self, lucy_RawPosting* posting);

typedef void
(*LUCY_MatchPostWriter_Start_Term_t)(lucy_MatchPostingWriter* self, lucy_TermInfo* tinfo);

typedef void
(*LUCY_MatchPostWriter_Update_Skip_Info_t)(lucy_MatchPostingWriter* self, lucy_TermInfo* tinfo);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_MatchPostWriter_get_class(lucy_MatchPostingWriter *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_MatchPostWriter_get_class_name(lucy_MatchPostingWriter *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_MatchPostWriter_is_a(lucy_MatchPostingWriter *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_MatchPostWriter_To_Host(lucy_MatchPostingWriter* self, void* vcache) {
    const LUCY_MatchPostWriter_To_Host_t method = (LUCY_MatchPostWriter_To_Host_t)cfish_obj_method(self, LUCY_MatchPostWriter_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_MatchPostWriter_Clone(lucy_MatchPostingWriter* self) {
    const LUCY_MatchPostWriter_Clone_t method = (LUCY_MatchPostWriter_Clone_t)cfish_obj_method(self, LUCY_MatchPostWriter_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_MatchPostWriter_Equals(lucy_MatchPostingWriter* self, cfish_Obj* other) {
    const LUCY_MatchPostWriter_Equals_t method = (LUCY_MatchPostWriter_Equals_t)cfish_obj_method(self, LUCY_MatchPostWriter_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_MatchPostWriter_Compare_To(lucy_MatchPostingWriter* self, cfish_Obj* other) {
    const LUCY_MatchPostWriter_Compare_To_t method = (LUCY_MatchPostWriter_Compare_To_t)cfish_obj_method(self, LUCY_MatchPostWriter_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_MatchPostWriter_Destroy(lucy_MatchPostingWriter* self) {
    const LUCY_MatchPostWriter_Destroy_t method = (LUCY_MatchPostWriter_Destroy_t)cfish_obj_method(self, LUCY_MatchPostWriter_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_MatchPostWriter_To_String(lucy_MatchPostingWriter* self) {
    const LUCY_MatchPostWriter_To_String_t method = (LUCY_MatchPostWriter_To_String_t)cfish_obj_method(self, LUCY_MatchPostWriter_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Add_Inverted_Doc_OFFSET;
static CFISH_INLINE void
LUCY_MatchPostWriter_Add_Inverted_Doc(lucy_MatchPostingWriter* self, lucy_Inverter* inverter, int32_t doc_id) {
    const LUCY_MatchPostWriter_Add_Inverted_Doc_t method = (LUCY_MatchPostWriter_Add_Inverted_Doc_t)cfish_obj_method(self, LUCY_MatchPostWriter_Add_Inverted_Doc_OFFSET);
    method(self, inverter, doc_id);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Add_Segment_OFFSET;
static CFISH_INLINE void
LUCY_MatchPostWriter_Add_Segment(lucy_MatchPostingWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map) {
    const LUCY_MatchPostWriter_Add_Segment_t method = (LUCY_MatchPostWriter_Add_Segment_t)cfish_obj_method(self, LUCY_MatchPostWriter_Add_Segment_OFFSET);
    method(self, reader, doc_map);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Delete_Segment_OFFSET;
static CFISH_INLINE void
LUCY_MatchPostWriter_Delete_Segment(lucy_MatchPostingWriter* self, lucy_SegReader* reader) {
    const LUCY_MatchPostWriter_Delete_Segment_t method = (LUCY_MatchPostWriter_Delete_Segment_t)cfish_obj_method(self, LUCY_MatchPostWriter_Delete_Segment_OFFSET);
    method(self, reader);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Merge_Segment_OFFSET;
static CFISH_INLINE void
LUCY_MatchPostWriter_Merge_Segment(lucy_MatchPostingWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map) {
    const LUCY_MatchPostWriter_Merge_Segment_t method = (LUCY_MatchPostWriter_Merge_Segment_t)cfish_obj_method(self, LUCY_MatchPostWriter_Merge_Segment_OFFSET);
    method(self, reader, doc_map);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Finish_OFFSET;
static CFISH_INLINE void
LUCY_MatchPostWriter_Finish(lucy_MatchPostingWriter* self) {
    const LUCY_MatchPostWriter_Finish_t method = (LUCY_MatchPostWriter_Finish_t)cfish_obj_method(self, LUCY_MatchPostWriter_Finish_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Metadata_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_MatchPostWriter_Metadata(lucy_MatchPostingWriter* self) {
    const LUCY_MatchPostWriter_Metadata_t method = (LUCY_MatchPostWriter_Metadata_t)cfish_obj_method(self, LUCY_MatchPostWriter_Metadata_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Format_OFFSET;
static CFISH_INLINE int32_t
LUCY_MatchPostWriter_Format(lucy_MatchPostingWriter* self) {
    const LUCY_MatchPostWriter_Format_t method = (LUCY_MatchPostWriter_Format_t)cfish_obj_method(self, LUCY_MatchPostWriter_Format_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Get_Snapshot_OFFSET;
static CFISH_INLINE lucy_Snapshot*
LUCY_MatchPostWriter_Get_Snapshot(lucy_MatchPostingWriter* self) {
    const LUCY_MatchPostWriter_Get_Snapshot_t method = (LUCY_MatchPostWriter_Get_Snapshot_t)cfish_obj_method(self, LUCY_MatchPostWriter_Get_Snapshot_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Get_Segment_OFFSET;
static CFISH_INLINE lucy_Segment*
LUCY_MatchPostWriter_Get_Segment(lucy_MatchPostingWriter* self) {
    const LUCY_MatchPostWriter_Get_Segment_t method = (LUCY_MatchPostWriter_Get_Segment_t)cfish_obj_method(self, LUCY_MatchPostWriter_Get_Segment_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Get_PolyReader_OFFSET;
static CFISH_INLINE lucy_PolyReader*
LUCY_MatchPostWriter_Get_PolyReader(lucy_MatchPostingWriter* self) {
    const LUCY_MatchPostWriter_Get_PolyReader_t method = (LUCY_MatchPostWriter_Get_PolyReader_t)cfish_obj_method(self, LUCY_MatchPostWriter_Get_PolyReader_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Get_Schema_OFFSET;
static CFISH_INLINE lucy_Schema*
LUCY_MatchPostWriter_Get_Schema(lucy_MatchPostingWriter* self) {
    const LUCY_MatchPostWriter_Get_Schema_t method = (LUCY_MatchPostWriter_Get_Schema_t)cfish_obj_method(self, LUCY_MatchPostWriter_Get_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Get_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_MatchPostWriter_Get_Folder(lucy_MatchPostingWriter* self) {
    const LUCY_MatchPostWriter_Get_Folder_t method = (LUCY_MatchPostWriter_Get_Folder_t)cfish_obj_method(self, LUCY_MatchPostWriter_Get_Folder_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Write_Posting_OFFSET;
static CFISH_INLINE void
LUCY_MatchPostWriter_Write_Posting(lucy_MatchPostingWriter* self, lucy_RawPosting* posting) {
    const LUCY_MatchPostWriter_Write_Posting_t method = (LUCY_MatchPostWriter_Write_Posting_t)cfish_obj_method(self, LUCY_MatchPostWriter_Write_Posting_OFFSET);
    method(self, posting);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Start_Term_OFFSET;
static CFISH_INLINE void
LUCY_MatchPostWriter_Start_Term(lucy_MatchPostingWriter* self, lucy_TermInfo* tinfo) {
    const LUCY_MatchPostWriter_Start_Term_t method = (LUCY_MatchPostWriter_Start_Term_t)cfish_obj_method(self, LUCY_MatchPostWriter_Start_Term_OFFSET);
    method(self, tinfo);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchPostWriter_Update_Skip_Info_OFFSET;
static CFISH_INLINE void
LUCY_MatchPostWriter_Update_Skip_Info(lucy_MatchPostingWriter* self, lucy_TermInfo* tinfo) {
    const LUCY_MatchPostWriter_Update_Skip_Info_t method = (LUCY_MatchPostWriter_Update_Skip_Info_t)cfish_obj_method(self, LUCY_MatchPostWriter_Update_Skip_Info_OFFSET);
    method(self, tinfo);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define MatchPostingWriter lucy_MatchPostingWriter
  #define MATCHPOSTINGWRITER LUCY_MATCHPOSTINGWRITER
  #define MatchPostWriter_new lucy_MatchPostWriter_new
  #define MatchPostWriter_init lucy_MatchPostWriter_init
  #define MatchPostWriter_get_class lucy_MatchPostWriter_get_class
  #define MatchPostWriter_get_class_name lucy_MatchPostWriter_get_class_name
  #define MatchPostWriter_is_a lucy_MatchPostWriter_is_a
  #define MatchPostWriter_Destroy_IMP LUCY_MatchPostWriter_Destroy_IMP
  #define MatchPostWriter_Write_Posting_IMP LUCY_MatchPostWriter_Write_Posting_IMP
  #define MatchPostWriter_Start_Term_IMP LUCY_MatchPostWriter_Start_Term_IMP
  #define MatchPostWriter_Update_Skip_Info_IMP LUCY_MatchPostWriter_Update_Skip_Info_IMP
  #define MatchPostWriter_To_Host LUCY_MatchPostWriter_To_Host
  #define MatchPostWriter_To_Host_t LUCY_MatchPostWriter_To_Host_t
  #define MatchPostWriter_Clone LUCY_MatchPostWriter_Clone
  #define MatchPostWriter_Clone_t LUCY_MatchPostWriter_Clone_t
  #define MatchPostWriter_Equals LUCY_MatchPostWriter_Equals
  #define MatchPostWriter_Equals_t LUCY_MatchPostWriter_Equals_t
  #define MatchPostWriter_Compare_To LUCY_MatchPostWriter_Compare_To
  #define MatchPostWriter_Compare_To_t LUCY_MatchPostWriter_Compare_To_t
  #define MatchPostWriter_Destroy LUCY_MatchPostWriter_Destroy
  #define MatchPostWriter_Destroy_t LUCY_MatchPostWriter_Destroy_t
  #define MatchPostWriter_To_String LUCY_MatchPostWriter_To_String
  #define MatchPostWriter_To_String_t LUCY_MatchPostWriter_To_String_t
  #define MatchPostWriter_Add_Inverted_Doc LUCY_MatchPostWriter_Add_Inverted_Doc
  #define MatchPostWriter_Add_Inverted_Doc_t LUCY_MatchPostWriter_Add_Inverted_Doc_t
  #define MatchPostWriter_Add_Segment LUCY_MatchPostWriter_Add_Segment
  #define MatchPostWriter_Add_Segment_t LUCY_MatchPostWriter_Add_Segment_t
  #define MatchPostWriter_Delete_Segment LUCY_MatchPostWriter_Delete_Segment
  #define MatchPostWriter_Delete_Segment_t LUCY_MatchPostWriter_Delete_Segment_t
  #define MatchPostWriter_Merge_Segment LUCY_MatchPostWriter_Merge_Segment
  #define MatchPostWriter_Merge_Segment_t LUCY_MatchPostWriter_Merge_Segment_t
  #define MatchPostWriter_Finish LUCY_MatchPostWriter_Finish
  #define MatchPostWriter_Finish_t LUCY_MatchPostWriter_Finish_t
  #define MatchPostWriter_Metadata LUCY_MatchPostWriter_Metadata
  #define MatchPostWriter_Metadata_t LUCY_MatchPostWriter_Metadata_t
  #define MatchPostWriter_Format LUCY_MatchPostWriter_Format
  #define MatchPostWriter_Format_t LUCY_MatchPostWriter_Format_t
  #define MatchPostWriter_Get_Snapshot LUCY_MatchPostWriter_Get_Snapshot
  #define MatchPostWriter_Get_Snapshot_t LUCY_MatchPostWriter_Get_Snapshot_t
  #define MatchPostWriter_Get_Segment LUCY_MatchPostWriter_Get_Segment
  #define MatchPostWriter_Get_Segment_t LUCY_MatchPostWriter_Get_Segment_t
  #define MatchPostWriter_Get_PolyReader LUCY_MatchPostWriter_Get_PolyReader
  #define MatchPostWriter_Get_PolyReader_t LUCY_MatchPostWriter_Get_PolyReader_t
  #define MatchPostWriter_Get_Schema LUCY_MatchPostWriter_Get_Schema
  #define MatchPostWriter_Get_Schema_t LUCY_MatchPostWriter_Get_Schema_t
  #define MatchPostWriter_Get_Folder LUCY_MatchPostWriter_Get_Folder
  #define MatchPostWriter_Get_Folder_t LUCY_MatchPostWriter_Get_Folder_t
  #define MatchPostWriter_Write_Posting LUCY_MatchPostWriter_Write_Posting
  #define MatchPostWriter_Write_Posting_t LUCY_MatchPostWriter_Write_Posting_t
  #define MatchPostWriter_Start_Term LUCY_MatchPostWriter_Start_Term
  #define MatchPostWriter_Start_Term_t LUCY_MatchPostWriter_Start_Term_t
  #define MatchPostWriter_Update_Skip_Info LUCY_MatchPostWriter_Update_Skip_Info
  #define MatchPostWriter_Update_Skip_Info_t LUCY_MatchPostWriter_Update_Skip_Info_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy/Index/TermStepper.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_MATCHTERMINFOSTEPPER
extern uint32_t lucy_MatchTInfoStepper_IVARS_OFFSET;
typedef struct lucy_MatchTermInfoStepperIVARS lucy_MatchTermInfoStepperIVARS;
static CFISH_INLINE lucy_MatchTermInfoStepperIVARS*
lucy_MatchTInfoStepper_IVARS(lucy_MatchTermInfoStepper *self) {
   char *ptr = (char*)self + lucy_MatchTInfoStepper_IVARS_OFFSET;
   return (lucy_MatchTermInfoStepperIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define MatchTermInfoStepperIVARS lucy_MatchTermInfoStepperIVARS
  #define MatchTInfoStepper_IVARS lucy_MatchTInfoStepper_IVARS
#endif

struct lucy_MatchTermInfoStepperIVARS {
    cfish_Obj* value;
    int32_t skip_interval;
};

#endif /* C_LUCY_MATCHTERMINFOSTEPPER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_MatchTermInfoStepper*
lucy_MatchTInfoStepper_new(lucy_Schema* schema);

LUCY_VISIBLE lucy_MatchTermInfoStepper*
lucy_MatchTInfoStepper_init(lucy_MatchTermInfoStepper* self, lucy_Schema* schema);

void
LUCY_MatchTInfoStepper_Reset_IMP(lucy_MatchTermInfoStepper* self);

void
LUCY_MatchTInfoStepper_Write_Key_Frame_IMP(lucy_MatchTermInfoStepper* self, lucy_OutStream* outstream, cfish_Obj* value);

void
LUCY_MatchTInfoStepper_Write_Delta_IMP(lucy_MatchTermInfoStepper* self, lucy_OutStream* outstream, cfish_Obj* value);

void
LUCY_MatchTInfoStepper_Read_Key_Frame_IMP(lucy_MatchTermInfoStepper* self, lucy_InStream* instream);

void
LUCY_MatchTInfoStepper_Read_Delta_IMP(lucy_MatchTermInfoStepper* self, lucy_InStream* instream);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_MatchTInfoStepper_To_Host_t)(lucy_MatchTermInfoStepper* self, void* vcache);

typedef cfish_Obj*
(*LUCY_MatchTInfoStepper_Clone_t)(lucy_MatchTermInfoStepper* self);

typedef bool
(*LUCY_MatchTInfoStepper_Equals_t)(lucy_MatchTermInfoStepper* self, cfish_Obj* other);

typedef int32_t
(*LUCY_MatchTInfoStepper_Compare_To_t)(lucy_MatchTermInfoStepper* self, cfish_Obj* other);

typedef void
(*LUCY_MatchTInfoStepper_Destroy_t)(lucy_MatchTermInfoStepper* self);

typedef cfish_String*
(*LUCY_MatchTInfoStepper_To_String_t)(lucy_MatchTermInfoStepper* self);

typedef void
(*LUCY_MatchTInfoStepper_Reset_t)(lucy_MatchTermInfoStepper* self);

typedef void
(*LUCY_MatchTInfoStepper_Write_Key_Frame_t)(lucy_MatchTermInfoStepper* self, lucy_OutStream* outstream, cfish_Obj* value);

typedef void
(*LUCY_MatchTInfoStepper_Write_Delta_t)(lucy_MatchTermInfoStepper* self, lucy_OutStream* outstream, cfish_Obj* value);

typedef void
(*LUCY_MatchTInfoStepper_Read_Key_Frame_t)(lucy_MatchTermInfoStepper* self, lucy_InStream* instream);

typedef void
(*LUCY_MatchTInfoStepper_Read_Delta_t)(lucy_MatchTermInfoStepper* self, lucy_InStream* instream);

typedef void
(*LUCY_MatchTInfoStepper_Read_Record_t)(lucy_MatchTermInfoStepper* self, lucy_InStream* instream);

typedef void
(*LUCY_MatchTInfoStepper_Set_Value_t)(lucy_MatchTermInfoStepper* self, cfish_Obj* value);

typedef cfish_Obj*
(*LUCY_MatchTInfoStepper_Get_Value_t)(lucy_MatchTermInfoStepper* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_MatchTInfoStepper_get_class(lucy_MatchTermInfoStepper *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_MatchTInfoStepper_get_class_name(lucy_MatchTermInfoStepper *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_MatchTInfoStepper_is_a(lucy_MatchTermInfoStepper *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_MatchTInfoStepper_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_MatchTInfoStepper_To_Host(lucy_MatchTermInfoStepper* self, void* vcache) {
    const LUCY_MatchTInfoStepper_To_Host_t method = (LUCY_MatchTInfoStepper_To_Host_t)cfish_obj_method(self, LUCY_MatchTInfoStepper_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchTInfoStepper_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_MatchTInfoStepper_Clone(lucy_MatchTermInfoStepper* self) {
    const LUCY_MatchTInfoStepper_Clone_t method = (LUCY_MatchTInfoStepper_Clone_t)cfish_obj_method(self, LUCY_MatchTInfoStepper_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchTInfoStepper_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_MatchTInfoStepper_Equals(lucy_MatchTermInfoStepper* self, cfish_Obj* other) {
    const LUCY_MatchTInfoStepper_Equals_t method = (LUCY_MatchTInfoStepper_Equals_t)cfish_obj_method(self, LUCY_MatchTInfoStepper_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchTInfoStepper_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_MatchTInfoStepper_Compare_To(lucy_MatchTermInfoStepper* self, cfish_Obj* other) {
    const LUCY_MatchTInfoStepper_Compare_To_t method = (LUCY_MatchTInfoStepper_Compare_To_t)cfish_obj_method(self, LUCY_MatchTInfoStepper_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchTInfoStepper_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_MatchTInfoStepper_Destroy(lucy_MatchTermInfoStepper* self) {
    const LUCY_MatchTInfoStepper_Destroy_t method = (LUCY_MatchTInfoStepper_Destroy_t)cfish_obj_method(self, LUCY_MatchTInfoStepper_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchTInfoStepper_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_MatchTInfoStepper_To_String(lucy_MatchTermInfoStepper* self) {
    const LUCY_MatchTInfoStepper_To_String_t method = (LUCY_MatchTInfoStepper_To_String_t)cfish_obj_method(self, LUCY_MatchTInfoStepper_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchTInfoStepper_Reset_OFFSET;
static CFISH_INLINE void
LUCY_MatchTInfoStepper_Reset(lucy_MatchTermInfoStepper* self) {
    const LUCY_MatchTInfoStepper_Reset_t method = (LUCY_MatchTInfoStepper_Reset_t)cfish_obj_method(self, LUCY_MatchTInfoStepper_Reset_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchTInfoStepper_Write_Key_Frame_OFFSET;
static CFISH_INLINE void
LUCY_MatchTInfoStepper_Write_Key_Frame(lucy_MatchTermInfoStepper* self, lucy_OutStream* outstream, cfish_Obj* value) {
    const LUCY_MatchTInfoStepper_Write_Key_Frame_t method = (LUCY_MatchTInfoStepper_Write_Key_Frame_t)cfish_obj_method(self, LUCY_MatchTInfoStepper_Write_Key_Frame_OFFSET);
    method(self, outstream, value);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchTInfoStepper_Write_Delta_OFFSET;
static CFISH_INLINE void
LUCY_MatchTInfoStepper_Write_Delta(lucy_MatchTermInfoStepper* self, lucy_OutStream* outstream, cfish_Obj* value) {
    const LUCY_MatchTInfoStepper_Write_Delta_t method = (LUCY_MatchTInfoStepper_Write_Delta_t)cfish_obj_method(self, LUCY_MatchTInfoStepper_Write_Delta_OFFSET);
    method(self, outstream, value);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchTInfoStepper_Read_Key_Frame_OFFSET;
static CFISH_INLINE void
LUCY_MatchTInfoStepper_Read_Key_Frame(lucy_MatchTermInfoStepper* self, lucy_InStream* instream) {
    const LUCY_MatchTInfoStepper_Read_Key_Frame_t method = (LUCY_MatchTInfoStepper_Read_Key_Frame_t)cfish_obj_method(self, LUCY_MatchTInfoStepper_Read_Key_Frame_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchTInfoStepper_Read_Delta_OFFSET;
static CFISH_INLINE void
LUCY_MatchTInfoStepper_Read_Delta(lucy_MatchTermInfoStepper* self, lucy_InStream* instream) {
    const LUCY_MatchTInfoStepper_Read_Delta_t method = (LUCY_MatchTInfoStepper_Read_Delta_t)cfish_obj_method(self, LUCY_MatchTInfoStepper_Read_Delta_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchTInfoStepper_Read_Record_OFFSET;
static CFISH_INLINE void
LUCY_MatchTInfoStepper_Read_Record(lucy_MatchTermInfoStepper* self, lucy_InStream* instream) {
    const LUCY_MatchTInfoStepper_Read_Record_t method = (LUCY_MatchTInfoStepper_Read_Record_t)cfish_obj_method(self, LUCY_MatchTInfoStepper_Read_Record_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchTInfoStepper_Set_Value_OFFSET;
static CFISH_INLINE void
LUCY_MatchTInfoStepper_Set_Value(lucy_MatchTermInfoStepper* self, cfish_Obj* value) {
    const LUCY_MatchTInfoStepper_Set_Value_t method = (LUCY_MatchTInfoStepper_Set_Value_t)cfish_obj_method(self, LUCY_MatchTInfoStepper_Set_Value_OFFSET);
    method(self, value);
}

extern LUCY_VISIBLE uint32_t LUCY_MatchTInfoStepper_Get_Value_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_MatchTInfoStepper_Get_Value(lucy_MatchTermInfoStepper* self) {
    const LUCY_MatchTInfoStepper_Get_Value_t method = (LUCY_MatchTInfoStepper_Get_Value_t)cfish_obj_method(self, LUCY_MatchTInfoStepper_Get_Value_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define MatchTermInfoStepper lucy_MatchTermInfoStepper
  #define MATCHTERMINFOSTEPPER LUCY_MATCHTERMINFOSTEPPER
  #define MatchTInfoStepper_new lucy_MatchTInfoStepper_new
  #define MatchTInfoStepper_init lucy_MatchTInfoStepper_init
  #define MatchTInfoStepper_get_class lucy_MatchTInfoStepper_get_class
  #define MatchTInfoStepper_get_class_name lucy_MatchTInfoStepper_get_class_name
  #define MatchTInfoStepper_is_a lucy_MatchTInfoStepper_is_a
  #define MatchTInfoStepper_Reset_IMP LUCY_MatchTInfoStepper_Reset_IMP
  #define MatchTInfoStepper_Write_Key_Frame_IMP LUCY_MatchTInfoStepper_Write_Key_Frame_IMP
  #define MatchTInfoStepper_Write_Delta_IMP LUCY_MatchTInfoStepper_Write_Delta_IMP
  #define MatchTInfoStepper_Read_Key_Frame_IMP LUCY_MatchTInfoStepper_Read_Key_Frame_IMP
  #define MatchTInfoStepper_Read_Delta_IMP LUCY_MatchTInfoStepper_Read_Delta_IMP
  #define MatchTInfoStepper_To_Host LUCY_MatchTInfoStepper_To_Host
  #define MatchTInfoStepper_To_Host_t LUCY_MatchTInfoStepper_To_Host_t
  #define MatchTInfoStepper_Clone LUCY_MatchTInfoStepper_Clone
  #define MatchTInfoStepper_Clone_t LUCY_MatchTInfoStepper_Clone_t
  #define MatchTInfoStepper_Equals LUCY_MatchTInfoStepper_Equals
  #define MatchTInfoStepper_Equals_t LUCY_MatchTInfoStepper_Equals_t
  #define MatchTInfoStepper_Compare_To LUCY_MatchTInfoStepper_Compare_To
  #define MatchTInfoStepper_Compare_To_t LUCY_MatchTInfoStepper_Compare_To_t
  #define MatchTInfoStepper_Destroy LUCY_MatchTInfoStepper_Destroy
  #define MatchTInfoStepper_Destroy_t LUCY_MatchTInfoStepper_Destroy_t
  #define MatchTInfoStepper_To_String LUCY_MatchTInfoStepper_To_String
  #define MatchTInfoStepper_To_String_t LUCY_MatchTInfoStepper_To_String_t
  #define MatchTInfoStepper_Reset LUCY_MatchTInfoStepper_Reset
  #define MatchTInfoStepper_Reset_t LUCY_MatchTInfoStepper_Reset_t
  #define MatchTInfoStepper_Write_Key_Frame LUCY_MatchTInfoStepper_Write_Key_Frame
  #define MatchTInfoStepper_Write_Key_Frame_t LUCY_MatchTInfoStepper_Write_Key_Frame_t
  #define MatchTInfoStepper_Write_Delta LUCY_MatchTInfoStepper_Write_Delta
  #define MatchTInfoStepper_Write_Delta_t LUCY_MatchTInfoStepper_Write_Delta_t
  #define MatchTInfoStepper_Read_Key_Frame LUCY_MatchTInfoStepper_Read_Key_Frame
  #define MatchTInfoStepper_Read_Key_Frame_t LUCY_MatchTInfoStepper_Read_Key_Frame_t
  #define MatchTInfoStepper_Read_Delta LUCY_MatchTInfoStepper_Read_Delta
  #define MatchTInfoStepper_Read_Delta_t LUCY_MatchTInfoStepper_Read_Delta_t
  #define MatchTInfoStepper_Read_Record LUCY_MatchTInfoStepper_Read_Record
  #define MatchTInfoStepper_Read_Record_t LUCY_MatchTInfoStepper_Read_Record_t
  #define MatchTInfoStepper_Set_Value LUCY_MatchTInfoStepper_Set_Value
  #define MatchTInfoStepper_Set_Value_t LUCY_MatchTInfoStepper_Set_Value_t
  #define MatchTInfoStepper_Get_Value LUCY_MatchTInfoStepper_Get_Value
  #define MatchTInfoStepper_Get_Value_t LUCY_MatchTInfoStepper_Get_Value_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_POSTING_MATCHPOSTING */




