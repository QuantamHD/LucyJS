/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_POSTING
#define H_LUCY_INDEX_POSTING 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Util/Stepper.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_POSTING
extern uint32_t lucy_Post_IVARS_OFFSET;
typedef struct lucy_PostingIVARS lucy_PostingIVARS;
static CFISH_INLINE lucy_PostingIVARS*
lucy_Post_IVARS(lucy_Posting *self) {
   char *ptr = (char*)self + lucy_Post_IVARS_OFFSET;
   return (lucy_PostingIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define PostingIVARS lucy_PostingIVARS
  #define Post_IVARS lucy_Post_IVARS
#endif

struct lucy_PostingIVARS {
    int32_t doc_id;
};

#endif /* C_LUCY_POSTING */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_Posting*
lucy_Post_init(lucy_Posting* self);

lucy_RawPosting*
LUCY_Post_Read_Raw_IMP(lucy_Posting* self, lucy_InStream* instream, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool);

void
LUCY_Post_Add_Inversion_To_Pool_IMP(lucy_Posting* self, lucy_PostingPool* post_pool, lucy_Inversion* inversion, lucy_FieldType* type, int32_t doc_id, float doc_boost, float length_norm);

void
LUCY_Post_Set_Doc_ID_IMP(lucy_Posting* self, int32_t doc_id);

int32_t
LUCY_Post_Get_Doc_ID_IMP(lucy_Posting* self);

lucy_Matcher*
LUCY_Post_Make_Matcher_IMP(lucy_Posting* self, lucy_Similarity* sim, lucy_PostingList* plist, lucy_Compiler* compiler, bool need_score);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_Post_To_Host_t)(lucy_Posting* self, void* vcache);

typedef cfish_Obj*
(*LUCY_Post_Clone_t)(lucy_Posting* self);

typedef bool
(*LUCY_Post_Equals_t)(lucy_Posting* self, cfish_Obj* other);

typedef int32_t
(*LUCY_Post_Compare_To_t)(lucy_Posting* self, cfish_Obj* other);

typedef void
(*LUCY_Post_Destroy_t)(lucy_Posting* self);

typedef cfish_String*
(*LUCY_Post_To_String_t)(lucy_Posting* self);

typedef void
(*LUCY_Post_Reset_t)(lucy_Posting* self);

typedef void
(*LUCY_Post_Write_Key_Frame_t)(lucy_Posting* self, lucy_OutStream* outstream, cfish_Obj* value);

typedef void
(*LUCY_Post_Write_Delta_t)(lucy_Posting* self, lucy_OutStream* outstream, cfish_Obj* value);

typedef void
(*LUCY_Post_Read_Key_Frame_t)(lucy_Posting* self, lucy_InStream* instream);

typedef void
(*LUCY_Post_Read_Delta_t)(lucy_Posting* self, lucy_InStream* instream);

typedef void
(*LUCY_Post_Read_Record_t)(lucy_Posting* self, lucy_InStream* instream);

typedef lucy_RawPosting*
(*LUCY_Post_Read_Raw_t)(lucy_Posting* self, lucy_InStream* instream, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool);

typedef void
(*LUCY_Post_Add_Inversion_To_Pool_t)(lucy_Posting* self, lucy_PostingPool* post_pool, lucy_Inversion* inversion, lucy_FieldType* type, int32_t doc_id, float doc_boost, float length_norm);

typedef void
(*LUCY_Post_Set_Doc_ID_t)(lucy_Posting* self, int32_t doc_id);

typedef int32_t
(*LUCY_Post_Get_Doc_ID_t)(lucy_Posting* self);

typedef lucy_Matcher*
(*LUCY_Post_Make_Matcher_t)(lucy_Posting* self, lucy_Similarity* sim, lucy_PostingList* plist, lucy_Compiler* compiler, bool need_score);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_Post_get_class(lucy_Posting *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_Post_get_class_name(lucy_Posting *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_Post_is_a(lucy_Posting *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_Post_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_Post_To_Host(lucy_Posting* self, void* vcache) {
    const LUCY_Post_To_Host_t method = (LUCY_Post_To_Host_t)cfish_obj_method(self, LUCY_Post_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_Post_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_Post_Clone(lucy_Posting* self) {
    const LUCY_Post_Clone_t method = (LUCY_Post_Clone_t)cfish_obj_method(self, LUCY_Post_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Post_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_Post_Equals(lucy_Posting* self, cfish_Obj* other) {
    const LUCY_Post_Equals_t method = (LUCY_Post_Equals_t)cfish_obj_method(self, LUCY_Post_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Post_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_Post_Compare_To(lucy_Posting* self, cfish_Obj* other) {
    const LUCY_Post_Compare_To_t method = (LUCY_Post_Compare_To_t)cfish_obj_method(self, LUCY_Post_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Post_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_Post_Destroy(lucy_Posting* self) {
    const LUCY_Post_Destroy_t method = (LUCY_Post_Destroy_t)cfish_obj_method(self, LUCY_Post_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Post_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Post_To_String(lucy_Posting* self) {
    const LUCY_Post_To_String_t method = (LUCY_Post_To_String_t)cfish_obj_method(self, LUCY_Post_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Post_Reset_OFFSET;
static CFISH_INLINE void
LUCY_Post_Reset(lucy_Posting* self) {
    const LUCY_Post_Reset_t method = (LUCY_Post_Reset_t)cfish_obj_method(self, LUCY_Post_Reset_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Post_Write_Key_Frame_OFFSET;
static CFISH_INLINE void
LUCY_Post_Write_Key_Frame(lucy_Posting* self, lucy_OutStream* outstream, cfish_Obj* value) {
    const LUCY_Post_Write_Key_Frame_t method = (LUCY_Post_Write_Key_Frame_t)cfish_obj_method(self, LUCY_Post_Write_Key_Frame_OFFSET);
    method(self, outstream, value);
}

extern LUCY_VISIBLE uint32_t LUCY_Post_Write_Delta_OFFSET;
static CFISH_INLINE void
LUCY_Post_Write_Delta(lucy_Posting* self, lucy_OutStream* outstream, cfish_Obj* value) {
    const LUCY_Post_Write_Delta_t method = (LUCY_Post_Write_Delta_t)cfish_obj_method(self, LUCY_Post_Write_Delta_OFFSET);
    method(self, outstream, value);
}

extern LUCY_VISIBLE uint32_t LUCY_Post_Read_Key_Frame_OFFSET;
static CFISH_INLINE void
LUCY_Post_Read_Key_Frame(lucy_Posting* self, lucy_InStream* instream) {
    const LUCY_Post_Read_Key_Frame_t method = (LUCY_Post_Read_Key_Frame_t)cfish_obj_method(self, LUCY_Post_Read_Key_Frame_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_Post_Read_Delta_OFFSET;
static CFISH_INLINE void
LUCY_Post_Read_Delta(lucy_Posting* self, lucy_InStream* instream) {
    const LUCY_Post_Read_Delta_t method = (LUCY_Post_Read_Delta_t)cfish_obj_method(self, LUCY_Post_Read_Delta_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_Post_Read_Record_OFFSET;
static CFISH_INLINE void
LUCY_Post_Read_Record(lucy_Posting* self, lucy_InStream* instream) {
    const LUCY_Post_Read_Record_t method = (LUCY_Post_Read_Record_t)cfish_obj_method(self, LUCY_Post_Read_Record_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_Post_Read_Raw_OFFSET;
static CFISH_INLINE lucy_RawPosting*
LUCY_Post_Read_Raw(lucy_Posting* self, lucy_InStream* instream, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool) {
    const LUCY_Post_Read_Raw_t method = (LUCY_Post_Read_Raw_t)cfish_obj_method(self, LUCY_Post_Read_Raw_OFFSET);
    return method(self, instream, last_doc_id, term_text, mem_pool);
}

extern LUCY_VISIBLE uint32_t LUCY_Post_Add_Inversion_To_Pool_OFFSET;
static CFISH_INLINE void
LUCY_Post_Add_Inversion_To_Pool(lucy_Posting* self, lucy_PostingPool* post_pool, lucy_Inversion* inversion, lucy_FieldType* type, int32_t doc_id, float doc_boost, float length_norm) {
    const LUCY_Post_Add_Inversion_To_Pool_t method = (LUCY_Post_Add_Inversion_To_Pool_t)cfish_obj_method(self, LUCY_Post_Add_Inversion_To_Pool_OFFSET);
    method(self, post_pool, inversion, type, doc_id, doc_boost, length_norm);
}

extern LUCY_VISIBLE uint32_t LUCY_Post_Set_Doc_ID_OFFSET;
static CFISH_INLINE void
LUCY_Post_Set_Doc_ID(lucy_Posting* self, int32_t doc_id) {
    const LUCY_Post_Set_Doc_ID_t method = (LUCY_Post_Set_Doc_ID_t)cfish_obj_method(self, LUCY_Post_Set_Doc_ID_OFFSET);
    method(self, doc_id);
}

extern LUCY_VISIBLE uint32_t LUCY_Post_Get_Doc_ID_OFFSET;
static CFISH_INLINE int32_t
LUCY_Post_Get_Doc_ID(lucy_Posting* self) {
    const LUCY_Post_Get_Doc_ID_t method = (LUCY_Post_Get_Doc_ID_t)cfish_obj_method(self, LUCY_Post_Get_Doc_ID_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Post_Make_Matcher_OFFSET;
static CFISH_INLINE lucy_Matcher*
LUCY_Post_Make_Matcher(lucy_Posting* self, lucy_Similarity* sim, lucy_PostingList* plist, lucy_Compiler* compiler, bool need_score) {
    const LUCY_Post_Make_Matcher_t method = (LUCY_Post_Make_Matcher_t)cfish_obj_method(self, LUCY_Post_Make_Matcher_OFFSET);
    return method(self, sim, plist, compiler, need_score);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_Post_Read_Raw_OVERRIDE NULL
#define Lucy_Post_Add_Inversion_To_Pool_OVERRIDE NULL
#define Lucy_Post_Set_Doc_ID_OVERRIDE NULL
#define Lucy_Post_Get_Doc_ID_OVERRIDE NULL
#define Lucy_Post_Make_Matcher_OVERRIDE NULL
#else
lucy_RawPosting*
Lucy_Post_Read_Raw_OVERRIDE(lucy_Posting* self, lucy_InStream* instream, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool);
void
Lucy_Post_Add_Inversion_To_Pool_OVERRIDE(lucy_Posting* self, lucy_PostingPool* post_pool, lucy_Inversion* inversion, lucy_FieldType* type, int32_t doc_id, float doc_boost, float length_norm);
void
Lucy_Post_Set_Doc_ID_OVERRIDE(lucy_Posting* self, int32_t doc_id);
int32_t
Lucy_Post_Get_Doc_ID_OVERRIDE(lucy_Posting* self);
lucy_Matcher*
Lucy_Post_Make_Matcher_OVERRIDE(lucy_Posting* self, lucy_Similarity* sim, lucy_PostingList* plist, lucy_Compiler* compiler, bool need_score);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define Posting lucy_Posting
  #define POSTING LUCY_POSTING
  #define Post_init lucy_Post_init
  #define Post_get_class lucy_Post_get_class
  #define Post_get_class_name lucy_Post_get_class_name
  #define Post_is_a lucy_Post_is_a
  #define Post_Read_Raw_IMP LUCY_Post_Read_Raw_IMP
  #define Post_Add_Inversion_To_Pool_IMP LUCY_Post_Add_Inversion_To_Pool_IMP
  #define Post_Set_Doc_ID_IMP LUCY_Post_Set_Doc_ID_IMP
  #define Post_Get_Doc_ID_IMP LUCY_Post_Get_Doc_ID_IMP
  #define Post_Make_Matcher_IMP LUCY_Post_Make_Matcher_IMP
  #define Post_To_Host LUCY_Post_To_Host
  #define Post_To_Host_t LUCY_Post_To_Host_t
  #define Post_Clone LUCY_Post_Clone
  #define Post_Clone_t LUCY_Post_Clone_t
  #define Post_Equals LUCY_Post_Equals
  #define Post_Equals_t LUCY_Post_Equals_t
  #define Post_Compare_To LUCY_Post_Compare_To
  #define Post_Compare_To_t LUCY_Post_Compare_To_t
  #define Post_Destroy LUCY_Post_Destroy
  #define Post_Destroy_t LUCY_Post_Destroy_t
  #define Post_To_String LUCY_Post_To_String
  #define Post_To_String_t LUCY_Post_To_String_t
  #define Post_Reset LUCY_Post_Reset
  #define Post_Reset_t LUCY_Post_Reset_t
  #define Post_Write_Key_Frame LUCY_Post_Write_Key_Frame
  #define Post_Write_Key_Frame_t LUCY_Post_Write_Key_Frame_t
  #define Post_Write_Delta LUCY_Post_Write_Delta
  #define Post_Write_Delta_t LUCY_Post_Write_Delta_t
  #define Post_Read_Key_Frame LUCY_Post_Read_Key_Frame
  #define Post_Read_Key_Frame_t LUCY_Post_Read_Key_Frame_t
  #define Post_Read_Delta LUCY_Post_Read_Delta
  #define Post_Read_Delta_t LUCY_Post_Read_Delta_t
  #define Post_Read_Record LUCY_Post_Read_Record
  #define Post_Read_Record_t LUCY_Post_Read_Record_t
  #define Post_Read_Raw LUCY_Post_Read_Raw
  #define Post_Read_Raw_t LUCY_Post_Read_Raw_t
  #define Post_Add_Inversion_To_Pool LUCY_Post_Add_Inversion_To_Pool
  #define Post_Add_Inversion_To_Pool_t LUCY_Post_Add_Inversion_To_Pool_t
  #define Post_Set_Doc_ID LUCY_Post_Set_Doc_ID
  #define Post_Set_Doc_ID_t LUCY_Post_Set_Doc_ID_t
  #define Post_Get_Doc_ID LUCY_Post_Get_Doc_ID
  #define Post_Get_Doc_ID_t LUCY_Post_Get_Doc_ID_t
  #define Post_Make_Matcher LUCY_Post_Make_Matcher
  #define Post_Make_Matcher_t LUCY_Post_Make_Matcher_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy/Index/DataWriter.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_POSTINGWRITER
extern uint32_t lucy_PostWriter_IVARS_OFFSET;
typedef struct lucy_PostingWriterIVARS lucy_PostingWriterIVARS;
static CFISH_INLINE lucy_PostingWriterIVARS*
lucy_PostWriter_IVARS(lucy_PostingWriter *self) {
   char *ptr = (char*)self + lucy_PostWriter_IVARS_OFFSET;
   return (lucy_PostingWriterIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define PostingWriterIVARS lucy_PostingWriterIVARS
  #define PostWriter_IVARS lucy_PostWriter_IVARS
#endif

struct lucy_PostingWriterIVARS {
    lucy_Snapshot* snapshot;
    lucy_Segment* segment;
    lucy_PolyReader* polyreader;
    lucy_Schema* schema;
    lucy_Folder* folder;
    int32_t field_num;
};

#endif /* C_LUCY_POSTINGWRITER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_PostingWriter*
lucy_PostWriter_init(lucy_PostingWriter* self, lucy_Schema* schema, lucy_Snapshot* snapshot, lucy_Segment* segment, lucy_PolyReader* polyreader, int32_t field_num);

void
LUCY_PostWriter_Write_Posting_IMP(lucy_PostingWriter* self, lucy_RawPosting* posting);

void
LUCY_PostWriter_Start_Term_IMP(lucy_PostingWriter* self, lucy_TermInfo* tinfo);

void
LUCY_PostWriter_Update_Skip_Info_IMP(lucy_PostingWriter* self, lucy_TermInfo* tinfo);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_PostWriter_To_Host_t)(lucy_PostingWriter* self, void* vcache);

typedef cfish_Obj*
(*LUCY_PostWriter_Clone_t)(lucy_PostingWriter* self);

typedef bool
(*LUCY_PostWriter_Equals_t)(lucy_PostingWriter* self, cfish_Obj* other);

typedef int32_t
(*LUCY_PostWriter_Compare_To_t)(lucy_PostingWriter* self, cfish_Obj* other);

typedef void
(*LUCY_PostWriter_Destroy_t)(lucy_PostingWriter* self);

typedef cfish_String*
(*LUCY_PostWriter_To_String_t)(lucy_PostingWriter* self);

typedef void
(*LUCY_PostWriter_Add_Inverted_Doc_t)(lucy_PostingWriter* self, lucy_Inverter* inverter, int32_t doc_id);

typedef void
(*LUCY_PostWriter_Add_Segment_t)(lucy_PostingWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map);

typedef void
(*LUCY_PostWriter_Delete_Segment_t)(lucy_PostingWriter* self, lucy_SegReader* reader);

typedef void
(*LUCY_PostWriter_Merge_Segment_t)(lucy_PostingWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map);

typedef void
(*LUCY_PostWriter_Finish_t)(lucy_PostingWriter* self);

typedef cfish_Hash*
(*LUCY_PostWriter_Metadata_t)(lucy_PostingWriter* self);

typedef int32_t
(*LUCY_PostWriter_Format_t)(lucy_PostingWriter* self);

typedef lucy_Snapshot*
(*LUCY_PostWriter_Get_Snapshot_t)(lucy_PostingWriter* self);

typedef lucy_Segment*
(*LUCY_PostWriter_Get_Segment_t)(lucy_PostingWriter* self);

typedef lucy_PolyReader*
(*LUCY_PostWriter_Get_PolyReader_t)(lucy_PostingWriter* self);

typedef lucy_Schema*
(*LUCY_PostWriter_Get_Schema_t)(lucy_PostingWriter* self);

typedef lucy_Folder*
(*LUCY_PostWriter_Get_Folder_t)(lucy_PostingWriter* self);

typedef void
(*LUCY_PostWriter_Write_Posting_t)(lucy_PostingWriter* self, lucy_RawPosting* posting);

typedef void
(*LUCY_PostWriter_Start_Term_t)(lucy_PostingWriter* self, lucy_TermInfo* tinfo);

typedef void
(*LUCY_PostWriter_Update_Skip_Info_t)(lucy_PostingWriter* self, lucy_TermInfo* tinfo);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_PostWriter_get_class(lucy_PostingWriter *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_PostWriter_get_class_name(lucy_PostingWriter *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_PostWriter_is_a(lucy_PostingWriter *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_PostWriter_To_Host(lucy_PostingWriter* self, void* vcache) {
    const LUCY_PostWriter_To_Host_t method = (LUCY_PostWriter_To_Host_t)cfish_obj_method(self, LUCY_PostWriter_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PostWriter_Clone(lucy_PostingWriter* self) {
    const LUCY_PostWriter_Clone_t method = (LUCY_PostWriter_Clone_t)cfish_obj_method(self, LUCY_PostWriter_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_PostWriter_Equals(lucy_PostingWriter* self, cfish_Obj* other) {
    const LUCY_PostWriter_Equals_t method = (LUCY_PostWriter_Equals_t)cfish_obj_method(self, LUCY_PostWriter_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_PostWriter_Compare_To(lucy_PostingWriter* self, cfish_Obj* other) {
    const LUCY_PostWriter_Compare_To_t method = (LUCY_PostWriter_Compare_To_t)cfish_obj_method(self, LUCY_PostWriter_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_PostWriter_Destroy(lucy_PostingWriter* self) {
    const LUCY_PostWriter_Destroy_t method = (LUCY_PostWriter_Destroy_t)cfish_obj_method(self, LUCY_PostWriter_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_PostWriter_To_String(lucy_PostingWriter* self) {
    const LUCY_PostWriter_To_String_t method = (LUCY_PostWriter_To_String_t)cfish_obj_method(self, LUCY_PostWriter_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Add_Inverted_Doc_OFFSET;
static CFISH_INLINE void
LUCY_PostWriter_Add_Inverted_Doc(lucy_PostingWriter* self, lucy_Inverter* inverter, int32_t doc_id) {
    const LUCY_PostWriter_Add_Inverted_Doc_t method = (LUCY_PostWriter_Add_Inverted_Doc_t)cfish_obj_method(self, LUCY_PostWriter_Add_Inverted_Doc_OFFSET);
    method(self, inverter, doc_id);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Add_Segment_OFFSET;
static CFISH_INLINE void
LUCY_PostWriter_Add_Segment(lucy_PostingWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map) {
    const LUCY_PostWriter_Add_Segment_t method = (LUCY_PostWriter_Add_Segment_t)cfish_obj_method(self, LUCY_PostWriter_Add_Segment_OFFSET);
    method(self, reader, doc_map);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Delete_Segment_OFFSET;
static CFISH_INLINE void
LUCY_PostWriter_Delete_Segment(lucy_PostingWriter* self, lucy_SegReader* reader) {
    const LUCY_PostWriter_Delete_Segment_t method = (LUCY_PostWriter_Delete_Segment_t)cfish_obj_method(self, LUCY_PostWriter_Delete_Segment_OFFSET);
    method(self, reader);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Merge_Segment_OFFSET;
static CFISH_INLINE void
LUCY_PostWriter_Merge_Segment(lucy_PostingWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map) {
    const LUCY_PostWriter_Merge_Segment_t method = (LUCY_PostWriter_Merge_Segment_t)cfish_obj_method(self, LUCY_PostWriter_Merge_Segment_OFFSET);
    method(self, reader, doc_map);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Finish_OFFSET;
static CFISH_INLINE void
LUCY_PostWriter_Finish(lucy_PostingWriter* self) {
    const LUCY_PostWriter_Finish_t method = (LUCY_PostWriter_Finish_t)cfish_obj_method(self, LUCY_PostWriter_Finish_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Metadata_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_PostWriter_Metadata(lucy_PostingWriter* self) {
    const LUCY_PostWriter_Metadata_t method = (LUCY_PostWriter_Metadata_t)cfish_obj_method(self, LUCY_PostWriter_Metadata_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Format_OFFSET;
static CFISH_INLINE int32_t
LUCY_PostWriter_Format(lucy_PostingWriter* self) {
    const LUCY_PostWriter_Format_t method = (LUCY_PostWriter_Format_t)cfish_obj_method(self, LUCY_PostWriter_Format_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Get_Snapshot_OFFSET;
static CFISH_INLINE lucy_Snapshot*
LUCY_PostWriter_Get_Snapshot(lucy_PostingWriter* self) {
    const LUCY_PostWriter_Get_Snapshot_t method = (LUCY_PostWriter_Get_Snapshot_t)cfish_obj_method(self, LUCY_PostWriter_Get_Snapshot_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Get_Segment_OFFSET;
static CFISH_INLINE lucy_Segment*
LUCY_PostWriter_Get_Segment(lucy_PostingWriter* self) {
    const LUCY_PostWriter_Get_Segment_t method = (LUCY_PostWriter_Get_Segment_t)cfish_obj_method(self, LUCY_PostWriter_Get_Segment_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Get_PolyReader_OFFSET;
static CFISH_INLINE lucy_PolyReader*
LUCY_PostWriter_Get_PolyReader(lucy_PostingWriter* self) {
    const LUCY_PostWriter_Get_PolyReader_t method = (LUCY_PostWriter_Get_PolyReader_t)cfish_obj_method(self, LUCY_PostWriter_Get_PolyReader_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Get_Schema_OFFSET;
static CFISH_INLINE lucy_Schema*
LUCY_PostWriter_Get_Schema(lucy_PostingWriter* self) {
    const LUCY_PostWriter_Get_Schema_t method = (LUCY_PostWriter_Get_Schema_t)cfish_obj_method(self, LUCY_PostWriter_Get_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Get_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_PostWriter_Get_Folder(lucy_PostingWriter* self) {
    const LUCY_PostWriter_Get_Folder_t method = (LUCY_PostWriter_Get_Folder_t)cfish_obj_method(self, LUCY_PostWriter_Get_Folder_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Write_Posting_OFFSET;
static CFISH_INLINE void
LUCY_PostWriter_Write_Posting(lucy_PostingWriter* self, lucy_RawPosting* posting) {
    const LUCY_PostWriter_Write_Posting_t method = (LUCY_PostWriter_Write_Posting_t)cfish_obj_method(self, LUCY_PostWriter_Write_Posting_OFFSET);
    method(self, posting);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Start_Term_OFFSET;
static CFISH_INLINE void
LUCY_PostWriter_Start_Term(lucy_PostingWriter* self, lucy_TermInfo* tinfo) {
    const LUCY_PostWriter_Start_Term_t method = (LUCY_PostWriter_Start_Term_t)cfish_obj_method(self, LUCY_PostWriter_Start_Term_OFFSET);
    method(self, tinfo);
}

extern LUCY_VISIBLE uint32_t LUCY_PostWriter_Update_Skip_Info_OFFSET;
static CFISH_INLINE void
LUCY_PostWriter_Update_Skip_Info(lucy_PostingWriter* self, lucy_TermInfo* tinfo) {
    const LUCY_PostWriter_Update_Skip_Info_t method = (LUCY_PostWriter_Update_Skip_Info_t)cfish_obj_method(self, LUCY_PostWriter_Update_Skip_Info_OFFSET);
    method(self, tinfo);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_PostWriter_Write_Posting_OVERRIDE NULL
#define Lucy_PostWriter_Start_Term_OVERRIDE NULL
#define Lucy_PostWriter_Update_Skip_Info_OVERRIDE NULL
#else
void
Lucy_PostWriter_Write_Posting_OVERRIDE(lucy_PostingWriter* self, lucy_RawPosting* posting);
void
Lucy_PostWriter_Start_Term_OVERRIDE(lucy_PostingWriter* self, lucy_TermInfo* tinfo);
void
Lucy_PostWriter_Update_Skip_Info_OVERRIDE(lucy_PostingWriter* self, lucy_TermInfo* tinfo);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define PostingWriter lucy_PostingWriter
  #define POSTINGWRITER LUCY_POSTINGWRITER
  #define PostWriter_init lucy_PostWriter_init
  #define PostWriter_get_class lucy_PostWriter_get_class
  #define PostWriter_get_class_name lucy_PostWriter_get_class_name
  #define PostWriter_is_a lucy_PostWriter_is_a
  #define PostWriter_Write_Posting_IMP LUCY_PostWriter_Write_Posting_IMP
  #define PostWriter_Start_Term_IMP LUCY_PostWriter_Start_Term_IMP
  #define PostWriter_Update_Skip_Info_IMP LUCY_PostWriter_Update_Skip_Info_IMP
  #define PostWriter_To_Host LUCY_PostWriter_To_Host
  #define PostWriter_To_Host_t LUCY_PostWriter_To_Host_t
  #define PostWriter_Clone LUCY_PostWriter_Clone
  #define PostWriter_Clone_t LUCY_PostWriter_Clone_t
  #define PostWriter_Equals LUCY_PostWriter_Equals
  #define PostWriter_Equals_t LUCY_PostWriter_Equals_t
  #define PostWriter_Compare_To LUCY_PostWriter_Compare_To
  #define PostWriter_Compare_To_t LUCY_PostWriter_Compare_To_t
  #define PostWriter_Destroy LUCY_PostWriter_Destroy
  #define PostWriter_Destroy_t LUCY_PostWriter_Destroy_t
  #define PostWriter_To_String LUCY_PostWriter_To_String
  #define PostWriter_To_String_t LUCY_PostWriter_To_String_t
  #define PostWriter_Add_Inverted_Doc LUCY_PostWriter_Add_Inverted_Doc
  #define PostWriter_Add_Inverted_Doc_t LUCY_PostWriter_Add_Inverted_Doc_t
  #define PostWriter_Add_Segment LUCY_PostWriter_Add_Segment
  #define PostWriter_Add_Segment_t LUCY_PostWriter_Add_Segment_t
  #define PostWriter_Delete_Segment LUCY_PostWriter_Delete_Segment
  #define PostWriter_Delete_Segment_t LUCY_PostWriter_Delete_Segment_t
  #define PostWriter_Merge_Segment LUCY_PostWriter_Merge_Segment
  #define PostWriter_Merge_Segment_t LUCY_PostWriter_Merge_Segment_t
  #define PostWriter_Finish LUCY_PostWriter_Finish
  #define PostWriter_Finish_t LUCY_PostWriter_Finish_t
  #define PostWriter_Metadata LUCY_PostWriter_Metadata
  #define PostWriter_Metadata_t LUCY_PostWriter_Metadata_t
  #define PostWriter_Format LUCY_PostWriter_Format
  #define PostWriter_Format_t LUCY_PostWriter_Format_t
  #define PostWriter_Get_Snapshot LUCY_PostWriter_Get_Snapshot
  #define PostWriter_Get_Snapshot_t LUCY_PostWriter_Get_Snapshot_t
  #define PostWriter_Get_Segment LUCY_PostWriter_Get_Segment
  #define PostWriter_Get_Segment_t LUCY_PostWriter_Get_Segment_t
  #define PostWriter_Get_PolyReader LUCY_PostWriter_Get_PolyReader
  #define PostWriter_Get_PolyReader_t LUCY_PostWriter_Get_PolyReader_t
  #define PostWriter_Get_Schema LUCY_PostWriter_Get_Schema
  #define PostWriter_Get_Schema_t LUCY_PostWriter_Get_Schema_t
  #define PostWriter_Get_Folder LUCY_PostWriter_Get_Folder
  #define PostWriter_Get_Folder_t LUCY_PostWriter_Get_Folder_t
  #define PostWriter_Write_Posting LUCY_PostWriter_Write_Posting
  #define PostWriter_Write_Posting_t LUCY_PostWriter_Write_Posting_t
  #define PostWriter_Start_Term LUCY_PostWriter_Start_Term
  #define PostWriter_Start_Term_t LUCY_PostWriter_Start_Term_t
  #define PostWriter_Update_Skip_Info LUCY_PostWriter_Update_Skip_Info
  #define PostWriter_Update_Skip_Info_t LUCY_PostWriter_Update_Skip_Info_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_POSTING */




