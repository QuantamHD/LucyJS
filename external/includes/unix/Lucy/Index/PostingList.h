/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_POSTINGLIST
#define H_LUCY_INDEX_POSTINGLIST 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Search/Matcher.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_POSTINGLIST
extern uint32_t lucy_PList_IVARS_OFFSET;
typedef struct lucy_PostingListIVARS lucy_PostingListIVARS;
static CFISH_INLINE lucy_PostingListIVARS*
lucy_PList_IVARS(lucy_PostingList *self) {
   char *ptr = (char*)self + lucy_PList_IVARS_OFFSET;
   return (lucy_PostingListIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define PostingListIVARS lucy_PostingListIVARS
  #define PList_IVARS lucy_PList_IVARS
#endif


#endif /* C_LUCY_POSTINGLIST */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_PostingList*
lucy_PList_init(lucy_PostingList* self);

lucy_Posting*
LUCY_PList_Get_Posting_IMP(lucy_PostingList* self);

uint32_t
LUCY_PList_Get_Doc_Freq_IMP(lucy_PostingList* self);

void
LUCY_PList_Seek_IMP(lucy_PostingList* self, cfish_Obj* target);

void
LUCY_PList_Seek_Lex_IMP(lucy_PostingList* self, lucy_Lexicon* lexicon);

lucy_Matcher*
LUCY_PList_Make_Matcher_IMP(lucy_PostingList* self, lucy_Similarity* similarity, lucy_Compiler* compiler, bool need_score);

lucy_RawPosting*
LUCY_PList_Read_Raw_IMP(lucy_PostingList* self, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_PList_To_Host_t)(lucy_PostingList* self, void* vcache);

typedef cfish_Obj*
(*LUCY_PList_Clone_t)(lucy_PostingList* self);

typedef bool
(*LUCY_PList_Equals_t)(lucy_PostingList* self, cfish_Obj* other);

typedef int32_t
(*LUCY_PList_Compare_To_t)(lucy_PostingList* self, cfish_Obj* other);

typedef void
(*LUCY_PList_Destroy_t)(lucy_PostingList* self);

typedef cfish_String*
(*LUCY_PList_To_String_t)(lucy_PostingList* self);

typedef int32_t
(*LUCY_PList_Next_t)(lucy_PostingList* self);

typedef int32_t
(*LUCY_PList_Advance_t)(lucy_PostingList* self, int32_t target);

typedef int32_t
(*LUCY_PList_Get_Doc_ID_t)(lucy_PostingList* self);

typedef float
(*LUCY_PList_Score_t)(lucy_PostingList* self);

typedef void
(*LUCY_PList_Collect_t)(lucy_PostingList* self, lucy_Collector* collector, lucy_Matcher* deletions);

typedef lucy_Posting*
(*LUCY_PList_Get_Posting_t)(lucy_PostingList* self);

typedef uint32_t
(*LUCY_PList_Get_Doc_Freq_t)(lucy_PostingList* self);

typedef void
(*LUCY_PList_Seek_t)(lucy_PostingList* self, cfish_Obj* target);

typedef void
(*LUCY_PList_Seek_Lex_t)(lucy_PostingList* self, lucy_Lexicon* lexicon);

typedef lucy_Matcher*
(*LUCY_PList_Make_Matcher_t)(lucy_PostingList* self, lucy_Similarity* similarity, lucy_Compiler* compiler, bool need_score);

typedef lucy_RawPosting*
(*LUCY_PList_Read_Raw_t)(lucy_PostingList* self, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_PList_get_class(lucy_PostingList *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_PList_get_class_name(lucy_PostingList *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_PList_is_a(lucy_PostingList *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_PList_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_PList_To_Host(lucy_PostingList* self, void* vcache) {
    const LUCY_PList_To_Host_t method = (LUCY_PList_To_Host_t)cfish_obj_method(self, LUCY_PList_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_PList_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PList_Clone(lucy_PostingList* self) {
    const LUCY_PList_Clone_t method = (LUCY_PList_Clone_t)cfish_obj_method(self, LUCY_PList_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PList_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_PList_Equals(lucy_PostingList* self, cfish_Obj* other) {
    const LUCY_PList_Equals_t method = (LUCY_PList_Equals_t)cfish_obj_method(self, LUCY_PList_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PList_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_PList_Compare_To(lucy_PostingList* self, cfish_Obj* other) {
    const LUCY_PList_Compare_To_t method = (LUCY_PList_Compare_To_t)cfish_obj_method(self, LUCY_PList_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PList_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_PList_Destroy(lucy_PostingList* self) {
    const LUCY_PList_Destroy_t method = (LUCY_PList_Destroy_t)cfish_obj_method(self, LUCY_PList_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PList_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_PList_To_String(lucy_PostingList* self) {
    const LUCY_PList_To_String_t method = (LUCY_PList_To_String_t)cfish_obj_method(self, LUCY_PList_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PList_Next_OFFSET;
static CFISH_INLINE int32_t
LUCY_PList_Next(lucy_PostingList* self) {
    const LUCY_PList_Next_t method = (LUCY_PList_Next_t)cfish_obj_method(self, LUCY_PList_Next_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PList_Advance_OFFSET;
static CFISH_INLINE int32_t
LUCY_PList_Advance(lucy_PostingList* self, int32_t target) {
    const LUCY_PList_Advance_t method = (LUCY_PList_Advance_t)cfish_obj_method(self, LUCY_PList_Advance_OFFSET);
    return method(self, target);
}

extern LUCY_VISIBLE uint32_t LUCY_PList_Get_Doc_ID_OFFSET;
static CFISH_INLINE int32_t
LUCY_PList_Get_Doc_ID(lucy_PostingList* self) {
    const LUCY_PList_Get_Doc_ID_t method = (LUCY_PList_Get_Doc_ID_t)cfish_obj_method(self, LUCY_PList_Get_Doc_ID_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PList_Score_OFFSET;
static CFISH_INLINE float
LUCY_PList_Score(lucy_PostingList* self) {
    const LUCY_PList_Score_t method = (LUCY_PList_Score_t)cfish_obj_method(self, LUCY_PList_Score_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PList_Collect_OFFSET;
static CFISH_INLINE void
LUCY_PList_Collect(lucy_PostingList* self, lucy_Collector* collector, lucy_Matcher* deletions) {
    const LUCY_PList_Collect_t method = (LUCY_PList_Collect_t)cfish_obj_method(self, LUCY_PList_Collect_OFFSET);
    method(self, collector, deletions);
}

extern LUCY_VISIBLE uint32_t LUCY_PList_Get_Posting_OFFSET;
static CFISH_INLINE lucy_Posting*
LUCY_PList_Get_Posting(lucy_PostingList* self) {
    const LUCY_PList_Get_Posting_t method = (LUCY_PList_Get_Posting_t)cfish_obj_method(self, LUCY_PList_Get_Posting_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PList_Get_Doc_Freq_OFFSET;
static CFISH_INLINE uint32_t
LUCY_PList_Get_Doc_Freq(lucy_PostingList* self) {
    const LUCY_PList_Get_Doc_Freq_t method = (LUCY_PList_Get_Doc_Freq_t)cfish_obj_method(self, LUCY_PList_Get_Doc_Freq_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PList_Seek_OFFSET;
static CFISH_INLINE void
LUCY_PList_Seek(lucy_PostingList* self, cfish_Obj* target) {
    const LUCY_PList_Seek_t method = (LUCY_PList_Seek_t)cfish_obj_method(self, LUCY_PList_Seek_OFFSET);
    method(self, target);
}

extern LUCY_VISIBLE uint32_t LUCY_PList_Seek_Lex_OFFSET;
static CFISH_INLINE void
LUCY_PList_Seek_Lex(lucy_PostingList* self, lucy_Lexicon* lexicon) {
    const LUCY_PList_Seek_Lex_t method = (LUCY_PList_Seek_Lex_t)cfish_obj_method(self, LUCY_PList_Seek_Lex_OFFSET);
    method(self, lexicon);
}

extern LUCY_VISIBLE uint32_t LUCY_PList_Make_Matcher_OFFSET;
static CFISH_INLINE lucy_Matcher*
LUCY_PList_Make_Matcher(lucy_PostingList* self, lucy_Similarity* similarity, lucy_Compiler* compiler, bool need_score) {
    const LUCY_PList_Make_Matcher_t method = (LUCY_PList_Make_Matcher_t)cfish_obj_method(self, LUCY_PList_Make_Matcher_OFFSET);
    return method(self, similarity, compiler, need_score);
}

extern LUCY_VISIBLE uint32_t LUCY_PList_Read_Raw_OFFSET;
static CFISH_INLINE lucy_RawPosting*
LUCY_PList_Read_Raw(lucy_PostingList* self, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool) {
    const LUCY_PList_Read_Raw_t method = (LUCY_PList_Read_Raw_t)cfish_obj_method(self, LUCY_PList_Read_Raw_OFFSET);
    return method(self, last_doc_id, term_text, mem_pool);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_PList_Get_Posting_OVERRIDE NULL
#define Lucy_PList_Get_Doc_Freq_OVERRIDE NULL
#define Lucy_PList_Seek_OVERRIDE NULL
#define Lucy_PList_Seek_Lex_OVERRIDE NULL
#define Lucy_PList_Make_Matcher_OVERRIDE NULL
#define Lucy_PList_Read_Raw_OVERRIDE NULL
#else
lucy_Posting*
Lucy_PList_Get_Posting_OVERRIDE(lucy_PostingList* self);
uint32_t
Lucy_PList_Get_Doc_Freq_OVERRIDE(lucy_PostingList* self);
void
Lucy_PList_Seek_OVERRIDE(lucy_PostingList* self, cfish_Obj* target);
void
Lucy_PList_Seek_Lex_OVERRIDE(lucy_PostingList* self, lucy_Lexicon* lexicon);
lucy_Matcher*
Lucy_PList_Make_Matcher_OVERRIDE(lucy_PostingList* self, lucy_Similarity* similarity, lucy_Compiler* compiler, bool need_score);
lucy_RawPosting*
Lucy_PList_Read_Raw_OVERRIDE(lucy_PostingList* self, int32_t last_doc_id, cfish_String* term_text, lucy_MemoryPool* mem_pool);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define PostingList lucy_PostingList
  #define POSTINGLIST LUCY_POSTINGLIST
  #define PList_init lucy_PList_init
  #define PList_get_class lucy_PList_get_class
  #define PList_get_class_name lucy_PList_get_class_name
  #define PList_is_a lucy_PList_is_a
  #define PList_Get_Posting_IMP LUCY_PList_Get_Posting_IMP
  #define PList_Get_Doc_Freq_IMP LUCY_PList_Get_Doc_Freq_IMP
  #define PList_Seek_IMP LUCY_PList_Seek_IMP
  #define PList_Seek_Lex_IMP LUCY_PList_Seek_Lex_IMP
  #define PList_Make_Matcher_IMP LUCY_PList_Make_Matcher_IMP
  #define PList_Read_Raw_IMP LUCY_PList_Read_Raw_IMP
  #define PList_To_Host LUCY_PList_To_Host
  #define PList_To_Host_t LUCY_PList_To_Host_t
  #define PList_Clone LUCY_PList_Clone
  #define PList_Clone_t LUCY_PList_Clone_t
  #define PList_Equals LUCY_PList_Equals
  #define PList_Equals_t LUCY_PList_Equals_t
  #define PList_Compare_To LUCY_PList_Compare_To
  #define PList_Compare_To_t LUCY_PList_Compare_To_t
  #define PList_Destroy LUCY_PList_Destroy
  #define PList_Destroy_t LUCY_PList_Destroy_t
  #define PList_To_String LUCY_PList_To_String
  #define PList_To_String_t LUCY_PList_To_String_t
  #define PList_Next LUCY_PList_Next
  #define PList_Next_t LUCY_PList_Next_t
  #define PList_Advance LUCY_PList_Advance
  #define PList_Advance_t LUCY_PList_Advance_t
  #define PList_Get_Doc_ID LUCY_PList_Get_Doc_ID
  #define PList_Get_Doc_ID_t LUCY_PList_Get_Doc_ID_t
  #define PList_Score LUCY_PList_Score
  #define PList_Score_t LUCY_PList_Score_t
  #define PList_Collect LUCY_PList_Collect
  #define PList_Collect_t LUCY_PList_Collect_t
  #define PList_Get_Posting LUCY_PList_Get_Posting
  #define PList_Get_Posting_t LUCY_PList_Get_Posting_t
  #define PList_Get_Doc_Freq LUCY_PList_Get_Doc_Freq
  #define PList_Get_Doc_Freq_t LUCY_PList_Get_Doc_Freq_t
  #define PList_Seek LUCY_PList_Seek
  #define PList_Seek_t LUCY_PList_Seek_t
  #define PList_Seek_Lex LUCY_PList_Seek_Lex
  #define PList_Seek_Lex_t LUCY_PList_Seek_Lex_t
  #define PList_Make_Matcher LUCY_PList_Make_Matcher
  #define PList_Make_Matcher_t LUCY_PList_Make_Matcher_t
  #define PList_Read_Raw LUCY_PList_Read_Raw
  #define PList_Read_Raw_t LUCY_PList_Read_Raw_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_POSTINGLIST */




