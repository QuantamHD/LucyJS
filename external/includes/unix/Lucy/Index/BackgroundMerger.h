/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_BACKGROUNDMERGER
#define H_LUCY_INDEX_BACKGROUNDMERGER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_BACKGROUNDMERGER
extern uint32_t lucy_BGMerger_IVARS_OFFSET;
typedef struct lucy_BackgroundMergerIVARS lucy_BackgroundMergerIVARS;
static CFISH_INLINE lucy_BackgroundMergerIVARS*
lucy_BGMerger_IVARS(lucy_BackgroundMerger *self) {
   char *ptr = (char*)self + lucy_BGMerger_IVARS_OFFSET;
   return (lucy_BackgroundMergerIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define BackgroundMergerIVARS lucy_BackgroundMergerIVARS
  #define BGMerger_IVARS lucy_BGMerger_IVARS
#endif

struct lucy_BackgroundMergerIVARS {
    lucy_Schema* schema;
    lucy_Folder* folder;
    lucy_Segment* segment;
    lucy_IndexManager* manager;
    lucy_PolyReader* polyreader;
    lucy_Snapshot* snapshot;
    lucy_SegWriter* seg_writer;
    lucy_DeletionsWriter* del_writer;
    lucy_FilePurger* file_purger;
    lucy_Lock* write_lock;
    lucy_Lock* merge_lock;
    cfish_String* snapfile;
    cfish_Hash* doc_maps;
    int64_t cutoff;
    bool optimize;
    bool needs_commit;
    bool prepared;
};

#endif /* C_LUCY_BACKGROUNDMERGER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_BackgroundMerger*
lucy_BGMerger_new(cfish_Obj* index, lucy_IndexManager* manager);

LUCY_VISIBLE lucy_BackgroundMerger*
lucy_BGMerger_init(lucy_BackgroundMerger* self, cfish_Obj* index, lucy_IndexManager* manager);

void
LUCY_BGMerger_Optimize_IMP(lucy_BackgroundMerger* self);

void
LUCY_BGMerger_Commit_IMP(lucy_BackgroundMerger* self);

void
LUCY_BGMerger_Prepare_Commit_IMP(lucy_BackgroundMerger* self);

void
LUCY_BGMerger_Destroy_IMP(lucy_BackgroundMerger* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_BGMerger_To_Host_t)(lucy_BackgroundMerger* self, void* vcache);

typedef cfish_Obj*
(*LUCY_BGMerger_Clone_t)(lucy_BackgroundMerger* self);

typedef bool
(*LUCY_BGMerger_Equals_t)(lucy_BackgroundMerger* self, cfish_Obj* other);

typedef int32_t
(*LUCY_BGMerger_Compare_To_t)(lucy_BackgroundMerger* self, cfish_Obj* other);

typedef void
(*LUCY_BGMerger_Destroy_t)(lucy_BackgroundMerger* self);

typedef cfish_String*
(*LUCY_BGMerger_To_String_t)(lucy_BackgroundMerger* self);

typedef void
(*LUCY_BGMerger_Optimize_t)(lucy_BackgroundMerger* self);

typedef void
(*LUCY_BGMerger_Commit_t)(lucy_BackgroundMerger* self);

typedef void
(*LUCY_BGMerger_Prepare_Commit_t)(lucy_BackgroundMerger* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_BGMerger_get_class(lucy_BackgroundMerger *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_BGMerger_get_class_name(lucy_BackgroundMerger *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_BGMerger_is_a(lucy_BackgroundMerger *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_BGMerger_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_BGMerger_To_Host(lucy_BackgroundMerger* self, void* vcache) {
    const LUCY_BGMerger_To_Host_t method = (LUCY_BGMerger_To_Host_t)cfish_obj_method(self, LUCY_BGMerger_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_BGMerger_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_BGMerger_Clone(lucy_BackgroundMerger* self) {
    const LUCY_BGMerger_Clone_t method = (LUCY_BGMerger_Clone_t)cfish_obj_method(self, LUCY_BGMerger_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BGMerger_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_BGMerger_Equals(lucy_BackgroundMerger* self, cfish_Obj* other) {
    const LUCY_BGMerger_Equals_t method = (LUCY_BGMerger_Equals_t)cfish_obj_method(self, LUCY_BGMerger_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_BGMerger_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_BGMerger_Compare_To(lucy_BackgroundMerger* self, cfish_Obj* other) {
    const LUCY_BGMerger_Compare_To_t method = (LUCY_BGMerger_Compare_To_t)cfish_obj_method(self, LUCY_BGMerger_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_BGMerger_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_BGMerger_Destroy(lucy_BackgroundMerger* self) {
    const LUCY_BGMerger_Destroy_t method = (LUCY_BGMerger_Destroy_t)cfish_obj_method(self, LUCY_BGMerger_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BGMerger_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_BGMerger_To_String(lucy_BackgroundMerger* self) {
    const LUCY_BGMerger_To_String_t method = (LUCY_BGMerger_To_String_t)cfish_obj_method(self, LUCY_BGMerger_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BGMerger_Optimize_OFFSET;
static CFISH_INLINE void
LUCY_BGMerger_Optimize(lucy_BackgroundMerger* self) {
    const LUCY_BGMerger_Optimize_t method = (LUCY_BGMerger_Optimize_t)cfish_obj_method(self, LUCY_BGMerger_Optimize_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BGMerger_Commit_OFFSET;
static CFISH_INLINE void
LUCY_BGMerger_Commit(lucy_BackgroundMerger* self) {
    const LUCY_BGMerger_Commit_t method = (LUCY_BGMerger_Commit_t)cfish_obj_method(self, LUCY_BGMerger_Commit_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BGMerger_Prepare_Commit_OFFSET;
static CFISH_INLINE void
LUCY_BGMerger_Prepare_Commit(lucy_BackgroundMerger* self) {
    const LUCY_BGMerger_Prepare_Commit_t method = (LUCY_BGMerger_Prepare_Commit_t)cfish_obj_method(self, LUCY_BGMerger_Prepare_Commit_OFFSET);
    method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_BGMerger_Optimize_OVERRIDE NULL
#define Lucy_BGMerger_Commit_OVERRIDE NULL
#define Lucy_BGMerger_Prepare_Commit_OVERRIDE NULL
#else
void
Lucy_BGMerger_Optimize_OVERRIDE(lucy_BackgroundMerger* self);
void
Lucy_BGMerger_Commit_OVERRIDE(lucy_BackgroundMerger* self);
void
Lucy_BGMerger_Prepare_Commit_OVERRIDE(lucy_BackgroundMerger* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define BackgroundMerger lucy_BackgroundMerger
  #define BACKGROUNDMERGER LUCY_BACKGROUNDMERGER
  #define BGMerger_new lucy_BGMerger_new
  #define BGMerger_init lucy_BGMerger_init
  #define BGMerger_get_class lucy_BGMerger_get_class
  #define BGMerger_get_class_name lucy_BGMerger_get_class_name
  #define BGMerger_is_a lucy_BGMerger_is_a
  #define BGMerger_Optimize_IMP LUCY_BGMerger_Optimize_IMP
  #define BGMerger_Commit_IMP LUCY_BGMerger_Commit_IMP
  #define BGMerger_Prepare_Commit_IMP LUCY_BGMerger_Prepare_Commit_IMP
  #define BGMerger_Destroy_IMP LUCY_BGMerger_Destroy_IMP
  #define BGMerger_To_Host LUCY_BGMerger_To_Host
  #define BGMerger_To_Host_t LUCY_BGMerger_To_Host_t
  #define BGMerger_Clone LUCY_BGMerger_Clone
  #define BGMerger_Clone_t LUCY_BGMerger_Clone_t
  #define BGMerger_Equals LUCY_BGMerger_Equals
  #define BGMerger_Equals_t LUCY_BGMerger_Equals_t
  #define BGMerger_Compare_To LUCY_BGMerger_Compare_To
  #define BGMerger_Compare_To_t LUCY_BGMerger_Compare_To_t
  #define BGMerger_Destroy LUCY_BGMerger_Destroy
  #define BGMerger_Destroy_t LUCY_BGMerger_Destroy_t
  #define BGMerger_To_String LUCY_BGMerger_To_String
  #define BGMerger_To_String_t LUCY_BGMerger_To_String_t
  #define BGMerger_Optimize LUCY_BGMerger_Optimize
  #define BGMerger_Optimize_t LUCY_BGMerger_Optimize_t
  #define BGMerger_Commit LUCY_BGMerger_Commit
  #define BGMerger_Commit_t LUCY_BGMerger_Commit_t
  #define BGMerger_Prepare_Commit LUCY_BGMerger_Prepare_Commit
  #define BGMerger_Prepare_Commit_t LUCY_BGMerger_Prepare_Commit_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_BACKGROUNDMERGER */




