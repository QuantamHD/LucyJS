/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_LEXICONWRITER
#define H_LUCY_INDEX_LEXICONWRITER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Index/DataWriter.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_LEXICONWRITER
extern uint32_t lucy_LexWriter_IVARS_OFFSET;
typedef struct lucy_LexiconWriterIVARS lucy_LexiconWriterIVARS;
static CFISH_INLINE lucy_LexiconWriterIVARS*
lucy_LexWriter_IVARS(lucy_LexiconWriter *self) {
   char *ptr = (char*)self + lucy_LexWriter_IVARS_OFFSET;
   return (lucy_LexiconWriterIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define LexiconWriterIVARS lucy_LexiconWriterIVARS
  #define LexWriter_IVARS lucy_LexWriter_IVARS
#endif

struct lucy_LexiconWriterIVARS {
    lucy_Snapshot* snapshot;
    lucy_Segment* segment;
    lucy_PolyReader* polyreader;
    lucy_Schema* schema;
    lucy_Folder* folder;
    lucy_TermStepper* term_stepper;
    lucy_TermStepper* tinfo_stepper;
    cfish_String* dat_file;
    cfish_String* ix_file;
    cfish_String* ixix_file;
    lucy_OutStream* dat_out;
    lucy_OutStream* ix_out;
    lucy_OutStream* ixix_out;
    cfish_Hash* counts;
    cfish_Hash* ix_counts;
    bool temp_mode;
    int32_t index_interval;
    int32_t skip_interval;
    int32_t count;
    int32_t ix_count;
};

#endif /* C_LUCY_LEXICONWRITER */

/* Declare this class's inert variables.
 */

extern LUCY_VISIBLE int32_t lucy_LexWriter_current_file_format;


/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_LexiconWriter*
lucy_LexWriter_new(lucy_Schema* schema, lucy_Snapshot* snapshot, lucy_Segment* segment, lucy_PolyReader* polyreader);

LUCY_VISIBLE lucy_LexiconWriter*
lucy_LexWriter_init(lucy_LexiconWriter* self, lucy_Schema* schema, lucy_Snapshot* snapshot, lucy_Segment* segment, lucy_PolyReader* polyreader);

void
LUCY_LexWriter_Start_Field_IMP(lucy_LexiconWriter* self, int32_t field_num);

void
LUCY_LexWriter_Finish_Field_IMP(lucy_LexiconWriter* self, int32_t field_num);

void
LUCY_LexWriter_Enter_Temp_Mode_IMP(lucy_LexiconWriter* self, cfish_String* field, lucy_OutStream* temp_outstream);

void
LUCY_LexWriter_Leave_Temp_Mode_IMP(lucy_LexiconWriter* self);

void
LUCY_LexWriter_Add_Term_IMP(lucy_LexiconWriter* self, cfish_Obj* term_text, lucy_TermInfo* tinfo);

void
LUCY_LexWriter_Add_Segment_IMP(lucy_LexiconWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map);

cfish_Hash*
LUCY_LexWriter_Metadata_IMP(lucy_LexiconWriter* self);

int32_t
LUCY_LexWriter_Format_IMP(lucy_LexiconWriter* self);

void
LUCY_LexWriter_Finish_IMP(lucy_LexiconWriter* self);

void
LUCY_LexWriter_Destroy_IMP(lucy_LexiconWriter* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_LexWriter_To_Host_t)(lucy_LexiconWriter* self, void* vcache);

typedef cfish_Obj*
(*LUCY_LexWriter_Clone_t)(lucy_LexiconWriter* self);

typedef bool
(*LUCY_LexWriter_Equals_t)(lucy_LexiconWriter* self, cfish_Obj* other);

typedef int32_t
(*LUCY_LexWriter_Compare_To_t)(lucy_LexiconWriter* self, cfish_Obj* other);

typedef void
(*LUCY_LexWriter_Destroy_t)(lucy_LexiconWriter* self);

typedef cfish_String*
(*LUCY_LexWriter_To_String_t)(lucy_LexiconWriter* self);

typedef void
(*LUCY_LexWriter_Add_Inverted_Doc_t)(lucy_LexiconWriter* self, lucy_Inverter* inverter, int32_t doc_id);

typedef void
(*LUCY_LexWriter_Add_Segment_t)(lucy_LexiconWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map);

typedef void
(*LUCY_LexWriter_Delete_Segment_t)(lucy_LexiconWriter* self, lucy_SegReader* reader);

typedef void
(*LUCY_LexWriter_Merge_Segment_t)(lucy_LexiconWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map);

typedef void
(*LUCY_LexWriter_Finish_t)(lucy_LexiconWriter* self);

typedef cfish_Hash*
(*LUCY_LexWriter_Metadata_t)(lucy_LexiconWriter* self);

typedef int32_t
(*LUCY_LexWriter_Format_t)(lucy_LexiconWriter* self);

typedef lucy_Snapshot*
(*LUCY_LexWriter_Get_Snapshot_t)(lucy_LexiconWriter* self);

typedef lucy_Segment*
(*LUCY_LexWriter_Get_Segment_t)(lucy_LexiconWriter* self);

typedef lucy_PolyReader*
(*LUCY_LexWriter_Get_PolyReader_t)(lucy_LexiconWriter* self);

typedef lucy_Schema*
(*LUCY_LexWriter_Get_Schema_t)(lucy_LexiconWriter* self);

typedef lucy_Folder*
(*LUCY_LexWriter_Get_Folder_t)(lucy_LexiconWriter* self);

typedef void
(*LUCY_LexWriter_Start_Field_t)(lucy_LexiconWriter* self, int32_t field_num);

typedef void
(*LUCY_LexWriter_Finish_Field_t)(lucy_LexiconWriter* self, int32_t field_num);

typedef void
(*LUCY_LexWriter_Enter_Temp_Mode_t)(lucy_LexiconWriter* self, cfish_String* field, lucy_OutStream* temp_outstream);

typedef void
(*LUCY_LexWriter_Leave_Temp_Mode_t)(lucy_LexiconWriter* self);

typedef void
(*LUCY_LexWriter_Add_Term_t)(lucy_LexiconWriter* self, cfish_Obj* term_text, lucy_TermInfo* tinfo);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_LexWriter_get_class(lucy_LexiconWriter *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_LexWriter_get_class_name(lucy_LexiconWriter *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_LexWriter_is_a(lucy_LexiconWriter *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_LexWriter_To_Host(lucy_LexiconWriter* self, void* vcache) {
    const LUCY_LexWriter_To_Host_t method = (LUCY_LexWriter_To_Host_t)cfish_obj_method(self, LUCY_LexWriter_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_LexWriter_Clone(lucy_LexiconWriter* self) {
    const LUCY_LexWriter_Clone_t method = (LUCY_LexWriter_Clone_t)cfish_obj_method(self, LUCY_LexWriter_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_LexWriter_Equals(lucy_LexiconWriter* self, cfish_Obj* other) {
    const LUCY_LexWriter_Equals_t method = (LUCY_LexWriter_Equals_t)cfish_obj_method(self, LUCY_LexWriter_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_LexWriter_Compare_To(lucy_LexiconWriter* self, cfish_Obj* other) {
    const LUCY_LexWriter_Compare_To_t method = (LUCY_LexWriter_Compare_To_t)cfish_obj_method(self, LUCY_LexWriter_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_LexWriter_Destroy(lucy_LexiconWriter* self) {
    const LUCY_LexWriter_Destroy_t method = (LUCY_LexWriter_Destroy_t)cfish_obj_method(self, LUCY_LexWriter_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_LexWriter_To_String(lucy_LexiconWriter* self) {
    const LUCY_LexWriter_To_String_t method = (LUCY_LexWriter_To_String_t)cfish_obj_method(self, LUCY_LexWriter_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Add_Inverted_Doc_OFFSET;
static CFISH_INLINE void
LUCY_LexWriter_Add_Inverted_Doc(lucy_LexiconWriter* self, lucy_Inverter* inverter, int32_t doc_id) {
    const LUCY_LexWriter_Add_Inverted_Doc_t method = (LUCY_LexWriter_Add_Inverted_Doc_t)cfish_obj_method(self, LUCY_LexWriter_Add_Inverted_Doc_OFFSET);
    method(self, inverter, doc_id);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Add_Segment_OFFSET;
static CFISH_INLINE void
LUCY_LexWriter_Add_Segment(lucy_LexiconWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map) {
    const LUCY_LexWriter_Add_Segment_t method = (LUCY_LexWriter_Add_Segment_t)cfish_obj_method(self, LUCY_LexWriter_Add_Segment_OFFSET);
    method(self, reader, doc_map);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Delete_Segment_OFFSET;
static CFISH_INLINE void
LUCY_LexWriter_Delete_Segment(lucy_LexiconWriter* self, lucy_SegReader* reader) {
    const LUCY_LexWriter_Delete_Segment_t method = (LUCY_LexWriter_Delete_Segment_t)cfish_obj_method(self, LUCY_LexWriter_Delete_Segment_OFFSET);
    method(self, reader);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Merge_Segment_OFFSET;
static CFISH_INLINE void
LUCY_LexWriter_Merge_Segment(lucy_LexiconWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map) {
    const LUCY_LexWriter_Merge_Segment_t method = (LUCY_LexWriter_Merge_Segment_t)cfish_obj_method(self, LUCY_LexWriter_Merge_Segment_OFFSET);
    method(self, reader, doc_map);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Finish_OFFSET;
static CFISH_INLINE void
LUCY_LexWriter_Finish(lucy_LexiconWriter* self) {
    const LUCY_LexWriter_Finish_t method = (LUCY_LexWriter_Finish_t)cfish_obj_method(self, LUCY_LexWriter_Finish_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Metadata_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_LexWriter_Metadata(lucy_LexiconWriter* self) {
    const LUCY_LexWriter_Metadata_t method = (LUCY_LexWriter_Metadata_t)cfish_obj_method(self, LUCY_LexWriter_Metadata_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Format_OFFSET;
static CFISH_INLINE int32_t
LUCY_LexWriter_Format(lucy_LexiconWriter* self) {
    const LUCY_LexWriter_Format_t method = (LUCY_LexWriter_Format_t)cfish_obj_method(self, LUCY_LexWriter_Format_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Get_Snapshot_OFFSET;
static CFISH_INLINE lucy_Snapshot*
LUCY_LexWriter_Get_Snapshot(lucy_LexiconWriter* self) {
    const LUCY_LexWriter_Get_Snapshot_t method = (LUCY_LexWriter_Get_Snapshot_t)cfish_obj_method(self, LUCY_LexWriter_Get_Snapshot_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Get_Segment_OFFSET;
static CFISH_INLINE lucy_Segment*
LUCY_LexWriter_Get_Segment(lucy_LexiconWriter* self) {
    const LUCY_LexWriter_Get_Segment_t method = (LUCY_LexWriter_Get_Segment_t)cfish_obj_method(self, LUCY_LexWriter_Get_Segment_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Get_PolyReader_OFFSET;
static CFISH_INLINE lucy_PolyReader*
LUCY_LexWriter_Get_PolyReader(lucy_LexiconWriter* self) {
    const LUCY_LexWriter_Get_PolyReader_t method = (LUCY_LexWriter_Get_PolyReader_t)cfish_obj_method(self, LUCY_LexWriter_Get_PolyReader_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Get_Schema_OFFSET;
static CFISH_INLINE lucy_Schema*
LUCY_LexWriter_Get_Schema(lucy_LexiconWriter* self) {
    const LUCY_LexWriter_Get_Schema_t method = (LUCY_LexWriter_Get_Schema_t)cfish_obj_method(self, LUCY_LexWriter_Get_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Get_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_LexWriter_Get_Folder(lucy_LexiconWriter* self) {
    const LUCY_LexWriter_Get_Folder_t method = (LUCY_LexWriter_Get_Folder_t)cfish_obj_method(self, LUCY_LexWriter_Get_Folder_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Start_Field_OFFSET;
static CFISH_INLINE void
LUCY_LexWriter_Start_Field(lucy_LexiconWriter* self, int32_t field_num) {
    const LUCY_LexWriter_Start_Field_t method = (LUCY_LexWriter_Start_Field_t)cfish_obj_method(self, LUCY_LexWriter_Start_Field_OFFSET);
    method(self, field_num);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Finish_Field_OFFSET;
static CFISH_INLINE void
LUCY_LexWriter_Finish_Field(lucy_LexiconWriter* self, int32_t field_num) {
    const LUCY_LexWriter_Finish_Field_t method = (LUCY_LexWriter_Finish_Field_t)cfish_obj_method(self, LUCY_LexWriter_Finish_Field_OFFSET);
    method(self, field_num);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Enter_Temp_Mode_OFFSET;
static CFISH_INLINE void
LUCY_LexWriter_Enter_Temp_Mode(lucy_LexiconWriter* self, cfish_String* field, lucy_OutStream* temp_outstream) {
    const LUCY_LexWriter_Enter_Temp_Mode_t method = (LUCY_LexWriter_Enter_Temp_Mode_t)cfish_obj_method(self, LUCY_LexWriter_Enter_Temp_Mode_OFFSET);
    method(self, field, temp_outstream);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Leave_Temp_Mode_OFFSET;
static CFISH_INLINE void
LUCY_LexWriter_Leave_Temp_Mode(lucy_LexiconWriter* self) {
    const LUCY_LexWriter_Leave_Temp_Mode_t method = (LUCY_LexWriter_Leave_Temp_Mode_t)cfish_obj_method(self, LUCY_LexWriter_Leave_Temp_Mode_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexWriter_Add_Term_OFFSET;
static CFISH_INLINE void
LUCY_LexWriter_Add_Term(lucy_LexiconWriter* self, cfish_Obj* term_text, lucy_TermInfo* tinfo) {
    const LUCY_LexWriter_Add_Term_t method = (LUCY_LexWriter_Add_Term_t)cfish_obj_method(self, LUCY_LexWriter_Add_Term_OFFSET);
    method(self, term_text, tinfo);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_LexWriter_Start_Field_OVERRIDE NULL
#define Lucy_LexWriter_Finish_Field_OVERRIDE NULL
#define Lucy_LexWriter_Enter_Temp_Mode_OVERRIDE NULL
#define Lucy_LexWriter_Leave_Temp_Mode_OVERRIDE NULL
#define Lucy_LexWriter_Add_Term_OVERRIDE NULL
#else
void
Lucy_LexWriter_Start_Field_OVERRIDE(lucy_LexiconWriter* self, int32_t field_num);
void
Lucy_LexWriter_Finish_Field_OVERRIDE(lucy_LexiconWriter* self, int32_t field_num);
void
Lucy_LexWriter_Enter_Temp_Mode_OVERRIDE(lucy_LexiconWriter* self, cfish_String* field, lucy_OutStream* temp_outstream);
void
Lucy_LexWriter_Leave_Temp_Mode_OVERRIDE(lucy_LexiconWriter* self);
void
Lucy_LexWriter_Add_Term_OVERRIDE(lucy_LexiconWriter* self, cfish_Obj* term_text, lucy_TermInfo* tinfo);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define LexiconWriter lucy_LexiconWriter
  #define LEXICONWRITER LUCY_LEXICONWRITER
  #define LexWriter_new lucy_LexWriter_new
  #define LexWriter_init lucy_LexWriter_init
  #define LexWriter_current_file_format lucy_LexWriter_current_file_format
  #define LexWriter_get_class lucy_LexWriter_get_class
  #define LexWriter_get_class_name lucy_LexWriter_get_class_name
  #define LexWriter_is_a lucy_LexWriter_is_a
  #define LexWriter_Start_Field_IMP LUCY_LexWriter_Start_Field_IMP
  #define LexWriter_Finish_Field_IMP LUCY_LexWriter_Finish_Field_IMP
  #define LexWriter_Enter_Temp_Mode_IMP LUCY_LexWriter_Enter_Temp_Mode_IMP
  #define LexWriter_Leave_Temp_Mode_IMP LUCY_LexWriter_Leave_Temp_Mode_IMP
  #define LexWriter_Add_Term_IMP LUCY_LexWriter_Add_Term_IMP
  #define LexWriter_Add_Segment_IMP LUCY_LexWriter_Add_Segment_IMP
  #define LexWriter_Metadata_IMP LUCY_LexWriter_Metadata_IMP
  #define LexWriter_Format_IMP LUCY_LexWriter_Format_IMP
  #define LexWriter_Finish_IMP LUCY_LexWriter_Finish_IMP
  #define LexWriter_Destroy_IMP LUCY_LexWriter_Destroy_IMP
  #define LexWriter_To_Host LUCY_LexWriter_To_Host
  #define LexWriter_To_Host_t LUCY_LexWriter_To_Host_t
  #define LexWriter_Clone LUCY_LexWriter_Clone
  #define LexWriter_Clone_t LUCY_LexWriter_Clone_t
  #define LexWriter_Equals LUCY_LexWriter_Equals
  #define LexWriter_Equals_t LUCY_LexWriter_Equals_t
  #define LexWriter_Compare_To LUCY_LexWriter_Compare_To
  #define LexWriter_Compare_To_t LUCY_LexWriter_Compare_To_t
  #define LexWriter_Destroy LUCY_LexWriter_Destroy
  #define LexWriter_Destroy_t LUCY_LexWriter_Destroy_t
  #define LexWriter_To_String LUCY_LexWriter_To_String
  #define LexWriter_To_String_t LUCY_LexWriter_To_String_t
  #define LexWriter_Add_Inverted_Doc LUCY_LexWriter_Add_Inverted_Doc
  #define LexWriter_Add_Inverted_Doc_t LUCY_LexWriter_Add_Inverted_Doc_t
  #define LexWriter_Add_Segment LUCY_LexWriter_Add_Segment
  #define LexWriter_Add_Segment_t LUCY_LexWriter_Add_Segment_t
  #define LexWriter_Delete_Segment LUCY_LexWriter_Delete_Segment
  #define LexWriter_Delete_Segment_t LUCY_LexWriter_Delete_Segment_t
  #define LexWriter_Merge_Segment LUCY_LexWriter_Merge_Segment
  #define LexWriter_Merge_Segment_t LUCY_LexWriter_Merge_Segment_t
  #define LexWriter_Finish LUCY_LexWriter_Finish
  #define LexWriter_Finish_t LUCY_LexWriter_Finish_t
  #define LexWriter_Metadata LUCY_LexWriter_Metadata
  #define LexWriter_Metadata_t LUCY_LexWriter_Metadata_t
  #define LexWriter_Format LUCY_LexWriter_Format
  #define LexWriter_Format_t LUCY_LexWriter_Format_t
  #define LexWriter_Get_Snapshot LUCY_LexWriter_Get_Snapshot
  #define LexWriter_Get_Snapshot_t LUCY_LexWriter_Get_Snapshot_t
  #define LexWriter_Get_Segment LUCY_LexWriter_Get_Segment
  #define LexWriter_Get_Segment_t LUCY_LexWriter_Get_Segment_t
  #define LexWriter_Get_PolyReader LUCY_LexWriter_Get_PolyReader
  #define LexWriter_Get_PolyReader_t LUCY_LexWriter_Get_PolyReader_t
  #define LexWriter_Get_Schema LUCY_LexWriter_Get_Schema
  #define LexWriter_Get_Schema_t LUCY_LexWriter_Get_Schema_t
  #define LexWriter_Get_Folder LUCY_LexWriter_Get_Folder
  #define LexWriter_Get_Folder_t LUCY_LexWriter_Get_Folder_t
  #define LexWriter_Start_Field LUCY_LexWriter_Start_Field
  #define LexWriter_Start_Field_t LUCY_LexWriter_Start_Field_t
  #define LexWriter_Finish_Field LUCY_LexWriter_Finish_Field
  #define LexWriter_Finish_Field_t LUCY_LexWriter_Finish_Field_t
  #define LexWriter_Enter_Temp_Mode LUCY_LexWriter_Enter_Temp_Mode
  #define LexWriter_Enter_Temp_Mode_t LUCY_LexWriter_Enter_Temp_Mode_t
  #define LexWriter_Leave_Temp_Mode LUCY_LexWriter_Leave_Temp_Mode
  #define LexWriter_Leave_Temp_Mode_t LUCY_LexWriter_Leave_Temp_Mode_t
  #define LexWriter_Add_Term LUCY_LexWriter_Add_Term
  #define LexWriter_Add_Term_t LUCY_LexWriter_Add_Term_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_LEXICONWRITER */




