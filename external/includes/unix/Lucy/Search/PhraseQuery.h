/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_SEARCH_PHRASEQUERY
#define H_LUCY_SEARCH_PHRASEQUERY 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Search/Query.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_PHRASEQUERY
extern uint32_t lucy_PhraseQuery_IVARS_OFFSET;
typedef struct lucy_PhraseQueryIVARS lucy_PhraseQueryIVARS;
static CFISH_INLINE lucy_PhraseQueryIVARS*
lucy_PhraseQuery_IVARS(lucy_PhraseQuery *self) {
   char *ptr = (char*)self + lucy_PhraseQuery_IVARS_OFFSET;
   return (lucy_PhraseQueryIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define PhraseQueryIVARS lucy_PhraseQueryIVARS
  #define PhraseQuery_IVARS lucy_PhraseQuery_IVARS
#endif

struct lucy_PhraseQueryIVARS {
    float boost;
    cfish_String* field;
    cfish_Vector* terms;
};

#endif /* C_LUCY_PHRASEQUERY */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_PhraseQuery*
lucy_PhraseQuery_new(cfish_String* field, cfish_Vector* terms);

LUCY_VISIBLE lucy_PhraseQuery*
lucy_PhraseQuery_init(lucy_PhraseQuery* self, cfish_String* field, cfish_Vector* terms);

cfish_String*
LUCY_PhraseQuery_Get_Field_IMP(lucy_PhraseQuery* self);

cfish_Vector*
LUCY_PhraseQuery_Get_Terms_IMP(lucy_PhraseQuery* self);

lucy_Compiler*
LUCY_PhraseQuery_Make_Compiler_IMP(lucy_PhraseQuery* self, lucy_Searcher* searcher, float boost, bool subordinate);

bool
LUCY_PhraseQuery_Equals_IMP(lucy_PhraseQuery* self, cfish_Obj* other);

cfish_String*
LUCY_PhraseQuery_To_String_IMP(lucy_PhraseQuery* self);

void
LUCY_PhraseQuery_Serialize_IMP(lucy_PhraseQuery* self, lucy_OutStream* outstream);

lucy_PhraseQuery*
LUCY_PhraseQuery_Deserialize_IMP(lucy_PhraseQuery* self, lucy_InStream* instream);

cfish_Obj*
LUCY_PhraseQuery_Dump_IMP(lucy_PhraseQuery* self);

cfish_Obj*
LUCY_PhraseQuery_Load_IMP(lucy_PhraseQuery* self, cfish_Obj* dump);

void
LUCY_PhraseQuery_Destroy_IMP(lucy_PhraseQuery* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_PhraseQuery_To_Host_t)(lucy_PhraseQuery* self, void* vcache);

typedef cfish_Obj*
(*LUCY_PhraseQuery_Clone_t)(lucy_PhraseQuery* self);

typedef bool
(*LUCY_PhraseQuery_Equals_t)(lucy_PhraseQuery* self, cfish_Obj* other);

typedef int32_t
(*LUCY_PhraseQuery_Compare_To_t)(lucy_PhraseQuery* self, cfish_Obj* other);

typedef void
(*LUCY_PhraseQuery_Destroy_t)(lucy_PhraseQuery* self);

typedef cfish_String*
(*LUCY_PhraseQuery_To_String_t)(lucy_PhraseQuery* self);

typedef lucy_Compiler*
(*LUCY_PhraseQuery_Make_Compiler_t)(lucy_PhraseQuery* self, lucy_Searcher* searcher, float boost, bool subordinate);

typedef void
(*LUCY_PhraseQuery_Set_Boost_t)(lucy_PhraseQuery* self, float boost);

typedef float
(*LUCY_PhraseQuery_Get_Boost_t)(lucy_PhraseQuery* self);

typedef void
(*LUCY_PhraseQuery_Serialize_t)(lucy_PhraseQuery* self, lucy_OutStream* outstream);

typedef lucy_PhraseQuery*
(*LUCY_PhraseQuery_Deserialize_t)(lucy_PhraseQuery* self, lucy_InStream* instream);

typedef cfish_Obj*
(*LUCY_PhraseQuery_Dump_t)(lucy_PhraseQuery* self);

typedef cfish_Obj*
(*LUCY_PhraseQuery_Load_t)(lucy_PhraseQuery* self, cfish_Obj* dump);

typedef cfish_String*
(*LUCY_PhraseQuery_Get_Field_t)(lucy_PhraseQuery* self);

typedef cfish_Vector*
(*LUCY_PhraseQuery_Get_Terms_t)(lucy_PhraseQuery* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_PhraseQuery_get_class(lucy_PhraseQuery *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_PhraseQuery_get_class_name(lucy_PhraseQuery *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_PhraseQuery_is_a(lucy_PhraseQuery *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_PhraseQuery_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_PhraseQuery_To_Host(lucy_PhraseQuery* self, void* vcache) {
    const LUCY_PhraseQuery_To_Host_t method = (LUCY_PhraseQuery_To_Host_t)cfish_obj_method(self, LUCY_PhraseQuery_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseQuery_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PhraseQuery_Clone(lucy_PhraseQuery* self) {
    const LUCY_PhraseQuery_Clone_t method = (LUCY_PhraseQuery_Clone_t)cfish_obj_method(self, LUCY_PhraseQuery_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseQuery_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_PhraseQuery_Equals(lucy_PhraseQuery* self, cfish_Obj* other) {
    const LUCY_PhraseQuery_Equals_t method = (LUCY_PhraseQuery_Equals_t)cfish_obj_method(self, LUCY_PhraseQuery_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseQuery_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_PhraseQuery_Compare_To(lucy_PhraseQuery* self, cfish_Obj* other) {
    const LUCY_PhraseQuery_Compare_To_t method = (LUCY_PhraseQuery_Compare_To_t)cfish_obj_method(self, LUCY_PhraseQuery_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseQuery_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_PhraseQuery_Destroy(lucy_PhraseQuery* self) {
    const LUCY_PhraseQuery_Destroy_t method = (LUCY_PhraseQuery_Destroy_t)cfish_obj_method(self, LUCY_PhraseQuery_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseQuery_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_PhraseQuery_To_String(lucy_PhraseQuery* self) {
    const LUCY_PhraseQuery_To_String_t method = (LUCY_PhraseQuery_To_String_t)cfish_obj_method(self, LUCY_PhraseQuery_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseQuery_Make_Compiler_OFFSET;
static CFISH_INLINE lucy_Compiler*
LUCY_PhraseQuery_Make_Compiler(lucy_PhraseQuery* self, lucy_Searcher* searcher, float boost, bool subordinate) {
    const LUCY_PhraseQuery_Make_Compiler_t method = (LUCY_PhraseQuery_Make_Compiler_t)cfish_obj_method(self, LUCY_PhraseQuery_Make_Compiler_OFFSET);
    return method(self, searcher, boost, subordinate);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseQuery_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_PhraseQuery_Set_Boost(lucy_PhraseQuery* self, float boost) {
    const LUCY_PhraseQuery_Set_Boost_t method = (LUCY_PhraseQuery_Set_Boost_t)cfish_obj_method(self, LUCY_PhraseQuery_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseQuery_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_PhraseQuery_Get_Boost(lucy_PhraseQuery* self) {
    const LUCY_PhraseQuery_Get_Boost_t method = (LUCY_PhraseQuery_Get_Boost_t)cfish_obj_method(self, LUCY_PhraseQuery_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseQuery_Serialize_OFFSET;
static CFISH_INLINE void
LUCY_PhraseQuery_Serialize(lucy_PhraseQuery* self, lucy_OutStream* outstream) {
    const LUCY_PhraseQuery_Serialize_t method = (LUCY_PhraseQuery_Serialize_t)cfish_obj_method(self, LUCY_PhraseQuery_Serialize_OFFSET);
    method(self, outstream);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseQuery_Deserialize_OFFSET;
static CFISH_INLINE lucy_PhraseQuery*
LUCY_PhraseQuery_Deserialize(lucy_PhraseQuery* self, lucy_InStream* instream) {
    const LUCY_PhraseQuery_Deserialize_t method = (LUCY_PhraseQuery_Deserialize_t)cfish_obj_method(self, LUCY_PhraseQuery_Deserialize_OFFSET);
    return method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseQuery_Dump_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PhraseQuery_Dump(lucy_PhraseQuery* self) {
    const LUCY_PhraseQuery_Dump_t method = (LUCY_PhraseQuery_Dump_t)cfish_obj_method(self, LUCY_PhraseQuery_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseQuery_Load_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PhraseQuery_Load(lucy_PhraseQuery* self, cfish_Obj* dump) {
    const LUCY_PhraseQuery_Load_t method = (LUCY_PhraseQuery_Load_t)cfish_obj_method(self, LUCY_PhraseQuery_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseQuery_Get_Field_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_PhraseQuery_Get_Field(lucy_PhraseQuery* self) {
    const LUCY_PhraseQuery_Get_Field_t method = (LUCY_PhraseQuery_Get_Field_t)cfish_obj_method(self, LUCY_PhraseQuery_Get_Field_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseQuery_Get_Terms_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_PhraseQuery_Get_Terms(lucy_PhraseQuery* self) {
    const LUCY_PhraseQuery_Get_Terms_t method = (LUCY_PhraseQuery_Get_Terms_t)cfish_obj_method(self, LUCY_PhraseQuery_Get_Terms_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_PhraseQuery_Get_Field_OVERRIDE NULL
#define Lucy_PhraseQuery_Get_Terms_OVERRIDE NULL
#else
cfish_String*
Lucy_PhraseQuery_Get_Field_OVERRIDE(lucy_PhraseQuery* self);
cfish_Vector*
Lucy_PhraseQuery_Get_Terms_OVERRIDE(lucy_PhraseQuery* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define PhraseQuery lucy_PhraseQuery
  #define PHRASEQUERY LUCY_PHRASEQUERY
  #define PhraseQuery_new lucy_PhraseQuery_new
  #define PhraseQuery_init lucy_PhraseQuery_init
  #define PhraseQuery_get_class lucy_PhraseQuery_get_class
  #define PhraseQuery_get_class_name lucy_PhraseQuery_get_class_name
  #define PhraseQuery_is_a lucy_PhraseQuery_is_a
  #define PhraseQuery_Get_Field_IMP LUCY_PhraseQuery_Get_Field_IMP
  #define PhraseQuery_Get_Terms_IMP LUCY_PhraseQuery_Get_Terms_IMP
  #define PhraseQuery_Make_Compiler_IMP LUCY_PhraseQuery_Make_Compiler_IMP
  #define PhraseQuery_Equals_IMP LUCY_PhraseQuery_Equals_IMP
  #define PhraseQuery_To_String_IMP LUCY_PhraseQuery_To_String_IMP
  #define PhraseQuery_Serialize_IMP LUCY_PhraseQuery_Serialize_IMP
  #define PhraseQuery_Deserialize_IMP LUCY_PhraseQuery_Deserialize_IMP
  #define PhraseQuery_Dump_IMP LUCY_PhraseQuery_Dump_IMP
  #define PhraseQuery_Load_IMP LUCY_PhraseQuery_Load_IMP
  #define PhraseQuery_Destroy_IMP LUCY_PhraseQuery_Destroy_IMP
  #define PhraseQuery_To_Host LUCY_PhraseQuery_To_Host
  #define PhraseQuery_To_Host_t LUCY_PhraseQuery_To_Host_t
  #define PhraseQuery_Clone LUCY_PhraseQuery_Clone
  #define PhraseQuery_Clone_t LUCY_PhraseQuery_Clone_t
  #define PhraseQuery_Equals LUCY_PhraseQuery_Equals
  #define PhraseQuery_Equals_t LUCY_PhraseQuery_Equals_t
  #define PhraseQuery_Compare_To LUCY_PhraseQuery_Compare_To
  #define PhraseQuery_Compare_To_t LUCY_PhraseQuery_Compare_To_t
  #define PhraseQuery_Destroy LUCY_PhraseQuery_Destroy
  #define PhraseQuery_Destroy_t LUCY_PhraseQuery_Destroy_t
  #define PhraseQuery_To_String LUCY_PhraseQuery_To_String
  #define PhraseQuery_To_String_t LUCY_PhraseQuery_To_String_t
  #define PhraseQuery_Make_Compiler LUCY_PhraseQuery_Make_Compiler
  #define PhraseQuery_Make_Compiler_t LUCY_PhraseQuery_Make_Compiler_t
  #define PhraseQuery_Set_Boost LUCY_PhraseQuery_Set_Boost
  #define PhraseQuery_Set_Boost_t LUCY_PhraseQuery_Set_Boost_t
  #define PhraseQuery_Get_Boost LUCY_PhraseQuery_Get_Boost
  #define PhraseQuery_Get_Boost_t LUCY_PhraseQuery_Get_Boost_t
  #define PhraseQuery_Serialize LUCY_PhraseQuery_Serialize
  #define PhraseQuery_Serialize_t LUCY_PhraseQuery_Serialize_t
  #define PhraseQuery_Deserialize LUCY_PhraseQuery_Deserialize
  #define PhraseQuery_Deserialize_t LUCY_PhraseQuery_Deserialize_t
  #define PhraseQuery_Dump LUCY_PhraseQuery_Dump
  #define PhraseQuery_Dump_t LUCY_PhraseQuery_Dump_t
  #define PhraseQuery_Load LUCY_PhraseQuery_Load
  #define PhraseQuery_Load_t LUCY_PhraseQuery_Load_t
  #define PhraseQuery_Get_Field LUCY_PhraseQuery_Get_Field
  #define PhraseQuery_Get_Field_t LUCY_PhraseQuery_Get_Field_t
  #define PhraseQuery_Get_Terms LUCY_PhraseQuery_Get_Terms
  #define PhraseQuery_Get_Terms_t LUCY_PhraseQuery_Get_Terms_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy/Search/Compiler.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_PHRASECOMPILER
extern uint32_t lucy_PhraseCompiler_IVARS_OFFSET;
typedef struct lucy_PhraseCompilerIVARS lucy_PhraseCompilerIVARS;
static CFISH_INLINE lucy_PhraseCompilerIVARS*
lucy_PhraseCompiler_IVARS(lucy_PhraseCompiler *self) {
   char *ptr = (char*)self + lucy_PhraseCompiler_IVARS_OFFSET;
   return (lucy_PhraseCompilerIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define PhraseCompilerIVARS lucy_PhraseCompilerIVARS
  #define PhraseCompiler_IVARS lucy_PhraseCompiler_IVARS
#endif

struct lucy_PhraseCompilerIVARS {
    float boost;
    lucy_Query* parent;
    lucy_Similarity* sim;
    float idf;
    float raw_weight;
    float query_norm_factor;
    float normalized_weight;
};

#endif /* C_LUCY_PHRASECOMPILER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_PhraseCompiler*
lucy_PhraseCompiler_new(lucy_PhraseQuery* parent, lucy_Searcher* searcher, float boost);

LUCY_VISIBLE lucy_PhraseCompiler*
lucy_PhraseCompiler_init(lucy_PhraseCompiler* self, lucy_PhraseQuery* parent, lucy_Searcher* searcher, float boost);

lucy_Matcher*
LUCY_PhraseCompiler_Make_Matcher_IMP(lucy_PhraseCompiler* self, lucy_SegReader* reader, bool need_score);

float
LUCY_PhraseCompiler_Get_Weight_IMP(lucy_PhraseCompiler* self);

float
LUCY_PhraseCompiler_Sum_Of_Squared_Weights_IMP(lucy_PhraseCompiler* self);

void
LUCY_PhraseCompiler_Apply_Norm_Factor_IMP(lucy_PhraseCompiler* self, float factor);

cfish_Vector*
LUCY_PhraseCompiler_Highlight_Spans_IMP(lucy_PhraseCompiler* self, lucy_Searcher* searcher, lucy_DocVector* doc_vec, cfish_String* field);

bool
LUCY_PhraseCompiler_Equals_IMP(lucy_PhraseCompiler* self, cfish_Obj* other);

void
LUCY_PhraseCompiler_Serialize_IMP(lucy_PhraseCompiler* self, lucy_OutStream* outstream);

lucy_PhraseCompiler*
LUCY_PhraseCompiler_Deserialize_IMP(lucy_PhraseCompiler* self, lucy_InStream* instream);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_PhraseCompiler_To_Host_t)(lucy_PhraseCompiler* self, void* vcache);

typedef cfish_Obj*
(*LUCY_PhraseCompiler_Clone_t)(lucy_PhraseCompiler* self);

typedef bool
(*LUCY_PhraseCompiler_Equals_t)(lucy_PhraseCompiler* self, cfish_Obj* other);

typedef int32_t
(*LUCY_PhraseCompiler_Compare_To_t)(lucy_PhraseCompiler* self, cfish_Obj* other);

typedef void
(*LUCY_PhraseCompiler_Destroy_t)(lucy_PhraseCompiler* self);

typedef cfish_String*
(*LUCY_PhraseCompiler_To_String_t)(lucy_PhraseCompiler* self);

typedef lucy_Compiler*
(*LUCY_PhraseCompiler_Make_Compiler_t)(lucy_PhraseCompiler* self, lucy_Searcher* searcher, float boost, bool subordinate);

typedef void
(*LUCY_PhraseCompiler_Set_Boost_t)(lucy_PhraseCompiler* self, float boost);

typedef float
(*LUCY_PhraseCompiler_Get_Boost_t)(lucy_PhraseCompiler* self);

typedef void
(*LUCY_PhraseCompiler_Serialize_t)(lucy_PhraseCompiler* self, lucy_OutStream* outstream);

typedef lucy_PhraseCompiler*
(*LUCY_PhraseCompiler_Deserialize_t)(lucy_PhraseCompiler* self, lucy_InStream* instream);

typedef cfish_Obj*
(*LUCY_PhraseCompiler_Dump_t)(lucy_PhraseCompiler* self);

typedef cfish_Obj*
(*LUCY_PhraseCompiler_Load_t)(lucy_PhraseCompiler* self, cfish_Obj* dump);

typedef lucy_Matcher*
(*LUCY_PhraseCompiler_Make_Matcher_t)(lucy_PhraseCompiler* self, lucy_SegReader* reader, bool need_score);

typedef float
(*LUCY_PhraseCompiler_Get_Weight_t)(lucy_PhraseCompiler* self);

typedef lucy_Similarity*
(*LUCY_PhraseCompiler_Get_Similarity_t)(lucy_PhraseCompiler* self);

typedef lucy_Query*
(*LUCY_PhraseCompiler_Get_Parent_t)(lucy_PhraseCompiler* self);

typedef float
(*LUCY_PhraseCompiler_Sum_Of_Squared_Weights_t)(lucy_PhraseCompiler* self);

typedef void
(*LUCY_PhraseCompiler_Apply_Norm_Factor_t)(lucy_PhraseCompiler* self, float factor);

typedef void
(*LUCY_PhraseCompiler_Normalize_t)(lucy_PhraseCompiler* self);

typedef cfish_Vector*
(*LUCY_PhraseCompiler_Highlight_Spans_t)(lucy_PhraseCompiler* self, lucy_Searcher* searcher, lucy_DocVector* doc_vec, cfish_String* field);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_PhraseCompiler_get_class(lucy_PhraseCompiler *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_PhraseCompiler_get_class_name(lucy_PhraseCompiler *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_PhraseCompiler_is_a(lucy_PhraseCompiler *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_PhraseCompiler_To_Host(lucy_PhraseCompiler* self, void* vcache) {
    const LUCY_PhraseCompiler_To_Host_t method = (LUCY_PhraseCompiler_To_Host_t)cfish_obj_method(self, LUCY_PhraseCompiler_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PhraseCompiler_Clone(lucy_PhraseCompiler* self) {
    const LUCY_PhraseCompiler_Clone_t method = (LUCY_PhraseCompiler_Clone_t)cfish_obj_method(self, LUCY_PhraseCompiler_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_PhraseCompiler_Equals(lucy_PhraseCompiler* self, cfish_Obj* other) {
    const LUCY_PhraseCompiler_Equals_t method = (LUCY_PhraseCompiler_Equals_t)cfish_obj_method(self, LUCY_PhraseCompiler_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_PhraseCompiler_Compare_To(lucy_PhraseCompiler* self, cfish_Obj* other) {
    const LUCY_PhraseCompiler_Compare_To_t method = (LUCY_PhraseCompiler_Compare_To_t)cfish_obj_method(self, LUCY_PhraseCompiler_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_PhraseCompiler_Destroy(lucy_PhraseCompiler* self) {
    const LUCY_PhraseCompiler_Destroy_t method = (LUCY_PhraseCompiler_Destroy_t)cfish_obj_method(self, LUCY_PhraseCompiler_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_PhraseCompiler_To_String(lucy_PhraseCompiler* self) {
    const LUCY_PhraseCompiler_To_String_t method = (LUCY_PhraseCompiler_To_String_t)cfish_obj_method(self, LUCY_PhraseCompiler_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Make_Compiler_OFFSET;
static CFISH_INLINE lucy_Compiler*
LUCY_PhraseCompiler_Make_Compiler(lucy_PhraseCompiler* self, lucy_Searcher* searcher, float boost, bool subordinate) {
    const LUCY_PhraseCompiler_Make_Compiler_t method = (LUCY_PhraseCompiler_Make_Compiler_t)cfish_obj_method(self, LUCY_PhraseCompiler_Make_Compiler_OFFSET);
    return method(self, searcher, boost, subordinate);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_PhraseCompiler_Set_Boost(lucy_PhraseCompiler* self, float boost) {
    const LUCY_PhraseCompiler_Set_Boost_t method = (LUCY_PhraseCompiler_Set_Boost_t)cfish_obj_method(self, LUCY_PhraseCompiler_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_PhraseCompiler_Get_Boost(lucy_PhraseCompiler* self) {
    const LUCY_PhraseCompiler_Get_Boost_t method = (LUCY_PhraseCompiler_Get_Boost_t)cfish_obj_method(self, LUCY_PhraseCompiler_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Serialize_OFFSET;
static CFISH_INLINE void
LUCY_PhraseCompiler_Serialize(lucy_PhraseCompiler* self, lucy_OutStream* outstream) {
    const LUCY_PhraseCompiler_Serialize_t method = (LUCY_PhraseCompiler_Serialize_t)cfish_obj_method(self, LUCY_PhraseCompiler_Serialize_OFFSET);
    method(self, outstream);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Deserialize_OFFSET;
static CFISH_INLINE lucy_PhraseCompiler*
LUCY_PhraseCompiler_Deserialize(lucy_PhraseCompiler* self, lucy_InStream* instream) {
    const LUCY_PhraseCompiler_Deserialize_t method = (LUCY_PhraseCompiler_Deserialize_t)cfish_obj_method(self, LUCY_PhraseCompiler_Deserialize_OFFSET);
    return method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Dump_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PhraseCompiler_Dump(lucy_PhraseCompiler* self) {
    const LUCY_PhraseCompiler_Dump_t method = (LUCY_PhraseCompiler_Dump_t)cfish_obj_method(self, LUCY_PhraseCompiler_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Load_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PhraseCompiler_Load(lucy_PhraseCompiler* self, cfish_Obj* dump) {
    const LUCY_PhraseCompiler_Load_t method = (LUCY_PhraseCompiler_Load_t)cfish_obj_method(self, LUCY_PhraseCompiler_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Make_Matcher_OFFSET;
static CFISH_INLINE lucy_Matcher*
LUCY_PhraseCompiler_Make_Matcher(lucy_PhraseCompiler* self, lucy_SegReader* reader, bool need_score) {
    const LUCY_PhraseCompiler_Make_Matcher_t method = (LUCY_PhraseCompiler_Make_Matcher_t)cfish_obj_method(self, LUCY_PhraseCompiler_Make_Matcher_OFFSET);
    return method(self, reader, need_score);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Get_Weight_OFFSET;
static CFISH_INLINE float
LUCY_PhraseCompiler_Get_Weight(lucy_PhraseCompiler* self) {
    const LUCY_PhraseCompiler_Get_Weight_t method = (LUCY_PhraseCompiler_Get_Weight_t)cfish_obj_method(self, LUCY_PhraseCompiler_Get_Weight_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Get_Similarity_OFFSET;
static CFISH_INLINE lucy_Similarity*
LUCY_PhraseCompiler_Get_Similarity(lucy_PhraseCompiler* self) {
    const LUCY_PhraseCompiler_Get_Similarity_t method = (LUCY_PhraseCompiler_Get_Similarity_t)cfish_obj_method(self, LUCY_PhraseCompiler_Get_Similarity_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Get_Parent_OFFSET;
static CFISH_INLINE lucy_Query*
LUCY_PhraseCompiler_Get_Parent(lucy_PhraseCompiler* self) {
    const LUCY_PhraseCompiler_Get_Parent_t method = (LUCY_PhraseCompiler_Get_Parent_t)cfish_obj_method(self, LUCY_PhraseCompiler_Get_Parent_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Sum_Of_Squared_Weights_OFFSET;
static CFISH_INLINE float
LUCY_PhraseCompiler_Sum_Of_Squared_Weights(lucy_PhraseCompiler* self) {
    const LUCY_PhraseCompiler_Sum_Of_Squared_Weights_t method = (LUCY_PhraseCompiler_Sum_Of_Squared_Weights_t)cfish_obj_method(self, LUCY_PhraseCompiler_Sum_Of_Squared_Weights_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Apply_Norm_Factor_OFFSET;
static CFISH_INLINE void
LUCY_PhraseCompiler_Apply_Norm_Factor(lucy_PhraseCompiler* self, float factor) {
    const LUCY_PhraseCompiler_Apply_Norm_Factor_t method = (LUCY_PhraseCompiler_Apply_Norm_Factor_t)cfish_obj_method(self, LUCY_PhraseCompiler_Apply_Norm_Factor_OFFSET);
    method(self, factor);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Normalize_OFFSET;
static CFISH_INLINE void
LUCY_PhraseCompiler_Normalize(lucy_PhraseCompiler* self) {
    const LUCY_PhraseCompiler_Normalize_t method = (LUCY_PhraseCompiler_Normalize_t)cfish_obj_method(self, LUCY_PhraseCompiler_Normalize_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PhraseCompiler_Highlight_Spans_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_PhraseCompiler_Highlight_Spans(lucy_PhraseCompiler* self, lucy_Searcher* searcher, lucy_DocVector* doc_vec, cfish_String* field) {
    const LUCY_PhraseCompiler_Highlight_Spans_t method = (LUCY_PhraseCompiler_Highlight_Spans_t)cfish_obj_method(self, LUCY_PhraseCompiler_Highlight_Spans_OFFSET);
    return method(self, searcher, doc_vec, field);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define PhraseCompiler lucy_PhraseCompiler
  #define PHRASECOMPILER LUCY_PHRASECOMPILER
  #define PhraseCompiler_new lucy_PhraseCompiler_new
  #define PhraseCompiler_init lucy_PhraseCompiler_init
  #define PhraseCompiler_get_class lucy_PhraseCompiler_get_class
  #define PhraseCompiler_get_class_name lucy_PhraseCompiler_get_class_name
  #define PhraseCompiler_is_a lucy_PhraseCompiler_is_a
  #define PhraseCompiler_Make_Matcher_IMP LUCY_PhraseCompiler_Make_Matcher_IMP
  #define PhraseCompiler_Get_Weight_IMP LUCY_PhraseCompiler_Get_Weight_IMP
  #define PhraseCompiler_Sum_Of_Squared_Weights_IMP LUCY_PhraseCompiler_Sum_Of_Squared_Weights_IMP
  #define PhraseCompiler_Apply_Norm_Factor_IMP LUCY_PhraseCompiler_Apply_Norm_Factor_IMP
  #define PhraseCompiler_Highlight_Spans_IMP LUCY_PhraseCompiler_Highlight_Spans_IMP
  #define PhraseCompiler_Equals_IMP LUCY_PhraseCompiler_Equals_IMP
  #define PhraseCompiler_Serialize_IMP LUCY_PhraseCompiler_Serialize_IMP
  #define PhraseCompiler_Deserialize_IMP LUCY_PhraseCompiler_Deserialize_IMP
  #define PhraseCompiler_To_Host LUCY_PhraseCompiler_To_Host
  #define PhraseCompiler_To_Host_t LUCY_PhraseCompiler_To_Host_t
  #define PhraseCompiler_Clone LUCY_PhraseCompiler_Clone
  #define PhraseCompiler_Clone_t LUCY_PhraseCompiler_Clone_t
  #define PhraseCompiler_Equals LUCY_PhraseCompiler_Equals
  #define PhraseCompiler_Equals_t LUCY_PhraseCompiler_Equals_t
  #define PhraseCompiler_Compare_To LUCY_PhraseCompiler_Compare_To
  #define PhraseCompiler_Compare_To_t LUCY_PhraseCompiler_Compare_To_t
  #define PhraseCompiler_Destroy LUCY_PhraseCompiler_Destroy
  #define PhraseCompiler_Destroy_t LUCY_PhraseCompiler_Destroy_t
  #define PhraseCompiler_To_String LUCY_PhraseCompiler_To_String
  #define PhraseCompiler_To_String_t LUCY_PhraseCompiler_To_String_t
  #define PhraseCompiler_Make_Compiler LUCY_PhraseCompiler_Make_Compiler
  #define PhraseCompiler_Make_Compiler_t LUCY_PhraseCompiler_Make_Compiler_t
  #define PhraseCompiler_Set_Boost LUCY_PhraseCompiler_Set_Boost
  #define PhraseCompiler_Set_Boost_t LUCY_PhraseCompiler_Set_Boost_t
  #define PhraseCompiler_Get_Boost LUCY_PhraseCompiler_Get_Boost
  #define PhraseCompiler_Get_Boost_t LUCY_PhraseCompiler_Get_Boost_t
  #define PhraseCompiler_Serialize LUCY_PhraseCompiler_Serialize
  #define PhraseCompiler_Serialize_t LUCY_PhraseCompiler_Serialize_t
  #define PhraseCompiler_Deserialize LUCY_PhraseCompiler_Deserialize
  #define PhraseCompiler_Deserialize_t LUCY_PhraseCompiler_Deserialize_t
  #define PhraseCompiler_Dump LUCY_PhraseCompiler_Dump
  #define PhraseCompiler_Dump_t LUCY_PhraseCompiler_Dump_t
  #define PhraseCompiler_Load LUCY_PhraseCompiler_Load
  #define PhraseCompiler_Load_t LUCY_PhraseCompiler_Load_t
  #define PhraseCompiler_Make_Matcher LUCY_PhraseCompiler_Make_Matcher
  #define PhraseCompiler_Make_Matcher_t LUCY_PhraseCompiler_Make_Matcher_t
  #define PhraseCompiler_Get_Weight LUCY_PhraseCompiler_Get_Weight
  #define PhraseCompiler_Get_Weight_t LUCY_PhraseCompiler_Get_Weight_t
  #define PhraseCompiler_Get_Similarity LUCY_PhraseCompiler_Get_Similarity
  #define PhraseCompiler_Get_Similarity_t LUCY_PhraseCompiler_Get_Similarity_t
  #define PhraseCompiler_Get_Parent LUCY_PhraseCompiler_Get_Parent
  #define PhraseCompiler_Get_Parent_t LUCY_PhraseCompiler_Get_Parent_t
  #define PhraseCompiler_Sum_Of_Squared_Weights LUCY_PhraseCompiler_Sum_Of_Squared_Weights
  #define PhraseCompiler_Sum_Of_Squared_Weights_t LUCY_PhraseCompiler_Sum_Of_Squared_Weights_t
  #define PhraseCompiler_Apply_Norm_Factor LUCY_PhraseCompiler_Apply_Norm_Factor
  #define PhraseCompiler_Apply_Norm_Factor_t LUCY_PhraseCompiler_Apply_Norm_Factor_t
  #define PhraseCompiler_Normalize LUCY_PhraseCompiler_Normalize
  #define PhraseCompiler_Normalize_t LUCY_PhraseCompiler_Normalize_t
  #define PhraseCompiler_Highlight_Spans LUCY_PhraseCompiler_Highlight_Spans
  #define PhraseCompiler_Highlight_Spans_t LUCY_PhraseCompiler_Highlight_Spans_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_SEARCH_PHRASEQUERY */




