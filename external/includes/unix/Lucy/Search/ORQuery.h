/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_SEARCH_ORQUERY
#define H_LUCY_SEARCH_ORQUERY 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Search/PolyQuery.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_ORQUERY
extern uint32_t lucy_ORQuery_IVARS_OFFSET;
typedef struct lucy_ORQueryIVARS lucy_ORQueryIVARS;
static CFISH_INLINE lucy_ORQueryIVARS*
lucy_ORQuery_IVARS(lucy_ORQuery *self) {
   char *ptr = (char*)self + lucy_ORQuery_IVARS_OFFSET;
   return (lucy_ORQueryIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define ORQueryIVARS lucy_ORQueryIVARS
  #define ORQuery_IVARS lucy_ORQuery_IVARS
#endif

struct lucy_ORQueryIVARS {
    float boost;
    cfish_Vector* children;
};

#endif /* C_LUCY_ORQUERY */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_ORQuery*
lucy_ORQuery_new(cfish_Vector* children);

LUCY_VISIBLE lucy_ORQuery*
lucy_ORQuery_init(lucy_ORQuery* self, cfish_Vector* children);

lucy_Compiler*
LUCY_ORQuery_Make_Compiler_IMP(lucy_ORQuery* self, lucy_Searcher* searcher, float boost, bool subordinate);

cfish_String*
LUCY_ORQuery_To_String_IMP(lucy_ORQuery* self);

bool
LUCY_ORQuery_Equals_IMP(lucy_ORQuery* self, cfish_Obj* other);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_ORQuery_To_Host_t)(lucy_ORQuery* self, void* vcache);

typedef cfish_Obj*
(*LUCY_ORQuery_Clone_t)(lucy_ORQuery* self);

typedef bool
(*LUCY_ORQuery_Equals_t)(lucy_ORQuery* self, cfish_Obj* other);

typedef int32_t
(*LUCY_ORQuery_Compare_To_t)(lucy_ORQuery* self, cfish_Obj* other);

typedef void
(*LUCY_ORQuery_Destroy_t)(lucy_ORQuery* self);

typedef cfish_String*
(*LUCY_ORQuery_To_String_t)(lucy_ORQuery* self);

typedef lucy_Compiler*
(*LUCY_ORQuery_Make_Compiler_t)(lucy_ORQuery* self, lucy_Searcher* searcher, float boost, bool subordinate);

typedef void
(*LUCY_ORQuery_Set_Boost_t)(lucy_ORQuery* self, float boost);

typedef float
(*LUCY_ORQuery_Get_Boost_t)(lucy_ORQuery* self);

typedef void
(*LUCY_ORQuery_Serialize_t)(lucy_ORQuery* self, lucy_OutStream* outstream);

typedef lucy_PolyQuery*
(*LUCY_ORQuery_Deserialize_t)(lucy_ORQuery* self, lucy_InStream* instream);

typedef cfish_Obj*
(*LUCY_ORQuery_Dump_t)(lucy_ORQuery* self);

typedef cfish_Obj*
(*LUCY_ORQuery_Load_t)(lucy_ORQuery* self, cfish_Obj* dump);

typedef void
(*LUCY_ORQuery_Add_Child_t)(lucy_ORQuery* self, lucy_Query* query);

typedef void
(*LUCY_ORQuery_Set_Children_t)(lucy_ORQuery* self, cfish_Vector* children);

typedef cfish_Vector*
(*LUCY_ORQuery_Get_Children_t)(lucy_ORQuery* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_ORQuery_get_class(lucy_ORQuery *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_ORQuery_get_class_name(lucy_ORQuery *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_ORQuery_is_a(lucy_ORQuery *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_ORQuery_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_ORQuery_To_Host(lucy_ORQuery* self, void* vcache) {
    const LUCY_ORQuery_To_Host_t method = (LUCY_ORQuery_To_Host_t)cfish_obj_method(self, LUCY_ORQuery_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_ORQuery_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_ORQuery_Clone(lucy_ORQuery* self) {
    const LUCY_ORQuery_Clone_t method = (LUCY_ORQuery_Clone_t)cfish_obj_method(self, LUCY_ORQuery_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ORQuery_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_ORQuery_Equals(lucy_ORQuery* self, cfish_Obj* other) {
    const LUCY_ORQuery_Equals_t method = (LUCY_ORQuery_Equals_t)cfish_obj_method(self, LUCY_ORQuery_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_ORQuery_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_ORQuery_Compare_To(lucy_ORQuery* self, cfish_Obj* other) {
    const LUCY_ORQuery_Compare_To_t method = (LUCY_ORQuery_Compare_To_t)cfish_obj_method(self, LUCY_ORQuery_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_ORQuery_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_ORQuery_Destroy(lucy_ORQuery* self) {
    const LUCY_ORQuery_Destroy_t method = (LUCY_ORQuery_Destroy_t)cfish_obj_method(self, LUCY_ORQuery_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ORQuery_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_ORQuery_To_String(lucy_ORQuery* self) {
    const LUCY_ORQuery_To_String_t method = (LUCY_ORQuery_To_String_t)cfish_obj_method(self, LUCY_ORQuery_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ORQuery_Make_Compiler_OFFSET;
static CFISH_INLINE lucy_Compiler*
LUCY_ORQuery_Make_Compiler(lucy_ORQuery* self, lucy_Searcher* searcher, float boost, bool subordinate) {
    const LUCY_ORQuery_Make_Compiler_t method = (LUCY_ORQuery_Make_Compiler_t)cfish_obj_method(self, LUCY_ORQuery_Make_Compiler_OFFSET);
    return method(self, searcher, boost, subordinate);
}

extern LUCY_VISIBLE uint32_t LUCY_ORQuery_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_ORQuery_Set_Boost(lucy_ORQuery* self, float boost) {
    const LUCY_ORQuery_Set_Boost_t method = (LUCY_ORQuery_Set_Boost_t)cfish_obj_method(self, LUCY_ORQuery_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_ORQuery_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_ORQuery_Get_Boost(lucy_ORQuery* self) {
    const LUCY_ORQuery_Get_Boost_t method = (LUCY_ORQuery_Get_Boost_t)cfish_obj_method(self, LUCY_ORQuery_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ORQuery_Serialize_OFFSET;
static CFISH_INLINE void
LUCY_ORQuery_Serialize(lucy_ORQuery* self, lucy_OutStream* outstream) {
    const LUCY_ORQuery_Serialize_t method = (LUCY_ORQuery_Serialize_t)cfish_obj_method(self, LUCY_ORQuery_Serialize_OFFSET);
    method(self, outstream);
}

extern LUCY_VISIBLE uint32_t LUCY_ORQuery_Deserialize_OFFSET;
static CFISH_INLINE lucy_PolyQuery*
LUCY_ORQuery_Deserialize(lucy_ORQuery* self, lucy_InStream* instream) {
    const LUCY_ORQuery_Deserialize_t method = (LUCY_ORQuery_Deserialize_t)cfish_obj_method(self, LUCY_ORQuery_Deserialize_OFFSET);
    return method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_ORQuery_Dump_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_ORQuery_Dump(lucy_ORQuery* self) {
    const LUCY_ORQuery_Dump_t method = (LUCY_ORQuery_Dump_t)cfish_obj_method(self, LUCY_ORQuery_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ORQuery_Load_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_ORQuery_Load(lucy_ORQuery* self, cfish_Obj* dump) {
    const LUCY_ORQuery_Load_t method = (LUCY_ORQuery_Load_t)cfish_obj_method(self, LUCY_ORQuery_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_ORQuery_Add_Child_OFFSET;
static CFISH_INLINE void
LUCY_ORQuery_Add_Child(lucy_ORQuery* self, lucy_Query* query) {
    const LUCY_ORQuery_Add_Child_t method = (LUCY_ORQuery_Add_Child_t)cfish_obj_method(self, LUCY_ORQuery_Add_Child_OFFSET);
    method(self, query);
}

extern LUCY_VISIBLE uint32_t LUCY_ORQuery_Set_Children_OFFSET;
static CFISH_INLINE void
LUCY_ORQuery_Set_Children(lucy_ORQuery* self, cfish_Vector* children) {
    const LUCY_ORQuery_Set_Children_t method = (LUCY_ORQuery_Set_Children_t)cfish_obj_method(self, LUCY_ORQuery_Set_Children_OFFSET);
    method(self, children);
}

extern LUCY_VISIBLE uint32_t LUCY_ORQuery_Get_Children_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_ORQuery_Get_Children(lucy_ORQuery* self) {
    const LUCY_ORQuery_Get_Children_t method = (LUCY_ORQuery_Get_Children_t)cfish_obj_method(self, LUCY_ORQuery_Get_Children_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define ORQuery lucy_ORQuery
  #define ORQUERY LUCY_ORQUERY
  #define ORQuery_new lucy_ORQuery_new
  #define ORQuery_init lucy_ORQuery_init
  #define ORQuery_get_class lucy_ORQuery_get_class
  #define ORQuery_get_class_name lucy_ORQuery_get_class_name
  #define ORQuery_is_a lucy_ORQuery_is_a
  #define ORQuery_Make_Compiler_IMP LUCY_ORQuery_Make_Compiler_IMP
  #define ORQuery_To_String_IMP LUCY_ORQuery_To_String_IMP
  #define ORQuery_Equals_IMP LUCY_ORQuery_Equals_IMP
  #define ORQuery_To_Host LUCY_ORQuery_To_Host
  #define ORQuery_To_Host_t LUCY_ORQuery_To_Host_t
  #define ORQuery_Clone LUCY_ORQuery_Clone
  #define ORQuery_Clone_t LUCY_ORQuery_Clone_t
  #define ORQuery_Equals LUCY_ORQuery_Equals
  #define ORQuery_Equals_t LUCY_ORQuery_Equals_t
  #define ORQuery_Compare_To LUCY_ORQuery_Compare_To
  #define ORQuery_Compare_To_t LUCY_ORQuery_Compare_To_t
  #define ORQuery_Destroy LUCY_ORQuery_Destroy
  #define ORQuery_Destroy_t LUCY_ORQuery_Destroy_t
  #define ORQuery_To_String LUCY_ORQuery_To_String
  #define ORQuery_To_String_t LUCY_ORQuery_To_String_t
  #define ORQuery_Make_Compiler LUCY_ORQuery_Make_Compiler
  #define ORQuery_Make_Compiler_t LUCY_ORQuery_Make_Compiler_t
  #define ORQuery_Set_Boost LUCY_ORQuery_Set_Boost
  #define ORQuery_Set_Boost_t LUCY_ORQuery_Set_Boost_t
  #define ORQuery_Get_Boost LUCY_ORQuery_Get_Boost
  #define ORQuery_Get_Boost_t LUCY_ORQuery_Get_Boost_t
  #define ORQuery_Serialize LUCY_ORQuery_Serialize
  #define ORQuery_Serialize_t LUCY_ORQuery_Serialize_t
  #define ORQuery_Deserialize LUCY_ORQuery_Deserialize
  #define ORQuery_Deserialize_t LUCY_ORQuery_Deserialize_t
  #define ORQuery_Dump LUCY_ORQuery_Dump
  #define ORQuery_Dump_t LUCY_ORQuery_Dump_t
  #define ORQuery_Load LUCY_ORQuery_Load
  #define ORQuery_Load_t LUCY_ORQuery_Load_t
  #define ORQuery_Add_Child LUCY_ORQuery_Add_Child
  #define ORQuery_Add_Child_t LUCY_ORQuery_Add_Child_t
  #define ORQuery_Set_Children LUCY_ORQuery_Set_Children
  #define ORQuery_Set_Children_t LUCY_ORQuery_Set_Children_t
  #define ORQuery_Get_Children LUCY_ORQuery_Get_Children
  #define ORQuery_Get_Children_t LUCY_ORQuery_Get_Children_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy/Search/PolyQuery.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_ORCOMPILER
extern uint32_t lucy_ORCompiler_IVARS_OFFSET;
typedef struct lucy_ORCompilerIVARS lucy_ORCompilerIVARS;
static CFISH_INLINE lucy_ORCompilerIVARS*
lucy_ORCompiler_IVARS(lucy_ORCompiler *self) {
   char *ptr = (char*)self + lucy_ORCompiler_IVARS_OFFSET;
   return (lucy_ORCompilerIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define ORCompilerIVARS lucy_ORCompilerIVARS
  #define ORCompiler_IVARS lucy_ORCompiler_IVARS
#endif

struct lucy_ORCompilerIVARS {
    float boost;
    lucy_Query* parent;
    lucy_Similarity* sim;
    cfish_Vector* children;
};

#endif /* C_LUCY_ORCOMPILER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_ORCompiler*
lucy_ORCompiler_new(lucy_ORQuery* parent, lucy_Searcher* searcher, float boost);

LUCY_VISIBLE lucy_ORCompiler*
lucy_ORCompiler_init(lucy_ORCompiler* self, lucy_ORQuery* parent, lucy_Searcher* searcher, float boost);

lucy_Matcher*
LUCY_ORCompiler_Make_Matcher_IMP(lucy_ORCompiler* self, lucy_SegReader* reader, bool need_score);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_ORCompiler_To_Host_t)(lucy_ORCompiler* self, void* vcache);

typedef cfish_Obj*
(*LUCY_ORCompiler_Clone_t)(lucy_ORCompiler* self);

typedef bool
(*LUCY_ORCompiler_Equals_t)(lucy_ORCompiler* self, cfish_Obj* other);

typedef int32_t
(*LUCY_ORCompiler_Compare_To_t)(lucy_ORCompiler* self, cfish_Obj* other);

typedef void
(*LUCY_ORCompiler_Destroy_t)(lucy_ORCompiler* self);

typedef cfish_String*
(*LUCY_ORCompiler_To_String_t)(lucy_ORCompiler* self);

typedef lucy_Compiler*
(*LUCY_ORCompiler_Make_Compiler_t)(lucy_ORCompiler* self, lucy_Searcher* searcher, float boost, bool subordinate);

typedef void
(*LUCY_ORCompiler_Set_Boost_t)(lucy_ORCompiler* self, float boost);

typedef float
(*LUCY_ORCompiler_Get_Boost_t)(lucy_ORCompiler* self);

typedef void
(*LUCY_ORCompiler_Serialize_t)(lucy_ORCompiler* self, lucy_OutStream* outstream);

typedef lucy_PolyCompiler*
(*LUCY_ORCompiler_Deserialize_t)(lucy_ORCompiler* self, lucy_InStream* instream);

typedef cfish_Obj*
(*LUCY_ORCompiler_Dump_t)(lucy_ORCompiler* self);

typedef cfish_Obj*
(*LUCY_ORCompiler_Load_t)(lucy_ORCompiler* self, cfish_Obj* dump);

typedef lucy_Matcher*
(*LUCY_ORCompiler_Make_Matcher_t)(lucy_ORCompiler* self, lucy_SegReader* reader, bool need_score);

typedef float
(*LUCY_ORCompiler_Get_Weight_t)(lucy_ORCompiler* self);

typedef lucy_Similarity*
(*LUCY_ORCompiler_Get_Similarity_t)(lucy_ORCompiler* self);

typedef lucy_Query*
(*LUCY_ORCompiler_Get_Parent_t)(lucy_ORCompiler* self);

typedef float
(*LUCY_ORCompiler_Sum_Of_Squared_Weights_t)(lucy_ORCompiler* self);

typedef void
(*LUCY_ORCompiler_Apply_Norm_Factor_t)(lucy_ORCompiler* self, float factor);

typedef void
(*LUCY_ORCompiler_Normalize_t)(lucy_ORCompiler* self);

typedef cfish_Vector*
(*LUCY_ORCompiler_Highlight_Spans_t)(lucy_ORCompiler* self, lucy_Searcher* searcher, lucy_DocVector* doc_vec, cfish_String* field);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_ORCompiler_get_class(lucy_ORCompiler *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_ORCompiler_get_class_name(lucy_ORCompiler *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_ORCompiler_is_a(lucy_ORCompiler *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_ORCompiler_To_Host(lucy_ORCompiler* self, void* vcache) {
    const LUCY_ORCompiler_To_Host_t method = (LUCY_ORCompiler_To_Host_t)cfish_obj_method(self, LUCY_ORCompiler_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_ORCompiler_Clone(lucy_ORCompiler* self) {
    const LUCY_ORCompiler_Clone_t method = (LUCY_ORCompiler_Clone_t)cfish_obj_method(self, LUCY_ORCompiler_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_ORCompiler_Equals(lucy_ORCompiler* self, cfish_Obj* other) {
    const LUCY_ORCompiler_Equals_t method = (LUCY_ORCompiler_Equals_t)cfish_obj_method(self, LUCY_ORCompiler_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_ORCompiler_Compare_To(lucy_ORCompiler* self, cfish_Obj* other) {
    const LUCY_ORCompiler_Compare_To_t method = (LUCY_ORCompiler_Compare_To_t)cfish_obj_method(self, LUCY_ORCompiler_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_ORCompiler_Destroy(lucy_ORCompiler* self) {
    const LUCY_ORCompiler_Destroy_t method = (LUCY_ORCompiler_Destroy_t)cfish_obj_method(self, LUCY_ORCompiler_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_ORCompiler_To_String(lucy_ORCompiler* self) {
    const LUCY_ORCompiler_To_String_t method = (LUCY_ORCompiler_To_String_t)cfish_obj_method(self, LUCY_ORCompiler_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Make_Compiler_OFFSET;
static CFISH_INLINE lucy_Compiler*
LUCY_ORCompiler_Make_Compiler(lucy_ORCompiler* self, lucy_Searcher* searcher, float boost, bool subordinate) {
    const LUCY_ORCompiler_Make_Compiler_t method = (LUCY_ORCompiler_Make_Compiler_t)cfish_obj_method(self, LUCY_ORCompiler_Make_Compiler_OFFSET);
    return method(self, searcher, boost, subordinate);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_ORCompiler_Set_Boost(lucy_ORCompiler* self, float boost) {
    const LUCY_ORCompiler_Set_Boost_t method = (LUCY_ORCompiler_Set_Boost_t)cfish_obj_method(self, LUCY_ORCompiler_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_ORCompiler_Get_Boost(lucy_ORCompiler* self) {
    const LUCY_ORCompiler_Get_Boost_t method = (LUCY_ORCompiler_Get_Boost_t)cfish_obj_method(self, LUCY_ORCompiler_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Serialize_OFFSET;
static CFISH_INLINE void
LUCY_ORCompiler_Serialize(lucy_ORCompiler* self, lucy_OutStream* outstream) {
    const LUCY_ORCompiler_Serialize_t method = (LUCY_ORCompiler_Serialize_t)cfish_obj_method(self, LUCY_ORCompiler_Serialize_OFFSET);
    method(self, outstream);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Deserialize_OFFSET;
static CFISH_INLINE lucy_PolyCompiler*
LUCY_ORCompiler_Deserialize(lucy_ORCompiler* self, lucy_InStream* instream) {
    const LUCY_ORCompiler_Deserialize_t method = (LUCY_ORCompiler_Deserialize_t)cfish_obj_method(self, LUCY_ORCompiler_Deserialize_OFFSET);
    return method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Dump_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_ORCompiler_Dump(lucy_ORCompiler* self) {
    const LUCY_ORCompiler_Dump_t method = (LUCY_ORCompiler_Dump_t)cfish_obj_method(self, LUCY_ORCompiler_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Load_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_ORCompiler_Load(lucy_ORCompiler* self, cfish_Obj* dump) {
    const LUCY_ORCompiler_Load_t method = (LUCY_ORCompiler_Load_t)cfish_obj_method(self, LUCY_ORCompiler_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Make_Matcher_OFFSET;
static CFISH_INLINE lucy_Matcher*
LUCY_ORCompiler_Make_Matcher(lucy_ORCompiler* self, lucy_SegReader* reader, bool need_score) {
    const LUCY_ORCompiler_Make_Matcher_t method = (LUCY_ORCompiler_Make_Matcher_t)cfish_obj_method(self, LUCY_ORCompiler_Make_Matcher_OFFSET);
    return method(self, reader, need_score);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Get_Weight_OFFSET;
static CFISH_INLINE float
LUCY_ORCompiler_Get_Weight(lucy_ORCompiler* self) {
    const LUCY_ORCompiler_Get_Weight_t method = (LUCY_ORCompiler_Get_Weight_t)cfish_obj_method(self, LUCY_ORCompiler_Get_Weight_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Get_Similarity_OFFSET;
static CFISH_INLINE lucy_Similarity*
LUCY_ORCompiler_Get_Similarity(lucy_ORCompiler* self) {
    const LUCY_ORCompiler_Get_Similarity_t method = (LUCY_ORCompiler_Get_Similarity_t)cfish_obj_method(self, LUCY_ORCompiler_Get_Similarity_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Get_Parent_OFFSET;
static CFISH_INLINE lucy_Query*
LUCY_ORCompiler_Get_Parent(lucy_ORCompiler* self) {
    const LUCY_ORCompiler_Get_Parent_t method = (LUCY_ORCompiler_Get_Parent_t)cfish_obj_method(self, LUCY_ORCompiler_Get_Parent_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Sum_Of_Squared_Weights_OFFSET;
static CFISH_INLINE float
LUCY_ORCompiler_Sum_Of_Squared_Weights(lucy_ORCompiler* self) {
    const LUCY_ORCompiler_Sum_Of_Squared_Weights_t method = (LUCY_ORCompiler_Sum_Of_Squared_Weights_t)cfish_obj_method(self, LUCY_ORCompiler_Sum_Of_Squared_Weights_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Apply_Norm_Factor_OFFSET;
static CFISH_INLINE void
LUCY_ORCompiler_Apply_Norm_Factor(lucy_ORCompiler* self, float factor) {
    const LUCY_ORCompiler_Apply_Norm_Factor_t method = (LUCY_ORCompiler_Apply_Norm_Factor_t)cfish_obj_method(self, LUCY_ORCompiler_Apply_Norm_Factor_OFFSET);
    method(self, factor);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Normalize_OFFSET;
static CFISH_INLINE void
LUCY_ORCompiler_Normalize(lucy_ORCompiler* self) {
    const LUCY_ORCompiler_Normalize_t method = (LUCY_ORCompiler_Normalize_t)cfish_obj_method(self, LUCY_ORCompiler_Normalize_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ORCompiler_Highlight_Spans_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_ORCompiler_Highlight_Spans(lucy_ORCompiler* self, lucy_Searcher* searcher, lucy_DocVector* doc_vec, cfish_String* field) {
    const LUCY_ORCompiler_Highlight_Spans_t method = (LUCY_ORCompiler_Highlight_Spans_t)cfish_obj_method(self, LUCY_ORCompiler_Highlight_Spans_OFFSET);
    return method(self, searcher, doc_vec, field);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define ORCompiler lucy_ORCompiler
  #define ORCOMPILER LUCY_ORCOMPILER
  #define ORCompiler_new lucy_ORCompiler_new
  #define ORCompiler_init lucy_ORCompiler_init
  #define ORCompiler_get_class lucy_ORCompiler_get_class
  #define ORCompiler_get_class_name lucy_ORCompiler_get_class_name
  #define ORCompiler_is_a lucy_ORCompiler_is_a
  #define ORCompiler_Make_Matcher_IMP LUCY_ORCompiler_Make_Matcher_IMP
  #define ORCompiler_To_Host LUCY_ORCompiler_To_Host
  #define ORCompiler_To_Host_t LUCY_ORCompiler_To_Host_t
  #define ORCompiler_Clone LUCY_ORCompiler_Clone
  #define ORCompiler_Clone_t LUCY_ORCompiler_Clone_t
  #define ORCompiler_Equals LUCY_ORCompiler_Equals
  #define ORCompiler_Equals_t LUCY_ORCompiler_Equals_t
  #define ORCompiler_Compare_To LUCY_ORCompiler_Compare_To
  #define ORCompiler_Compare_To_t LUCY_ORCompiler_Compare_To_t
  #define ORCompiler_Destroy LUCY_ORCompiler_Destroy
  #define ORCompiler_Destroy_t LUCY_ORCompiler_Destroy_t
  #define ORCompiler_To_String LUCY_ORCompiler_To_String
  #define ORCompiler_To_String_t LUCY_ORCompiler_To_String_t
  #define ORCompiler_Make_Compiler LUCY_ORCompiler_Make_Compiler
  #define ORCompiler_Make_Compiler_t LUCY_ORCompiler_Make_Compiler_t
  #define ORCompiler_Set_Boost LUCY_ORCompiler_Set_Boost
  #define ORCompiler_Set_Boost_t LUCY_ORCompiler_Set_Boost_t
  #define ORCompiler_Get_Boost LUCY_ORCompiler_Get_Boost
  #define ORCompiler_Get_Boost_t LUCY_ORCompiler_Get_Boost_t
  #define ORCompiler_Serialize LUCY_ORCompiler_Serialize
  #define ORCompiler_Serialize_t LUCY_ORCompiler_Serialize_t
  #define ORCompiler_Deserialize LUCY_ORCompiler_Deserialize
  #define ORCompiler_Deserialize_t LUCY_ORCompiler_Deserialize_t
  #define ORCompiler_Dump LUCY_ORCompiler_Dump
  #define ORCompiler_Dump_t LUCY_ORCompiler_Dump_t
  #define ORCompiler_Load LUCY_ORCompiler_Load
  #define ORCompiler_Load_t LUCY_ORCompiler_Load_t
  #define ORCompiler_Make_Matcher LUCY_ORCompiler_Make_Matcher
  #define ORCompiler_Make_Matcher_t LUCY_ORCompiler_Make_Matcher_t
  #define ORCompiler_Get_Weight LUCY_ORCompiler_Get_Weight
  #define ORCompiler_Get_Weight_t LUCY_ORCompiler_Get_Weight_t
  #define ORCompiler_Get_Similarity LUCY_ORCompiler_Get_Similarity
  #define ORCompiler_Get_Similarity_t LUCY_ORCompiler_Get_Similarity_t
  #define ORCompiler_Get_Parent LUCY_ORCompiler_Get_Parent
  #define ORCompiler_Get_Parent_t LUCY_ORCompiler_Get_Parent_t
  #define ORCompiler_Sum_Of_Squared_Weights LUCY_ORCompiler_Sum_Of_Squared_Weights
  #define ORCompiler_Sum_Of_Squared_Weights_t LUCY_ORCompiler_Sum_Of_Squared_Weights_t
  #define ORCompiler_Apply_Norm_Factor LUCY_ORCompiler_Apply_Norm_Factor
  #define ORCompiler_Apply_Norm_Factor_t LUCY_ORCompiler_Apply_Norm_Factor_t
  #define ORCompiler_Normalize LUCY_ORCompiler_Normalize
  #define ORCompiler_Normalize_t LUCY_ORCompiler_Normalize_t
  #define ORCompiler_Highlight_Spans LUCY_ORCompiler_Highlight_Spans
  #define ORCompiler_Highlight_Spans_t LUCY_ORCompiler_Highlight_Spans_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_SEARCH_ORQUERY */




