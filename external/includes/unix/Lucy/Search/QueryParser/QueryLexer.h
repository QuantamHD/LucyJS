/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_SEARCH_QUERYPARSER_QUERYLEXER
#define H_LUCY_SEARCH_QUERYPARSER_QUERYLEXER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_QUERYLEXER
extern uint32_t lucy_QueryLexer_IVARS_OFFSET;
typedef struct lucy_QueryLexerIVARS lucy_QueryLexerIVARS;
static CFISH_INLINE lucy_QueryLexerIVARS*
lucy_QueryLexer_IVARS(lucy_QueryLexer *self) {
   char *ptr = (char*)self + lucy_QueryLexer_IVARS_OFFSET;
   return (lucy_QueryLexerIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define QueryLexerIVARS lucy_QueryLexerIVARS
  #define QueryLexer_IVARS lucy_QueryLexer_IVARS
#endif

struct lucy_QueryLexerIVARS {
    bool heed_colons;
};

#endif /* C_LUCY_QUERYLEXER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_QueryLexer*
lucy_QueryLexer_new(void);

LUCY_VISIBLE lucy_QueryLexer*
lucy_QueryLexer_init(lucy_QueryLexer* self);

cfish_Vector*
LUCY_QueryLexer_Tokenize_IMP(lucy_QueryLexer* self, cfish_String* query_string);

bool
LUCY_QueryLexer_Heed_Colons_IMP(lucy_QueryLexer* self);

void
LUCY_QueryLexer_Set_Heed_Colons_IMP(lucy_QueryLexer* self, bool heed_colons);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_QueryLexer_To_Host_t)(lucy_QueryLexer* self, void* vcache);

typedef cfish_Obj*
(*LUCY_QueryLexer_Clone_t)(lucy_QueryLexer* self);

typedef bool
(*LUCY_QueryLexer_Equals_t)(lucy_QueryLexer* self, cfish_Obj* other);

typedef int32_t
(*LUCY_QueryLexer_Compare_To_t)(lucy_QueryLexer* self, cfish_Obj* other);

typedef void
(*LUCY_QueryLexer_Destroy_t)(lucy_QueryLexer* self);

typedef cfish_String*
(*LUCY_QueryLexer_To_String_t)(lucy_QueryLexer* self);

typedef cfish_Vector*
(*LUCY_QueryLexer_Tokenize_t)(lucy_QueryLexer* self, cfish_String* query_string);

typedef bool
(*LUCY_QueryLexer_Heed_Colons_t)(lucy_QueryLexer* self);

typedef void
(*LUCY_QueryLexer_Set_Heed_Colons_t)(lucy_QueryLexer* self, bool heed_colons);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_QueryLexer_get_class(lucy_QueryLexer *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_QueryLexer_get_class_name(lucy_QueryLexer *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_QueryLexer_is_a(lucy_QueryLexer *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_QueryLexer_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_QueryLexer_To_Host(lucy_QueryLexer* self, void* vcache) {
    const LUCY_QueryLexer_To_Host_t method = (LUCY_QueryLexer_To_Host_t)cfish_obj_method(self, LUCY_QueryLexer_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_QueryLexer_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_QueryLexer_Clone(lucy_QueryLexer* self) {
    const LUCY_QueryLexer_Clone_t method = (LUCY_QueryLexer_Clone_t)cfish_obj_method(self, LUCY_QueryLexer_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_QueryLexer_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_QueryLexer_Equals(lucy_QueryLexer* self, cfish_Obj* other) {
    const LUCY_QueryLexer_Equals_t method = (LUCY_QueryLexer_Equals_t)cfish_obj_method(self, LUCY_QueryLexer_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_QueryLexer_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_QueryLexer_Compare_To(lucy_QueryLexer* self, cfish_Obj* other) {
    const LUCY_QueryLexer_Compare_To_t method = (LUCY_QueryLexer_Compare_To_t)cfish_obj_method(self, LUCY_QueryLexer_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_QueryLexer_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_QueryLexer_Destroy(lucy_QueryLexer* self) {
    const LUCY_QueryLexer_Destroy_t method = (LUCY_QueryLexer_Destroy_t)cfish_obj_method(self, LUCY_QueryLexer_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_QueryLexer_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_QueryLexer_To_String(lucy_QueryLexer* self) {
    const LUCY_QueryLexer_To_String_t method = (LUCY_QueryLexer_To_String_t)cfish_obj_method(self, LUCY_QueryLexer_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_QueryLexer_Tokenize_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_QueryLexer_Tokenize(lucy_QueryLexer* self, cfish_String* query_string) {
    const LUCY_QueryLexer_Tokenize_t method = (LUCY_QueryLexer_Tokenize_t)cfish_obj_method(self, LUCY_QueryLexer_Tokenize_OFFSET);
    return method(self, query_string);
}

extern LUCY_VISIBLE uint32_t LUCY_QueryLexer_Heed_Colons_OFFSET;
static CFISH_INLINE bool
LUCY_QueryLexer_Heed_Colons(lucy_QueryLexer* self) {
    const LUCY_QueryLexer_Heed_Colons_t method = (LUCY_QueryLexer_Heed_Colons_t)cfish_obj_method(self, LUCY_QueryLexer_Heed_Colons_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_QueryLexer_Set_Heed_Colons_OFFSET;
static CFISH_INLINE void
LUCY_QueryLexer_Set_Heed_Colons(lucy_QueryLexer* self, bool heed_colons) {
    const LUCY_QueryLexer_Set_Heed_Colons_t method = (LUCY_QueryLexer_Set_Heed_Colons_t)cfish_obj_method(self, LUCY_QueryLexer_Set_Heed_Colons_OFFSET);
    method(self, heed_colons);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_QueryLexer_Tokenize_OVERRIDE NULL
#define Lucy_QueryLexer_Heed_Colons_OVERRIDE NULL
#define Lucy_QueryLexer_Set_Heed_Colons_OVERRIDE NULL
#else
cfish_Vector*
Lucy_QueryLexer_Tokenize_OVERRIDE(lucy_QueryLexer* self, cfish_String* query_string);
bool
Lucy_QueryLexer_Heed_Colons_OVERRIDE(lucy_QueryLexer* self);
void
Lucy_QueryLexer_Set_Heed_Colons_OVERRIDE(lucy_QueryLexer* self, bool heed_colons);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define QueryLexer lucy_QueryLexer
  #define QUERYLEXER LUCY_QUERYLEXER
  #define QueryLexer_new lucy_QueryLexer_new
  #define QueryLexer_init lucy_QueryLexer_init
  #define QueryLexer_get_class lucy_QueryLexer_get_class
  #define QueryLexer_get_class_name lucy_QueryLexer_get_class_name
  #define QueryLexer_is_a lucy_QueryLexer_is_a
  #define QueryLexer_Tokenize_IMP LUCY_QueryLexer_Tokenize_IMP
  #define QueryLexer_Heed_Colons_IMP LUCY_QueryLexer_Heed_Colons_IMP
  #define QueryLexer_Set_Heed_Colons_IMP LUCY_QueryLexer_Set_Heed_Colons_IMP
  #define QueryLexer_To_Host LUCY_QueryLexer_To_Host
  #define QueryLexer_To_Host_t LUCY_QueryLexer_To_Host_t
  #define QueryLexer_Clone LUCY_QueryLexer_Clone
  #define QueryLexer_Clone_t LUCY_QueryLexer_Clone_t
  #define QueryLexer_Equals LUCY_QueryLexer_Equals
  #define QueryLexer_Equals_t LUCY_QueryLexer_Equals_t
  #define QueryLexer_Compare_To LUCY_QueryLexer_Compare_To
  #define QueryLexer_Compare_To_t LUCY_QueryLexer_Compare_To_t
  #define QueryLexer_Destroy LUCY_QueryLexer_Destroy
  #define QueryLexer_Destroy_t LUCY_QueryLexer_Destroy_t
  #define QueryLexer_To_String LUCY_QueryLexer_To_String
  #define QueryLexer_To_String_t LUCY_QueryLexer_To_String_t
  #define QueryLexer_Tokenize LUCY_QueryLexer_Tokenize
  #define QueryLexer_Tokenize_t LUCY_QueryLexer_Tokenize_t
  #define QueryLexer_Heed_Colons LUCY_QueryLexer_Heed_Colons
  #define QueryLexer_Heed_Colons_t LUCY_QueryLexer_Heed_Colons_t
  #define QueryLexer_Set_Heed_Colons LUCY_QueryLexer_Set_Heed_Colons
  #define QueryLexer_Set_Heed_Colons_t LUCY_QueryLexer_Set_Heed_Colons_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_SEARCH_QUERYPARSER_QUERYLEXER */




