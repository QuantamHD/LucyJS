/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_SEARCH_POLYQUERY
#define H_LUCY_SEARCH_POLYQUERY 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy/Search/Query.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_POLYQUERY
extern uint32_t lucy_PolyQuery_IVARS_OFFSET;
typedef struct lucy_PolyQueryIVARS lucy_PolyQueryIVARS;
static CFISH_INLINE lucy_PolyQueryIVARS*
lucy_PolyQuery_IVARS(lucy_PolyQuery *self) {
   char *ptr = (char*)self + lucy_PolyQuery_IVARS_OFFSET;
   return (lucy_PolyQueryIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define PolyQueryIVARS lucy_PolyQueryIVARS
  #define PolyQuery_IVARS lucy_PolyQuery_IVARS
#endif

struct lucy_PolyQueryIVARS {
    float boost;
    cfish_Vector* children;
};

#endif /* C_LUCY_POLYQUERY */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_PolyQuery*
lucy_PolyQuery_init(lucy_PolyQuery* self, cfish_Vector* children);

void
LUCY_PolyQuery_Add_Child_IMP(lucy_PolyQuery* self, lucy_Query* query);

void
LUCY_PolyQuery_Set_Children_IMP(lucy_PolyQuery* self, cfish_Vector* children);

cfish_Vector*
LUCY_PolyQuery_Get_Children_IMP(lucy_PolyQuery* self);

void
LUCY_PolyQuery_Serialize_IMP(lucy_PolyQuery* self, lucy_OutStream* outstream);

lucy_PolyQuery*
LUCY_PolyQuery_Deserialize_IMP(lucy_PolyQuery* self, lucy_InStream* instream);

cfish_Obj*
LUCY_PolyQuery_Dump_IMP(lucy_PolyQuery* self);

cfish_Obj*
LUCY_PolyQuery_Load_IMP(lucy_PolyQuery* self, cfish_Obj* dump);

bool
LUCY_PolyQuery_Equals_IMP(lucy_PolyQuery* self, cfish_Obj* other);

void
LUCY_PolyQuery_Destroy_IMP(lucy_PolyQuery* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_PolyQuery_To_Host_t)(lucy_PolyQuery* self, void* vcache);

typedef cfish_Obj*
(*LUCY_PolyQuery_Clone_t)(lucy_PolyQuery* self);

typedef bool
(*LUCY_PolyQuery_Equals_t)(lucy_PolyQuery* self, cfish_Obj* other);

typedef int32_t
(*LUCY_PolyQuery_Compare_To_t)(lucy_PolyQuery* self, cfish_Obj* other);

typedef void
(*LUCY_PolyQuery_Destroy_t)(lucy_PolyQuery* self);

typedef cfish_String*
(*LUCY_PolyQuery_To_String_t)(lucy_PolyQuery* self);

typedef lucy_Compiler*
(*LUCY_PolyQuery_Make_Compiler_t)(lucy_PolyQuery* self, lucy_Searcher* searcher, float boost, bool subordinate);

typedef void
(*LUCY_PolyQuery_Set_Boost_t)(lucy_PolyQuery* self, float boost);

typedef float
(*LUCY_PolyQuery_Get_Boost_t)(lucy_PolyQuery* self);

typedef void
(*LUCY_PolyQuery_Serialize_t)(lucy_PolyQuery* self, lucy_OutStream* outstream);

typedef lucy_PolyQuery*
(*LUCY_PolyQuery_Deserialize_t)(lucy_PolyQuery* self, lucy_InStream* instream);

typedef cfish_Obj*
(*LUCY_PolyQuery_Dump_t)(lucy_PolyQuery* self);

typedef cfish_Obj*
(*LUCY_PolyQuery_Load_t)(lucy_PolyQuery* self, cfish_Obj* dump);

typedef void
(*LUCY_PolyQuery_Add_Child_t)(lucy_PolyQuery* self, lucy_Query* query);

typedef void
(*LUCY_PolyQuery_Set_Children_t)(lucy_PolyQuery* self, cfish_Vector* children);

typedef cfish_Vector*
(*LUCY_PolyQuery_Get_Children_t)(lucy_PolyQuery* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_PolyQuery_get_class(lucy_PolyQuery *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_PolyQuery_get_class_name(lucy_PolyQuery *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_PolyQuery_is_a(lucy_PolyQuery *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_PolyQuery_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_PolyQuery_To_Host(lucy_PolyQuery* self, void* vcache) {
    const LUCY_PolyQuery_To_Host_t method = (LUCY_PolyQuery_To_Host_t)cfish_obj_method(self, LUCY_PolyQuery_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyQuery_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PolyQuery_Clone(lucy_PolyQuery* self) {
    const LUCY_PolyQuery_Clone_t method = (LUCY_PolyQuery_Clone_t)cfish_obj_method(self, LUCY_PolyQuery_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyQuery_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_PolyQuery_Equals(lucy_PolyQuery* self, cfish_Obj* other) {
    const LUCY_PolyQuery_Equals_t method = (LUCY_PolyQuery_Equals_t)cfish_obj_method(self, LUCY_PolyQuery_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyQuery_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_PolyQuery_Compare_To(lucy_PolyQuery* self, cfish_Obj* other) {
    const LUCY_PolyQuery_Compare_To_t method = (LUCY_PolyQuery_Compare_To_t)cfish_obj_method(self, LUCY_PolyQuery_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyQuery_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_PolyQuery_Destroy(lucy_PolyQuery* self) {
    const LUCY_PolyQuery_Destroy_t method = (LUCY_PolyQuery_Destroy_t)cfish_obj_method(self, LUCY_PolyQuery_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyQuery_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_PolyQuery_To_String(lucy_PolyQuery* self) {
    const LUCY_PolyQuery_To_String_t method = (LUCY_PolyQuery_To_String_t)cfish_obj_method(self, LUCY_PolyQuery_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyQuery_Make_Compiler_OFFSET;
static CFISH_INLINE lucy_Compiler*
LUCY_PolyQuery_Make_Compiler(lucy_PolyQuery* self, lucy_Searcher* searcher, float boost, bool subordinate) {
    const LUCY_PolyQuery_Make_Compiler_t method = (LUCY_PolyQuery_Make_Compiler_t)cfish_obj_method(self, LUCY_PolyQuery_Make_Compiler_OFFSET);
    return method(self, searcher, boost, subordinate);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyQuery_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_PolyQuery_Set_Boost(lucy_PolyQuery* self, float boost) {
    const LUCY_PolyQuery_Set_Boost_t method = (LUCY_PolyQuery_Set_Boost_t)cfish_obj_method(self, LUCY_PolyQuery_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyQuery_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_PolyQuery_Get_Boost(lucy_PolyQuery* self) {
    const LUCY_PolyQuery_Get_Boost_t method = (LUCY_PolyQuery_Get_Boost_t)cfish_obj_method(self, LUCY_PolyQuery_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyQuery_Serialize_OFFSET;
static CFISH_INLINE void
LUCY_PolyQuery_Serialize(lucy_PolyQuery* self, lucy_OutStream* outstream) {
    const LUCY_PolyQuery_Serialize_t method = (LUCY_PolyQuery_Serialize_t)cfish_obj_method(self, LUCY_PolyQuery_Serialize_OFFSET);
    method(self, outstream);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyQuery_Deserialize_OFFSET;
static CFISH_INLINE lucy_PolyQuery*
LUCY_PolyQuery_Deserialize(lucy_PolyQuery* self, lucy_InStream* instream) {
    const LUCY_PolyQuery_Deserialize_t method = (LUCY_PolyQuery_Deserialize_t)cfish_obj_method(self, LUCY_PolyQuery_Deserialize_OFFSET);
    return method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyQuery_Dump_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PolyQuery_Dump(lucy_PolyQuery* self) {
    const LUCY_PolyQuery_Dump_t method = (LUCY_PolyQuery_Dump_t)cfish_obj_method(self, LUCY_PolyQuery_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyQuery_Load_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PolyQuery_Load(lucy_PolyQuery* self, cfish_Obj* dump) {
    const LUCY_PolyQuery_Load_t method = (LUCY_PolyQuery_Load_t)cfish_obj_method(self, LUCY_PolyQuery_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyQuery_Add_Child_OFFSET;
static CFISH_INLINE void
LUCY_PolyQuery_Add_Child(lucy_PolyQuery* self, lucy_Query* query) {
    const LUCY_PolyQuery_Add_Child_t method = (LUCY_PolyQuery_Add_Child_t)cfish_obj_method(self, LUCY_PolyQuery_Add_Child_OFFSET);
    method(self, query);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyQuery_Set_Children_OFFSET;
static CFISH_INLINE void
LUCY_PolyQuery_Set_Children(lucy_PolyQuery* self, cfish_Vector* children) {
    const LUCY_PolyQuery_Set_Children_t method = (LUCY_PolyQuery_Set_Children_t)cfish_obj_method(self, LUCY_PolyQuery_Set_Children_OFFSET);
    method(self, children);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyQuery_Get_Children_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_PolyQuery_Get_Children(lucy_PolyQuery* self) {
    const LUCY_PolyQuery_Get_Children_t method = (LUCY_PolyQuery_Get_Children_t)cfish_obj_method(self, LUCY_PolyQuery_Get_Children_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_PolyQuery_Add_Child_OVERRIDE NULL
#define Lucy_PolyQuery_Set_Children_OVERRIDE NULL
#define Lucy_PolyQuery_Get_Children_OVERRIDE NULL
#else
void
Lucy_PolyQuery_Add_Child_OVERRIDE(lucy_PolyQuery* self, lucy_Query* query);
void
Lucy_PolyQuery_Set_Children_OVERRIDE(lucy_PolyQuery* self, cfish_Vector* children);
cfish_Vector*
Lucy_PolyQuery_Get_Children_OVERRIDE(lucy_PolyQuery* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define PolyQuery lucy_PolyQuery
  #define POLYQUERY LUCY_POLYQUERY
  #define PolyQuery_init lucy_PolyQuery_init
  #define PolyQuery_get_class lucy_PolyQuery_get_class
  #define PolyQuery_get_class_name lucy_PolyQuery_get_class_name
  #define PolyQuery_is_a lucy_PolyQuery_is_a
  #define PolyQuery_Add_Child_IMP LUCY_PolyQuery_Add_Child_IMP
  #define PolyQuery_Set_Children_IMP LUCY_PolyQuery_Set_Children_IMP
  #define PolyQuery_Get_Children_IMP LUCY_PolyQuery_Get_Children_IMP
  #define PolyQuery_Serialize_IMP LUCY_PolyQuery_Serialize_IMP
  #define PolyQuery_Deserialize_IMP LUCY_PolyQuery_Deserialize_IMP
  #define PolyQuery_Dump_IMP LUCY_PolyQuery_Dump_IMP
  #define PolyQuery_Load_IMP LUCY_PolyQuery_Load_IMP
  #define PolyQuery_Equals_IMP LUCY_PolyQuery_Equals_IMP
  #define PolyQuery_Destroy_IMP LUCY_PolyQuery_Destroy_IMP
  #define PolyQuery_To_Host LUCY_PolyQuery_To_Host
  #define PolyQuery_To_Host_t LUCY_PolyQuery_To_Host_t
  #define PolyQuery_Clone LUCY_PolyQuery_Clone
  #define PolyQuery_Clone_t LUCY_PolyQuery_Clone_t
  #define PolyQuery_Equals LUCY_PolyQuery_Equals
  #define PolyQuery_Equals_t LUCY_PolyQuery_Equals_t
  #define PolyQuery_Compare_To LUCY_PolyQuery_Compare_To
  #define PolyQuery_Compare_To_t LUCY_PolyQuery_Compare_To_t
  #define PolyQuery_Destroy LUCY_PolyQuery_Destroy
  #define PolyQuery_Destroy_t LUCY_PolyQuery_Destroy_t
  #define PolyQuery_To_String LUCY_PolyQuery_To_String
  #define PolyQuery_To_String_t LUCY_PolyQuery_To_String_t
  #define PolyQuery_Make_Compiler LUCY_PolyQuery_Make_Compiler
  #define PolyQuery_Make_Compiler_t LUCY_PolyQuery_Make_Compiler_t
  #define PolyQuery_Set_Boost LUCY_PolyQuery_Set_Boost
  #define PolyQuery_Set_Boost_t LUCY_PolyQuery_Set_Boost_t
  #define PolyQuery_Get_Boost LUCY_PolyQuery_Get_Boost
  #define PolyQuery_Get_Boost_t LUCY_PolyQuery_Get_Boost_t
  #define PolyQuery_Serialize LUCY_PolyQuery_Serialize
  #define PolyQuery_Serialize_t LUCY_PolyQuery_Serialize_t
  #define PolyQuery_Deserialize LUCY_PolyQuery_Deserialize
  #define PolyQuery_Deserialize_t LUCY_PolyQuery_Deserialize_t
  #define PolyQuery_Dump LUCY_PolyQuery_Dump
  #define PolyQuery_Dump_t LUCY_PolyQuery_Dump_t
  #define PolyQuery_Load LUCY_PolyQuery_Load
  #define PolyQuery_Load_t LUCY_PolyQuery_Load_t
  #define PolyQuery_Add_Child LUCY_PolyQuery_Add_Child
  #define PolyQuery_Add_Child_t LUCY_PolyQuery_Add_Child_t
  #define PolyQuery_Set_Children LUCY_PolyQuery_Set_Children
  #define PolyQuery_Set_Children_t LUCY_PolyQuery_Set_Children_t
  #define PolyQuery_Get_Children LUCY_PolyQuery_Get_Children
  #define PolyQuery_Get_Children_t LUCY_PolyQuery_Get_Children_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy/Search/Compiler.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_POLYCOMPILER
extern uint32_t lucy_PolyCompiler_IVARS_OFFSET;
typedef struct lucy_PolyCompilerIVARS lucy_PolyCompilerIVARS;
static CFISH_INLINE lucy_PolyCompilerIVARS*
lucy_PolyCompiler_IVARS(lucy_PolyCompiler *self) {
   char *ptr = (char*)self + lucy_PolyCompiler_IVARS_OFFSET;
   return (lucy_PolyCompilerIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define PolyCompilerIVARS lucy_PolyCompilerIVARS
  #define PolyCompiler_IVARS lucy_PolyCompiler_IVARS
#endif

struct lucy_PolyCompilerIVARS {
    float boost;
    lucy_Query* parent;
    lucy_Similarity* sim;
    cfish_Vector* children;
};

#endif /* C_LUCY_POLYCOMPILER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_PolyCompiler*
lucy_PolyCompiler_init(lucy_PolyCompiler* self, lucy_PolyQuery* parent, lucy_Searcher* searcher, float boost);

float
LUCY_PolyCompiler_Sum_Of_Squared_Weights_IMP(lucy_PolyCompiler* self);

void
LUCY_PolyCompiler_Apply_Norm_Factor_IMP(lucy_PolyCompiler* self, float factor);

cfish_Vector*
LUCY_PolyCompiler_Highlight_Spans_IMP(lucy_PolyCompiler* self, lucy_Searcher* searcher, lucy_DocVector* doc_vec, cfish_String* field);

void
LUCY_PolyCompiler_Destroy_IMP(lucy_PolyCompiler* self);

void
LUCY_PolyCompiler_Serialize_IMP(lucy_PolyCompiler* self, lucy_OutStream* outstream);

lucy_PolyCompiler*
LUCY_PolyCompiler_Deserialize_IMP(lucy_PolyCompiler* self, lucy_InStream* instream);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_PolyCompiler_To_Host_t)(lucy_PolyCompiler* self, void* vcache);

typedef cfish_Obj*
(*LUCY_PolyCompiler_Clone_t)(lucy_PolyCompiler* self);

typedef bool
(*LUCY_PolyCompiler_Equals_t)(lucy_PolyCompiler* self, cfish_Obj* other);

typedef int32_t
(*LUCY_PolyCompiler_Compare_To_t)(lucy_PolyCompiler* self, cfish_Obj* other);

typedef void
(*LUCY_PolyCompiler_Destroy_t)(lucy_PolyCompiler* self);

typedef cfish_String*
(*LUCY_PolyCompiler_To_String_t)(lucy_PolyCompiler* self);

typedef lucy_Compiler*
(*LUCY_PolyCompiler_Make_Compiler_t)(lucy_PolyCompiler* self, lucy_Searcher* searcher, float boost, bool subordinate);

typedef void
(*LUCY_PolyCompiler_Set_Boost_t)(lucy_PolyCompiler* self, float boost);

typedef float
(*LUCY_PolyCompiler_Get_Boost_t)(lucy_PolyCompiler* self);

typedef void
(*LUCY_PolyCompiler_Serialize_t)(lucy_PolyCompiler* self, lucy_OutStream* outstream);

typedef lucy_PolyCompiler*
(*LUCY_PolyCompiler_Deserialize_t)(lucy_PolyCompiler* self, lucy_InStream* instream);

typedef cfish_Obj*
(*LUCY_PolyCompiler_Dump_t)(lucy_PolyCompiler* self);

typedef cfish_Obj*
(*LUCY_PolyCompiler_Load_t)(lucy_PolyCompiler* self, cfish_Obj* dump);

typedef lucy_Matcher*
(*LUCY_PolyCompiler_Make_Matcher_t)(lucy_PolyCompiler* self, lucy_SegReader* reader, bool need_score);

typedef float
(*LUCY_PolyCompiler_Get_Weight_t)(lucy_PolyCompiler* self);

typedef lucy_Similarity*
(*LUCY_PolyCompiler_Get_Similarity_t)(lucy_PolyCompiler* self);

typedef lucy_Query*
(*LUCY_PolyCompiler_Get_Parent_t)(lucy_PolyCompiler* self);

typedef float
(*LUCY_PolyCompiler_Sum_Of_Squared_Weights_t)(lucy_PolyCompiler* self);

typedef void
(*LUCY_PolyCompiler_Apply_Norm_Factor_t)(lucy_PolyCompiler* self, float factor);

typedef void
(*LUCY_PolyCompiler_Normalize_t)(lucy_PolyCompiler* self);

typedef cfish_Vector*
(*LUCY_PolyCompiler_Highlight_Spans_t)(lucy_PolyCompiler* self, lucy_Searcher* searcher, lucy_DocVector* doc_vec, cfish_String* field);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_PolyCompiler_get_class(lucy_PolyCompiler *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_PolyCompiler_get_class_name(lucy_PolyCompiler *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_PolyCompiler_is_a(lucy_PolyCompiler *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_PolyCompiler_To_Host(lucy_PolyCompiler* self, void* vcache) {
    const LUCY_PolyCompiler_To_Host_t method = (LUCY_PolyCompiler_To_Host_t)cfish_obj_method(self, LUCY_PolyCompiler_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PolyCompiler_Clone(lucy_PolyCompiler* self) {
    const LUCY_PolyCompiler_Clone_t method = (LUCY_PolyCompiler_Clone_t)cfish_obj_method(self, LUCY_PolyCompiler_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_PolyCompiler_Equals(lucy_PolyCompiler* self, cfish_Obj* other) {
    const LUCY_PolyCompiler_Equals_t method = (LUCY_PolyCompiler_Equals_t)cfish_obj_method(self, LUCY_PolyCompiler_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_PolyCompiler_Compare_To(lucy_PolyCompiler* self, cfish_Obj* other) {
    const LUCY_PolyCompiler_Compare_To_t method = (LUCY_PolyCompiler_Compare_To_t)cfish_obj_method(self, LUCY_PolyCompiler_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_PolyCompiler_Destroy(lucy_PolyCompiler* self) {
    const LUCY_PolyCompiler_Destroy_t method = (LUCY_PolyCompiler_Destroy_t)cfish_obj_method(self, LUCY_PolyCompiler_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_PolyCompiler_To_String(lucy_PolyCompiler* self) {
    const LUCY_PolyCompiler_To_String_t method = (LUCY_PolyCompiler_To_String_t)cfish_obj_method(self, LUCY_PolyCompiler_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Make_Compiler_OFFSET;
static CFISH_INLINE lucy_Compiler*
LUCY_PolyCompiler_Make_Compiler(lucy_PolyCompiler* self, lucy_Searcher* searcher, float boost, bool subordinate) {
    const LUCY_PolyCompiler_Make_Compiler_t method = (LUCY_PolyCompiler_Make_Compiler_t)cfish_obj_method(self, LUCY_PolyCompiler_Make_Compiler_OFFSET);
    return method(self, searcher, boost, subordinate);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_PolyCompiler_Set_Boost(lucy_PolyCompiler* self, float boost) {
    const LUCY_PolyCompiler_Set_Boost_t method = (LUCY_PolyCompiler_Set_Boost_t)cfish_obj_method(self, LUCY_PolyCompiler_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_PolyCompiler_Get_Boost(lucy_PolyCompiler* self) {
    const LUCY_PolyCompiler_Get_Boost_t method = (LUCY_PolyCompiler_Get_Boost_t)cfish_obj_method(self, LUCY_PolyCompiler_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Serialize_OFFSET;
static CFISH_INLINE void
LUCY_PolyCompiler_Serialize(lucy_PolyCompiler* self, lucy_OutStream* outstream) {
    const LUCY_PolyCompiler_Serialize_t method = (LUCY_PolyCompiler_Serialize_t)cfish_obj_method(self, LUCY_PolyCompiler_Serialize_OFFSET);
    method(self, outstream);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Deserialize_OFFSET;
static CFISH_INLINE lucy_PolyCompiler*
LUCY_PolyCompiler_Deserialize(lucy_PolyCompiler* self, lucy_InStream* instream) {
    const LUCY_PolyCompiler_Deserialize_t method = (LUCY_PolyCompiler_Deserialize_t)cfish_obj_method(self, LUCY_PolyCompiler_Deserialize_OFFSET);
    return method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Dump_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PolyCompiler_Dump(lucy_PolyCompiler* self) {
    const LUCY_PolyCompiler_Dump_t method = (LUCY_PolyCompiler_Dump_t)cfish_obj_method(self, LUCY_PolyCompiler_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Load_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PolyCompiler_Load(lucy_PolyCompiler* self, cfish_Obj* dump) {
    const LUCY_PolyCompiler_Load_t method = (LUCY_PolyCompiler_Load_t)cfish_obj_method(self, LUCY_PolyCompiler_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Make_Matcher_OFFSET;
static CFISH_INLINE lucy_Matcher*
LUCY_PolyCompiler_Make_Matcher(lucy_PolyCompiler* self, lucy_SegReader* reader, bool need_score) {
    const LUCY_PolyCompiler_Make_Matcher_t method = (LUCY_PolyCompiler_Make_Matcher_t)cfish_obj_method(self, LUCY_PolyCompiler_Make_Matcher_OFFSET);
    return method(self, reader, need_score);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Get_Weight_OFFSET;
static CFISH_INLINE float
LUCY_PolyCompiler_Get_Weight(lucy_PolyCompiler* self) {
    const LUCY_PolyCompiler_Get_Weight_t method = (LUCY_PolyCompiler_Get_Weight_t)cfish_obj_method(self, LUCY_PolyCompiler_Get_Weight_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Get_Similarity_OFFSET;
static CFISH_INLINE lucy_Similarity*
LUCY_PolyCompiler_Get_Similarity(lucy_PolyCompiler* self) {
    const LUCY_PolyCompiler_Get_Similarity_t method = (LUCY_PolyCompiler_Get_Similarity_t)cfish_obj_method(self, LUCY_PolyCompiler_Get_Similarity_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Get_Parent_OFFSET;
static CFISH_INLINE lucy_Query*
LUCY_PolyCompiler_Get_Parent(lucy_PolyCompiler* self) {
    const LUCY_PolyCompiler_Get_Parent_t method = (LUCY_PolyCompiler_Get_Parent_t)cfish_obj_method(self, LUCY_PolyCompiler_Get_Parent_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Sum_Of_Squared_Weights_OFFSET;
static CFISH_INLINE float
LUCY_PolyCompiler_Sum_Of_Squared_Weights(lucy_PolyCompiler* self) {
    const LUCY_PolyCompiler_Sum_Of_Squared_Weights_t method = (LUCY_PolyCompiler_Sum_Of_Squared_Weights_t)cfish_obj_method(self, LUCY_PolyCompiler_Sum_Of_Squared_Weights_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Apply_Norm_Factor_OFFSET;
static CFISH_INLINE void
LUCY_PolyCompiler_Apply_Norm_Factor(lucy_PolyCompiler* self, float factor) {
    const LUCY_PolyCompiler_Apply_Norm_Factor_t method = (LUCY_PolyCompiler_Apply_Norm_Factor_t)cfish_obj_method(self, LUCY_PolyCompiler_Apply_Norm_Factor_OFFSET);
    method(self, factor);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Normalize_OFFSET;
static CFISH_INLINE void
LUCY_PolyCompiler_Normalize(lucy_PolyCompiler* self) {
    const LUCY_PolyCompiler_Normalize_t method = (LUCY_PolyCompiler_Normalize_t)cfish_obj_method(self, LUCY_PolyCompiler_Normalize_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyCompiler_Highlight_Spans_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_PolyCompiler_Highlight_Spans(lucy_PolyCompiler* self, lucy_Searcher* searcher, lucy_DocVector* doc_vec, cfish_String* field) {
    const LUCY_PolyCompiler_Highlight_Spans_t method = (LUCY_PolyCompiler_Highlight_Spans_t)cfish_obj_method(self, LUCY_PolyCompiler_Highlight_Spans_OFFSET);
    return method(self, searcher, doc_vec, field);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define PolyCompiler lucy_PolyCompiler
  #define POLYCOMPILER LUCY_POLYCOMPILER
  #define PolyCompiler_init lucy_PolyCompiler_init
  #define PolyCompiler_get_class lucy_PolyCompiler_get_class
  #define PolyCompiler_get_class_name lucy_PolyCompiler_get_class_name
  #define PolyCompiler_is_a lucy_PolyCompiler_is_a
  #define PolyCompiler_Sum_Of_Squared_Weights_IMP LUCY_PolyCompiler_Sum_Of_Squared_Weights_IMP
  #define PolyCompiler_Apply_Norm_Factor_IMP LUCY_PolyCompiler_Apply_Norm_Factor_IMP
  #define PolyCompiler_Highlight_Spans_IMP LUCY_PolyCompiler_Highlight_Spans_IMP
  #define PolyCompiler_Destroy_IMP LUCY_PolyCompiler_Destroy_IMP
  #define PolyCompiler_Serialize_IMP LUCY_PolyCompiler_Serialize_IMP
  #define PolyCompiler_Deserialize_IMP LUCY_PolyCompiler_Deserialize_IMP
  #define PolyCompiler_To_Host LUCY_PolyCompiler_To_Host
  #define PolyCompiler_To_Host_t LUCY_PolyCompiler_To_Host_t
  #define PolyCompiler_Clone LUCY_PolyCompiler_Clone
  #define PolyCompiler_Clone_t LUCY_PolyCompiler_Clone_t
  #define PolyCompiler_Equals LUCY_PolyCompiler_Equals
  #define PolyCompiler_Equals_t LUCY_PolyCompiler_Equals_t
  #define PolyCompiler_Compare_To LUCY_PolyCompiler_Compare_To
  #define PolyCompiler_Compare_To_t LUCY_PolyCompiler_Compare_To_t
  #define PolyCompiler_Destroy LUCY_PolyCompiler_Destroy
  #define PolyCompiler_Destroy_t LUCY_PolyCompiler_Destroy_t
  #define PolyCompiler_To_String LUCY_PolyCompiler_To_String
  #define PolyCompiler_To_String_t LUCY_PolyCompiler_To_String_t
  #define PolyCompiler_Make_Compiler LUCY_PolyCompiler_Make_Compiler
  #define PolyCompiler_Make_Compiler_t LUCY_PolyCompiler_Make_Compiler_t
  #define PolyCompiler_Set_Boost LUCY_PolyCompiler_Set_Boost
  #define PolyCompiler_Set_Boost_t LUCY_PolyCompiler_Set_Boost_t
  #define PolyCompiler_Get_Boost LUCY_PolyCompiler_Get_Boost
  #define PolyCompiler_Get_Boost_t LUCY_PolyCompiler_Get_Boost_t
  #define PolyCompiler_Serialize LUCY_PolyCompiler_Serialize
  #define PolyCompiler_Serialize_t LUCY_PolyCompiler_Serialize_t
  #define PolyCompiler_Deserialize LUCY_PolyCompiler_Deserialize
  #define PolyCompiler_Deserialize_t LUCY_PolyCompiler_Deserialize_t
  #define PolyCompiler_Dump LUCY_PolyCompiler_Dump
  #define PolyCompiler_Dump_t LUCY_PolyCompiler_Dump_t
  #define PolyCompiler_Load LUCY_PolyCompiler_Load
  #define PolyCompiler_Load_t LUCY_PolyCompiler_Load_t
  #define PolyCompiler_Make_Matcher LUCY_PolyCompiler_Make_Matcher
  #define PolyCompiler_Make_Matcher_t LUCY_PolyCompiler_Make_Matcher_t
  #define PolyCompiler_Get_Weight LUCY_PolyCompiler_Get_Weight
  #define PolyCompiler_Get_Weight_t LUCY_PolyCompiler_Get_Weight_t
  #define PolyCompiler_Get_Similarity LUCY_PolyCompiler_Get_Similarity
  #define PolyCompiler_Get_Similarity_t LUCY_PolyCompiler_Get_Similarity_t
  #define PolyCompiler_Get_Parent LUCY_PolyCompiler_Get_Parent
  #define PolyCompiler_Get_Parent_t LUCY_PolyCompiler_Get_Parent_t
  #define PolyCompiler_Sum_Of_Squared_Weights LUCY_PolyCompiler_Sum_Of_Squared_Weights
  #define PolyCompiler_Sum_Of_Squared_Weights_t LUCY_PolyCompiler_Sum_Of_Squared_Weights_t
  #define PolyCompiler_Apply_Norm_Factor LUCY_PolyCompiler_Apply_Norm_Factor
  #define PolyCompiler_Apply_Norm_Factor_t LUCY_PolyCompiler_Apply_Norm_Factor_t
  #define PolyCompiler_Normalize LUCY_PolyCompiler_Normalize
  #define PolyCompiler_Normalize_t LUCY_PolyCompiler_Normalize_t
  #define PolyCompiler_Highlight_Spans LUCY_PolyCompiler_Highlight_Spans
  #define PolyCompiler_Highlight_Spans_t LUCY_PolyCompiler_Highlight_Spans_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_SEARCH_POLYQUERY */




