/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_STORE_FILEHANDLE
#define H_LUCY_STORE_FILEHANDLE 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_FILEHANDLE
extern uint32_t lucy_FH_IVARS_OFFSET;
typedef struct lucy_FileHandleIVARS lucy_FileHandleIVARS;
static CFISH_INLINE lucy_FileHandleIVARS*
lucy_FH_IVARS(lucy_FileHandle *self) {
   char *ptr = (char*)self + lucy_FH_IVARS_OFFSET;
   return (lucy_FileHandleIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define FileHandleIVARS lucy_FileHandleIVARS
  #define FH_IVARS lucy_FH_IVARS
#endif

struct lucy_FileHandleIVARS {
    cfish_String* path;
    uint32_t flags;
};

#endif /* C_LUCY_FILEHANDLE */

/* Declare this class's inert variables.
 */

extern LUCY_VISIBLE int32_t lucy_FH_object_count;


/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_FileHandle*
lucy_FH_do_open(lucy_FileHandle* self, cfish_String* path, uint32_t flags);

bool
LUCY_FH_Window_IMP(lucy_FileHandle* self, lucy_FileWindow* window, int64_t offset, int64_t len);

bool
LUCY_FH_Release_Window_IMP(lucy_FileHandle* self, lucy_FileWindow* window);

bool
LUCY_FH_Read_IMP(lucy_FileHandle* self, char* dest, int64_t offset, size_t len);

bool
LUCY_FH_Write_IMP(lucy_FileHandle* self, const void* data, size_t len);

int64_t
LUCY_FH_Length_IMP(lucy_FileHandle* self);

bool
LUCY_FH_Grow_IMP(lucy_FileHandle* self, int64_t len);

bool
LUCY_FH_Close_IMP(lucy_FileHandle* self);

void
LUCY_FH_Set_Path_IMP(lucy_FileHandle* self, cfish_String* path);

cfish_String*
LUCY_FH_Get_Path_IMP(lucy_FileHandle* self);

void
LUCY_FH_Destroy_IMP(lucy_FileHandle* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_FH_To_Host_t)(lucy_FileHandle* self, void* vcache);

typedef cfish_Obj*
(*LUCY_FH_Clone_t)(lucy_FileHandle* self);

typedef bool
(*LUCY_FH_Equals_t)(lucy_FileHandle* self, cfish_Obj* other);

typedef int32_t
(*LUCY_FH_Compare_To_t)(lucy_FileHandle* self, cfish_Obj* other);

typedef void
(*LUCY_FH_Destroy_t)(lucy_FileHandle* self);

typedef cfish_String*
(*LUCY_FH_To_String_t)(lucy_FileHandle* self);

typedef bool
(*LUCY_FH_Window_t)(lucy_FileHandle* self, lucy_FileWindow* window, int64_t offset, int64_t len);

typedef bool
(*LUCY_FH_Release_Window_t)(lucy_FileHandle* self, lucy_FileWindow* window);

typedef bool
(*LUCY_FH_Read_t)(lucy_FileHandle* self, char* dest, int64_t offset, size_t len);

typedef bool
(*LUCY_FH_Write_t)(lucy_FileHandle* self, const void* data, size_t len);

typedef int64_t
(*LUCY_FH_Length_t)(lucy_FileHandle* self);

typedef bool
(*LUCY_FH_Grow_t)(lucy_FileHandle* self, int64_t len);

typedef bool
(*LUCY_FH_Close_t)(lucy_FileHandle* self);

typedef void
(*LUCY_FH_Set_Path_t)(lucy_FileHandle* self, cfish_String* path);

typedef cfish_String*
(*LUCY_FH_Get_Path_t)(lucy_FileHandle* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_FH_get_class(lucy_FileHandle *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_FH_get_class_name(lucy_FileHandle *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_FH_is_a(lucy_FileHandle *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_FH_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_FH_To_Host(lucy_FileHandle* self, void* vcache) {
    const LUCY_FH_To_Host_t method = (LUCY_FH_To_Host_t)cfish_obj_method(self, LUCY_FH_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_FH_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_FH_Clone(lucy_FileHandle* self) {
    const LUCY_FH_Clone_t method = (LUCY_FH_Clone_t)cfish_obj_method(self, LUCY_FH_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FH_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_FH_Equals(lucy_FileHandle* self, cfish_Obj* other) {
    const LUCY_FH_Equals_t method = (LUCY_FH_Equals_t)cfish_obj_method(self, LUCY_FH_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_FH_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_FH_Compare_To(lucy_FileHandle* self, cfish_Obj* other) {
    const LUCY_FH_Compare_To_t method = (LUCY_FH_Compare_To_t)cfish_obj_method(self, LUCY_FH_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_FH_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_FH_Destroy(lucy_FileHandle* self) {
    const LUCY_FH_Destroy_t method = (LUCY_FH_Destroy_t)cfish_obj_method(self, LUCY_FH_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FH_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_FH_To_String(lucy_FileHandle* self) {
    const LUCY_FH_To_String_t method = (LUCY_FH_To_String_t)cfish_obj_method(self, LUCY_FH_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FH_Window_OFFSET;
static CFISH_INLINE bool
LUCY_FH_Window(lucy_FileHandle* self, lucy_FileWindow* window, int64_t offset, int64_t len) {
    const LUCY_FH_Window_t method = (LUCY_FH_Window_t)cfish_obj_method(self, LUCY_FH_Window_OFFSET);
    return method(self, window, offset, len);
}

extern LUCY_VISIBLE uint32_t LUCY_FH_Release_Window_OFFSET;
static CFISH_INLINE bool
LUCY_FH_Release_Window(lucy_FileHandle* self, lucy_FileWindow* window) {
    const LUCY_FH_Release_Window_t method = (LUCY_FH_Release_Window_t)cfish_obj_method(self, LUCY_FH_Release_Window_OFFSET);
    return method(self, window);
}

extern LUCY_VISIBLE uint32_t LUCY_FH_Read_OFFSET;
static CFISH_INLINE bool
LUCY_FH_Read(lucy_FileHandle* self, char* dest, int64_t offset, size_t len) {
    const LUCY_FH_Read_t method = (LUCY_FH_Read_t)cfish_obj_method(self, LUCY_FH_Read_OFFSET);
    return method(self, dest, offset, len);
}

extern LUCY_VISIBLE uint32_t LUCY_FH_Write_OFFSET;
static CFISH_INLINE bool
LUCY_FH_Write(lucy_FileHandle* self, const void* data, size_t len) {
    const LUCY_FH_Write_t method = (LUCY_FH_Write_t)cfish_obj_method(self, LUCY_FH_Write_OFFSET);
    return method(self, data, len);
}

extern LUCY_VISIBLE uint32_t LUCY_FH_Length_OFFSET;
static CFISH_INLINE int64_t
LUCY_FH_Length(lucy_FileHandle* self) {
    const LUCY_FH_Length_t method = (LUCY_FH_Length_t)cfish_obj_method(self, LUCY_FH_Length_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FH_Grow_OFFSET;
static CFISH_INLINE bool
LUCY_FH_Grow(lucy_FileHandle* self, int64_t len) {
    const LUCY_FH_Grow_t method = (LUCY_FH_Grow_t)cfish_obj_method(self, LUCY_FH_Grow_OFFSET);
    return method(self, len);
}

extern LUCY_VISIBLE uint32_t LUCY_FH_Close_OFFSET;
static CFISH_INLINE bool
LUCY_FH_Close(lucy_FileHandle* self) {
    const LUCY_FH_Close_t method = (LUCY_FH_Close_t)cfish_obj_method(self, LUCY_FH_Close_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FH_Set_Path_OFFSET;
static CFISH_INLINE void
LUCY_FH_Set_Path(lucy_FileHandle* self, cfish_String* path) {
    const LUCY_FH_Set_Path_t method = (LUCY_FH_Set_Path_t)cfish_obj_method(self, LUCY_FH_Set_Path_OFFSET);
    method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_FH_Get_Path_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_FH_Get_Path(lucy_FileHandle* self) {
    const LUCY_FH_Get_Path_t method = (LUCY_FH_Get_Path_t)cfish_obj_method(self, LUCY_FH_Get_Path_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_FH_Window_OVERRIDE NULL
#define Lucy_FH_Release_Window_OVERRIDE NULL
#define Lucy_FH_Read_OVERRIDE NULL
#define Lucy_FH_Write_OVERRIDE NULL
#define Lucy_FH_Length_OVERRIDE NULL
#define Lucy_FH_Grow_OVERRIDE NULL
#define Lucy_FH_Close_OVERRIDE NULL
#define Lucy_FH_Set_Path_OVERRIDE NULL
#define Lucy_FH_Get_Path_OVERRIDE NULL
#else
bool
Lucy_FH_Window_OVERRIDE(lucy_FileHandle* self, lucy_FileWindow* window, int64_t offset, int64_t len);
bool
Lucy_FH_Release_Window_OVERRIDE(lucy_FileHandle* self, lucy_FileWindow* window);
bool
Lucy_FH_Read_OVERRIDE(lucy_FileHandle* self, char* dest, int64_t offset, size_t len);
bool
Lucy_FH_Write_OVERRIDE(lucy_FileHandle* self, const void* data, size_t len);
int64_t
Lucy_FH_Length_OVERRIDE(lucy_FileHandle* self);
bool
Lucy_FH_Grow_OVERRIDE(lucy_FileHandle* self, int64_t len);
bool
Lucy_FH_Close_OVERRIDE(lucy_FileHandle* self);
void
Lucy_FH_Set_Path_OVERRIDE(lucy_FileHandle* self, cfish_String* path);
cfish_String*
Lucy_FH_Get_Path_OVERRIDE(lucy_FileHandle* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define FileHandle lucy_FileHandle
  #define FILEHANDLE LUCY_FILEHANDLE
  #define FH_do_open lucy_FH_do_open
  #define FH_object_count lucy_FH_object_count
  #define FH_get_class lucy_FH_get_class
  #define FH_get_class_name lucy_FH_get_class_name
  #define FH_is_a lucy_FH_is_a
  #define FH_Window_IMP LUCY_FH_Window_IMP
  #define FH_Release_Window_IMP LUCY_FH_Release_Window_IMP
  #define FH_Read_IMP LUCY_FH_Read_IMP
  #define FH_Write_IMP LUCY_FH_Write_IMP
  #define FH_Length_IMP LUCY_FH_Length_IMP
  #define FH_Grow_IMP LUCY_FH_Grow_IMP
  #define FH_Close_IMP LUCY_FH_Close_IMP
  #define FH_Set_Path_IMP LUCY_FH_Set_Path_IMP
  #define FH_Get_Path_IMP LUCY_FH_Get_Path_IMP
  #define FH_Destroy_IMP LUCY_FH_Destroy_IMP
  #define FH_To_Host LUCY_FH_To_Host
  #define FH_To_Host_t LUCY_FH_To_Host_t
  #define FH_Clone LUCY_FH_Clone
  #define FH_Clone_t LUCY_FH_Clone_t
  #define FH_Equals LUCY_FH_Equals
  #define FH_Equals_t LUCY_FH_Equals_t
  #define FH_Compare_To LUCY_FH_Compare_To
  #define FH_Compare_To_t LUCY_FH_Compare_To_t
  #define FH_Destroy LUCY_FH_Destroy
  #define FH_Destroy_t LUCY_FH_Destroy_t
  #define FH_To_String LUCY_FH_To_String
  #define FH_To_String_t LUCY_FH_To_String_t
  #define FH_Window LUCY_FH_Window
  #define FH_Window_t LUCY_FH_Window_t
  #define FH_Release_Window LUCY_FH_Release_Window
  #define FH_Release_Window_t LUCY_FH_Release_Window_t
  #define FH_Read LUCY_FH_Read
  #define FH_Read_t LUCY_FH_Read_t
  #define FH_Write LUCY_FH_Write
  #define FH_Write_t LUCY_FH_Write_t
  #define FH_Length LUCY_FH_Length
  #define FH_Length_t LUCY_FH_Length_t
  #define FH_Grow LUCY_FH_Grow
  #define FH_Grow_t LUCY_FH_Grow_t
  #define FH_Close LUCY_FH_Close
  #define FH_Close_t LUCY_FH_Close_t
  #define FH_Set_Path LUCY_FH_Set_Path
  #define FH_Set_Path_t LUCY_FH_Set_Path_t
  #define FH_Get_Path LUCY_FH_Get_Path
  #define FH_Get_Path_t LUCY_FH_Get_Path_t
#endif /* LUCY_USE_SHORT_NAMES */



#define LUCY_FH_READ_ONLY  0x1
#define LUCY_FH_WRITE_ONLY 0x2
#define LUCY_FH_CREATE     0x4
#define LUCY_FH_EXCLUSIVE  0x8

// Default size for the memory buffer used by both InStream and OutStream.
#define LUCY_IO_STREAM_BUF_SIZE 1024

#ifdef LUCY_USE_SHORT_NAMES
  #define IO_STREAM_BUF_SIZE          LUCY_IO_STREAM_BUF_SIZE
  #define FH_READ_ONLY                LUCY_FH_READ_ONLY
  #define FH_WRITE_ONLY               LUCY_FH_WRITE_ONLY
  #define FH_CREATE                   LUCY_FH_CREATE
  #define FH_EXCLUSIVE                LUCY_FH_EXCLUSIVE
#endif



#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_STORE_FILEHANDLE */




