/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_CLOWNFISH_CHARBUF
#define H_CLOWNFISH_CHARBUF 1


#ifdef __cplusplus
extern "C" {
#endif

#include "cfish_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_CFISH_CHARBUF
extern uint32_t cfish_CB_IVARS_OFFSET;
typedef struct cfish_CharBufIVARS cfish_CharBufIVARS;
static CFISH_INLINE cfish_CharBufIVARS*
cfish_CB_IVARS(cfish_CharBuf *self) {
   char *ptr = (char*)self + cfish_CB_IVARS_OFFSET;
   return (cfish_CharBufIVARS*)ptr;
}
#ifdef CFISH_USE_SHORT_NAMES
  #define CharBufIVARS cfish_CharBufIVARS
  #define CB_IVARS cfish_CB_IVARS
#endif

struct cfish_CharBuf {
    CFISH_OBJ_HEAD
    cfish_Class* klass;
    char* ptr;
    size_t size;
    size_t cap;
};

#endif /* C_CFISH_CHARBUF */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

CFISH_VISIBLE cfish_CharBuf*
cfish_CB_new(size_t capacity);

CFISH_VISIBLE cfish_CharBuf*
cfish_CB_init(cfish_CharBuf* self, size_t capacity);

CFISH_VISIBLE void
cfish_CB_catf(cfish_CharBuf* self, const char* pattern, ...);

void
CFISH_CB_Cat_Utf8_IMP(cfish_CharBuf* self, const char* utf8, size_t size);

void
CFISH_CB_Cat_Trusted_Utf8_IMP(cfish_CharBuf* self, const char* utf8, size_t size);

void
CFISH_CB_Cat_IMP(cfish_CharBuf* self, cfish_String* string);

void
CFISH_CB_VCatF_IMP(cfish_CharBuf* self, const char* pattern, va_list args);

void
CFISH_CB_Cat_Char_IMP(cfish_CharBuf* self, int32_t code_point);

void
CFISH_CB_Grow_IMP(cfish_CharBuf* self, size_t capacity);

void
CFISH_CB_Clear_IMP(cfish_CharBuf* self);

size_t
CFISH_CB_Get_Size_IMP(cfish_CharBuf* self);

cfish_CharBuf*
CFISH_CB_Clone_IMP(cfish_CharBuf* self);

cfish_String*
CFISH_CB_To_String_IMP(cfish_CharBuf* self);

cfish_String*
CFISH_CB_Yield_String_IMP(cfish_CharBuf* self);

void
CFISH_CB_Destroy_IMP(cfish_CharBuf* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*CFISH_CB_To_Host_t)(cfish_CharBuf* self, void* vcache);

typedef cfish_CharBuf*
(*CFISH_CB_Clone_t)(cfish_CharBuf* self);

typedef bool
(*CFISH_CB_Equals_t)(cfish_CharBuf* self, cfish_Obj* other);

typedef int32_t
(*CFISH_CB_Compare_To_t)(cfish_CharBuf* self, cfish_Obj* other);

typedef void
(*CFISH_CB_Destroy_t)(cfish_CharBuf* self);

typedef cfish_String*
(*CFISH_CB_To_String_t)(cfish_CharBuf* self);

typedef void
(*CFISH_CB_Cat_Utf8_t)(cfish_CharBuf* self, const char* utf8, size_t size);

typedef void
(*CFISH_CB_Cat_Trusted_Utf8_t)(cfish_CharBuf* self, const char* utf8, size_t size);

typedef void
(*CFISH_CB_Cat_t)(cfish_CharBuf* self, cfish_String* string);

typedef void
(*CFISH_CB_VCatF_t)(cfish_CharBuf* self, const char* pattern, va_list args);

typedef void
(*CFISH_CB_Cat_Char_t)(cfish_CharBuf* self, int32_t code_point);

typedef void
(*CFISH_CB_Grow_t)(cfish_CharBuf* self, size_t capacity);

typedef void
(*CFISH_CB_Clear_t)(cfish_CharBuf* self);

typedef size_t
(*CFISH_CB_Get_Size_t)(cfish_CharBuf* self);

typedef cfish_String*
(*CFISH_CB_Yield_String_t)(cfish_CharBuf* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
cfish_CB_get_class(cfish_CharBuf *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
cfish_CB_get_class_name(cfish_CharBuf *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
cfish_CB_is_a(cfish_CharBuf *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern CFISH_VISIBLE uint32_t CFISH_CB_To_Host_OFFSET;
static CFISH_INLINE void*
CFISH_CB_To_Host(cfish_CharBuf* self, void* vcache) {
#ifdef CFP_CFISH
    return CFISH_Obj_To_Host_IMP((cfish_Obj*)self, vcache);
#else
    const CFISH_CB_To_Host_t method = (CFISH_CB_To_Host_t)cfish_obj_method(self, CFISH_CB_To_Host_OFFSET);
    return method(self, vcache);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_CB_Clone_OFFSET;
static CFISH_INLINE cfish_CharBuf*
CFISH_CB_Clone(cfish_CharBuf* self) {
#ifdef CFP_CFISH
    return CFISH_CB_Clone_IMP(self);
#else
    const CFISH_CB_Clone_t method = (CFISH_CB_Clone_t)cfish_obj_method(self, CFISH_CB_Clone_OFFSET);
    return method(self);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_CB_Equals_OFFSET;
static CFISH_INLINE bool
CFISH_CB_Equals(cfish_CharBuf* self, cfish_Obj* other) {
#ifdef CFP_CFISH
    return CFISH_Obj_Equals_IMP((cfish_Obj*)self, other);
#else
    const CFISH_CB_Equals_t method = (CFISH_CB_Equals_t)cfish_obj_method(self, CFISH_CB_Equals_OFFSET);
    return method(self, other);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_CB_Compare_To_OFFSET;
static CFISH_INLINE int32_t
CFISH_CB_Compare_To(cfish_CharBuf* self, cfish_Obj* other) {
#ifdef CFP_CFISH
    return CFISH_Obj_Compare_To_IMP((cfish_Obj*)self, other);
#else
    const CFISH_CB_Compare_To_t method = (CFISH_CB_Compare_To_t)cfish_obj_method(self, CFISH_CB_Compare_To_OFFSET);
    return method(self, other);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_CB_Destroy_OFFSET;
static CFISH_INLINE void
CFISH_CB_Destroy(cfish_CharBuf* self) {
#ifdef CFP_CFISH
    CFISH_CB_Destroy_IMP(self);
#else
    const CFISH_CB_Destroy_t method = (CFISH_CB_Destroy_t)cfish_obj_method(self, CFISH_CB_Destroy_OFFSET);
    method(self);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_CB_To_String_OFFSET;
static CFISH_INLINE cfish_String*
CFISH_CB_To_String(cfish_CharBuf* self) {
#ifdef CFP_CFISH
    return CFISH_CB_To_String_IMP(self);
#else
    const CFISH_CB_To_String_t method = (CFISH_CB_To_String_t)cfish_obj_method(self, CFISH_CB_To_String_OFFSET);
    return method(self);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_CB_Cat_Utf8_OFFSET;
static CFISH_INLINE void
CFISH_CB_Cat_Utf8(cfish_CharBuf* self, const char* utf8, size_t size) {
#ifdef CFP_CFISH
    CFISH_CB_Cat_Utf8_IMP(self, utf8, size);
#else
    const CFISH_CB_Cat_Utf8_t method = (CFISH_CB_Cat_Utf8_t)cfish_obj_method(self, CFISH_CB_Cat_Utf8_OFFSET);
    method(self, utf8, size);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_CB_Cat_Trusted_Utf8_OFFSET;
static CFISH_INLINE void
CFISH_CB_Cat_Trusted_Utf8(cfish_CharBuf* self, const char* utf8, size_t size) {
#ifdef CFP_CFISH
    CFISH_CB_Cat_Trusted_Utf8_IMP(self, utf8, size);
#else
    const CFISH_CB_Cat_Trusted_Utf8_t method = (CFISH_CB_Cat_Trusted_Utf8_t)cfish_obj_method(self, CFISH_CB_Cat_Trusted_Utf8_OFFSET);
    method(self, utf8, size);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_CB_Cat_OFFSET;
static CFISH_INLINE void
CFISH_CB_Cat(cfish_CharBuf* self, cfish_String* string) {
#ifdef CFP_CFISH
    CFISH_CB_Cat_IMP(self, string);
#else
    const CFISH_CB_Cat_t method = (CFISH_CB_Cat_t)cfish_obj_method(self, CFISH_CB_Cat_OFFSET);
    method(self, string);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_CB_VCatF_OFFSET;
static CFISH_INLINE void
CFISH_CB_VCatF(cfish_CharBuf* self, const char* pattern, va_list args) {
#ifdef CFP_CFISH
    CFISH_CB_VCatF_IMP(self, pattern, args);
#else
    const CFISH_CB_VCatF_t method = (CFISH_CB_VCatF_t)cfish_obj_method(self, CFISH_CB_VCatF_OFFSET);
    method(self, pattern, args);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_CB_Cat_Char_OFFSET;
static CFISH_INLINE void
CFISH_CB_Cat_Char(cfish_CharBuf* self, int32_t code_point) {
#ifdef CFP_CFISH
    CFISH_CB_Cat_Char_IMP(self, code_point);
#else
    const CFISH_CB_Cat_Char_t method = (CFISH_CB_Cat_Char_t)cfish_obj_method(self, CFISH_CB_Cat_Char_OFFSET);
    method(self, code_point);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_CB_Grow_OFFSET;
static CFISH_INLINE void
CFISH_CB_Grow(cfish_CharBuf* self, size_t capacity) {
#ifdef CFP_CFISH
    CFISH_CB_Grow_IMP(self, capacity);
#else
    const CFISH_CB_Grow_t method = (CFISH_CB_Grow_t)cfish_obj_method(self, CFISH_CB_Grow_OFFSET);
    method(self, capacity);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_CB_Clear_OFFSET;
static CFISH_INLINE void
CFISH_CB_Clear(cfish_CharBuf* self) {
#ifdef CFP_CFISH
    CFISH_CB_Clear_IMP(self);
#else
    const CFISH_CB_Clear_t method = (CFISH_CB_Clear_t)cfish_obj_method(self, CFISH_CB_Clear_OFFSET);
    method(self);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_CB_Get_Size_OFFSET;
static CFISH_INLINE size_t
CFISH_CB_Get_Size(cfish_CharBuf* self) {
#ifdef CFP_CFISH
    return CFISH_CB_Get_Size_IMP(self);
#else
    const CFISH_CB_Get_Size_t method = (CFISH_CB_Get_Size_t)cfish_obj_method(self, CFISH_CB_Get_Size_OFFSET);
    return method(self);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_CB_Yield_String_OFFSET;
static CFISH_INLINE cfish_String*
CFISH_CB_Yield_String(cfish_CharBuf* self) {
#ifdef CFP_CFISH
    return CFISH_CB_Yield_String_IMP(self);
#else
    const CFISH_CB_Yield_String_t method = (CFISH_CB_Yield_String_t)cfish_obj_method(self, CFISH_CB_Yield_String_OFFSET);
    return method(self);
#endif
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef CFISH_USE_SHORT_NAMES
  #define CharBuf cfish_CharBuf
  #define CHARBUF CFISH_CHARBUF
  #define CB_new cfish_CB_new
  #define CB_init cfish_CB_init
  #define CB_catf cfish_CB_catf
  #define CB_get_class cfish_CB_get_class
  #define CB_get_class_name cfish_CB_get_class_name
  #define CB_is_a cfish_CB_is_a
  #define CB_Cat_Utf8_IMP CFISH_CB_Cat_Utf8_IMP
  #define CB_Cat_Trusted_Utf8_IMP CFISH_CB_Cat_Trusted_Utf8_IMP
  #define CB_Cat_IMP CFISH_CB_Cat_IMP
  #define CB_VCatF_IMP CFISH_CB_VCatF_IMP
  #define CB_Cat_Char_IMP CFISH_CB_Cat_Char_IMP
  #define CB_Grow_IMP CFISH_CB_Grow_IMP
  #define CB_Clear_IMP CFISH_CB_Clear_IMP
  #define CB_Get_Size_IMP CFISH_CB_Get_Size_IMP
  #define CB_Clone_IMP CFISH_CB_Clone_IMP
  #define CB_To_String_IMP CFISH_CB_To_String_IMP
  #define CB_Yield_String_IMP CFISH_CB_Yield_String_IMP
  #define CB_Destroy_IMP CFISH_CB_Destroy_IMP
  #define CB_To_Host CFISH_CB_To_Host
  #define CB_To_Host_t CFISH_CB_To_Host_t
  #define CB_Clone CFISH_CB_Clone
  #define CB_Clone_t CFISH_CB_Clone_t
  #define CB_Equals CFISH_CB_Equals
  #define CB_Equals_t CFISH_CB_Equals_t
  #define CB_Compare_To CFISH_CB_Compare_To
  #define CB_Compare_To_t CFISH_CB_Compare_To_t
  #define CB_Destroy CFISH_CB_Destroy
  #define CB_Destroy_t CFISH_CB_Destroy_t
  #define CB_To_String CFISH_CB_To_String
  #define CB_To_String_t CFISH_CB_To_String_t
  #define CB_Cat_Utf8 CFISH_CB_Cat_Utf8
  #define CB_Cat_Utf8_t CFISH_CB_Cat_Utf8_t
  #define CB_Cat_Trusted_Utf8 CFISH_CB_Cat_Trusted_Utf8
  #define CB_Cat_Trusted_Utf8_t CFISH_CB_Cat_Trusted_Utf8_t
  #define CB_Cat CFISH_CB_Cat
  #define CB_Cat_t CFISH_CB_Cat_t
  #define CB_VCatF CFISH_CB_VCatF
  #define CB_VCatF_t CFISH_CB_VCatF_t
  #define CB_Cat_Char CFISH_CB_Cat_Char
  #define CB_Cat_Char_t CFISH_CB_Cat_Char_t
  #define CB_Grow CFISH_CB_Grow
  #define CB_Grow_t CFISH_CB_Grow_t
  #define CB_Clear CFISH_CB_Clear
  #define CB_Clear_t CFISH_CB_Clear_t
  #define CB_Get_Size CFISH_CB_Get_Size
  #define CB_Get_Size_t CFISH_CB_Get_Size_t
  #define CB_Yield_String CFISH_CB_Yield_String
  #define CB_Yield_String_t CFISH_CB_Yield_String_t
#endif /* CFISH_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_CLOWNFISH_CHARBUF */




