/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_CLOWNFISH_TESTHARNESS_TESTBATCHRUNNER
#define H_CLOWNFISH_TESTHARNESS_TESTBATCHRUNNER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "cfish_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_CFISH_TESTBATCHRUNNER
extern uint32_t cfish_TestBatchRunner_IVARS_OFFSET;
typedef struct cfish_TestBatchRunnerIVARS cfish_TestBatchRunnerIVARS;
static CFISH_INLINE cfish_TestBatchRunnerIVARS*
cfish_TestBatchRunner_IVARS(cfish_TestBatchRunner *self) {
   char *ptr = (char*)self + cfish_TestBatchRunner_IVARS_OFFSET;
   return (cfish_TestBatchRunnerIVARS*)ptr;
}
#ifdef CFISH_USE_SHORT_NAMES
  #define TestBatchRunnerIVARS cfish_TestBatchRunnerIVARS
  #define TestBatchRunner_IVARS cfish_TestBatchRunner_IVARS
#endif

struct cfish_TestBatchRunner {
    CFISH_OBJ_HEAD
    cfish_Class* klass;
    cfish_TestFormatter* formatter;
    uint32_t test_num;
    uint32_t num_planned;
    uint32_t num_passed;
    uint32_t num_failed;
    uint32_t num_skipped;
};

#endif /* C_CFISH_TESTBATCHRUNNER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

CFISH_VISIBLE cfish_TestBatchRunner*
cfish_TestBatchRunner_new(cfish_TestFormatter* formatter);

CFISH_VISIBLE cfish_TestBatchRunner*
cfish_TestBatchRunner_init(cfish_TestBatchRunner* self, cfish_TestFormatter* formatter);

CFISH_VISIBLE bool
cfish_TestBatchRunner_test_true(cfish_TestBatchRunner* self, bool condition, const char* pattern, ...);

CFISH_VISIBLE bool
cfish_TestBatchRunner_test_false(cfish_TestBatchRunner* self, bool condition, const char* pattern, ...);

CFISH_VISIBLE bool
cfish_TestBatchRunner_test_int_equals(cfish_TestBatchRunner* self, int64_t got, int64_t expected, const char* pattern, ...);

CFISH_VISIBLE bool
cfish_TestBatchRunner_test_uint_equals(cfish_TestBatchRunner* self, uint64_t got, uint64_t expected, const char* pattern, ...);

CFISH_VISIBLE bool
cfish_TestBatchRunner_test_float_equals(cfish_TestBatchRunner* self, double got, double expected, const char* pattern, ...);

CFISH_VISIBLE bool
cfish_TestBatchRunner_test_string_equals(cfish_TestBatchRunner* self, const char* got, const char* expected, const char* pattern, ...);

CFISH_VISIBLE bool
cfish_TestBatchRunner_pass(cfish_TestBatchRunner* self, const char* pattern, ...);

CFISH_VISIBLE bool
cfish_TestBatchRunner_fail(cfish_TestBatchRunner* self, const char* pattern, ...);

CFISH_VISIBLE void
cfish_TestBatchRunner_skip(cfish_TestBatchRunner* self, uint32_t num, const char* pattern, ...);

void
CFISH_TestBatchRunner_Destroy_IMP(cfish_TestBatchRunner* self);

bool
CFISH_TestBatchRunner_Run_Batch_IMP(cfish_TestBatchRunner* self, cfish_TestBatch* batch);

void
CFISH_TestBatchRunner_Plan_IMP(cfish_TestBatchRunner* self, cfish_TestBatch* batch, uint32_t num_planned);

uint32_t
CFISH_TestBatchRunner_Get_Num_Planned_IMP(cfish_TestBatchRunner* self);

uint32_t
CFISH_TestBatchRunner_Get_Num_Tests_IMP(cfish_TestBatchRunner* self);

uint32_t
CFISH_TestBatchRunner_Get_Num_Failed_IMP(cfish_TestBatchRunner* self);

bool
CFISH_TestBatchRunner_VTest_True_IMP(cfish_TestBatchRunner* self, bool condition, const char* pattern, va_list args);

bool
CFISH_TestBatchRunner_VTest_False_IMP(cfish_TestBatchRunner* self, bool condition, const char* pattern, va_list args);

bool
CFISH_TestBatchRunner_VTest_Int_Equals_IMP(cfish_TestBatchRunner* self, int64_t got, int64_t expected, const char* pattern, va_list args);

bool
CFISH_TestBatchRunner_VTest_UInt_Equals_IMP(cfish_TestBatchRunner* self, uint64_t got, uint64_t expected, const char* pattern, va_list args);

bool
CFISH_TestBatchRunner_VTest_Float_Equals_IMP(cfish_TestBatchRunner* self, double got, double expected, const char* pattern, va_list args);

bool
CFISH_TestBatchRunner_VTest_String_Equals_IMP(cfish_TestBatchRunner* self, const char* got, const char* expected, const char* pattern, va_list args);

bool
CFISH_TestBatchRunner_VPass_IMP(cfish_TestBatchRunner* self, const char* pattern, va_list args);

bool
CFISH_TestBatchRunner_VFail_IMP(cfish_TestBatchRunner* self, const char* pattern, va_list args);

void
CFISH_TestBatchRunner_VSkip_IMP(cfish_TestBatchRunner* self, uint32_t num, const char* pattern, va_list args);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*CFISH_TestBatchRunner_To_Host_t)(cfish_TestBatchRunner* self, void* vcache);

typedef cfish_Obj*
(*CFISH_TestBatchRunner_Clone_t)(cfish_TestBatchRunner* self);

typedef bool
(*CFISH_TestBatchRunner_Equals_t)(cfish_TestBatchRunner* self, cfish_Obj* other);

typedef int32_t
(*CFISH_TestBatchRunner_Compare_To_t)(cfish_TestBatchRunner* self, cfish_Obj* other);

typedef void
(*CFISH_TestBatchRunner_Destroy_t)(cfish_TestBatchRunner* self);

typedef cfish_String*
(*CFISH_TestBatchRunner_To_String_t)(cfish_TestBatchRunner* self);

typedef bool
(*CFISH_TestBatchRunner_Run_Batch_t)(cfish_TestBatchRunner* self, cfish_TestBatch* batch);

typedef void
(*CFISH_TestBatchRunner_Plan_t)(cfish_TestBatchRunner* self, cfish_TestBatch* batch, uint32_t num_planned);

typedef uint32_t
(*CFISH_TestBatchRunner_Get_Num_Planned_t)(cfish_TestBatchRunner* self);

typedef uint32_t
(*CFISH_TestBatchRunner_Get_Num_Tests_t)(cfish_TestBatchRunner* self);

typedef uint32_t
(*CFISH_TestBatchRunner_Get_Num_Failed_t)(cfish_TestBatchRunner* self);

typedef bool
(*CFISH_TestBatchRunner_VTest_True_t)(cfish_TestBatchRunner* self, bool condition, const char* pattern, va_list args);

typedef bool
(*CFISH_TestBatchRunner_VTest_False_t)(cfish_TestBatchRunner* self, bool condition, const char* pattern, va_list args);

typedef bool
(*CFISH_TestBatchRunner_VTest_Int_Equals_t)(cfish_TestBatchRunner* self, int64_t got, int64_t expected, const char* pattern, va_list args);

typedef bool
(*CFISH_TestBatchRunner_VTest_UInt_Equals_t)(cfish_TestBatchRunner* self, uint64_t got, uint64_t expected, const char* pattern, va_list args);

typedef bool
(*CFISH_TestBatchRunner_VTest_Float_Equals_t)(cfish_TestBatchRunner* self, double got, double expected, const char* pattern, va_list args);

typedef bool
(*CFISH_TestBatchRunner_VTest_String_Equals_t)(cfish_TestBatchRunner* self, const char* got, const char* expected, const char* pattern, va_list args);

typedef bool
(*CFISH_TestBatchRunner_VPass_t)(cfish_TestBatchRunner* self, const char* pattern, va_list args);

typedef bool
(*CFISH_TestBatchRunner_VFail_t)(cfish_TestBatchRunner* self, const char* pattern, va_list args);

typedef void
(*CFISH_TestBatchRunner_VSkip_t)(cfish_TestBatchRunner* self, uint32_t num, const char* pattern, va_list args);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
cfish_TestBatchRunner_get_class(cfish_TestBatchRunner *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
cfish_TestBatchRunner_get_class_name(cfish_TestBatchRunner *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
cfish_TestBatchRunner_is_a(cfish_TestBatchRunner *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_To_Host_OFFSET;
static CFISH_INLINE void*
CFISH_TestBatchRunner_To_Host(cfish_TestBatchRunner* self, void* vcache) {
    const CFISH_TestBatchRunner_To_Host_t method = (CFISH_TestBatchRunner_To_Host_t)cfish_obj_method(self, CFISH_TestBatchRunner_To_Host_OFFSET);
    return method(self, vcache);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
CFISH_TestBatchRunner_Clone(cfish_TestBatchRunner* self) {
    const CFISH_TestBatchRunner_Clone_t method = (CFISH_TestBatchRunner_Clone_t)cfish_obj_method(self, CFISH_TestBatchRunner_Clone_OFFSET);
    return method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_Equals_OFFSET;
static CFISH_INLINE bool
CFISH_TestBatchRunner_Equals(cfish_TestBatchRunner* self, cfish_Obj* other) {
    const CFISH_TestBatchRunner_Equals_t method = (CFISH_TestBatchRunner_Equals_t)cfish_obj_method(self, CFISH_TestBatchRunner_Equals_OFFSET);
    return method(self, other);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_Compare_To_OFFSET;
static CFISH_INLINE int32_t
CFISH_TestBatchRunner_Compare_To(cfish_TestBatchRunner* self, cfish_Obj* other) {
    const CFISH_TestBatchRunner_Compare_To_t method = (CFISH_TestBatchRunner_Compare_To_t)cfish_obj_method(self, CFISH_TestBatchRunner_Compare_To_OFFSET);
    return method(self, other);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_Destroy_OFFSET;
static CFISH_INLINE void
CFISH_TestBatchRunner_Destroy(cfish_TestBatchRunner* self) {
    const CFISH_TestBatchRunner_Destroy_t method = (CFISH_TestBatchRunner_Destroy_t)cfish_obj_method(self, CFISH_TestBatchRunner_Destroy_OFFSET);
    method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_To_String_OFFSET;
static CFISH_INLINE cfish_String*
CFISH_TestBatchRunner_To_String(cfish_TestBatchRunner* self) {
    const CFISH_TestBatchRunner_To_String_t method = (CFISH_TestBatchRunner_To_String_t)cfish_obj_method(self, CFISH_TestBatchRunner_To_String_OFFSET);
    return method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_Run_Batch_OFFSET;
static CFISH_INLINE bool
CFISH_TestBatchRunner_Run_Batch(cfish_TestBatchRunner* self, cfish_TestBatch* batch) {
    const CFISH_TestBatchRunner_Run_Batch_t method = (CFISH_TestBatchRunner_Run_Batch_t)cfish_obj_method(self, CFISH_TestBatchRunner_Run_Batch_OFFSET);
    return method(self, batch);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_Plan_OFFSET;
static CFISH_INLINE void
CFISH_TestBatchRunner_Plan(cfish_TestBatchRunner* self, cfish_TestBatch* batch, uint32_t num_planned) {
    const CFISH_TestBatchRunner_Plan_t method = (CFISH_TestBatchRunner_Plan_t)cfish_obj_method(self, CFISH_TestBatchRunner_Plan_OFFSET);
    method(self, batch, num_planned);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_Get_Num_Planned_OFFSET;
static CFISH_INLINE uint32_t
CFISH_TestBatchRunner_Get_Num_Planned(cfish_TestBatchRunner* self) {
    const CFISH_TestBatchRunner_Get_Num_Planned_t method = (CFISH_TestBatchRunner_Get_Num_Planned_t)cfish_obj_method(self, CFISH_TestBatchRunner_Get_Num_Planned_OFFSET);
    return method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_Get_Num_Tests_OFFSET;
static CFISH_INLINE uint32_t
CFISH_TestBatchRunner_Get_Num_Tests(cfish_TestBatchRunner* self) {
    const CFISH_TestBatchRunner_Get_Num_Tests_t method = (CFISH_TestBatchRunner_Get_Num_Tests_t)cfish_obj_method(self, CFISH_TestBatchRunner_Get_Num_Tests_OFFSET);
    return method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_Get_Num_Failed_OFFSET;
static CFISH_INLINE uint32_t
CFISH_TestBatchRunner_Get_Num_Failed(cfish_TestBatchRunner* self) {
    const CFISH_TestBatchRunner_Get_Num_Failed_t method = (CFISH_TestBatchRunner_Get_Num_Failed_t)cfish_obj_method(self, CFISH_TestBatchRunner_Get_Num_Failed_OFFSET);
    return method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_VTest_True_OFFSET;
static CFISH_INLINE bool
CFISH_TestBatchRunner_VTest_True(cfish_TestBatchRunner* self, bool condition, const char* pattern, va_list args) {
    const CFISH_TestBatchRunner_VTest_True_t method = (CFISH_TestBatchRunner_VTest_True_t)cfish_obj_method(self, CFISH_TestBatchRunner_VTest_True_OFFSET);
    return method(self, condition, pattern, args);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_VTest_False_OFFSET;
static CFISH_INLINE bool
CFISH_TestBatchRunner_VTest_False(cfish_TestBatchRunner* self, bool condition, const char* pattern, va_list args) {
    const CFISH_TestBatchRunner_VTest_False_t method = (CFISH_TestBatchRunner_VTest_False_t)cfish_obj_method(self, CFISH_TestBatchRunner_VTest_False_OFFSET);
    return method(self, condition, pattern, args);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_VTest_Int_Equals_OFFSET;
static CFISH_INLINE bool
CFISH_TestBatchRunner_VTest_Int_Equals(cfish_TestBatchRunner* self, int64_t got, int64_t expected, const char* pattern, va_list args) {
    const CFISH_TestBatchRunner_VTest_Int_Equals_t method = (CFISH_TestBatchRunner_VTest_Int_Equals_t)cfish_obj_method(self, CFISH_TestBatchRunner_VTest_Int_Equals_OFFSET);
    return method(self, got, expected, pattern, args);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_VTest_UInt_Equals_OFFSET;
static CFISH_INLINE bool
CFISH_TestBatchRunner_VTest_UInt_Equals(cfish_TestBatchRunner* self, uint64_t got, uint64_t expected, const char* pattern, va_list args) {
    const CFISH_TestBatchRunner_VTest_UInt_Equals_t method = (CFISH_TestBatchRunner_VTest_UInt_Equals_t)cfish_obj_method(self, CFISH_TestBatchRunner_VTest_UInt_Equals_OFFSET);
    return method(self, got, expected, pattern, args);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_VTest_Float_Equals_OFFSET;
static CFISH_INLINE bool
CFISH_TestBatchRunner_VTest_Float_Equals(cfish_TestBatchRunner* self, double got, double expected, const char* pattern, va_list args) {
    const CFISH_TestBatchRunner_VTest_Float_Equals_t method = (CFISH_TestBatchRunner_VTest_Float_Equals_t)cfish_obj_method(self, CFISH_TestBatchRunner_VTest_Float_Equals_OFFSET);
    return method(self, got, expected, pattern, args);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_VTest_String_Equals_OFFSET;
static CFISH_INLINE bool
CFISH_TestBatchRunner_VTest_String_Equals(cfish_TestBatchRunner* self, const char* got, const char* expected, const char* pattern, va_list args) {
    const CFISH_TestBatchRunner_VTest_String_Equals_t method = (CFISH_TestBatchRunner_VTest_String_Equals_t)cfish_obj_method(self, CFISH_TestBatchRunner_VTest_String_Equals_OFFSET);
    return method(self, got, expected, pattern, args);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_VPass_OFFSET;
static CFISH_INLINE bool
CFISH_TestBatchRunner_VPass(cfish_TestBatchRunner* self, const char* pattern, va_list args) {
    const CFISH_TestBatchRunner_VPass_t method = (CFISH_TestBatchRunner_VPass_t)cfish_obj_method(self, CFISH_TestBatchRunner_VPass_OFFSET);
    return method(self, pattern, args);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_VFail_OFFSET;
static CFISH_INLINE bool
CFISH_TestBatchRunner_VFail(cfish_TestBatchRunner* self, const char* pattern, va_list args) {
    const CFISH_TestBatchRunner_VFail_t method = (CFISH_TestBatchRunner_VFail_t)cfish_obj_method(self, CFISH_TestBatchRunner_VFail_OFFSET);
    return method(self, pattern, args);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatchRunner_VSkip_OFFSET;
static CFISH_INLINE void
CFISH_TestBatchRunner_VSkip(cfish_TestBatchRunner* self, uint32_t num, const char* pattern, va_list args) {
    const CFISH_TestBatchRunner_VSkip_t method = (CFISH_TestBatchRunner_VSkip_t)cfish_obj_method(self, CFISH_TestBatchRunner_VSkip_OFFSET);
    method(self, num, pattern, args);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Cfish_TestBatchRunner_Run_Batch_OVERRIDE NULL
#define Cfish_TestBatchRunner_Plan_OVERRIDE NULL
#define Cfish_TestBatchRunner_Get_Num_Planned_OVERRIDE NULL
#define Cfish_TestBatchRunner_Get_Num_Tests_OVERRIDE NULL
#define Cfish_TestBatchRunner_Get_Num_Failed_OVERRIDE NULL
#define Cfish_TestBatchRunner_VTest_True_OVERRIDE NULL
#define Cfish_TestBatchRunner_VTest_False_OVERRIDE NULL
#define Cfish_TestBatchRunner_VTest_Int_Equals_OVERRIDE NULL
#define Cfish_TestBatchRunner_VTest_UInt_Equals_OVERRIDE NULL
#define Cfish_TestBatchRunner_VTest_Float_Equals_OVERRIDE NULL
#define Cfish_TestBatchRunner_VTest_String_Equals_OVERRIDE NULL
#define Cfish_TestBatchRunner_VPass_OVERRIDE NULL
#define Cfish_TestBatchRunner_VFail_OVERRIDE NULL
#define Cfish_TestBatchRunner_VSkip_OVERRIDE NULL
#else
bool
Cfish_TestBatchRunner_Run_Batch_OVERRIDE(cfish_TestBatchRunner* self, cfish_TestBatch* batch);
void
Cfish_TestBatchRunner_Plan_OVERRIDE(cfish_TestBatchRunner* self, cfish_TestBatch* batch, uint32_t num_planned);
uint32_t
Cfish_TestBatchRunner_Get_Num_Planned_OVERRIDE(cfish_TestBatchRunner* self);
uint32_t
Cfish_TestBatchRunner_Get_Num_Tests_OVERRIDE(cfish_TestBatchRunner* self);
uint32_t
Cfish_TestBatchRunner_Get_Num_Failed_OVERRIDE(cfish_TestBatchRunner* self);
bool
Cfish_TestBatchRunner_VTest_True_OVERRIDE(cfish_TestBatchRunner* self, bool condition, const char* pattern, va_list args);
bool
Cfish_TestBatchRunner_VTest_False_OVERRIDE(cfish_TestBatchRunner* self, bool condition, const char* pattern, va_list args);
bool
Cfish_TestBatchRunner_VTest_Int_Equals_OVERRIDE(cfish_TestBatchRunner* self, int64_t got, int64_t expected, const char* pattern, va_list args);
bool
Cfish_TestBatchRunner_VTest_UInt_Equals_OVERRIDE(cfish_TestBatchRunner* self, uint64_t got, uint64_t expected, const char* pattern, va_list args);
bool
Cfish_TestBatchRunner_VTest_Float_Equals_OVERRIDE(cfish_TestBatchRunner* self, double got, double expected, const char* pattern, va_list args);
bool
Cfish_TestBatchRunner_VTest_String_Equals_OVERRIDE(cfish_TestBatchRunner* self, const char* got, const char* expected, const char* pattern, va_list args);
bool
Cfish_TestBatchRunner_VPass_OVERRIDE(cfish_TestBatchRunner* self, const char* pattern, va_list args);
bool
Cfish_TestBatchRunner_VFail_OVERRIDE(cfish_TestBatchRunner* self, const char* pattern, va_list args);
void
Cfish_TestBatchRunner_VSkip_OVERRIDE(cfish_TestBatchRunner* self, uint32_t num, const char* pattern, va_list args);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef CFISH_USE_SHORT_NAMES
  #define TestBatchRunner cfish_TestBatchRunner
  #define TESTBATCHRUNNER CFISH_TESTBATCHRUNNER
  #define TestBatchRunner_new cfish_TestBatchRunner_new
  #define TestBatchRunner_init cfish_TestBatchRunner_init
  #define TestBatchRunner_test_true cfish_TestBatchRunner_test_true
  #define TestBatchRunner_test_false cfish_TestBatchRunner_test_false
  #define TestBatchRunner_test_int_equals cfish_TestBatchRunner_test_int_equals
  #define TestBatchRunner_test_uint_equals cfish_TestBatchRunner_test_uint_equals
  #define TestBatchRunner_test_float_equals cfish_TestBatchRunner_test_float_equals
  #define TestBatchRunner_test_string_equals cfish_TestBatchRunner_test_string_equals
  #define TestBatchRunner_pass cfish_TestBatchRunner_pass
  #define TestBatchRunner_fail cfish_TestBatchRunner_fail
  #define TestBatchRunner_skip cfish_TestBatchRunner_skip
  #define TestBatchRunner_get_class cfish_TestBatchRunner_get_class
  #define TestBatchRunner_get_class_name cfish_TestBatchRunner_get_class_name
  #define TestBatchRunner_is_a cfish_TestBatchRunner_is_a
  #define TestBatchRunner_Destroy_IMP CFISH_TestBatchRunner_Destroy_IMP
  #define TestBatchRunner_Run_Batch_IMP CFISH_TestBatchRunner_Run_Batch_IMP
  #define TestBatchRunner_Plan_IMP CFISH_TestBatchRunner_Plan_IMP
  #define TestBatchRunner_Get_Num_Planned_IMP CFISH_TestBatchRunner_Get_Num_Planned_IMP
  #define TestBatchRunner_Get_Num_Tests_IMP CFISH_TestBatchRunner_Get_Num_Tests_IMP
  #define TestBatchRunner_Get_Num_Failed_IMP CFISH_TestBatchRunner_Get_Num_Failed_IMP
  #define TestBatchRunner_VTest_True_IMP CFISH_TestBatchRunner_VTest_True_IMP
  #define TestBatchRunner_VTest_False_IMP CFISH_TestBatchRunner_VTest_False_IMP
  #define TestBatchRunner_VTest_Int_Equals_IMP CFISH_TestBatchRunner_VTest_Int_Equals_IMP
  #define TestBatchRunner_VTest_UInt_Equals_IMP CFISH_TestBatchRunner_VTest_UInt_Equals_IMP
  #define TestBatchRunner_VTest_Float_Equals_IMP CFISH_TestBatchRunner_VTest_Float_Equals_IMP
  #define TestBatchRunner_VTest_String_Equals_IMP CFISH_TestBatchRunner_VTest_String_Equals_IMP
  #define TestBatchRunner_VPass_IMP CFISH_TestBatchRunner_VPass_IMP
  #define TestBatchRunner_VFail_IMP CFISH_TestBatchRunner_VFail_IMP
  #define TestBatchRunner_VSkip_IMP CFISH_TestBatchRunner_VSkip_IMP
  #define TestBatchRunner_To_Host CFISH_TestBatchRunner_To_Host
  #define TestBatchRunner_To_Host_t CFISH_TestBatchRunner_To_Host_t
  #define TestBatchRunner_Clone CFISH_TestBatchRunner_Clone
  #define TestBatchRunner_Clone_t CFISH_TestBatchRunner_Clone_t
  #define TestBatchRunner_Equals CFISH_TestBatchRunner_Equals
  #define TestBatchRunner_Equals_t CFISH_TestBatchRunner_Equals_t
  #define TestBatchRunner_Compare_To CFISH_TestBatchRunner_Compare_To
  #define TestBatchRunner_Compare_To_t CFISH_TestBatchRunner_Compare_To_t
  #define TestBatchRunner_Destroy CFISH_TestBatchRunner_Destroy
  #define TestBatchRunner_Destroy_t CFISH_TestBatchRunner_Destroy_t
  #define TestBatchRunner_To_String CFISH_TestBatchRunner_To_String
  #define TestBatchRunner_To_String_t CFISH_TestBatchRunner_To_String_t
  #define TestBatchRunner_Run_Batch CFISH_TestBatchRunner_Run_Batch
  #define TestBatchRunner_Run_Batch_t CFISH_TestBatchRunner_Run_Batch_t
  #define TestBatchRunner_Plan CFISH_TestBatchRunner_Plan
  #define TestBatchRunner_Plan_t CFISH_TestBatchRunner_Plan_t
  #define TestBatchRunner_Get_Num_Planned CFISH_TestBatchRunner_Get_Num_Planned
  #define TestBatchRunner_Get_Num_Planned_t CFISH_TestBatchRunner_Get_Num_Planned_t
  #define TestBatchRunner_Get_Num_Tests CFISH_TestBatchRunner_Get_Num_Tests
  #define TestBatchRunner_Get_Num_Tests_t CFISH_TestBatchRunner_Get_Num_Tests_t
  #define TestBatchRunner_Get_Num_Failed CFISH_TestBatchRunner_Get_Num_Failed
  #define TestBatchRunner_Get_Num_Failed_t CFISH_TestBatchRunner_Get_Num_Failed_t
  #define TestBatchRunner_VTest_True CFISH_TestBatchRunner_VTest_True
  #define TestBatchRunner_VTest_True_t CFISH_TestBatchRunner_VTest_True_t
  #define TestBatchRunner_VTest_False CFISH_TestBatchRunner_VTest_False
  #define TestBatchRunner_VTest_False_t CFISH_TestBatchRunner_VTest_False_t
  #define TestBatchRunner_VTest_Int_Equals CFISH_TestBatchRunner_VTest_Int_Equals
  #define TestBatchRunner_VTest_Int_Equals_t CFISH_TestBatchRunner_VTest_Int_Equals_t
  #define TestBatchRunner_VTest_UInt_Equals CFISH_TestBatchRunner_VTest_UInt_Equals
  #define TestBatchRunner_VTest_UInt_Equals_t CFISH_TestBatchRunner_VTest_UInt_Equals_t
  #define TestBatchRunner_VTest_Float_Equals CFISH_TestBatchRunner_VTest_Float_Equals
  #define TestBatchRunner_VTest_Float_Equals_t CFISH_TestBatchRunner_VTest_Float_Equals_t
  #define TestBatchRunner_VTest_String_Equals CFISH_TestBatchRunner_VTest_String_Equals
  #define TestBatchRunner_VTest_String_Equals_t CFISH_TestBatchRunner_VTest_String_Equals_t
  #define TestBatchRunner_VPass CFISH_TestBatchRunner_VPass
  #define TestBatchRunner_VPass_t CFISH_TestBatchRunner_VPass_t
  #define TestBatchRunner_VFail CFISH_TestBatchRunner_VFail
  #define TestBatchRunner_VFail_t CFISH_TestBatchRunner_VFail_t
  #define TestBatchRunner_VSkip CFISH_TestBatchRunner_VSkip
  #define TestBatchRunner_VSkip_t CFISH_TestBatchRunner_VSkip_t
#endif /* CFISH_USE_SHORT_NAMES */



#ifdef CFISH_USE_SHORT_NAMES
  #define TEST_TRUE            cfish_TestBatchRunner_test_true
  #define TEST_FALSE           cfish_TestBatchRunner_test_false
  #define TEST_INT_EQ          cfish_TestBatchRunner_test_int_equals
  #define TEST_UINT_EQ         cfish_TestBatchRunner_test_uint_equals
  #define TEST_FLOAT_EQ        cfish_TestBatchRunner_test_float_equals
  #define TEST_STR_EQ          cfish_TestBatchRunner_test_string_equals
  #define PASS                 cfish_TestBatchRunner_pass
  #define FAIL                 cfish_TestBatchRunner_fail
  #define SKIP                 cfish_TestBatchRunner_skip
#endif



#ifdef __cplusplus
}
#endif

#endif /* H_CLOWNFISH_TESTHARNESS_TESTBATCHRUNNER */




