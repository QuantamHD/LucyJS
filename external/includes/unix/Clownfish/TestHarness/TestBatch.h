/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_CLOWNFISH_TESTHARNESS_TESTBATCH
#define H_CLOWNFISH_TESTHARNESS_TESTBATCH 1


#ifdef __cplusplus
extern "C" {
#endif

#include "cfish_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_CFISH_TESTBATCH
extern uint32_t cfish_TestBatch_IVARS_OFFSET;
typedef struct cfish_TestBatchIVARS cfish_TestBatchIVARS;
static CFISH_INLINE cfish_TestBatchIVARS*
cfish_TestBatch_IVARS(cfish_TestBatch *self) {
   char *ptr = (char*)self + cfish_TestBatch_IVARS_OFFSET;
   return (cfish_TestBatchIVARS*)ptr;
}
#ifdef CFISH_USE_SHORT_NAMES
  #define TestBatchIVARS cfish_TestBatchIVARS
  #define TestBatch_IVARS cfish_TestBatch_IVARS
#endif

struct cfish_TestBatch {
    CFISH_OBJ_HEAD
    cfish_Class* klass;
};

#endif /* C_CFISH_TESTBATCH */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

void
CFISH_TestBatch_Run_IMP(cfish_TestBatch* self, cfish_TestBatchRunner* runner);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*CFISH_TestBatch_To_Host_t)(cfish_TestBatch* self, void* vcache);

typedef cfish_Obj*
(*CFISH_TestBatch_Clone_t)(cfish_TestBatch* self);

typedef bool
(*CFISH_TestBatch_Equals_t)(cfish_TestBatch* self, cfish_Obj* other);

typedef int32_t
(*CFISH_TestBatch_Compare_To_t)(cfish_TestBatch* self, cfish_Obj* other);

typedef void
(*CFISH_TestBatch_Destroy_t)(cfish_TestBatch* self);

typedef cfish_String*
(*CFISH_TestBatch_To_String_t)(cfish_TestBatch* self);

typedef void
(*CFISH_TestBatch_Run_t)(cfish_TestBatch* self, cfish_TestBatchRunner* runner);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
cfish_TestBatch_get_class(cfish_TestBatch *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
cfish_TestBatch_get_class_name(cfish_TestBatch *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
cfish_TestBatch_is_a(cfish_TestBatch *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern CFISH_VISIBLE uint32_t CFISH_TestBatch_To_Host_OFFSET;
static CFISH_INLINE void*
CFISH_TestBatch_To_Host(cfish_TestBatch* self, void* vcache) {
    const CFISH_TestBatch_To_Host_t method = (CFISH_TestBatch_To_Host_t)cfish_obj_method(self, CFISH_TestBatch_To_Host_OFFSET);
    return method(self, vcache);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatch_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
CFISH_TestBatch_Clone(cfish_TestBatch* self) {
    const CFISH_TestBatch_Clone_t method = (CFISH_TestBatch_Clone_t)cfish_obj_method(self, CFISH_TestBatch_Clone_OFFSET);
    return method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatch_Equals_OFFSET;
static CFISH_INLINE bool
CFISH_TestBatch_Equals(cfish_TestBatch* self, cfish_Obj* other) {
    const CFISH_TestBatch_Equals_t method = (CFISH_TestBatch_Equals_t)cfish_obj_method(self, CFISH_TestBatch_Equals_OFFSET);
    return method(self, other);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatch_Compare_To_OFFSET;
static CFISH_INLINE int32_t
CFISH_TestBatch_Compare_To(cfish_TestBatch* self, cfish_Obj* other) {
    const CFISH_TestBatch_Compare_To_t method = (CFISH_TestBatch_Compare_To_t)cfish_obj_method(self, CFISH_TestBatch_Compare_To_OFFSET);
    return method(self, other);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatch_Destroy_OFFSET;
static CFISH_INLINE void
CFISH_TestBatch_Destroy(cfish_TestBatch* self) {
    const CFISH_TestBatch_Destroy_t method = (CFISH_TestBatch_Destroy_t)cfish_obj_method(self, CFISH_TestBatch_Destroy_OFFSET);
    method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatch_To_String_OFFSET;
static CFISH_INLINE cfish_String*
CFISH_TestBatch_To_String(cfish_TestBatch* self) {
    const CFISH_TestBatch_To_String_t method = (CFISH_TestBatch_To_String_t)cfish_obj_method(self, CFISH_TestBatch_To_String_OFFSET);
    return method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_TestBatch_Run_OFFSET;
static CFISH_INLINE void
CFISH_TestBatch_Run(cfish_TestBatch* self, cfish_TestBatchRunner* runner) {
    const CFISH_TestBatch_Run_t method = (CFISH_TestBatch_Run_t)cfish_obj_method(self, CFISH_TestBatch_Run_OFFSET);
    method(self, runner);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Cfish_TestBatch_Run_OVERRIDE NULL
#else
void
Cfish_TestBatch_Run_OVERRIDE(cfish_TestBatch* self, cfish_TestBatchRunner* runner);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef CFISH_USE_SHORT_NAMES
  #define TestBatch cfish_TestBatch
  #define TESTBATCH CFISH_TESTBATCH
  #define TestBatch_get_class cfish_TestBatch_get_class
  #define TestBatch_get_class_name cfish_TestBatch_get_class_name
  #define TestBatch_is_a cfish_TestBatch_is_a
  #define TestBatch_Run_IMP CFISH_TestBatch_Run_IMP
  #define TestBatch_To_Host CFISH_TestBatch_To_Host
  #define TestBatch_To_Host_t CFISH_TestBatch_To_Host_t
  #define TestBatch_Clone CFISH_TestBatch_Clone
  #define TestBatch_Clone_t CFISH_TestBatch_Clone_t
  #define TestBatch_Equals CFISH_TestBatch_Equals
  #define TestBatch_Equals_t CFISH_TestBatch_Equals_t
  #define TestBatch_Compare_To CFISH_TestBatch_Compare_To
  #define TestBatch_Compare_To_t CFISH_TestBatch_Compare_To_t
  #define TestBatch_Destroy CFISH_TestBatch_Destroy
  #define TestBatch_Destroy_t CFISH_TestBatch_Destroy_t
  #define TestBatch_To_String CFISH_TestBatch_To_String
  #define TestBatch_To_String_t CFISH_TestBatch_To_String_t
  #define TestBatch_Run CFISH_TestBatch_Run
  #define TestBatch_Run_t CFISH_TestBatch_Run_t
#endif /* CFISH_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_CLOWNFISH_TESTHARNESS_TESTBATCH */




