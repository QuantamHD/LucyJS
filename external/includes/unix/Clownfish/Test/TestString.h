/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_CLOWNFISH_TEST_TESTSTRING
#define H_CLOWNFISH_TEST_TESTSTRING 1


#ifdef __cplusplus
extern "C" {
#endif

#include "testcfish_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/TestHarness/TestBatch.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_TESTCFISH_TESTSTRING
extern uint32_t testcfish_TestStr_IVARS_OFFSET;
typedef struct testcfish_TestStringIVARS testcfish_TestStringIVARS;
static CFISH_INLINE testcfish_TestStringIVARS*
testcfish_TestStr_IVARS(testcfish_TestString *self) {
   char *ptr = (char*)self + testcfish_TestStr_IVARS_OFFSET;
   return (testcfish_TestStringIVARS*)ptr;
}
#ifdef TESTCFISH_USE_SHORT_NAMES
  #define TestStringIVARS testcfish_TestStringIVARS
  #define TestStr_IVARS testcfish_TestStr_IVARS
#endif


#endif /* C_TESTCFISH_TESTSTRING */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

TESTCFISH_VISIBLE testcfish_TestString*
testcfish_TestStr_new(void);

void
TESTCFISH_TestStr_Run_IMP(testcfish_TestString* self, cfish_TestBatchRunner* runner);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*TESTCFISH_TestStr_To_Host_t)(testcfish_TestString* self, void* vcache);

typedef cfish_Obj*
(*TESTCFISH_TestStr_Clone_t)(testcfish_TestString* self);

typedef bool
(*TESTCFISH_TestStr_Equals_t)(testcfish_TestString* self, cfish_Obj* other);

typedef int32_t
(*TESTCFISH_TestStr_Compare_To_t)(testcfish_TestString* self, cfish_Obj* other);

typedef void
(*TESTCFISH_TestStr_Destroy_t)(testcfish_TestString* self);

typedef cfish_String*
(*TESTCFISH_TestStr_To_String_t)(testcfish_TestString* self);

typedef void
(*TESTCFISH_TestStr_Run_t)(testcfish_TestString* self, cfish_TestBatchRunner* runner);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
testcfish_TestStr_get_class(testcfish_TestString *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
testcfish_TestStr_get_class_name(testcfish_TestString *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
testcfish_TestStr_is_a(testcfish_TestString *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestStr_To_Host_OFFSET;
static CFISH_INLINE void*
TESTCFISH_TestStr_To_Host(testcfish_TestString* self, void* vcache) {
    const TESTCFISH_TestStr_To_Host_t method = (TESTCFISH_TestStr_To_Host_t)cfish_obj_method(self, TESTCFISH_TestStr_To_Host_OFFSET);
    return method(self, vcache);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestStr_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTCFISH_TestStr_Clone(testcfish_TestString* self) {
    const TESTCFISH_TestStr_Clone_t method = (TESTCFISH_TestStr_Clone_t)cfish_obj_method(self, TESTCFISH_TestStr_Clone_OFFSET);
    return method(self);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestStr_Equals_OFFSET;
static CFISH_INLINE bool
TESTCFISH_TestStr_Equals(testcfish_TestString* self, cfish_Obj* other) {
    const TESTCFISH_TestStr_Equals_t method = (TESTCFISH_TestStr_Equals_t)cfish_obj_method(self, TESTCFISH_TestStr_Equals_OFFSET);
    return method(self, other);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestStr_Compare_To_OFFSET;
static CFISH_INLINE int32_t
TESTCFISH_TestStr_Compare_To(testcfish_TestString* self, cfish_Obj* other) {
    const TESTCFISH_TestStr_Compare_To_t method = (TESTCFISH_TestStr_Compare_To_t)cfish_obj_method(self, TESTCFISH_TestStr_Compare_To_OFFSET);
    return method(self, other);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestStr_Destroy_OFFSET;
static CFISH_INLINE void
TESTCFISH_TestStr_Destroy(testcfish_TestString* self) {
    const TESTCFISH_TestStr_Destroy_t method = (TESTCFISH_TestStr_Destroy_t)cfish_obj_method(self, TESTCFISH_TestStr_Destroy_OFFSET);
    method(self);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestStr_To_String_OFFSET;
static CFISH_INLINE cfish_String*
TESTCFISH_TestStr_To_String(testcfish_TestString* self) {
    const TESTCFISH_TestStr_To_String_t method = (TESTCFISH_TestStr_To_String_t)cfish_obj_method(self, TESTCFISH_TestStr_To_String_OFFSET);
    return method(self);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_TestStr_Run_OFFSET;
static CFISH_INLINE void
TESTCFISH_TestStr_Run(testcfish_TestString* self, cfish_TestBatchRunner* runner) {
    const TESTCFISH_TestStr_Run_t method = (TESTCFISH_TestStr_Run_t)cfish_obj_method(self, TESTCFISH_TestStr_Run_OFFSET);
    method(self, runner);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef TESTCFISH_USE_SHORT_NAMES
  #define TestString testcfish_TestString
  #define TESTSTRING TESTCFISH_TESTSTRING
  #define TestStr_new testcfish_TestStr_new
  #define TestStr_get_class testcfish_TestStr_get_class
  #define TestStr_get_class_name testcfish_TestStr_get_class_name
  #define TestStr_is_a testcfish_TestStr_is_a
  #define TestStr_Run_IMP TESTCFISH_TestStr_Run_IMP
  #define TestStr_To_Host TESTCFISH_TestStr_To_Host
  #define TestStr_To_Host_t TESTCFISH_TestStr_To_Host_t
  #define TestStr_Clone TESTCFISH_TestStr_Clone
  #define TestStr_Clone_t TESTCFISH_TestStr_Clone_t
  #define TestStr_Equals TESTCFISH_TestStr_Equals
  #define TestStr_Equals_t TESTCFISH_TestStr_Equals_t
  #define TestStr_Compare_To TESTCFISH_TestStr_Compare_To
  #define TestStr_Compare_To_t TESTCFISH_TestStr_Compare_To_t
  #define TestStr_Destroy TESTCFISH_TestStr_Destroy
  #define TestStr_Destroy_t TESTCFISH_TestStr_Destroy_t
  #define TestStr_To_String TESTCFISH_TestStr_To_String
  #define TestStr_To_String_t TESTCFISH_TestStr_To_String_t
  #define TestStr_Run TESTCFISH_TestStr_Run
  #define TestStr_Run_t TESTCFISH_TestStr_Run_t
#endif /* TESTCFISH_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_TESTCFISH_STRINGCALLBACKTEST
extern uint32_t testcfish_StrCbTest_IVARS_OFFSET;
typedef struct testcfish_StringCallbackTestIVARS testcfish_StringCallbackTestIVARS;
static CFISH_INLINE testcfish_StringCallbackTestIVARS*
testcfish_StrCbTest_IVARS(testcfish_StringCallbackTest *self) {
   char *ptr = (char*)self + testcfish_StrCbTest_IVARS_OFFSET;
   return (testcfish_StringCallbackTestIVARS*)ptr;
}
#ifdef TESTCFISH_USE_SHORT_NAMES
  #define StringCallbackTestIVARS testcfish_StringCallbackTestIVARS
  #define StrCbTest_IVARS testcfish_StrCbTest_IVARS
#endif


#endif /* C_TESTCFISH_STRINGCALLBACKTEST */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

bool
TESTCFISH_StrCbTest_Unchanged_By_Callback_IMP(testcfish_StringCallbackTest* self, cfish_String* str);

void
TESTCFISH_StrCbTest_Callback_IMP(testcfish_StringCallbackTest* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*TESTCFISH_StrCbTest_To_Host_t)(testcfish_StringCallbackTest* self, void* vcache);

typedef cfish_Obj*
(*TESTCFISH_StrCbTest_Clone_t)(testcfish_StringCallbackTest* self);

typedef bool
(*TESTCFISH_StrCbTest_Equals_t)(testcfish_StringCallbackTest* self, cfish_Obj* other);

typedef int32_t
(*TESTCFISH_StrCbTest_Compare_To_t)(testcfish_StringCallbackTest* self, cfish_Obj* other);

typedef void
(*TESTCFISH_StrCbTest_Destroy_t)(testcfish_StringCallbackTest* self);

typedef cfish_String*
(*TESTCFISH_StrCbTest_To_String_t)(testcfish_StringCallbackTest* self);

typedef bool
(*TESTCFISH_StrCbTest_Unchanged_By_Callback_t)(testcfish_StringCallbackTest* self, cfish_String* str);

typedef void
(*TESTCFISH_StrCbTest_Callback_t)(testcfish_StringCallbackTest* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
testcfish_StrCbTest_get_class(testcfish_StringCallbackTest *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
testcfish_StrCbTest_get_class_name(testcfish_StringCallbackTest *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
testcfish_StrCbTest_is_a(testcfish_StringCallbackTest *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_StrCbTest_To_Host_OFFSET;
static CFISH_INLINE void*
TESTCFISH_StrCbTest_To_Host(testcfish_StringCallbackTest* self, void* vcache) {
    const TESTCFISH_StrCbTest_To_Host_t method = (TESTCFISH_StrCbTest_To_Host_t)cfish_obj_method(self, TESTCFISH_StrCbTest_To_Host_OFFSET);
    return method(self, vcache);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_StrCbTest_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTCFISH_StrCbTest_Clone(testcfish_StringCallbackTest* self) {
    const TESTCFISH_StrCbTest_Clone_t method = (TESTCFISH_StrCbTest_Clone_t)cfish_obj_method(self, TESTCFISH_StrCbTest_Clone_OFFSET);
    return method(self);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_StrCbTest_Equals_OFFSET;
static CFISH_INLINE bool
TESTCFISH_StrCbTest_Equals(testcfish_StringCallbackTest* self, cfish_Obj* other) {
    const TESTCFISH_StrCbTest_Equals_t method = (TESTCFISH_StrCbTest_Equals_t)cfish_obj_method(self, TESTCFISH_StrCbTest_Equals_OFFSET);
    return method(self, other);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_StrCbTest_Compare_To_OFFSET;
static CFISH_INLINE int32_t
TESTCFISH_StrCbTest_Compare_To(testcfish_StringCallbackTest* self, cfish_Obj* other) {
    const TESTCFISH_StrCbTest_Compare_To_t method = (TESTCFISH_StrCbTest_Compare_To_t)cfish_obj_method(self, TESTCFISH_StrCbTest_Compare_To_OFFSET);
    return method(self, other);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_StrCbTest_Destroy_OFFSET;
static CFISH_INLINE void
TESTCFISH_StrCbTest_Destroy(testcfish_StringCallbackTest* self) {
    const TESTCFISH_StrCbTest_Destroy_t method = (TESTCFISH_StrCbTest_Destroy_t)cfish_obj_method(self, TESTCFISH_StrCbTest_Destroy_OFFSET);
    method(self);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_StrCbTest_To_String_OFFSET;
static CFISH_INLINE cfish_String*
TESTCFISH_StrCbTest_To_String(testcfish_StringCallbackTest* self) {
    const TESTCFISH_StrCbTest_To_String_t method = (TESTCFISH_StrCbTest_To_String_t)cfish_obj_method(self, TESTCFISH_StrCbTest_To_String_OFFSET);
    return method(self);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_StrCbTest_Unchanged_By_Callback_OFFSET;
static CFISH_INLINE bool
TESTCFISH_StrCbTest_Unchanged_By_Callback(testcfish_StringCallbackTest* self, cfish_String* str) {
    const TESTCFISH_StrCbTest_Unchanged_By_Callback_t method = (TESTCFISH_StrCbTest_Unchanged_By_Callback_t)cfish_obj_method(self, TESTCFISH_StrCbTest_Unchanged_By_Callback_OFFSET);
    return method(self, str);
}

extern TESTCFISH_VISIBLE uint32_t TESTCFISH_StrCbTest_Callback_OFFSET;
static CFISH_INLINE void
TESTCFISH_StrCbTest_Callback(testcfish_StringCallbackTest* self) {
    const TESTCFISH_StrCbTest_Callback_t method = (TESTCFISH_StrCbTest_Callback_t)cfish_obj_method(self, TESTCFISH_StrCbTest_Callback_OFFSET);
    method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define TestCfish_StrCbTest_Unchanged_By_Callback_OVERRIDE NULL
#define TestCfish_StrCbTest_Callback_OVERRIDE NULL
#else
bool
TestCfish_StrCbTest_Unchanged_By_Callback_OVERRIDE(testcfish_StringCallbackTest* self, cfish_String* str);
void
TestCfish_StrCbTest_Callback_OVERRIDE(testcfish_StringCallbackTest* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef TESTCFISH_USE_SHORT_NAMES
  #define StringCallbackTest testcfish_StringCallbackTest
  #define STRINGCALLBACKTEST TESTCFISH_STRINGCALLBACKTEST
  #define StrCbTest_get_class testcfish_StrCbTest_get_class
  #define StrCbTest_get_class_name testcfish_StrCbTest_get_class_name
  #define StrCbTest_is_a testcfish_StrCbTest_is_a
  #define StrCbTest_Unchanged_By_Callback_IMP TESTCFISH_StrCbTest_Unchanged_By_Callback_IMP
  #define StrCbTest_Callback_IMP TESTCFISH_StrCbTest_Callback_IMP
  #define StrCbTest_To_Host TESTCFISH_StrCbTest_To_Host
  #define StrCbTest_To_Host_t TESTCFISH_StrCbTest_To_Host_t
  #define StrCbTest_Clone TESTCFISH_StrCbTest_Clone
  #define StrCbTest_Clone_t TESTCFISH_StrCbTest_Clone_t
  #define StrCbTest_Equals TESTCFISH_StrCbTest_Equals
  #define StrCbTest_Equals_t TESTCFISH_StrCbTest_Equals_t
  #define StrCbTest_Compare_To TESTCFISH_StrCbTest_Compare_To
  #define StrCbTest_Compare_To_t TESTCFISH_StrCbTest_Compare_To_t
  #define StrCbTest_Destroy TESTCFISH_StrCbTest_Destroy
  #define StrCbTest_Destroy_t TESTCFISH_StrCbTest_Destroy_t
  #define StrCbTest_To_String TESTCFISH_StrCbTest_To_String
  #define StrCbTest_To_String_t TESTCFISH_StrCbTest_To_String_t
  #define StrCbTest_Unchanged_By_Callback TESTCFISH_StrCbTest_Unchanged_By_Callback
  #define StrCbTest_Unchanged_By_Callback_t TESTCFISH_StrCbTest_Unchanged_By_Callback_t
  #define StrCbTest_Callback TESTCFISH_StrCbTest_Callback
  #define StrCbTest_Callback_t TESTCFISH_StrCbTest_Callback_t
#endif /* TESTCFISH_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_CLOWNFISH_TEST_TESTSTRING */




