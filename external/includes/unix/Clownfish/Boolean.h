/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_CLOWNFISH_BOOLEAN
#define H_CLOWNFISH_BOOLEAN 1


#ifdef __cplusplus
extern "C" {
#endif

#include "cfish_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish/Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_CFISH_BOOLEAN
extern uint32_t cfish_Bool_IVARS_OFFSET;
typedef struct cfish_BooleanIVARS cfish_BooleanIVARS;
static CFISH_INLINE cfish_BooleanIVARS*
cfish_Bool_IVARS(cfish_Boolean *self) {
   char *ptr = (char*)self + cfish_Bool_IVARS_OFFSET;
   return (cfish_BooleanIVARS*)ptr;
}
#ifdef CFISH_USE_SHORT_NAMES
  #define BooleanIVARS cfish_BooleanIVARS
  #define Bool_IVARS cfish_Bool_IVARS
#endif

struct cfish_Boolean {
    CFISH_OBJ_HEAD
    cfish_Class* klass;
    bool value;
    cfish_String* string;
};

#endif /* C_CFISH_BOOLEAN */

/* Declare this class's inert variables.
 */

extern CFISH_VISIBLE cfish_Boolean* cfish_Bool_true_singleton;
extern CFISH_VISIBLE cfish_Boolean* cfish_Bool_false_singleton;


/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

CFISH_VISIBLE void
cfish_Bool_init_class(void);

CFISH_VISIBLE cfish_Boolean*
cfish_Bool_singleton(bool value);

void*
CFISH_Bool_To_Host_IMP(cfish_Boolean* self, void* vcache);

bool
CFISH_Bool_Get_Value_IMP(cfish_Boolean* self);

cfish_Boolean*
CFISH_Bool_Clone_IMP(cfish_Boolean* self);

bool
CFISH_Bool_Equals_IMP(cfish_Boolean* self, cfish_Obj* other);

cfish_String*
CFISH_Bool_To_String_IMP(cfish_Boolean* self);

void
CFISH_Bool_Destroy_IMP(cfish_Boolean* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*CFISH_Bool_To_Host_t)(cfish_Boolean* self, void* vcache);

typedef cfish_Boolean*
(*CFISH_Bool_Clone_t)(cfish_Boolean* self);

typedef bool
(*CFISH_Bool_Equals_t)(cfish_Boolean* self, cfish_Obj* other);

typedef int32_t
(*CFISH_Bool_Compare_To_t)(cfish_Boolean* self, cfish_Obj* other);

typedef void
(*CFISH_Bool_Destroy_t)(cfish_Boolean* self);

typedef cfish_String*
(*CFISH_Bool_To_String_t)(cfish_Boolean* self);

typedef bool
(*CFISH_Bool_Get_Value_t)(cfish_Boolean* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
cfish_Bool_get_class(cfish_Boolean *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
cfish_Bool_get_class_name(cfish_Boolean *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
cfish_Bool_is_a(cfish_Boolean *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern CFISH_VISIBLE uint32_t CFISH_Bool_To_Host_OFFSET;
static CFISH_INLINE void*
CFISH_Bool_To_Host(cfish_Boolean* self, void* vcache) {
#ifdef CFP_CFISH
    return CFISH_Bool_To_Host_IMP(self, vcache);
#else
    const CFISH_Bool_To_Host_t method = (CFISH_Bool_To_Host_t)cfish_obj_method(self, CFISH_Bool_To_Host_OFFSET);
    return method(self, vcache);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_Bool_Clone_OFFSET;
static CFISH_INLINE cfish_Boolean*
CFISH_Bool_Clone(cfish_Boolean* self) {
#ifdef CFP_CFISH
    return CFISH_Bool_Clone_IMP(self);
#else
    const CFISH_Bool_Clone_t method = (CFISH_Bool_Clone_t)cfish_obj_method(self, CFISH_Bool_Clone_OFFSET);
    return method(self);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_Bool_Equals_OFFSET;
static CFISH_INLINE bool
CFISH_Bool_Equals(cfish_Boolean* self, cfish_Obj* other) {
#ifdef CFP_CFISH
    return CFISH_Bool_Equals_IMP(self, other);
#else
    const CFISH_Bool_Equals_t method = (CFISH_Bool_Equals_t)cfish_obj_method(self, CFISH_Bool_Equals_OFFSET);
    return method(self, other);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_Bool_Compare_To_OFFSET;
static CFISH_INLINE int32_t
CFISH_Bool_Compare_To(cfish_Boolean* self, cfish_Obj* other) {
#ifdef CFP_CFISH
    return CFISH_Obj_Compare_To_IMP((cfish_Obj*)self, other);
#else
    const CFISH_Bool_Compare_To_t method = (CFISH_Bool_Compare_To_t)cfish_obj_method(self, CFISH_Bool_Compare_To_OFFSET);
    return method(self, other);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_Bool_Destroy_OFFSET;
static CFISH_INLINE void
CFISH_Bool_Destroy(cfish_Boolean* self) {
#ifdef CFP_CFISH
    CFISH_Bool_Destroy_IMP(self);
#else
    const CFISH_Bool_Destroy_t method = (CFISH_Bool_Destroy_t)cfish_obj_method(self, CFISH_Bool_Destroy_OFFSET);
    method(self);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_Bool_To_String_OFFSET;
static CFISH_INLINE cfish_String*
CFISH_Bool_To_String(cfish_Boolean* self) {
#ifdef CFP_CFISH
    return CFISH_Bool_To_String_IMP(self);
#else
    const CFISH_Bool_To_String_t method = (CFISH_Bool_To_String_t)cfish_obj_method(self, CFISH_Bool_To_String_OFFSET);
    return method(self);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_Bool_Get_Value_OFFSET;
static CFISH_INLINE bool
CFISH_Bool_Get_Value(cfish_Boolean* self) {
#ifdef CFP_CFISH
    return CFISH_Bool_Get_Value_IMP(self);
#else
    const CFISH_Bool_Get_Value_t method = (CFISH_Bool_Get_Value_t)cfish_obj_method(self, CFISH_Bool_Get_Value_OFFSET);
    return method(self);
#endif
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef CFISH_USE_SHORT_NAMES
  #define Boolean cfish_Boolean
  #define BOOLEAN CFISH_BOOLEAN
  #define Bool_init_class cfish_Bool_init_class
  #define Bool_singleton cfish_Bool_singleton
  #define Bool_true_singleton cfish_Bool_true_singleton
  #define Bool_false_singleton cfish_Bool_false_singleton
  #define Bool_get_class cfish_Bool_get_class
  #define Bool_get_class_name cfish_Bool_get_class_name
  #define Bool_is_a cfish_Bool_is_a
  #define Bool_To_Host_IMP CFISH_Bool_To_Host_IMP
  #define Bool_Get_Value_IMP CFISH_Bool_Get_Value_IMP
  #define Bool_Clone_IMP CFISH_Bool_Clone_IMP
  #define Bool_Equals_IMP CFISH_Bool_Equals_IMP
  #define Bool_To_String_IMP CFISH_Bool_To_String_IMP
  #define Bool_Destroy_IMP CFISH_Bool_Destroy_IMP
  #define Bool_To_Host CFISH_Bool_To_Host
  #define Bool_To_Host_t CFISH_Bool_To_Host_t
  #define Bool_Clone CFISH_Bool_Clone
  #define Bool_Clone_t CFISH_Bool_Clone_t
  #define Bool_Equals CFISH_Bool_Equals
  #define Bool_Equals_t CFISH_Bool_Equals_t
  #define Bool_Compare_To CFISH_Bool_Compare_To
  #define Bool_Compare_To_t CFISH_Bool_Compare_To_t
  #define Bool_Destroy CFISH_Bool_Destroy
  #define Bool_Destroy_t CFISH_Bool_Destroy_t
  #define Bool_To_String CFISH_Bool_To_String
  #define Bool_To_String_t CFISH_Bool_To_String_t
  #define Bool_Get_Value CFISH_Bool_Get_Value
  #define Bool_Get_Value_t CFISH_Bool_Get_Value_t
#endif /* CFISH_USE_SHORT_NAMES */



#define CFISH_TRUE  cfish_Bool_true_singleton
#define CFISH_FALSE cfish_Bool_false_singleton




#ifdef __cplusplus
}
#endif

#endif /* H_CLOWNFISH_BOOLEAN */




