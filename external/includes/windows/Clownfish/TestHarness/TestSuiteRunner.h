/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_CLOWNFISH_TESTHARNESS_TESTSUITERUNNER
#define H_CLOWNFISH_TESTHARNESS_TESTSUITERUNNER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "cfish_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish\Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_CFISH_TESTSUITERUNNER
extern uint32_t cfish_TestSuiteRunner_IVARS_OFFSET;
typedef struct cfish_TestSuiteRunnerIVARS cfish_TestSuiteRunnerIVARS;
static CFISH_INLINE cfish_TestSuiteRunnerIVARS*
cfish_TestSuiteRunner_IVARS(cfish_TestSuiteRunner *self) {
   char *ptr = (char*)self + cfish_TestSuiteRunner_IVARS_OFFSET;
   return (cfish_TestSuiteRunnerIVARS*)ptr;
}
#ifdef CFISH_USE_SHORT_NAMES
  #define TestSuiteRunnerIVARS cfish_TestSuiteRunnerIVARS
  #define TestSuiteRunner_IVARS cfish_TestSuiteRunner_IVARS
#endif

struct cfish_TestSuiteRunner {
    CFISH_OBJ_HEAD
    cfish_Class* klass;
    cfish_TestFormatter* formatter;
    uint32_t num_tests;
    uint32_t num_tests_failed;
    uint32_t num_batches;
    uint32_t num_batches_failed;
};

#endif /* C_CFISH_TESTSUITERUNNER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

CFISH_VISIBLE cfish_TestSuiteRunner*
cfish_TestSuiteRunner_new(cfish_TestFormatter* formatter);

CFISH_VISIBLE cfish_TestSuiteRunner*
cfish_TestSuiteRunner_init(cfish_TestSuiteRunner* self, cfish_TestFormatter* formatter);

void
CFISH_TestSuiteRunner_Destroy_IMP(cfish_TestSuiteRunner* self);

bool
CFISH_TestSuiteRunner_Run_Batch_IMP(cfish_TestSuiteRunner* self, cfish_TestBatch* batch);

bool
CFISH_TestSuiteRunner_Finish_IMP(cfish_TestSuiteRunner* self);

uint32_t
CFISH_TestSuiteRunner_Get_Num_Tests_IMP(cfish_TestSuiteRunner* self);

uint32_t
CFISH_TestSuiteRunner_Get_Num_Tests_Failed_IMP(cfish_TestSuiteRunner* self);

uint32_t
CFISH_TestSuiteRunner_Get_Num_Batches_IMP(cfish_TestSuiteRunner* self);

uint32_t
CFISH_TestSuiteRunner_Get_Num_Batches_Failed_IMP(cfish_TestSuiteRunner* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*CFISH_TestSuiteRunner_To_Host_t)(cfish_TestSuiteRunner* self, void* vcache);

typedef cfish_Obj*
(*CFISH_TestSuiteRunner_Clone_t)(cfish_TestSuiteRunner* self);

typedef bool
(*CFISH_TestSuiteRunner_Equals_t)(cfish_TestSuiteRunner* self, cfish_Obj* other);

typedef int32_t
(*CFISH_TestSuiteRunner_Compare_To_t)(cfish_TestSuiteRunner* self, cfish_Obj* other);

typedef void
(*CFISH_TestSuiteRunner_Destroy_t)(cfish_TestSuiteRunner* self);

typedef cfish_String*
(*CFISH_TestSuiteRunner_To_String_t)(cfish_TestSuiteRunner* self);

typedef bool
(*CFISH_TestSuiteRunner_Run_Batch_t)(cfish_TestSuiteRunner* self, cfish_TestBatch* batch);

typedef bool
(*CFISH_TestSuiteRunner_Finish_t)(cfish_TestSuiteRunner* self);

typedef uint32_t
(*CFISH_TestSuiteRunner_Get_Num_Tests_t)(cfish_TestSuiteRunner* self);

typedef uint32_t
(*CFISH_TestSuiteRunner_Get_Num_Tests_Failed_t)(cfish_TestSuiteRunner* self);

typedef uint32_t
(*CFISH_TestSuiteRunner_Get_Num_Batches_t)(cfish_TestSuiteRunner* self);

typedef uint32_t
(*CFISH_TestSuiteRunner_Get_Num_Batches_Failed_t)(cfish_TestSuiteRunner* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
cfish_TestSuiteRunner_get_class(cfish_TestSuiteRunner *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
cfish_TestSuiteRunner_get_class_name(cfish_TestSuiteRunner *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
cfish_TestSuiteRunner_is_a(cfish_TestSuiteRunner *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern CFISH_VISIBLE uint32_t CFISH_TestSuiteRunner_To_Host_OFFSET;
static CFISH_INLINE void*
CFISH_TestSuiteRunner_To_Host(cfish_TestSuiteRunner* self, void* vcache) {
    const CFISH_TestSuiteRunner_To_Host_t method = (CFISH_TestSuiteRunner_To_Host_t)cfish_obj_method(self, CFISH_TestSuiteRunner_To_Host_OFFSET);
    return method(self, vcache);
}

extern CFISH_VISIBLE uint32_t CFISH_TestSuiteRunner_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
CFISH_TestSuiteRunner_Clone(cfish_TestSuiteRunner* self) {
    const CFISH_TestSuiteRunner_Clone_t method = (CFISH_TestSuiteRunner_Clone_t)cfish_obj_method(self, CFISH_TestSuiteRunner_Clone_OFFSET);
    return method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_TestSuiteRunner_Equals_OFFSET;
static CFISH_INLINE bool
CFISH_TestSuiteRunner_Equals(cfish_TestSuiteRunner* self, cfish_Obj* other) {
    const CFISH_TestSuiteRunner_Equals_t method = (CFISH_TestSuiteRunner_Equals_t)cfish_obj_method(self, CFISH_TestSuiteRunner_Equals_OFFSET);
    return method(self, other);
}

extern CFISH_VISIBLE uint32_t CFISH_TestSuiteRunner_Compare_To_OFFSET;
static CFISH_INLINE int32_t
CFISH_TestSuiteRunner_Compare_To(cfish_TestSuiteRunner* self, cfish_Obj* other) {
    const CFISH_TestSuiteRunner_Compare_To_t method = (CFISH_TestSuiteRunner_Compare_To_t)cfish_obj_method(self, CFISH_TestSuiteRunner_Compare_To_OFFSET);
    return method(self, other);
}

extern CFISH_VISIBLE uint32_t CFISH_TestSuiteRunner_Destroy_OFFSET;
static CFISH_INLINE void
CFISH_TestSuiteRunner_Destroy(cfish_TestSuiteRunner* self) {
    const CFISH_TestSuiteRunner_Destroy_t method = (CFISH_TestSuiteRunner_Destroy_t)cfish_obj_method(self, CFISH_TestSuiteRunner_Destroy_OFFSET);
    method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_TestSuiteRunner_To_String_OFFSET;
static CFISH_INLINE cfish_String*
CFISH_TestSuiteRunner_To_String(cfish_TestSuiteRunner* self) {
    const CFISH_TestSuiteRunner_To_String_t method = (CFISH_TestSuiteRunner_To_String_t)cfish_obj_method(self, CFISH_TestSuiteRunner_To_String_OFFSET);
    return method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_TestSuiteRunner_Run_Batch_OFFSET;
static CFISH_INLINE bool
CFISH_TestSuiteRunner_Run_Batch(cfish_TestSuiteRunner* self, cfish_TestBatch* batch) {
    const CFISH_TestSuiteRunner_Run_Batch_t method = (CFISH_TestSuiteRunner_Run_Batch_t)cfish_obj_method(self, CFISH_TestSuiteRunner_Run_Batch_OFFSET);
    return method(self, batch);
}

extern CFISH_VISIBLE uint32_t CFISH_TestSuiteRunner_Finish_OFFSET;
static CFISH_INLINE bool
CFISH_TestSuiteRunner_Finish(cfish_TestSuiteRunner* self) {
    const CFISH_TestSuiteRunner_Finish_t method = (CFISH_TestSuiteRunner_Finish_t)cfish_obj_method(self, CFISH_TestSuiteRunner_Finish_OFFSET);
    return method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_TestSuiteRunner_Get_Num_Tests_OFFSET;
static CFISH_INLINE uint32_t
CFISH_TestSuiteRunner_Get_Num_Tests(cfish_TestSuiteRunner* self) {
    const CFISH_TestSuiteRunner_Get_Num_Tests_t method = (CFISH_TestSuiteRunner_Get_Num_Tests_t)cfish_obj_method(self, CFISH_TestSuiteRunner_Get_Num_Tests_OFFSET);
    return method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_TestSuiteRunner_Get_Num_Tests_Failed_OFFSET;
static CFISH_INLINE uint32_t
CFISH_TestSuiteRunner_Get_Num_Tests_Failed(cfish_TestSuiteRunner* self) {
    const CFISH_TestSuiteRunner_Get_Num_Tests_Failed_t method = (CFISH_TestSuiteRunner_Get_Num_Tests_Failed_t)cfish_obj_method(self, CFISH_TestSuiteRunner_Get_Num_Tests_Failed_OFFSET);
    return method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_TestSuiteRunner_Get_Num_Batches_OFFSET;
static CFISH_INLINE uint32_t
CFISH_TestSuiteRunner_Get_Num_Batches(cfish_TestSuiteRunner* self) {
    const CFISH_TestSuiteRunner_Get_Num_Batches_t method = (CFISH_TestSuiteRunner_Get_Num_Batches_t)cfish_obj_method(self, CFISH_TestSuiteRunner_Get_Num_Batches_OFFSET);
    return method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_TestSuiteRunner_Get_Num_Batches_Failed_OFFSET;
static CFISH_INLINE uint32_t
CFISH_TestSuiteRunner_Get_Num_Batches_Failed(cfish_TestSuiteRunner* self) {
    const CFISH_TestSuiteRunner_Get_Num_Batches_Failed_t method = (CFISH_TestSuiteRunner_Get_Num_Batches_Failed_t)cfish_obj_method(self, CFISH_TestSuiteRunner_Get_Num_Batches_Failed_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Cfish_TestSuiteRunner_Run_Batch_OVERRIDE NULL
#define Cfish_TestSuiteRunner_Finish_OVERRIDE NULL
#define Cfish_TestSuiteRunner_Get_Num_Tests_OVERRIDE NULL
#define Cfish_TestSuiteRunner_Get_Num_Tests_Failed_OVERRIDE NULL
#define Cfish_TestSuiteRunner_Get_Num_Batches_OVERRIDE NULL
#define Cfish_TestSuiteRunner_Get_Num_Batches_Failed_OVERRIDE NULL
#else
bool
Cfish_TestSuiteRunner_Run_Batch_OVERRIDE(cfish_TestSuiteRunner* self, cfish_TestBatch* batch);
bool
Cfish_TestSuiteRunner_Finish_OVERRIDE(cfish_TestSuiteRunner* self);
uint32_t
Cfish_TestSuiteRunner_Get_Num_Tests_OVERRIDE(cfish_TestSuiteRunner* self);
uint32_t
Cfish_TestSuiteRunner_Get_Num_Tests_Failed_OVERRIDE(cfish_TestSuiteRunner* self);
uint32_t
Cfish_TestSuiteRunner_Get_Num_Batches_OVERRIDE(cfish_TestSuiteRunner* self);
uint32_t
Cfish_TestSuiteRunner_Get_Num_Batches_Failed_OVERRIDE(cfish_TestSuiteRunner* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef CFISH_USE_SHORT_NAMES
  #define TestSuiteRunner cfish_TestSuiteRunner
  #define TESTSUITERUNNER CFISH_TESTSUITERUNNER
  #define TestSuiteRunner_new cfish_TestSuiteRunner_new
  #define TestSuiteRunner_init cfish_TestSuiteRunner_init
  #define TestSuiteRunner_get_class cfish_TestSuiteRunner_get_class
  #define TestSuiteRunner_get_class_name cfish_TestSuiteRunner_get_class_name
  #define TestSuiteRunner_is_a cfish_TestSuiteRunner_is_a
  #define TestSuiteRunner_Destroy_IMP CFISH_TestSuiteRunner_Destroy_IMP
  #define TestSuiteRunner_Run_Batch_IMP CFISH_TestSuiteRunner_Run_Batch_IMP
  #define TestSuiteRunner_Finish_IMP CFISH_TestSuiteRunner_Finish_IMP
  #define TestSuiteRunner_Get_Num_Tests_IMP CFISH_TestSuiteRunner_Get_Num_Tests_IMP
  #define TestSuiteRunner_Get_Num_Tests_Failed_IMP CFISH_TestSuiteRunner_Get_Num_Tests_Failed_IMP
  #define TestSuiteRunner_Get_Num_Batches_IMP CFISH_TestSuiteRunner_Get_Num_Batches_IMP
  #define TestSuiteRunner_Get_Num_Batches_Failed_IMP CFISH_TestSuiteRunner_Get_Num_Batches_Failed_IMP
  #define TestSuiteRunner_To_Host CFISH_TestSuiteRunner_To_Host
  #define TestSuiteRunner_To_Host_t CFISH_TestSuiteRunner_To_Host_t
  #define TestSuiteRunner_Clone CFISH_TestSuiteRunner_Clone
  #define TestSuiteRunner_Clone_t CFISH_TestSuiteRunner_Clone_t
  #define TestSuiteRunner_Equals CFISH_TestSuiteRunner_Equals
  #define TestSuiteRunner_Equals_t CFISH_TestSuiteRunner_Equals_t
  #define TestSuiteRunner_Compare_To CFISH_TestSuiteRunner_Compare_To
  #define TestSuiteRunner_Compare_To_t CFISH_TestSuiteRunner_Compare_To_t
  #define TestSuiteRunner_Destroy CFISH_TestSuiteRunner_Destroy
  #define TestSuiteRunner_Destroy_t CFISH_TestSuiteRunner_Destroy_t
  #define TestSuiteRunner_To_String CFISH_TestSuiteRunner_To_String
  #define TestSuiteRunner_To_String_t CFISH_TestSuiteRunner_To_String_t
  #define TestSuiteRunner_Run_Batch CFISH_TestSuiteRunner_Run_Batch
  #define TestSuiteRunner_Run_Batch_t CFISH_TestSuiteRunner_Run_Batch_t
  #define TestSuiteRunner_Finish CFISH_TestSuiteRunner_Finish
  #define TestSuiteRunner_Finish_t CFISH_TestSuiteRunner_Finish_t
  #define TestSuiteRunner_Get_Num_Tests CFISH_TestSuiteRunner_Get_Num_Tests
  #define TestSuiteRunner_Get_Num_Tests_t CFISH_TestSuiteRunner_Get_Num_Tests_t
  #define TestSuiteRunner_Get_Num_Tests_Failed CFISH_TestSuiteRunner_Get_Num_Tests_Failed
  #define TestSuiteRunner_Get_Num_Tests_Failed_t CFISH_TestSuiteRunner_Get_Num_Tests_Failed_t
  #define TestSuiteRunner_Get_Num_Batches CFISH_TestSuiteRunner_Get_Num_Batches
  #define TestSuiteRunner_Get_Num_Batches_t CFISH_TestSuiteRunner_Get_Num_Batches_t
  #define TestSuiteRunner_Get_Num_Batches_Failed CFISH_TestSuiteRunner_Get_Num_Batches_Failed
  #define TestSuiteRunner_Get_Num_Batches_Failed_t CFISH_TestSuiteRunner_Get_Num_Batches_Failed_t
#endif /* CFISH_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_CLOWNFISH_TESTHARNESS_TESTSUITERUNNER */




