/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_CLOWNFISH_ERR
#define H_CLOWNFISH_ERR 1


#ifdef __cplusplus
extern "C" {
#endif

#include "cfish_parcel.h"

typedef void 
(*CFISH_Err_Attempt_t)(void *context);

#ifdef CFISH_USE_SHORT_NAMES
  #define Err_Attempt_t CFISH_Err_Attempt_t
#endif

/* Include the header for this class's parent. 
 */

#include "Clownfish\Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_CFISH_ERR
extern uint32_t cfish_Err_IVARS_OFFSET;
typedef struct cfish_ErrIVARS cfish_ErrIVARS;
static CFISH_INLINE cfish_ErrIVARS*
cfish_Err_IVARS(cfish_Err *self) {
   char *ptr = (char*)self + cfish_Err_IVARS_OFFSET;
   return (cfish_ErrIVARS*)ptr;
}
#ifdef CFISH_USE_SHORT_NAMES
  #define ErrIVARS cfish_ErrIVARS
  #define Err_IVARS cfish_Err_IVARS
#endif

struct cfish_Err {
    CFISH_OBJ_HEAD
    cfish_Class* klass;
    cfish_String* mess;
};

#endif /* C_CFISH_ERR */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

CFISH_VISIBLE void
cfish_Err_init_class(void);

CFISH_VISIBLE cfish_Err*
cfish_Err_new(cfish_String* mess);

CFISH_VISIBLE cfish_Err*
cfish_Err_init(cfish_Err* self, cfish_String* mess);

CFISH_VISIBLE void
cfish_Err_set_error(cfish_Err* error);

CFISH_VISIBLE cfish_Err*
cfish_Err_get_error(void);

CFISH_VISIBLE cfish_Err*
cfish_Err_trap(CFISH_Err_Attempt_t routine, void* context);

CFISH_VISIBLE void
cfish_Err_warn_at(const char* file, int line, const char* func, const char* pattern, ...);

CFISH_VISIBLE void
cfish_Err_throw_at(cfish_Class* klass, const char* file, int line, const char* func, const char* pattern, ...);

CFISH_VISIBLE void
cfish_Err_rethrow(cfish_Err* error, const char* file, int line, const char* func);

CFISH_VISIBLE void
cfish_Err_throw_mess(cfish_Class* klass, cfish_String* message);

CFISH_VISIBLE void
cfish_Err_do_throw(cfish_Err* self);

CFISH_VISIBLE void
cfish_Err_warn_mess(cfish_String* message);

CFISH_VISIBLE cfish_String*
cfish_Err_make_mess(const char* file, int line, const char* func, const char* pattern, ...);

CFISH_VISIBLE cfish_Obj*
cfish_Err_downcast(cfish_Obj* obj, cfish_Class* klass, const char* file, int line, const char* func);

CFISH_VISIBLE cfish_Obj*
cfish_Err_certify(cfish_Obj* obj, cfish_Class* klass, const char* file, int line, const char* func);

static CFISH_INLINE void
cfish_Err_abstract_class_check(cfish_Obj* obj, cfish_Class* klass);

CFISH_VISIBLE void
cfish_Err_abstract_method_call(cfish_Obj* obj, cfish_Class* klass, const char* method_name);

CFISH_VISIBLE void
cfish_Err_invalid_callback(const char* method_name);

CFISH_VISIBLE char*
cfish_Err_win_error(void);

cfish_String*
CFISH_Err_To_String_IMP(cfish_Err* self);

void
CFISH_Err_Cat_Mess_IMP(cfish_Err* self, cfish_String* mess);

cfish_String*
CFISH_Err_Get_Mess_IMP(cfish_Err* self);

void
CFISH_Err_Add_Frame_IMP(cfish_Err* self, const char* file, int line, const char* func);

void
CFISH_Err_Destroy_IMP(cfish_Err* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*CFISH_Err_To_Host_t)(cfish_Err* self, void* vcache);

typedef cfish_Obj*
(*CFISH_Err_Clone_t)(cfish_Err* self);

typedef bool
(*CFISH_Err_Equals_t)(cfish_Err* self, cfish_Obj* other);

typedef int32_t
(*CFISH_Err_Compare_To_t)(cfish_Err* self, cfish_Obj* other);

typedef void
(*CFISH_Err_Destroy_t)(cfish_Err* self);

typedef cfish_String*
(*CFISH_Err_To_String_t)(cfish_Err* self);

typedef void
(*CFISH_Err_Cat_Mess_t)(cfish_Err* self, cfish_String* mess);

typedef cfish_String*
(*CFISH_Err_Get_Mess_t)(cfish_Err* self);

typedef void
(*CFISH_Err_Add_Frame_t)(cfish_Err* self, const char* file, int line, const char* func);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
cfish_Err_get_class(cfish_Err *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
cfish_Err_get_class_name(cfish_Err *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
cfish_Err_is_a(cfish_Err *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern CFISH_VISIBLE uint32_t CFISH_Err_To_Host_OFFSET;
static CFISH_INLINE void*
CFISH_Err_To_Host(cfish_Err* self, void* vcache) {
    const CFISH_Err_To_Host_t method = (CFISH_Err_To_Host_t)cfish_obj_method(self, CFISH_Err_To_Host_OFFSET);
    return method(self, vcache);
}

extern CFISH_VISIBLE uint32_t CFISH_Err_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
CFISH_Err_Clone(cfish_Err* self) {
    const CFISH_Err_Clone_t method = (CFISH_Err_Clone_t)cfish_obj_method(self, CFISH_Err_Clone_OFFSET);
    return method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_Err_Equals_OFFSET;
static CFISH_INLINE bool
CFISH_Err_Equals(cfish_Err* self, cfish_Obj* other) {
    const CFISH_Err_Equals_t method = (CFISH_Err_Equals_t)cfish_obj_method(self, CFISH_Err_Equals_OFFSET);
    return method(self, other);
}

extern CFISH_VISIBLE uint32_t CFISH_Err_Compare_To_OFFSET;
static CFISH_INLINE int32_t
CFISH_Err_Compare_To(cfish_Err* self, cfish_Obj* other) {
    const CFISH_Err_Compare_To_t method = (CFISH_Err_Compare_To_t)cfish_obj_method(self, CFISH_Err_Compare_To_OFFSET);
    return method(self, other);
}

extern CFISH_VISIBLE uint32_t CFISH_Err_Destroy_OFFSET;
static CFISH_INLINE void
CFISH_Err_Destroy(cfish_Err* self) {
    const CFISH_Err_Destroy_t method = (CFISH_Err_Destroy_t)cfish_obj_method(self, CFISH_Err_Destroy_OFFSET);
    method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_Err_To_String_OFFSET;
static CFISH_INLINE cfish_String*
CFISH_Err_To_String(cfish_Err* self) {
    const CFISH_Err_To_String_t method = (CFISH_Err_To_String_t)cfish_obj_method(self, CFISH_Err_To_String_OFFSET);
    return method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_Err_Cat_Mess_OFFSET;
static CFISH_INLINE void
CFISH_Err_Cat_Mess(cfish_Err* self, cfish_String* mess) {
    const CFISH_Err_Cat_Mess_t method = (CFISH_Err_Cat_Mess_t)cfish_obj_method(self, CFISH_Err_Cat_Mess_OFFSET);
    method(self, mess);
}

extern CFISH_VISIBLE uint32_t CFISH_Err_Get_Mess_OFFSET;
static CFISH_INLINE cfish_String*
CFISH_Err_Get_Mess(cfish_Err* self) {
    const CFISH_Err_Get_Mess_t method = (CFISH_Err_Get_Mess_t)cfish_obj_method(self, CFISH_Err_Get_Mess_OFFSET);
    return method(self);
}

extern CFISH_VISIBLE uint32_t CFISH_Err_Add_Frame_OFFSET;
static CFISH_INLINE void
CFISH_Err_Add_Frame(cfish_Err* self, const char* file, int line, const char* func) {
    const CFISH_Err_Add_Frame_t method = (CFISH_Err_Add_Frame_t)cfish_obj_method(self, CFISH_Err_Add_Frame_OFFSET);
    method(self, file, line, func);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Cfish_Err_Cat_Mess_OVERRIDE NULL
#define Cfish_Err_Get_Mess_OVERRIDE NULL
#define Cfish_Err_Add_Frame_OVERRIDE NULL
#else
void
Cfish_Err_Cat_Mess_OVERRIDE(cfish_Err* self, cfish_String* mess);
cfish_String*
Cfish_Err_Get_Mess_OVERRIDE(cfish_Err* self);
void
Cfish_Err_Add_Frame_OVERRIDE(cfish_Err* self, const char* file, int line, const char* func);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef CFISH_USE_SHORT_NAMES
  #define Err cfish_Err
  #define ERR CFISH_ERR
  #define Err_init_class cfish_Err_init_class
  #define Err_new cfish_Err_new
  #define Err_init cfish_Err_init
  #define Err_set_error cfish_Err_set_error
  #define Err_get_error cfish_Err_get_error
  #define Err_trap cfish_Err_trap
  #define Err_warn_at cfish_Err_warn_at
  #define Err_throw_at cfish_Err_throw_at
  #define Err_rethrow cfish_Err_rethrow
  #define Err_throw_mess cfish_Err_throw_mess
  #define Err_do_throw cfish_Err_do_throw
  #define Err_warn_mess cfish_Err_warn_mess
  #define Err_make_mess cfish_Err_make_mess
  #define Err_downcast cfish_Err_downcast
  #define Err_certify cfish_Err_certify
  #define Err_abstract_class_check cfish_Err_abstract_class_check
  #define Err_abstract_method_call cfish_Err_abstract_method_call
  #define Err_invalid_callback cfish_Err_invalid_callback
  #define Err_win_error cfish_Err_win_error
  #define Err_get_class cfish_Err_get_class
  #define Err_get_class_name cfish_Err_get_class_name
  #define Err_is_a cfish_Err_is_a
  #define Err_To_String_IMP CFISH_Err_To_String_IMP
  #define Err_Cat_Mess_IMP CFISH_Err_Cat_Mess_IMP
  #define Err_Get_Mess_IMP CFISH_Err_Get_Mess_IMP
  #define Err_Add_Frame_IMP CFISH_Err_Add_Frame_IMP
  #define Err_Destroy_IMP CFISH_Err_Destroy_IMP
  #define Err_To_Host CFISH_Err_To_Host
  #define Err_To_Host_t CFISH_Err_To_Host_t
  #define Err_Clone CFISH_Err_Clone
  #define Err_Clone_t CFISH_Err_Clone_t
  #define Err_Equals CFISH_Err_Equals
  #define Err_Equals_t CFISH_Err_Equals_t
  #define Err_Compare_To CFISH_Err_Compare_To
  #define Err_Compare_To_t CFISH_Err_Compare_To_t
  #define Err_Destroy CFISH_Err_Destroy
  #define Err_Destroy_t CFISH_Err_Destroy_t
  #define Err_To_String CFISH_Err_To_String
  #define Err_To_String_t CFISH_Err_To_String_t
  #define Err_Cat_Mess CFISH_Err_Cat_Mess
  #define Err_Cat_Mess_t CFISH_Err_Cat_Mess_t
  #define Err_Get_Mess CFISH_Err_Get_Mess
  #define Err_Get_Mess_t CFISH_Err_Get_Mess_t
  #define Err_Add_Frame CFISH_Err_Add_Frame
  #define Err_Add_Frame_t CFISH_Err_Add_Frame_t
#endif /* CFISH_USE_SHORT_NAMES */



#ifdef CFISH_HAS_FUNC_MACRO
 #define CFISH_ERR_FUNC_MACRO CFISH_FUNC_MACRO
#else
 #define CFISH_ERR_FUNC_MACRO NULL
#endif

#define CFISH_ERR_ADD_FRAME(_error) \
    CFISH_Err_Add_Frame(_error, __FILE__, __LINE__, \
                        CFISH_ERR_FUNC_MACRO)

#define CFISH_RETHROW(_error) \
    cfish_Err_rethrow((cfish_Err*)_error, __FILE__, __LINE__, \
                      CFISH_ERR_FUNC_MACRO)

/** Macro version of cfish_Err_throw_at which inserts contextual information
 * automatically, provided that the compiler supports the necessary features.
 */
#ifdef CFISH_HAS_VARIADIC_MACROS
 #ifdef CFISH_HAS_ISO_VARIADIC_MACROS
  #define CFISH_THROW(_class, ...) \
    cfish_Err_throw_at(_class, __FILE__, __LINE__, CFISH_ERR_FUNC_MACRO, \
                       __VA_ARGS__)
  #define CFISH_WARN(...) \
    cfish_Err_warn_at(__FILE__, __LINE__, CFISH_ERR_FUNC_MACRO, __VA_ARGS__)
  #define CFISH_MAKE_MESS(...) \
    cfish_Err_make_mess(__FILE__, __LINE__, CFISH_ERR_FUNC_MACRO, \
                        __VA_ARGS__)
 #elif defined(CFISH_HAS_GNUC_VARIADIC_MACROS)
  #define CFISH_THROW(_class, args...) \
    cfish_Err_throw_at(_class, __FILE__, __LINE__, \
                       CFISH_ERR_FUNC_MACRO, ##args)
  #define CFISH_WARN(args...) \
    cfish_Err_warn_at(__FILE__, __LINE__, CFISH_ERR_FUNC_MACRO, ##args)
  #define CFISH_MAKE_MESS(args...) \
    cfish_Err_make_mess(__FILE__, __LINE__, CFISH_ERR_FUNC_MACRO, ##args)
 #endif
#else
  void
  CFISH_THROW(cfish_Class *klass, char* format, ...);
  void
  CFISH_WARN(char* format, ...);
  cfish_String*
  CFISH_MAKE_MESS(char* format, ...);
#endif

#define CFISH_DOWNCAST(_obj, _class) \
    cfish_Err_downcast((cfish_Obj*)(_obj), (_class), \
                       __FILE__, __LINE__, CFISH_ERR_FUNC_MACRO)


#define CFISH_CERTIFY(_obj, _class) \
    cfish_Err_certify((cfish_Obj*)(_obj), (_class), \
                      __FILE__, __LINE__, CFISH_ERR_FUNC_MACRO)

static CFISH_INLINE void
cfish_Err_abstract_class_check(cfish_Obj *obj, cfish_Class *klass) {
    cfish_Class *const my_class = (cfish_Class*)((cfish_Dummy*)obj)->klass;
    if (my_class == klass) {
        cfish_String *mess = CFISH_MAKE_MESS("%o is an abstract class",
                                              cfish_Obj_get_class_name(obj));
        CFISH_DECREF_NN(obj);
        cfish_Err_throw_mess(CFISH_ERR, mess);
    }
}

#define CFISH_ABSTRACT_CLASS_CHECK(_obj, _class) \
    cfish_Err_abstract_class_check(((cfish_Obj*)_obj), _class)

#ifdef CFISH_USE_SHORT_NAMES
  #define THROW                 CFISH_THROW
  #define RETHROW               CFISH_RETHROW
  #define WARN                  CFISH_WARN
  #define MAKE_MESS             CFISH_MAKE_MESS
  #define ERR_ADD_FRAME         CFISH_ERR_ADD_FRAME
  #define ERR_FUNC_MACRO        CFISH_ERR_FUNC_MACRO
  #define DOWNCAST              CFISH_DOWNCAST
  #define CERTIFY               CFISH_CERTIFY
  #define ABSTRACT_CLASS_CHECK  CFISH_ABSTRACT_CLASS_CHECK
#endif



#ifdef __cplusplus
}
#endif

#endif /* H_CLOWNFISH_ERR */




