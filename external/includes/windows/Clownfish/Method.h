/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_CLOWNFISH_METHOD
#define H_CLOWNFISH_METHOD 1


#ifdef __cplusplus
extern "C" {
#endif

#include "cfish_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish\Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_CFISH_METHOD
extern uint32_t cfish_Method_IVARS_OFFSET;
typedef struct cfish_MethodIVARS cfish_MethodIVARS;
static CFISH_INLINE cfish_MethodIVARS*
cfish_Method_IVARS(cfish_Method *self) {
   char *ptr = (char*)self + cfish_Method_IVARS_OFFSET;
   return (cfish_MethodIVARS*)ptr;
}
#ifdef CFISH_USE_SHORT_NAMES
  #define MethodIVARS cfish_MethodIVARS
  #define Method_IVARS cfish_Method_IVARS
#endif

struct cfish_Method {
    CFISH_OBJ_HEAD
    cfish_Class* klass;
    cfish_String* name;
    cfish_String* name_internal;
    cfish_String* host_alias;
    cfish_String* host_alias_internal;
    cfish_method_t callback_func;
    uint32_t offset;
    bool is_excluded;
};

#endif /* C_CFISH_METHOD */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

CFISH_VISIBLE cfish_Method*
cfish_Method_new(cfish_String* name, cfish_method_t callback_func, uint32_t offset);

CFISH_VISIBLE cfish_Method*
cfish_Method_init(cfish_Method* self, cfish_String* name, cfish_method_t callback_func, uint32_t offset);

CFISH_VISIBLE cfish_String*
cfish_Method_lower_snake_alias(cfish_Method* method);

cfish_String*
CFISH_Method_Get_Name_IMP(cfish_Method* self);

void
CFISH_Method_Set_Host_Alias_IMP(cfish_Method* self, cfish_String* name);

cfish_String*
CFISH_Method_Get_Host_Alias_IMP(cfish_Method* self);

bool
CFISH_Method_Is_Excluded_From_Host_IMP(cfish_Method* self);

cfish_String*
CFISH_Method_Host_Name_IMP(cfish_Method* self);

void
CFISH_Method_Destroy_IMP(cfish_Method* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*CFISH_Method_To_Host_t)(cfish_Method* self, void* vcache);

typedef cfish_Obj*
(*CFISH_Method_Clone_t)(cfish_Method* self);

typedef bool
(*CFISH_Method_Equals_t)(cfish_Method* self, cfish_Obj* other);

typedef int32_t
(*CFISH_Method_Compare_To_t)(cfish_Method* self, cfish_Obj* other);

typedef void
(*CFISH_Method_Destroy_t)(cfish_Method* self);

typedef cfish_String*
(*CFISH_Method_To_String_t)(cfish_Method* self);

typedef cfish_String*
(*CFISH_Method_Get_Name_t)(cfish_Method* self);

typedef void
(*CFISH_Method_Set_Host_Alias_t)(cfish_Method* self, cfish_String* name);

typedef cfish_String*
(*CFISH_Method_Get_Host_Alias_t)(cfish_Method* self);

typedef bool
(*CFISH_Method_Is_Excluded_From_Host_t)(cfish_Method* self);

typedef cfish_String*
(*CFISH_Method_Host_Name_t)(cfish_Method* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
cfish_Method_get_class(cfish_Method *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
cfish_Method_get_class_name(cfish_Method *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
cfish_Method_is_a(cfish_Method *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern CFISH_VISIBLE uint32_t CFISH_Method_To_Host_OFFSET;
static CFISH_INLINE void*
CFISH_Method_To_Host(cfish_Method* self, void* vcache) {
#ifdef CFP_CFISH
    return CFISH_Obj_To_Host_IMP((cfish_Obj*)self, vcache);
#else
    const CFISH_Method_To_Host_t method = (CFISH_Method_To_Host_t)cfish_obj_method(self, CFISH_Method_To_Host_OFFSET);
    return method(self, vcache);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_Method_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
CFISH_Method_Clone(cfish_Method* self) {
#ifdef CFP_CFISH
    return CFISH_Obj_Clone_IMP((cfish_Obj*)self);
#else
    const CFISH_Method_Clone_t method = (CFISH_Method_Clone_t)cfish_obj_method(self, CFISH_Method_Clone_OFFSET);
    return method(self);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_Method_Equals_OFFSET;
static CFISH_INLINE bool
CFISH_Method_Equals(cfish_Method* self, cfish_Obj* other) {
#ifdef CFP_CFISH
    return CFISH_Obj_Equals_IMP((cfish_Obj*)self, other);
#else
    const CFISH_Method_Equals_t method = (CFISH_Method_Equals_t)cfish_obj_method(self, CFISH_Method_Equals_OFFSET);
    return method(self, other);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_Method_Compare_To_OFFSET;
static CFISH_INLINE int32_t
CFISH_Method_Compare_To(cfish_Method* self, cfish_Obj* other) {
#ifdef CFP_CFISH
    return CFISH_Obj_Compare_To_IMP((cfish_Obj*)self, other);
#else
    const CFISH_Method_Compare_To_t method = (CFISH_Method_Compare_To_t)cfish_obj_method(self, CFISH_Method_Compare_To_OFFSET);
    return method(self, other);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_Method_Destroy_OFFSET;
static CFISH_INLINE void
CFISH_Method_Destroy(cfish_Method* self) {
#ifdef CFP_CFISH
    CFISH_Method_Destroy_IMP(self);
#else
    const CFISH_Method_Destroy_t method = (CFISH_Method_Destroy_t)cfish_obj_method(self, CFISH_Method_Destroy_OFFSET);
    method(self);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_Method_To_String_OFFSET;
static CFISH_INLINE cfish_String*
CFISH_Method_To_String(cfish_Method* self) {
#ifdef CFP_CFISH
    return CFISH_Obj_To_String_IMP((cfish_Obj*)self);
#else
    const CFISH_Method_To_String_t method = (CFISH_Method_To_String_t)cfish_obj_method(self, CFISH_Method_To_String_OFFSET);
    return method(self);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_Method_Get_Name_OFFSET;
static CFISH_INLINE cfish_String*
CFISH_Method_Get_Name(cfish_Method* self) {
#ifdef CFP_CFISH
    return CFISH_Method_Get_Name_IMP(self);
#else
    const CFISH_Method_Get_Name_t method = (CFISH_Method_Get_Name_t)cfish_obj_method(self, CFISH_Method_Get_Name_OFFSET);
    return method(self);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_Method_Set_Host_Alias_OFFSET;
static CFISH_INLINE void
CFISH_Method_Set_Host_Alias(cfish_Method* self, cfish_String* name) {
#ifdef CFP_CFISH
    CFISH_Method_Set_Host_Alias_IMP(self, name);
#else
    const CFISH_Method_Set_Host_Alias_t method = (CFISH_Method_Set_Host_Alias_t)cfish_obj_method(self, CFISH_Method_Set_Host_Alias_OFFSET);
    method(self, name);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_Method_Get_Host_Alias_OFFSET;
static CFISH_INLINE cfish_String*
CFISH_Method_Get_Host_Alias(cfish_Method* self) {
#ifdef CFP_CFISH
    return CFISH_Method_Get_Host_Alias_IMP(self);
#else
    const CFISH_Method_Get_Host_Alias_t method = (CFISH_Method_Get_Host_Alias_t)cfish_obj_method(self, CFISH_Method_Get_Host_Alias_OFFSET);
    return method(self);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_Method_Is_Excluded_From_Host_OFFSET;
static CFISH_INLINE bool
CFISH_Method_Is_Excluded_From_Host(cfish_Method* self) {
#ifdef CFP_CFISH
    return CFISH_Method_Is_Excluded_From_Host_IMP(self);
#else
    const CFISH_Method_Is_Excluded_From_Host_t method = (CFISH_Method_Is_Excluded_From_Host_t)cfish_obj_method(self, CFISH_Method_Is_Excluded_From_Host_OFFSET);
    return method(self);
#endif
}

extern CFISH_VISIBLE uint32_t CFISH_Method_Host_Name_OFFSET;
static CFISH_INLINE cfish_String*
CFISH_Method_Host_Name(cfish_Method* self) {
#ifdef CFP_CFISH
    return CFISH_Method_Host_Name_IMP(self);
#else
    const CFISH_Method_Host_Name_t method = (CFISH_Method_Host_Name_t)cfish_obj_method(self, CFISH_Method_Host_Name_OFFSET);
    return method(self);
#endif
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef CFISH_USE_SHORT_NAMES
  #define Method cfish_Method
  #define METHOD CFISH_METHOD
  #define Method_new cfish_Method_new
  #define Method_init cfish_Method_init
  #define Method_lower_snake_alias cfish_Method_lower_snake_alias
  #define Method_get_class cfish_Method_get_class
  #define Method_get_class_name cfish_Method_get_class_name
  #define Method_is_a cfish_Method_is_a
  #define Method_Get_Name_IMP CFISH_Method_Get_Name_IMP
  #define Method_Set_Host_Alias_IMP CFISH_Method_Set_Host_Alias_IMP
  #define Method_Get_Host_Alias_IMP CFISH_Method_Get_Host_Alias_IMP
  #define Method_Is_Excluded_From_Host_IMP CFISH_Method_Is_Excluded_From_Host_IMP
  #define Method_Host_Name_IMP CFISH_Method_Host_Name_IMP
  #define Method_Destroy_IMP CFISH_Method_Destroy_IMP
  #define Method_To_Host CFISH_Method_To_Host
  #define Method_To_Host_t CFISH_Method_To_Host_t
  #define Method_Clone CFISH_Method_Clone
  #define Method_Clone_t CFISH_Method_Clone_t
  #define Method_Equals CFISH_Method_Equals
  #define Method_Equals_t CFISH_Method_Equals_t
  #define Method_Compare_To CFISH_Method_Compare_To
  #define Method_Compare_To_t CFISH_Method_Compare_To_t
  #define Method_Destroy CFISH_Method_Destroy
  #define Method_Destroy_t CFISH_Method_Destroy_t
  #define Method_To_String CFISH_Method_To_String
  #define Method_To_String_t CFISH_Method_To_String_t
  #define Method_Get_Name CFISH_Method_Get_Name
  #define Method_Get_Name_t CFISH_Method_Get_Name_t
  #define Method_Set_Host_Alias CFISH_Method_Set_Host_Alias
  #define Method_Set_Host_Alias_t CFISH_Method_Set_Host_Alias_t
  #define Method_Get_Host_Alias CFISH_Method_Get_Host_Alias
  #define Method_Get_Host_Alias_t CFISH_Method_Get_Host_Alias_t
  #define Method_Is_Excluded_From_Host CFISH_Method_Is_Excluded_From_Host
  #define Method_Is_Excluded_From_Host_t CFISH_Method_Is_Excluded_From_Host_t
  #define Method_Host_Name CFISH_Method_Host_Name
  #define Method_Host_Name_t CFISH_Method_Host_Name_t
#endif /* CFISH_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_CLOWNFISH_METHOD */




