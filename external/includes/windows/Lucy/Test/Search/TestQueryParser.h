/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_TEST_SEARCH_TESTQUERYPARSER
#define H_LUCY_TEST_SEARCH_TESTQUERYPARSER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "testlucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish\Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_TESTLUCY_TESTQUERYPARSER
extern uint32_t testlucy_TestQP_IVARS_OFFSET;
typedef struct testlucy_TestQueryParserIVARS testlucy_TestQueryParserIVARS;
static CFISH_INLINE testlucy_TestQueryParserIVARS*
testlucy_TestQP_IVARS(testlucy_TestQueryParser *self) {
   char *ptr = (char*)self + testlucy_TestQP_IVARS_OFFSET;
   return (testlucy_TestQueryParserIVARS*)ptr;
}
#ifdef TESTLUCY_USE_SHORT_NAMES
  #define TestQueryParserIVARS testlucy_TestQueryParserIVARS
  #define TestQP_IVARS testlucy_TestQP_IVARS
#endif

struct testlucy_TestQueryParserIVARS {
    cfish_String* query_string;
    lucy_Query* tree;
    lucy_Query* expanded;
    uint32_t num_hits;
};

#endif /* C_TESTLUCY_TESTQUERYPARSER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

TESTLUCY_VISIBLE testlucy_TestQueryParser*
testlucy_TestQP_new(const char* query_string, lucy_Query* tree, lucy_Query* expanded, uint32_t num_hits);

TESTLUCY_VISIBLE testlucy_TestQueryParser*
testlucy_TestQP_init(testlucy_TestQueryParser* self, const char* query_string, lucy_Query* tree, lucy_Query* expanded, uint32_t num_hits);

cfish_String*
TESTLUCY_TestQP_Get_Query_String_IMP(testlucy_TestQueryParser* self);

lucy_Query*
TESTLUCY_TestQP_Get_Tree_IMP(testlucy_TestQueryParser* self);

lucy_Query*
TESTLUCY_TestQP_Get_Expanded_IMP(testlucy_TestQueryParser* self);

uint32_t
TESTLUCY_TestQP_Get_Num_Hits_IMP(testlucy_TestQueryParser* self);

void
TESTLUCY_TestQP_Destroy_IMP(testlucy_TestQueryParser* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*TESTLUCY_TestQP_To_Host_t)(testlucy_TestQueryParser* self, void* vcache);

typedef cfish_Obj*
(*TESTLUCY_TestQP_Clone_t)(testlucy_TestQueryParser* self);

typedef bool
(*TESTLUCY_TestQP_Equals_t)(testlucy_TestQueryParser* self, cfish_Obj* other);

typedef int32_t
(*TESTLUCY_TestQP_Compare_To_t)(testlucy_TestQueryParser* self, cfish_Obj* other);

typedef void
(*TESTLUCY_TestQP_Destroy_t)(testlucy_TestQueryParser* self);

typedef cfish_String*
(*TESTLUCY_TestQP_To_String_t)(testlucy_TestQueryParser* self);

typedef cfish_String*
(*TESTLUCY_TestQP_Get_Query_String_t)(testlucy_TestQueryParser* self);

typedef lucy_Query*
(*TESTLUCY_TestQP_Get_Tree_t)(testlucy_TestQueryParser* self);

typedef lucy_Query*
(*TESTLUCY_TestQP_Get_Expanded_t)(testlucy_TestQueryParser* self);

typedef uint32_t
(*TESTLUCY_TestQP_Get_Num_Hits_t)(testlucy_TestQueryParser* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
testlucy_TestQP_get_class(testlucy_TestQueryParser *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
testlucy_TestQP_get_class_name(testlucy_TestQueryParser *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
testlucy_TestQP_is_a(testlucy_TestQueryParser *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestQP_To_Host_OFFSET;
static CFISH_INLINE void*
TESTLUCY_TestQP_To_Host(testlucy_TestQueryParser* self, void* vcache) {
    const TESTLUCY_TestQP_To_Host_t method = (TESTLUCY_TestQP_To_Host_t)cfish_obj_method(self, TESTLUCY_TestQP_To_Host_OFFSET);
    return method(self, vcache);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestQP_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTLUCY_TestQP_Clone(testlucy_TestQueryParser* self) {
    const TESTLUCY_TestQP_Clone_t method = (TESTLUCY_TestQP_Clone_t)cfish_obj_method(self, TESTLUCY_TestQP_Clone_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestQP_Equals_OFFSET;
static CFISH_INLINE bool
TESTLUCY_TestQP_Equals(testlucy_TestQueryParser* self, cfish_Obj* other) {
    const TESTLUCY_TestQP_Equals_t method = (TESTLUCY_TestQP_Equals_t)cfish_obj_method(self, TESTLUCY_TestQP_Equals_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestQP_Compare_To_OFFSET;
static CFISH_INLINE int32_t
TESTLUCY_TestQP_Compare_To(testlucy_TestQueryParser* self, cfish_Obj* other) {
    const TESTLUCY_TestQP_Compare_To_t method = (TESTLUCY_TestQP_Compare_To_t)cfish_obj_method(self, TESTLUCY_TestQP_Compare_To_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestQP_Destroy_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestQP_Destroy(testlucy_TestQueryParser* self) {
    const TESTLUCY_TestQP_Destroy_t method = (TESTLUCY_TestQP_Destroy_t)cfish_obj_method(self, TESTLUCY_TestQP_Destroy_OFFSET);
    method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestQP_To_String_OFFSET;
static CFISH_INLINE cfish_String*
TESTLUCY_TestQP_To_String(testlucy_TestQueryParser* self) {
    const TESTLUCY_TestQP_To_String_t method = (TESTLUCY_TestQP_To_String_t)cfish_obj_method(self, TESTLUCY_TestQP_To_String_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestQP_Get_Query_String_OFFSET;
static CFISH_INLINE cfish_String*
TESTLUCY_TestQP_Get_Query_String(testlucy_TestQueryParser* self) {
    const TESTLUCY_TestQP_Get_Query_String_t method = (TESTLUCY_TestQP_Get_Query_String_t)cfish_obj_method(self, TESTLUCY_TestQP_Get_Query_String_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestQP_Get_Tree_OFFSET;
static CFISH_INLINE lucy_Query*
TESTLUCY_TestQP_Get_Tree(testlucy_TestQueryParser* self) {
    const TESTLUCY_TestQP_Get_Tree_t method = (TESTLUCY_TestQP_Get_Tree_t)cfish_obj_method(self, TESTLUCY_TestQP_Get_Tree_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestQP_Get_Expanded_OFFSET;
static CFISH_INLINE lucy_Query*
TESTLUCY_TestQP_Get_Expanded(testlucy_TestQueryParser* self) {
    const TESTLUCY_TestQP_Get_Expanded_t method = (TESTLUCY_TestQP_Get_Expanded_t)cfish_obj_method(self, TESTLUCY_TestQP_Get_Expanded_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestQP_Get_Num_Hits_OFFSET;
static CFISH_INLINE uint32_t
TESTLUCY_TestQP_Get_Num_Hits(testlucy_TestQueryParser* self) {
    const TESTLUCY_TestQP_Get_Num_Hits_t method = (TESTLUCY_TestQP_Get_Num_Hits_t)cfish_obj_method(self, TESTLUCY_TestQP_Get_Num_Hits_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define TestLucy_TestQP_Get_Query_String_OVERRIDE NULL
#define TestLucy_TestQP_Get_Tree_OVERRIDE NULL
#define TestLucy_TestQP_Get_Expanded_OVERRIDE NULL
#define TestLucy_TestQP_Get_Num_Hits_OVERRIDE NULL
#else
cfish_String*
TestLucy_TestQP_Get_Query_String_OVERRIDE(testlucy_TestQueryParser* self);
lucy_Query*
TestLucy_TestQP_Get_Tree_OVERRIDE(testlucy_TestQueryParser* self);
lucy_Query*
TestLucy_TestQP_Get_Expanded_OVERRIDE(testlucy_TestQueryParser* self);
uint32_t
TestLucy_TestQP_Get_Num_Hits_OVERRIDE(testlucy_TestQueryParser* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef TESTLUCY_USE_SHORT_NAMES
  #define TestQueryParser testlucy_TestQueryParser
  #define TESTQUERYPARSER TESTLUCY_TESTQUERYPARSER
  #define TestQP_new testlucy_TestQP_new
  #define TestQP_init testlucy_TestQP_init
  #define TestQP_get_class testlucy_TestQP_get_class
  #define TestQP_get_class_name testlucy_TestQP_get_class_name
  #define TestQP_is_a testlucy_TestQP_is_a
  #define TestQP_Get_Query_String_IMP TESTLUCY_TestQP_Get_Query_String_IMP
  #define TestQP_Get_Tree_IMP TESTLUCY_TestQP_Get_Tree_IMP
  #define TestQP_Get_Expanded_IMP TESTLUCY_TestQP_Get_Expanded_IMP
  #define TestQP_Get_Num_Hits_IMP TESTLUCY_TestQP_Get_Num_Hits_IMP
  #define TestQP_Destroy_IMP TESTLUCY_TestQP_Destroy_IMP
  #define TestQP_To_Host TESTLUCY_TestQP_To_Host
  #define TestQP_To_Host_t TESTLUCY_TestQP_To_Host_t
  #define TestQP_Clone TESTLUCY_TestQP_Clone
  #define TestQP_Clone_t TESTLUCY_TestQP_Clone_t
  #define TestQP_Equals TESTLUCY_TestQP_Equals
  #define TestQP_Equals_t TESTLUCY_TestQP_Equals_t
  #define TestQP_Compare_To TESTLUCY_TestQP_Compare_To
  #define TestQP_Compare_To_t TESTLUCY_TestQP_Compare_To_t
  #define TestQP_Destroy TESTLUCY_TestQP_Destroy
  #define TestQP_Destroy_t TESTLUCY_TestQP_Destroy_t
  #define TestQP_To_String TESTLUCY_TestQP_To_String
  #define TestQP_To_String_t TESTLUCY_TestQP_To_String_t
  #define TestQP_Get_Query_String TESTLUCY_TestQP_Get_Query_String
  #define TestQP_Get_Query_String_t TESTLUCY_TestQP_Get_Query_String_t
  #define TestQP_Get_Tree TESTLUCY_TestQP_Get_Tree
  #define TestQP_Get_Tree_t TESTLUCY_TestQP_Get_Tree_t
  #define TestQP_Get_Expanded TESTLUCY_TestQP_Get_Expanded
  #define TestQP_Get_Expanded_t TESTLUCY_TestQP_Get_Expanded_t
  #define TestQP_Get_Num_Hits TESTLUCY_TestQP_Get_Num_Hits
  #define TestQP_Get_Num_Hits_t TESTLUCY_TestQP_Get_Num_Hits_t
#endif /* TESTLUCY_USE_SHORT_NAMES */






#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_TEST_SEARCH_TESTQUERYPARSER */




