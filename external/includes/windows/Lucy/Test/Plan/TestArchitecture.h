/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_TEST_PLAN_TESTARCHITECTURE
#define H_LUCY_TEST_PLAN_TESTARCHITECTURE 1


#ifdef __cplusplus
extern "C" {
#endif

#include "testlucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy\Plan\Architecture.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_TESTLUCY_TESTARCHITECTURE
extern uint32_t testlucy_TestArch_IVARS_OFFSET;
typedef struct testlucy_TestArchitectureIVARS testlucy_TestArchitectureIVARS;
static CFISH_INLINE testlucy_TestArchitectureIVARS*
testlucy_TestArch_IVARS(testlucy_TestArchitecture *self) {
   char *ptr = (char*)self + testlucy_TestArch_IVARS_OFFSET;
   return (testlucy_TestArchitectureIVARS*)ptr;
}
#ifdef TESTLUCY_USE_SHORT_NAMES
  #define TestArchitectureIVARS testlucy_TestArchitectureIVARS
  #define TestArch_IVARS testlucy_TestArch_IVARS
#endif


#endif /* C_TESTLUCY_TESTARCHITECTURE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

TESTLUCY_VISIBLE testlucy_TestArchitecture*
testlucy_TestArch_new(void);

TESTLUCY_VISIBLE testlucy_TestArchitecture*
testlucy_TestArch_init(testlucy_TestArchitecture* self);

int32_t
TESTLUCY_TestArch_Index_Interval_IMP(testlucy_TestArchitecture* self);

int32_t
TESTLUCY_TestArch_Skip_Interval_IMP(testlucy_TestArchitecture* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*TESTLUCY_TestArch_To_Host_t)(testlucy_TestArchitecture* self, void* vcache);

typedef cfish_Obj*
(*TESTLUCY_TestArch_Clone_t)(testlucy_TestArchitecture* self);

typedef bool
(*TESTLUCY_TestArch_Equals_t)(testlucy_TestArchitecture* self, cfish_Obj* other);

typedef int32_t
(*TESTLUCY_TestArch_Compare_To_t)(testlucy_TestArchitecture* self, cfish_Obj* other);

typedef void
(*TESTLUCY_TestArch_Destroy_t)(testlucy_TestArchitecture* self);

typedef cfish_String*
(*TESTLUCY_TestArch_To_String_t)(testlucy_TestArchitecture* self);

typedef void
(*TESTLUCY_TestArch_Init_Seg_Writer_t)(testlucy_TestArchitecture* self, lucy_SegWriter* writer);

typedef void
(*TESTLUCY_TestArch_Register_Lexicon_Writer_t)(testlucy_TestArchitecture* self, lucy_SegWriter* writer);

typedef void
(*TESTLUCY_TestArch_Register_Posting_List_Writer_t)(testlucy_TestArchitecture* self, lucy_SegWriter* writer);

typedef void
(*TESTLUCY_TestArch_Register_Doc_Writer_t)(testlucy_TestArchitecture* self, lucy_SegWriter* writer);

typedef void
(*TESTLUCY_TestArch_Register_Sort_Writer_t)(testlucy_TestArchitecture* self, lucy_SegWriter* writer);

typedef void
(*TESTLUCY_TestArch_Register_Highlight_Writer_t)(testlucy_TestArchitecture* self, lucy_SegWriter* writer);

typedef void
(*TESTLUCY_TestArch_Register_Deletions_Writer_t)(testlucy_TestArchitecture* self, lucy_SegWriter* writer);

typedef void
(*TESTLUCY_TestArch_Init_Seg_Reader_t)(testlucy_TestArchitecture* self, lucy_SegReader* reader);

typedef void
(*TESTLUCY_TestArch_Register_Doc_Reader_t)(testlucy_TestArchitecture* self, lucy_SegReader* reader);

typedef void
(*TESTLUCY_TestArch_Register_Posting_List_Reader_t)(testlucy_TestArchitecture* self, lucy_SegReader* reader);

typedef void
(*TESTLUCY_TestArch_Register_Sort_Reader_t)(testlucy_TestArchitecture* self, lucy_SegReader* reader);

typedef void
(*TESTLUCY_TestArch_Register_Highlight_Reader_t)(testlucy_TestArchitecture* self, lucy_SegReader* reader);

typedef void
(*TESTLUCY_TestArch_Register_Lexicon_Reader_t)(testlucy_TestArchitecture* self, lucy_SegReader* reader);

typedef void
(*TESTLUCY_TestArch_Register_Deletions_Reader_t)(testlucy_TestArchitecture* self, lucy_SegReader* reader);

typedef lucy_Similarity*
(*TESTLUCY_TestArch_Make_Similarity_t)(testlucy_TestArchitecture* self);

typedef int32_t
(*TESTLUCY_TestArch_Index_Interval_t)(testlucy_TestArchitecture* self);

typedef int32_t
(*TESTLUCY_TestArch_Skip_Interval_t)(testlucy_TestArchitecture* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
testlucy_TestArch_get_class(testlucy_TestArchitecture *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
testlucy_TestArch_get_class_name(testlucy_TestArchitecture *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
testlucy_TestArch_is_a(testlucy_TestArchitecture *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_To_Host_OFFSET;
static CFISH_INLINE void*
TESTLUCY_TestArch_To_Host(testlucy_TestArchitecture* self, void* vcache) {
    const TESTLUCY_TestArch_To_Host_t method = (TESTLUCY_TestArch_To_Host_t)cfish_obj_method(self, TESTLUCY_TestArch_To_Host_OFFSET);
    return method(self, vcache);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTLUCY_TestArch_Clone(testlucy_TestArchitecture* self) {
    const TESTLUCY_TestArch_Clone_t method = (TESTLUCY_TestArch_Clone_t)cfish_obj_method(self, TESTLUCY_TestArch_Clone_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Equals_OFFSET;
static CFISH_INLINE bool
TESTLUCY_TestArch_Equals(testlucy_TestArchitecture* self, cfish_Obj* other) {
    const TESTLUCY_TestArch_Equals_t method = (TESTLUCY_TestArch_Equals_t)cfish_obj_method(self, TESTLUCY_TestArch_Equals_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Compare_To_OFFSET;
static CFISH_INLINE int32_t
TESTLUCY_TestArch_Compare_To(testlucy_TestArchitecture* self, cfish_Obj* other) {
    const TESTLUCY_TestArch_Compare_To_t method = (TESTLUCY_TestArch_Compare_To_t)cfish_obj_method(self, TESTLUCY_TestArch_Compare_To_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Destroy_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestArch_Destroy(testlucy_TestArchitecture* self) {
    const TESTLUCY_TestArch_Destroy_t method = (TESTLUCY_TestArch_Destroy_t)cfish_obj_method(self, TESTLUCY_TestArch_Destroy_OFFSET);
    method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_To_String_OFFSET;
static CFISH_INLINE cfish_String*
TESTLUCY_TestArch_To_String(testlucy_TestArchitecture* self) {
    const TESTLUCY_TestArch_To_String_t method = (TESTLUCY_TestArch_To_String_t)cfish_obj_method(self, TESTLUCY_TestArch_To_String_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Init_Seg_Writer_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestArch_Init_Seg_Writer(testlucy_TestArchitecture* self, lucy_SegWriter* writer) {
    const TESTLUCY_TestArch_Init_Seg_Writer_t method = (TESTLUCY_TestArch_Init_Seg_Writer_t)cfish_obj_method(self, TESTLUCY_TestArch_Init_Seg_Writer_OFFSET);
    method(self, writer);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Register_Lexicon_Writer_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestArch_Register_Lexicon_Writer(testlucy_TestArchitecture* self, lucy_SegWriter* writer) {
    const TESTLUCY_TestArch_Register_Lexicon_Writer_t method = (TESTLUCY_TestArch_Register_Lexicon_Writer_t)cfish_obj_method(self, TESTLUCY_TestArch_Register_Lexicon_Writer_OFFSET);
    method(self, writer);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Register_Posting_List_Writer_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestArch_Register_Posting_List_Writer(testlucy_TestArchitecture* self, lucy_SegWriter* writer) {
    const TESTLUCY_TestArch_Register_Posting_List_Writer_t method = (TESTLUCY_TestArch_Register_Posting_List_Writer_t)cfish_obj_method(self, TESTLUCY_TestArch_Register_Posting_List_Writer_OFFSET);
    method(self, writer);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Register_Doc_Writer_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestArch_Register_Doc_Writer(testlucy_TestArchitecture* self, lucy_SegWriter* writer) {
    const TESTLUCY_TestArch_Register_Doc_Writer_t method = (TESTLUCY_TestArch_Register_Doc_Writer_t)cfish_obj_method(self, TESTLUCY_TestArch_Register_Doc_Writer_OFFSET);
    method(self, writer);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Register_Sort_Writer_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestArch_Register_Sort_Writer(testlucy_TestArchitecture* self, lucy_SegWriter* writer) {
    const TESTLUCY_TestArch_Register_Sort_Writer_t method = (TESTLUCY_TestArch_Register_Sort_Writer_t)cfish_obj_method(self, TESTLUCY_TestArch_Register_Sort_Writer_OFFSET);
    method(self, writer);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Register_Highlight_Writer_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestArch_Register_Highlight_Writer(testlucy_TestArchitecture* self, lucy_SegWriter* writer) {
    const TESTLUCY_TestArch_Register_Highlight_Writer_t method = (TESTLUCY_TestArch_Register_Highlight_Writer_t)cfish_obj_method(self, TESTLUCY_TestArch_Register_Highlight_Writer_OFFSET);
    method(self, writer);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Register_Deletions_Writer_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestArch_Register_Deletions_Writer(testlucy_TestArchitecture* self, lucy_SegWriter* writer) {
    const TESTLUCY_TestArch_Register_Deletions_Writer_t method = (TESTLUCY_TestArch_Register_Deletions_Writer_t)cfish_obj_method(self, TESTLUCY_TestArch_Register_Deletions_Writer_OFFSET);
    method(self, writer);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Init_Seg_Reader_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestArch_Init_Seg_Reader(testlucy_TestArchitecture* self, lucy_SegReader* reader) {
    const TESTLUCY_TestArch_Init_Seg_Reader_t method = (TESTLUCY_TestArch_Init_Seg_Reader_t)cfish_obj_method(self, TESTLUCY_TestArch_Init_Seg_Reader_OFFSET);
    method(self, reader);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Register_Doc_Reader_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestArch_Register_Doc_Reader(testlucy_TestArchitecture* self, lucy_SegReader* reader) {
    const TESTLUCY_TestArch_Register_Doc_Reader_t method = (TESTLUCY_TestArch_Register_Doc_Reader_t)cfish_obj_method(self, TESTLUCY_TestArch_Register_Doc_Reader_OFFSET);
    method(self, reader);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Register_Posting_List_Reader_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestArch_Register_Posting_List_Reader(testlucy_TestArchitecture* self, lucy_SegReader* reader) {
    const TESTLUCY_TestArch_Register_Posting_List_Reader_t method = (TESTLUCY_TestArch_Register_Posting_List_Reader_t)cfish_obj_method(self, TESTLUCY_TestArch_Register_Posting_List_Reader_OFFSET);
    method(self, reader);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Register_Sort_Reader_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestArch_Register_Sort_Reader(testlucy_TestArchitecture* self, lucy_SegReader* reader) {
    const TESTLUCY_TestArch_Register_Sort_Reader_t method = (TESTLUCY_TestArch_Register_Sort_Reader_t)cfish_obj_method(self, TESTLUCY_TestArch_Register_Sort_Reader_OFFSET);
    method(self, reader);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Register_Highlight_Reader_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestArch_Register_Highlight_Reader(testlucy_TestArchitecture* self, lucy_SegReader* reader) {
    const TESTLUCY_TestArch_Register_Highlight_Reader_t method = (TESTLUCY_TestArch_Register_Highlight_Reader_t)cfish_obj_method(self, TESTLUCY_TestArch_Register_Highlight_Reader_OFFSET);
    method(self, reader);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Register_Lexicon_Reader_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestArch_Register_Lexicon_Reader(testlucy_TestArchitecture* self, lucy_SegReader* reader) {
    const TESTLUCY_TestArch_Register_Lexicon_Reader_t method = (TESTLUCY_TestArch_Register_Lexicon_Reader_t)cfish_obj_method(self, TESTLUCY_TestArch_Register_Lexicon_Reader_OFFSET);
    method(self, reader);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Register_Deletions_Reader_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestArch_Register_Deletions_Reader(testlucy_TestArchitecture* self, lucy_SegReader* reader) {
    const TESTLUCY_TestArch_Register_Deletions_Reader_t method = (TESTLUCY_TestArch_Register_Deletions_Reader_t)cfish_obj_method(self, TESTLUCY_TestArch_Register_Deletions_Reader_OFFSET);
    method(self, reader);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Make_Similarity_OFFSET;
static CFISH_INLINE lucy_Similarity*
TESTLUCY_TestArch_Make_Similarity(testlucy_TestArchitecture* self) {
    const TESTLUCY_TestArch_Make_Similarity_t method = (TESTLUCY_TestArch_Make_Similarity_t)cfish_obj_method(self, TESTLUCY_TestArch_Make_Similarity_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Index_Interval_OFFSET;
static CFISH_INLINE int32_t
TESTLUCY_TestArch_Index_Interval(testlucy_TestArchitecture* self) {
    const TESTLUCY_TestArch_Index_Interval_t method = (TESTLUCY_TestArch_Index_Interval_t)cfish_obj_method(self, TESTLUCY_TestArch_Index_Interval_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestArch_Skip_Interval_OFFSET;
static CFISH_INLINE int32_t
TESTLUCY_TestArch_Skip_Interval(testlucy_TestArchitecture* self) {
    const TESTLUCY_TestArch_Skip_Interval_t method = (TESTLUCY_TestArch_Skip_Interval_t)cfish_obj_method(self, TESTLUCY_TestArch_Skip_Interval_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef TESTLUCY_USE_SHORT_NAMES
  #define TestArchitecture testlucy_TestArchitecture
  #define TESTARCHITECTURE TESTLUCY_TESTARCHITECTURE
  #define TestArch_new testlucy_TestArch_new
  #define TestArch_init testlucy_TestArch_init
  #define TestArch_get_class testlucy_TestArch_get_class
  #define TestArch_get_class_name testlucy_TestArch_get_class_name
  #define TestArch_is_a testlucy_TestArch_is_a
  #define TestArch_Index_Interval_IMP TESTLUCY_TestArch_Index_Interval_IMP
  #define TestArch_Skip_Interval_IMP TESTLUCY_TestArch_Skip_Interval_IMP
  #define TestArch_To_Host TESTLUCY_TestArch_To_Host
  #define TestArch_To_Host_t TESTLUCY_TestArch_To_Host_t
  #define TestArch_Clone TESTLUCY_TestArch_Clone
  #define TestArch_Clone_t TESTLUCY_TestArch_Clone_t
  #define TestArch_Equals TESTLUCY_TestArch_Equals
  #define TestArch_Equals_t TESTLUCY_TestArch_Equals_t
  #define TestArch_Compare_To TESTLUCY_TestArch_Compare_To
  #define TestArch_Compare_To_t TESTLUCY_TestArch_Compare_To_t
  #define TestArch_Destroy TESTLUCY_TestArch_Destroy
  #define TestArch_Destroy_t TESTLUCY_TestArch_Destroy_t
  #define TestArch_To_String TESTLUCY_TestArch_To_String
  #define TestArch_To_String_t TESTLUCY_TestArch_To_String_t
  #define TestArch_Init_Seg_Writer TESTLUCY_TestArch_Init_Seg_Writer
  #define TestArch_Init_Seg_Writer_t TESTLUCY_TestArch_Init_Seg_Writer_t
  #define TestArch_Register_Lexicon_Writer TESTLUCY_TestArch_Register_Lexicon_Writer
  #define TestArch_Register_Lexicon_Writer_t TESTLUCY_TestArch_Register_Lexicon_Writer_t
  #define TestArch_Register_Posting_List_Writer TESTLUCY_TestArch_Register_Posting_List_Writer
  #define TestArch_Register_Posting_List_Writer_t TESTLUCY_TestArch_Register_Posting_List_Writer_t
  #define TestArch_Register_Doc_Writer TESTLUCY_TestArch_Register_Doc_Writer
  #define TestArch_Register_Doc_Writer_t TESTLUCY_TestArch_Register_Doc_Writer_t
  #define TestArch_Register_Sort_Writer TESTLUCY_TestArch_Register_Sort_Writer
  #define TestArch_Register_Sort_Writer_t TESTLUCY_TestArch_Register_Sort_Writer_t
  #define TestArch_Register_Highlight_Writer TESTLUCY_TestArch_Register_Highlight_Writer
  #define TestArch_Register_Highlight_Writer_t TESTLUCY_TestArch_Register_Highlight_Writer_t
  #define TestArch_Register_Deletions_Writer TESTLUCY_TestArch_Register_Deletions_Writer
  #define TestArch_Register_Deletions_Writer_t TESTLUCY_TestArch_Register_Deletions_Writer_t
  #define TestArch_Init_Seg_Reader TESTLUCY_TestArch_Init_Seg_Reader
  #define TestArch_Init_Seg_Reader_t TESTLUCY_TestArch_Init_Seg_Reader_t
  #define TestArch_Register_Doc_Reader TESTLUCY_TestArch_Register_Doc_Reader
  #define TestArch_Register_Doc_Reader_t TESTLUCY_TestArch_Register_Doc_Reader_t
  #define TestArch_Register_Posting_List_Reader TESTLUCY_TestArch_Register_Posting_List_Reader
  #define TestArch_Register_Posting_List_Reader_t TESTLUCY_TestArch_Register_Posting_List_Reader_t
  #define TestArch_Register_Sort_Reader TESTLUCY_TestArch_Register_Sort_Reader
  #define TestArch_Register_Sort_Reader_t TESTLUCY_TestArch_Register_Sort_Reader_t
  #define TestArch_Register_Highlight_Reader TESTLUCY_TestArch_Register_Highlight_Reader
  #define TestArch_Register_Highlight_Reader_t TESTLUCY_TestArch_Register_Highlight_Reader_t
  #define TestArch_Register_Lexicon_Reader TESTLUCY_TestArch_Register_Lexicon_Reader
  #define TestArch_Register_Lexicon_Reader_t TESTLUCY_TestArch_Register_Lexicon_Reader_t
  #define TestArch_Register_Deletions_Reader TESTLUCY_TestArch_Register_Deletions_Reader
  #define TestArch_Register_Deletions_Reader_t TESTLUCY_TestArch_Register_Deletions_Reader_t
  #define TestArch_Make_Similarity TESTLUCY_TestArch_Make_Similarity
  #define TestArch_Make_Similarity_t TESTLUCY_TestArch_Make_Similarity_t
  #define TestArch_Index_Interval TESTLUCY_TestArch_Index_Interval
  #define TestArch_Index_Interval_t TESTLUCY_TestArch_Index_Interval_t
  #define TestArch_Skip_Interval TESTLUCY_TestArch_Skip_Interval
  #define TestArch_Skip_Interval_t TESTLUCY_TestArch_Skip_Interval_t
#endif /* TESTLUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_TEST_PLAN_TESTARCHITECTURE */




