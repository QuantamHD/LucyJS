/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_TEST_STORE_TESTFSDIRHANDLE
#define H_LUCY_TEST_STORE_TESTFSDIRHANDLE 1


#ifdef __cplusplus
extern "C" {
#endif

#include "testlucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish\TestHarness\TestBatch.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_TESTLUCY_TESTFSDIRHANDLE
extern uint32_t testlucy_TestFSDH_IVARS_OFFSET;
typedef struct testlucy_TestFSDirHandleIVARS testlucy_TestFSDirHandleIVARS;
static CFISH_INLINE testlucy_TestFSDirHandleIVARS*
testlucy_TestFSDH_IVARS(testlucy_TestFSDirHandle *self) {
   char *ptr = (char*)self + testlucy_TestFSDH_IVARS_OFFSET;
   return (testlucy_TestFSDirHandleIVARS*)ptr;
}
#ifdef TESTLUCY_USE_SHORT_NAMES
  #define TestFSDirHandleIVARS testlucy_TestFSDirHandleIVARS
  #define TestFSDH_IVARS testlucy_TestFSDH_IVARS
#endif


#endif /* C_TESTLUCY_TESTFSDIRHANDLE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

TESTLUCY_VISIBLE testlucy_TestFSDirHandle*
testlucy_TestFSDH_new(void);

void
TESTLUCY_TestFSDH_Run_IMP(testlucy_TestFSDirHandle* self, cfish_TestBatchRunner* runner);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*TESTLUCY_TestFSDH_To_Host_t)(testlucy_TestFSDirHandle* self, void* vcache);

typedef cfish_Obj*
(*TESTLUCY_TestFSDH_Clone_t)(testlucy_TestFSDirHandle* self);

typedef bool
(*TESTLUCY_TestFSDH_Equals_t)(testlucy_TestFSDirHandle* self, cfish_Obj* other);

typedef int32_t
(*TESTLUCY_TestFSDH_Compare_To_t)(testlucy_TestFSDirHandle* self, cfish_Obj* other);

typedef void
(*TESTLUCY_TestFSDH_Destroy_t)(testlucy_TestFSDirHandle* self);

typedef cfish_String*
(*TESTLUCY_TestFSDH_To_String_t)(testlucy_TestFSDirHandle* self);

typedef void
(*TESTLUCY_TestFSDH_Run_t)(testlucy_TestFSDirHandle* self, cfish_TestBatchRunner* runner);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
testlucy_TestFSDH_get_class(testlucy_TestFSDirHandle *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
testlucy_TestFSDH_get_class_name(testlucy_TestFSDirHandle *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
testlucy_TestFSDH_is_a(testlucy_TestFSDirHandle *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestFSDH_To_Host_OFFSET;
static CFISH_INLINE void*
TESTLUCY_TestFSDH_To_Host(testlucy_TestFSDirHandle* self, void* vcache) {
    const TESTLUCY_TestFSDH_To_Host_t method = (TESTLUCY_TestFSDH_To_Host_t)cfish_obj_method(self, TESTLUCY_TestFSDH_To_Host_OFFSET);
    return method(self, vcache);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestFSDH_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTLUCY_TestFSDH_Clone(testlucy_TestFSDirHandle* self) {
    const TESTLUCY_TestFSDH_Clone_t method = (TESTLUCY_TestFSDH_Clone_t)cfish_obj_method(self, TESTLUCY_TestFSDH_Clone_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestFSDH_Equals_OFFSET;
static CFISH_INLINE bool
TESTLUCY_TestFSDH_Equals(testlucy_TestFSDirHandle* self, cfish_Obj* other) {
    const TESTLUCY_TestFSDH_Equals_t method = (TESTLUCY_TestFSDH_Equals_t)cfish_obj_method(self, TESTLUCY_TestFSDH_Equals_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestFSDH_Compare_To_OFFSET;
static CFISH_INLINE int32_t
TESTLUCY_TestFSDH_Compare_To(testlucy_TestFSDirHandle* self, cfish_Obj* other) {
    const TESTLUCY_TestFSDH_Compare_To_t method = (TESTLUCY_TestFSDH_Compare_To_t)cfish_obj_method(self, TESTLUCY_TestFSDH_Compare_To_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestFSDH_Destroy_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestFSDH_Destroy(testlucy_TestFSDirHandle* self) {
    const TESTLUCY_TestFSDH_Destroy_t method = (TESTLUCY_TestFSDH_Destroy_t)cfish_obj_method(self, TESTLUCY_TestFSDH_Destroy_OFFSET);
    method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestFSDH_To_String_OFFSET;
static CFISH_INLINE cfish_String*
TESTLUCY_TestFSDH_To_String(testlucy_TestFSDirHandle* self) {
    const TESTLUCY_TestFSDH_To_String_t method = (TESTLUCY_TestFSDH_To_String_t)cfish_obj_method(self, TESTLUCY_TestFSDH_To_String_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_TestFSDH_Run_OFFSET;
static CFISH_INLINE void
TESTLUCY_TestFSDH_Run(testlucy_TestFSDirHandle* self, cfish_TestBatchRunner* runner) {
    const TESTLUCY_TestFSDH_Run_t method = (TESTLUCY_TestFSDH_Run_t)cfish_obj_method(self, TESTLUCY_TestFSDH_Run_OFFSET);
    method(self, runner);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef TESTLUCY_USE_SHORT_NAMES
  #define TestFSDirHandle testlucy_TestFSDirHandle
  #define TESTFSDIRHANDLE TESTLUCY_TESTFSDIRHANDLE
  #define TestFSDH_new testlucy_TestFSDH_new
  #define TestFSDH_get_class testlucy_TestFSDH_get_class
  #define TestFSDH_get_class_name testlucy_TestFSDH_get_class_name
  #define TestFSDH_is_a testlucy_TestFSDH_is_a
  #define TestFSDH_Run_IMP TESTLUCY_TestFSDH_Run_IMP
  #define TestFSDH_To_Host TESTLUCY_TestFSDH_To_Host
  #define TestFSDH_To_Host_t TESTLUCY_TestFSDH_To_Host_t
  #define TestFSDH_Clone TESTLUCY_TestFSDH_Clone
  #define TestFSDH_Clone_t TESTLUCY_TestFSDH_Clone_t
  #define TestFSDH_Equals TESTLUCY_TestFSDH_Equals
  #define TestFSDH_Equals_t TESTLUCY_TestFSDH_Equals_t
  #define TestFSDH_Compare_To TESTLUCY_TestFSDH_Compare_To
  #define TestFSDH_Compare_To_t TESTLUCY_TestFSDH_Compare_To_t
  #define TestFSDH_Destroy TESTLUCY_TestFSDH_Destroy
  #define TestFSDH_Destroy_t TESTLUCY_TestFSDH_Destroy_t
  #define TestFSDH_To_String TESTLUCY_TestFSDH_To_String
  #define TestFSDH_To_String_t TESTLUCY_TestFSDH_To_String_t
  #define TestFSDH_Run TESTLUCY_TestFSDH_Run
  #define TestFSDH_Run_t TESTLUCY_TestFSDH_Run_t
#endif /* TESTLUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_TEST_STORE_TESTFSDIRHANDLE */




