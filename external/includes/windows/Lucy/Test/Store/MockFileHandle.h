/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_TEST_STORE_MOCKFILEHANDLE
#define H_LUCY_TEST_STORE_MOCKFILEHANDLE 1


#ifdef __cplusplus
extern "C" {
#endif

#include "testlucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy\Store\FileHandle.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_TESTLUCY_MOCKFILEHANDLE
extern uint32_t testlucy_MockFileHandle_IVARS_OFFSET;
typedef struct testlucy_MockFileHandleIVARS testlucy_MockFileHandleIVARS;
static CFISH_INLINE testlucy_MockFileHandleIVARS*
testlucy_MockFileHandle_IVARS(testlucy_MockFileHandle *self) {
   char *ptr = (char*)self + testlucy_MockFileHandle_IVARS_OFFSET;
   return (testlucy_MockFileHandleIVARS*)ptr;
}
#ifdef TESTLUCY_USE_SHORT_NAMES
  #define MockFileHandleIVARS testlucy_MockFileHandleIVARS
  #define MockFileHandle_IVARS testlucy_MockFileHandle_IVARS
#endif

struct testlucy_MockFileHandleIVARS {
    int64_t len;
};

#endif /* C_TESTLUCY_MOCKFILEHANDLE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

TESTLUCY_VISIBLE testlucy_MockFileHandle*
testlucy_MockFileHandle_new(cfish_String* path, int64_t length);

TESTLUCY_VISIBLE testlucy_MockFileHandle*
testlucy_MockFileHandle_init(testlucy_MockFileHandle* self, cfish_String* path, int64_t length);

bool
TESTLUCY_MockFileHandle_Window_IMP(testlucy_MockFileHandle* self, lucy_FileWindow* window, int64_t offset, int64_t len);

bool
TESTLUCY_MockFileHandle_Release_Window_IMP(testlucy_MockFileHandle* self, lucy_FileWindow* window);

int64_t
TESTLUCY_MockFileHandle_Length_IMP(testlucy_MockFileHandle* self);

bool
TESTLUCY_MockFileHandle_Close_IMP(testlucy_MockFileHandle* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*TESTLUCY_MockFileHandle_To_Host_t)(testlucy_MockFileHandle* self, void* vcache);

typedef cfish_Obj*
(*TESTLUCY_MockFileHandle_Clone_t)(testlucy_MockFileHandle* self);

typedef bool
(*TESTLUCY_MockFileHandle_Equals_t)(testlucy_MockFileHandle* self, cfish_Obj* other);

typedef int32_t
(*TESTLUCY_MockFileHandle_Compare_To_t)(testlucy_MockFileHandle* self, cfish_Obj* other);

typedef void
(*TESTLUCY_MockFileHandle_Destroy_t)(testlucy_MockFileHandle* self);

typedef cfish_String*
(*TESTLUCY_MockFileHandle_To_String_t)(testlucy_MockFileHandle* self);

typedef bool
(*TESTLUCY_MockFileHandle_Window_t)(testlucy_MockFileHandle* self, lucy_FileWindow* window, int64_t offset, int64_t len);

typedef bool
(*TESTLUCY_MockFileHandle_Release_Window_t)(testlucy_MockFileHandle* self, lucy_FileWindow* window);

typedef bool
(*TESTLUCY_MockFileHandle_Read_t)(testlucy_MockFileHandle* self, char* dest, int64_t offset, size_t len);

typedef bool
(*TESTLUCY_MockFileHandle_Write_t)(testlucy_MockFileHandle* self, const void* data, size_t len);

typedef int64_t
(*TESTLUCY_MockFileHandle_Length_t)(testlucy_MockFileHandle* self);

typedef bool
(*TESTLUCY_MockFileHandle_Grow_t)(testlucy_MockFileHandle* self, int64_t len);

typedef bool
(*TESTLUCY_MockFileHandle_Close_t)(testlucy_MockFileHandle* self);

typedef void
(*TESTLUCY_MockFileHandle_Set_Path_t)(testlucy_MockFileHandle* self, cfish_String* path);

typedef cfish_String*
(*TESTLUCY_MockFileHandle_Get_Path_t)(testlucy_MockFileHandle* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
testlucy_MockFileHandle_get_class(testlucy_MockFileHandle *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
testlucy_MockFileHandle_get_class_name(testlucy_MockFileHandle *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
testlucy_MockFileHandle_is_a(testlucy_MockFileHandle *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_MockFileHandle_To_Host_OFFSET;
static CFISH_INLINE void*
TESTLUCY_MockFileHandle_To_Host(testlucy_MockFileHandle* self, void* vcache) {
    const TESTLUCY_MockFileHandle_To_Host_t method = (TESTLUCY_MockFileHandle_To_Host_t)cfish_obj_method(self, TESTLUCY_MockFileHandle_To_Host_OFFSET);
    return method(self, vcache);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_MockFileHandle_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
TESTLUCY_MockFileHandle_Clone(testlucy_MockFileHandle* self) {
    const TESTLUCY_MockFileHandle_Clone_t method = (TESTLUCY_MockFileHandle_Clone_t)cfish_obj_method(self, TESTLUCY_MockFileHandle_Clone_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_MockFileHandle_Equals_OFFSET;
static CFISH_INLINE bool
TESTLUCY_MockFileHandle_Equals(testlucy_MockFileHandle* self, cfish_Obj* other) {
    const TESTLUCY_MockFileHandle_Equals_t method = (TESTLUCY_MockFileHandle_Equals_t)cfish_obj_method(self, TESTLUCY_MockFileHandle_Equals_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_MockFileHandle_Compare_To_OFFSET;
static CFISH_INLINE int32_t
TESTLUCY_MockFileHandle_Compare_To(testlucy_MockFileHandle* self, cfish_Obj* other) {
    const TESTLUCY_MockFileHandle_Compare_To_t method = (TESTLUCY_MockFileHandle_Compare_To_t)cfish_obj_method(self, TESTLUCY_MockFileHandle_Compare_To_OFFSET);
    return method(self, other);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_MockFileHandle_Destroy_OFFSET;
static CFISH_INLINE void
TESTLUCY_MockFileHandle_Destroy(testlucy_MockFileHandle* self) {
    const TESTLUCY_MockFileHandle_Destroy_t method = (TESTLUCY_MockFileHandle_Destroy_t)cfish_obj_method(self, TESTLUCY_MockFileHandle_Destroy_OFFSET);
    method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_MockFileHandle_To_String_OFFSET;
static CFISH_INLINE cfish_String*
TESTLUCY_MockFileHandle_To_String(testlucy_MockFileHandle* self) {
    const TESTLUCY_MockFileHandle_To_String_t method = (TESTLUCY_MockFileHandle_To_String_t)cfish_obj_method(self, TESTLUCY_MockFileHandle_To_String_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_MockFileHandle_Window_OFFSET;
static CFISH_INLINE bool
TESTLUCY_MockFileHandle_Window(testlucy_MockFileHandle* self, lucy_FileWindow* window, int64_t offset, int64_t len) {
    const TESTLUCY_MockFileHandle_Window_t method = (TESTLUCY_MockFileHandle_Window_t)cfish_obj_method(self, TESTLUCY_MockFileHandle_Window_OFFSET);
    return method(self, window, offset, len);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_MockFileHandle_Release_Window_OFFSET;
static CFISH_INLINE bool
TESTLUCY_MockFileHandle_Release_Window(testlucy_MockFileHandle* self, lucy_FileWindow* window) {
    const TESTLUCY_MockFileHandle_Release_Window_t method = (TESTLUCY_MockFileHandle_Release_Window_t)cfish_obj_method(self, TESTLUCY_MockFileHandle_Release_Window_OFFSET);
    return method(self, window);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_MockFileHandle_Read_OFFSET;
static CFISH_INLINE bool
TESTLUCY_MockFileHandle_Read(testlucy_MockFileHandle* self, char* dest, int64_t offset, size_t len) {
    const TESTLUCY_MockFileHandle_Read_t method = (TESTLUCY_MockFileHandle_Read_t)cfish_obj_method(self, TESTLUCY_MockFileHandle_Read_OFFSET);
    return method(self, dest, offset, len);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_MockFileHandle_Write_OFFSET;
static CFISH_INLINE bool
TESTLUCY_MockFileHandle_Write(testlucy_MockFileHandle* self, const void* data, size_t len) {
    const TESTLUCY_MockFileHandle_Write_t method = (TESTLUCY_MockFileHandle_Write_t)cfish_obj_method(self, TESTLUCY_MockFileHandle_Write_OFFSET);
    return method(self, data, len);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_MockFileHandle_Length_OFFSET;
static CFISH_INLINE int64_t
TESTLUCY_MockFileHandle_Length(testlucy_MockFileHandle* self) {
    const TESTLUCY_MockFileHandle_Length_t method = (TESTLUCY_MockFileHandle_Length_t)cfish_obj_method(self, TESTLUCY_MockFileHandle_Length_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_MockFileHandle_Grow_OFFSET;
static CFISH_INLINE bool
TESTLUCY_MockFileHandle_Grow(testlucy_MockFileHandle* self, int64_t len) {
    const TESTLUCY_MockFileHandle_Grow_t method = (TESTLUCY_MockFileHandle_Grow_t)cfish_obj_method(self, TESTLUCY_MockFileHandle_Grow_OFFSET);
    return method(self, len);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_MockFileHandle_Close_OFFSET;
static CFISH_INLINE bool
TESTLUCY_MockFileHandle_Close(testlucy_MockFileHandle* self) {
    const TESTLUCY_MockFileHandle_Close_t method = (TESTLUCY_MockFileHandle_Close_t)cfish_obj_method(self, TESTLUCY_MockFileHandle_Close_OFFSET);
    return method(self);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_MockFileHandle_Set_Path_OFFSET;
static CFISH_INLINE void
TESTLUCY_MockFileHandle_Set_Path(testlucy_MockFileHandle* self, cfish_String* path) {
    const TESTLUCY_MockFileHandle_Set_Path_t method = (TESTLUCY_MockFileHandle_Set_Path_t)cfish_obj_method(self, TESTLUCY_MockFileHandle_Set_Path_OFFSET);
    method(self, path);
}

extern TESTLUCY_VISIBLE uint32_t TESTLUCY_MockFileHandle_Get_Path_OFFSET;
static CFISH_INLINE cfish_String*
TESTLUCY_MockFileHandle_Get_Path(testlucy_MockFileHandle* self) {
    const TESTLUCY_MockFileHandle_Get_Path_t method = (TESTLUCY_MockFileHandle_Get_Path_t)cfish_obj_method(self, TESTLUCY_MockFileHandle_Get_Path_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef TESTLUCY_USE_SHORT_NAMES
  #define MockFileHandle testlucy_MockFileHandle
  #define MOCKFILEHANDLE TESTLUCY_MOCKFILEHANDLE
  #define MockFileHandle_new testlucy_MockFileHandle_new
  #define MockFileHandle_init testlucy_MockFileHandle_init
  #define MockFileHandle_get_class testlucy_MockFileHandle_get_class
  #define MockFileHandle_get_class_name testlucy_MockFileHandle_get_class_name
  #define MockFileHandle_is_a testlucy_MockFileHandle_is_a
  #define MockFileHandle_Window_IMP TESTLUCY_MockFileHandle_Window_IMP
  #define MockFileHandle_Release_Window_IMP TESTLUCY_MockFileHandle_Release_Window_IMP
  #define MockFileHandle_Length_IMP TESTLUCY_MockFileHandle_Length_IMP
  #define MockFileHandle_Close_IMP TESTLUCY_MockFileHandle_Close_IMP
  #define MockFileHandle_To_Host TESTLUCY_MockFileHandle_To_Host
  #define MockFileHandle_To_Host_t TESTLUCY_MockFileHandle_To_Host_t
  #define MockFileHandle_Clone TESTLUCY_MockFileHandle_Clone
  #define MockFileHandle_Clone_t TESTLUCY_MockFileHandle_Clone_t
  #define MockFileHandle_Equals TESTLUCY_MockFileHandle_Equals
  #define MockFileHandle_Equals_t TESTLUCY_MockFileHandle_Equals_t
  #define MockFileHandle_Compare_To TESTLUCY_MockFileHandle_Compare_To
  #define MockFileHandle_Compare_To_t TESTLUCY_MockFileHandle_Compare_To_t
  #define MockFileHandle_Destroy TESTLUCY_MockFileHandle_Destroy
  #define MockFileHandle_Destroy_t TESTLUCY_MockFileHandle_Destroy_t
  #define MockFileHandle_To_String TESTLUCY_MockFileHandle_To_String
  #define MockFileHandle_To_String_t TESTLUCY_MockFileHandle_To_String_t
  #define MockFileHandle_Window TESTLUCY_MockFileHandle_Window
  #define MockFileHandle_Window_t TESTLUCY_MockFileHandle_Window_t
  #define MockFileHandle_Release_Window TESTLUCY_MockFileHandle_Release_Window
  #define MockFileHandle_Release_Window_t TESTLUCY_MockFileHandle_Release_Window_t
  #define MockFileHandle_Read TESTLUCY_MockFileHandle_Read
  #define MockFileHandle_Read_t TESTLUCY_MockFileHandle_Read_t
  #define MockFileHandle_Write TESTLUCY_MockFileHandle_Write
  #define MockFileHandle_Write_t TESTLUCY_MockFileHandle_Write_t
  #define MockFileHandle_Length TESTLUCY_MockFileHandle_Length
  #define MockFileHandle_Length_t TESTLUCY_MockFileHandle_Length_t
  #define MockFileHandle_Grow TESTLUCY_MockFileHandle_Grow
  #define MockFileHandle_Grow_t TESTLUCY_MockFileHandle_Grow_t
  #define MockFileHandle_Close TESTLUCY_MockFileHandle_Close
  #define MockFileHandle_Close_t TESTLUCY_MockFileHandle_Close_t
  #define MockFileHandle_Set_Path TESTLUCY_MockFileHandle_Set_Path
  #define MockFileHandle_Set_Path_t TESTLUCY_MockFileHandle_Set_Path_t
  #define MockFileHandle_Get_Path TESTLUCY_MockFileHandle_Get_Path
  #define MockFileHandle_Get_Path_t TESTLUCY_MockFileHandle_Get_Path_t
#endif /* TESTLUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_TEST_STORE_MOCKFILEHANDLE */




