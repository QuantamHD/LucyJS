/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_STORE_LOCK
#define H_LUCY_STORE_LOCK 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish\Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_LOCK
extern uint32_t lucy_Lock_IVARS_OFFSET;
typedef struct lucy_LockIVARS lucy_LockIVARS;
static CFISH_INLINE lucy_LockIVARS*
lucy_Lock_IVARS(lucy_Lock *self) {
   char *ptr = (char*)self + lucy_Lock_IVARS_OFFSET;
   return (lucy_LockIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define LockIVARS lucy_LockIVARS
  #define Lock_IVARS lucy_Lock_IVARS
#endif

struct lucy_LockIVARS {
    lucy_Folder* folder;
    cfish_String* name;
    cfish_String* lock_path;
    cfish_String* host;
    int32_t timeout;
    int32_t interval;
};

#endif /* C_LUCY_LOCK */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_Lock*
lucy_Lock_init(lucy_Lock* self, lucy_Folder* folder, cfish_String* name, cfish_String* host, int32_t timeout, int32_t interval);

bool
LUCY_Lock_Shared_IMP(lucy_Lock* self);

bool
LUCY_Lock_Obtain_IMP(lucy_Lock* self);

bool
LUCY_Lock_Request_IMP(lucy_Lock* self);

void
LUCY_Lock_Release_IMP(lucy_Lock* self);

bool
LUCY_Lock_Is_Locked_IMP(lucy_Lock* self);

void
LUCY_Lock_Clear_Stale_IMP(lucy_Lock* self);

cfish_String*
LUCY_Lock_Get_Name_IMP(lucy_Lock* self);

cfish_String*
LUCY_Lock_Get_Host_IMP(lucy_Lock* self);

cfish_String*
LUCY_Lock_Get_Lock_Path_IMP(lucy_Lock* self);

void
LUCY_Lock_Destroy_IMP(lucy_Lock* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_Lock_To_Host_t)(lucy_Lock* self, void* vcache);

typedef cfish_Obj*
(*LUCY_Lock_Clone_t)(lucy_Lock* self);

typedef bool
(*LUCY_Lock_Equals_t)(lucy_Lock* self, cfish_Obj* other);

typedef int32_t
(*LUCY_Lock_Compare_To_t)(lucy_Lock* self, cfish_Obj* other);

typedef void
(*LUCY_Lock_Destroy_t)(lucy_Lock* self);

typedef cfish_String*
(*LUCY_Lock_To_String_t)(lucy_Lock* self);

typedef bool
(*LUCY_Lock_Shared_t)(lucy_Lock* self);

typedef bool
(*LUCY_Lock_Obtain_t)(lucy_Lock* self);

typedef bool
(*LUCY_Lock_Request_t)(lucy_Lock* self);

typedef void
(*LUCY_Lock_Release_t)(lucy_Lock* self);

typedef bool
(*LUCY_Lock_Is_Locked_t)(lucy_Lock* self);

typedef void
(*LUCY_Lock_Clear_Stale_t)(lucy_Lock* self);

typedef cfish_String*
(*LUCY_Lock_Get_Name_t)(lucy_Lock* self);

typedef cfish_String*
(*LUCY_Lock_Get_Host_t)(lucy_Lock* self);

typedef cfish_String*
(*LUCY_Lock_Get_Lock_Path_t)(lucy_Lock* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_Lock_get_class(lucy_Lock *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_Lock_get_class_name(lucy_Lock *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_Lock_is_a(lucy_Lock *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_Lock_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_Lock_To_Host(lucy_Lock* self, void* vcache) {
    const LUCY_Lock_To_Host_t method = (LUCY_Lock_To_Host_t)cfish_obj_method(self, LUCY_Lock_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_Lock_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_Lock_Clone(lucy_Lock* self) {
    const LUCY_Lock_Clone_t method = (LUCY_Lock_Clone_t)cfish_obj_method(self, LUCY_Lock_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lock_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_Lock_Equals(lucy_Lock* self, cfish_Obj* other) {
    const LUCY_Lock_Equals_t method = (LUCY_Lock_Equals_t)cfish_obj_method(self, LUCY_Lock_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Lock_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_Lock_Compare_To(lucy_Lock* self, cfish_Obj* other) {
    const LUCY_Lock_Compare_To_t method = (LUCY_Lock_Compare_To_t)cfish_obj_method(self, LUCY_Lock_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Lock_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_Lock_Destroy(lucy_Lock* self) {
    const LUCY_Lock_Destroy_t method = (LUCY_Lock_Destroy_t)cfish_obj_method(self, LUCY_Lock_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lock_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Lock_To_String(lucy_Lock* self) {
    const LUCY_Lock_To_String_t method = (LUCY_Lock_To_String_t)cfish_obj_method(self, LUCY_Lock_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lock_Shared_OFFSET;
static CFISH_INLINE bool
LUCY_Lock_Shared(lucy_Lock* self) {
    const LUCY_Lock_Shared_t method = (LUCY_Lock_Shared_t)cfish_obj_method(self, LUCY_Lock_Shared_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lock_Obtain_OFFSET;
static CFISH_INLINE bool
LUCY_Lock_Obtain(lucy_Lock* self) {
    const LUCY_Lock_Obtain_t method = (LUCY_Lock_Obtain_t)cfish_obj_method(self, LUCY_Lock_Obtain_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lock_Request_OFFSET;
static CFISH_INLINE bool
LUCY_Lock_Request(lucy_Lock* self) {
    const LUCY_Lock_Request_t method = (LUCY_Lock_Request_t)cfish_obj_method(self, LUCY_Lock_Request_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lock_Release_OFFSET;
static CFISH_INLINE void
LUCY_Lock_Release(lucy_Lock* self) {
    const LUCY_Lock_Release_t method = (LUCY_Lock_Release_t)cfish_obj_method(self, LUCY_Lock_Release_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lock_Is_Locked_OFFSET;
static CFISH_INLINE bool
LUCY_Lock_Is_Locked(lucy_Lock* self) {
    const LUCY_Lock_Is_Locked_t method = (LUCY_Lock_Is_Locked_t)cfish_obj_method(self, LUCY_Lock_Is_Locked_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lock_Clear_Stale_OFFSET;
static CFISH_INLINE void
LUCY_Lock_Clear_Stale(lucy_Lock* self) {
    const LUCY_Lock_Clear_Stale_t method = (LUCY_Lock_Clear_Stale_t)cfish_obj_method(self, LUCY_Lock_Clear_Stale_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lock_Get_Name_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Lock_Get_Name(lucy_Lock* self) {
    const LUCY_Lock_Get_Name_t method = (LUCY_Lock_Get_Name_t)cfish_obj_method(self, LUCY_Lock_Get_Name_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lock_Get_Host_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Lock_Get_Host(lucy_Lock* self) {
    const LUCY_Lock_Get_Host_t method = (LUCY_Lock_Get_Host_t)cfish_obj_method(self, LUCY_Lock_Get_Host_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Lock_Get_Lock_Path_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Lock_Get_Lock_Path(lucy_Lock* self) {
    const LUCY_Lock_Get_Lock_Path_t method = (LUCY_Lock_Get_Lock_Path_t)cfish_obj_method(self, LUCY_Lock_Get_Lock_Path_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_Lock_Shared_OVERRIDE NULL
#define Lucy_Lock_Obtain_OVERRIDE NULL
#define Lucy_Lock_Request_OVERRIDE NULL
#define Lucy_Lock_Release_OVERRIDE NULL
#define Lucy_Lock_Is_Locked_OVERRIDE NULL
#define Lucy_Lock_Clear_Stale_OVERRIDE NULL
#define Lucy_Lock_Get_Name_OVERRIDE NULL
#define Lucy_Lock_Get_Host_OVERRIDE NULL
#define Lucy_Lock_Get_Lock_Path_OVERRIDE NULL
#else
bool
Lucy_Lock_Shared_OVERRIDE(lucy_Lock* self);
bool
Lucy_Lock_Obtain_OVERRIDE(lucy_Lock* self);
bool
Lucy_Lock_Request_OVERRIDE(lucy_Lock* self);
void
Lucy_Lock_Release_OVERRIDE(lucy_Lock* self);
bool
Lucy_Lock_Is_Locked_OVERRIDE(lucy_Lock* self);
void
Lucy_Lock_Clear_Stale_OVERRIDE(lucy_Lock* self);
cfish_String*
Lucy_Lock_Get_Name_OVERRIDE(lucy_Lock* self);
cfish_String*
Lucy_Lock_Get_Host_OVERRIDE(lucy_Lock* self);
cfish_String*
Lucy_Lock_Get_Lock_Path_OVERRIDE(lucy_Lock* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define Lock lucy_Lock
  #define LOCK LUCY_LOCK
  #define Lock_init lucy_Lock_init
  #define Lock_get_class lucy_Lock_get_class
  #define Lock_get_class_name lucy_Lock_get_class_name
  #define Lock_is_a lucy_Lock_is_a
  #define Lock_Shared_IMP LUCY_Lock_Shared_IMP
  #define Lock_Obtain_IMP LUCY_Lock_Obtain_IMP
  #define Lock_Request_IMP LUCY_Lock_Request_IMP
  #define Lock_Release_IMP LUCY_Lock_Release_IMP
  #define Lock_Is_Locked_IMP LUCY_Lock_Is_Locked_IMP
  #define Lock_Clear_Stale_IMP LUCY_Lock_Clear_Stale_IMP
  #define Lock_Get_Name_IMP LUCY_Lock_Get_Name_IMP
  #define Lock_Get_Host_IMP LUCY_Lock_Get_Host_IMP
  #define Lock_Get_Lock_Path_IMP LUCY_Lock_Get_Lock_Path_IMP
  #define Lock_Destroy_IMP LUCY_Lock_Destroy_IMP
  #define Lock_To_Host LUCY_Lock_To_Host
  #define Lock_To_Host_t LUCY_Lock_To_Host_t
  #define Lock_Clone LUCY_Lock_Clone
  #define Lock_Clone_t LUCY_Lock_Clone_t
  #define Lock_Equals LUCY_Lock_Equals
  #define Lock_Equals_t LUCY_Lock_Equals_t
  #define Lock_Compare_To LUCY_Lock_Compare_To
  #define Lock_Compare_To_t LUCY_Lock_Compare_To_t
  #define Lock_Destroy LUCY_Lock_Destroy
  #define Lock_Destroy_t LUCY_Lock_Destroy_t
  #define Lock_To_String LUCY_Lock_To_String
  #define Lock_To_String_t LUCY_Lock_To_String_t
  #define Lock_Shared LUCY_Lock_Shared
  #define Lock_Shared_t LUCY_Lock_Shared_t
  #define Lock_Obtain LUCY_Lock_Obtain
  #define Lock_Obtain_t LUCY_Lock_Obtain_t
  #define Lock_Request LUCY_Lock_Request
  #define Lock_Request_t LUCY_Lock_Request_t
  #define Lock_Release LUCY_Lock_Release
  #define Lock_Release_t LUCY_Lock_Release_t
  #define Lock_Is_Locked LUCY_Lock_Is_Locked
  #define Lock_Is_Locked_t LUCY_Lock_Is_Locked_t
  #define Lock_Clear_Stale LUCY_Lock_Clear_Stale
  #define Lock_Clear_Stale_t LUCY_Lock_Clear_Stale_t
  #define Lock_Get_Name LUCY_Lock_Get_Name
  #define Lock_Get_Name_t LUCY_Lock_Get_Name_t
  #define Lock_Get_Host LUCY_Lock_Get_Host
  #define Lock_Get_Host_t LUCY_Lock_Get_Host_t
  #define Lock_Get_Lock_Path LUCY_Lock_Get_Lock_Path
  #define Lock_Get_Lock_Path_t LUCY_Lock_Get_Lock_Path_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy\Store\Lock.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_LOCKFILELOCK
extern uint32_t lucy_LFLock_IVARS_OFFSET;
typedef struct lucy_LockFileLockIVARS lucy_LockFileLockIVARS;
static CFISH_INLINE lucy_LockFileLockIVARS*
lucy_LFLock_IVARS(lucy_LockFileLock *self) {
   char *ptr = (char*)self + lucy_LFLock_IVARS_OFFSET;
   return (lucy_LockFileLockIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define LockFileLockIVARS lucy_LockFileLockIVARS
  #define LFLock_IVARS lucy_LFLock_IVARS
#endif

struct lucy_LockFileLockIVARS {
    lucy_Folder* folder;
    cfish_String* name;
    cfish_String* lock_path;
    cfish_String* host;
    int32_t timeout;
    int32_t interval;
    cfish_String* link_path;
};

#endif /* C_LUCY_LOCKFILELOCK */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_LockFileLock*
lucy_LFLock_new(lucy_Folder* folder, cfish_String* name, cfish_String* host, int32_t timeout, int32_t interval);

LUCY_VISIBLE lucy_LockFileLock*
lucy_LFLock_init(lucy_LockFileLock* self, lucy_Folder* folder, cfish_String* name, cfish_String* host, int32_t timeout, int32_t interval);

bool
LUCY_LFLock_Shared_IMP(lucy_LockFileLock* self);

bool
LUCY_LFLock_Request_IMP(lucy_LockFileLock* self);

void
LUCY_LFLock_Release_IMP(lucy_LockFileLock* self);

bool
LUCY_LFLock_Is_Locked_IMP(lucy_LockFileLock* self);

void
LUCY_LFLock_Clear_Stale_IMP(lucy_LockFileLock* self);

bool
LUCY_LFLock_Maybe_Delete_File_IMP(lucy_LockFileLock* self, cfish_String* filepath, bool delete_mine, bool delete_other);

void
LUCY_LFLock_Destroy_IMP(lucy_LockFileLock* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_LFLock_To_Host_t)(lucy_LockFileLock* self, void* vcache);

typedef cfish_Obj*
(*LUCY_LFLock_Clone_t)(lucy_LockFileLock* self);

typedef bool
(*LUCY_LFLock_Equals_t)(lucy_LockFileLock* self, cfish_Obj* other);

typedef int32_t
(*LUCY_LFLock_Compare_To_t)(lucy_LockFileLock* self, cfish_Obj* other);

typedef void
(*LUCY_LFLock_Destroy_t)(lucy_LockFileLock* self);

typedef cfish_String*
(*LUCY_LFLock_To_String_t)(lucy_LockFileLock* self);

typedef bool
(*LUCY_LFLock_Shared_t)(lucy_LockFileLock* self);

typedef bool
(*LUCY_LFLock_Obtain_t)(lucy_LockFileLock* self);

typedef bool
(*LUCY_LFLock_Request_t)(lucy_LockFileLock* self);

typedef void
(*LUCY_LFLock_Release_t)(lucy_LockFileLock* self);

typedef bool
(*LUCY_LFLock_Is_Locked_t)(lucy_LockFileLock* self);

typedef void
(*LUCY_LFLock_Clear_Stale_t)(lucy_LockFileLock* self);

typedef cfish_String*
(*LUCY_LFLock_Get_Name_t)(lucy_LockFileLock* self);

typedef cfish_String*
(*LUCY_LFLock_Get_Host_t)(lucy_LockFileLock* self);

typedef cfish_String*
(*LUCY_LFLock_Get_Lock_Path_t)(lucy_LockFileLock* self);

typedef bool
(*LUCY_LFLock_Maybe_Delete_File_t)(lucy_LockFileLock* self, cfish_String* filepath, bool delete_mine, bool delete_other);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_LFLock_get_class(lucy_LockFileLock *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_LFLock_get_class_name(lucy_LockFileLock *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_LFLock_is_a(lucy_LockFileLock *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_LFLock_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_LFLock_To_Host(lucy_LockFileLock* self, void* vcache) {
    const LUCY_LFLock_To_Host_t method = (LUCY_LFLock_To_Host_t)cfish_obj_method(self, LUCY_LFLock_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_LFLock_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_LFLock_Clone(lucy_LockFileLock* self) {
    const LUCY_LFLock_Clone_t method = (LUCY_LFLock_Clone_t)cfish_obj_method(self, LUCY_LFLock_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LFLock_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_LFLock_Equals(lucy_LockFileLock* self, cfish_Obj* other) {
    const LUCY_LFLock_Equals_t method = (LUCY_LFLock_Equals_t)cfish_obj_method(self, LUCY_LFLock_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_LFLock_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_LFLock_Compare_To(lucy_LockFileLock* self, cfish_Obj* other) {
    const LUCY_LFLock_Compare_To_t method = (LUCY_LFLock_Compare_To_t)cfish_obj_method(self, LUCY_LFLock_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_LFLock_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_LFLock_Destroy(lucy_LockFileLock* self) {
    const LUCY_LFLock_Destroy_t method = (LUCY_LFLock_Destroy_t)cfish_obj_method(self, LUCY_LFLock_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LFLock_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_LFLock_To_String(lucy_LockFileLock* self) {
    const LUCY_LFLock_To_String_t method = (LUCY_LFLock_To_String_t)cfish_obj_method(self, LUCY_LFLock_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LFLock_Shared_OFFSET;
static CFISH_INLINE bool
LUCY_LFLock_Shared(lucy_LockFileLock* self) {
    const LUCY_LFLock_Shared_t method = (LUCY_LFLock_Shared_t)cfish_obj_method(self, LUCY_LFLock_Shared_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LFLock_Obtain_OFFSET;
static CFISH_INLINE bool
LUCY_LFLock_Obtain(lucy_LockFileLock* self) {
    const LUCY_LFLock_Obtain_t method = (LUCY_LFLock_Obtain_t)cfish_obj_method(self, LUCY_LFLock_Obtain_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LFLock_Request_OFFSET;
static CFISH_INLINE bool
LUCY_LFLock_Request(lucy_LockFileLock* self) {
    const LUCY_LFLock_Request_t method = (LUCY_LFLock_Request_t)cfish_obj_method(self, LUCY_LFLock_Request_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LFLock_Release_OFFSET;
static CFISH_INLINE void
LUCY_LFLock_Release(lucy_LockFileLock* self) {
    const LUCY_LFLock_Release_t method = (LUCY_LFLock_Release_t)cfish_obj_method(self, LUCY_LFLock_Release_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LFLock_Is_Locked_OFFSET;
static CFISH_INLINE bool
LUCY_LFLock_Is_Locked(lucy_LockFileLock* self) {
    const LUCY_LFLock_Is_Locked_t method = (LUCY_LFLock_Is_Locked_t)cfish_obj_method(self, LUCY_LFLock_Is_Locked_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LFLock_Clear_Stale_OFFSET;
static CFISH_INLINE void
LUCY_LFLock_Clear_Stale(lucy_LockFileLock* self) {
    const LUCY_LFLock_Clear_Stale_t method = (LUCY_LFLock_Clear_Stale_t)cfish_obj_method(self, LUCY_LFLock_Clear_Stale_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LFLock_Get_Name_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_LFLock_Get_Name(lucy_LockFileLock* self) {
    const LUCY_LFLock_Get_Name_t method = (LUCY_LFLock_Get_Name_t)cfish_obj_method(self, LUCY_LFLock_Get_Name_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LFLock_Get_Host_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_LFLock_Get_Host(lucy_LockFileLock* self) {
    const LUCY_LFLock_Get_Host_t method = (LUCY_LFLock_Get_Host_t)cfish_obj_method(self, LUCY_LFLock_Get_Host_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LFLock_Get_Lock_Path_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_LFLock_Get_Lock_Path(lucy_LockFileLock* self) {
    const LUCY_LFLock_Get_Lock_Path_t method = (LUCY_LFLock_Get_Lock_Path_t)cfish_obj_method(self, LUCY_LFLock_Get_Lock_Path_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LFLock_Maybe_Delete_File_OFFSET;
static CFISH_INLINE bool
LUCY_LFLock_Maybe_Delete_File(lucy_LockFileLock* self, cfish_String* filepath, bool delete_mine, bool delete_other) {
    const LUCY_LFLock_Maybe_Delete_File_t method = (LUCY_LFLock_Maybe_Delete_File_t)cfish_obj_method(self, LUCY_LFLock_Maybe_Delete_File_OFFSET);
    return method(self, filepath, delete_mine, delete_other);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_LFLock_Maybe_Delete_File_OVERRIDE NULL
#else
bool
Lucy_LFLock_Maybe_Delete_File_OVERRIDE(lucy_LockFileLock* self, cfish_String* filepath, bool delete_mine, bool delete_other);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define LockFileLock lucy_LockFileLock
  #define LOCKFILELOCK LUCY_LOCKFILELOCK
  #define LFLock_new lucy_LFLock_new
  #define LFLock_init lucy_LFLock_init
  #define LFLock_get_class lucy_LFLock_get_class
  #define LFLock_get_class_name lucy_LFLock_get_class_name
  #define LFLock_is_a lucy_LFLock_is_a
  #define LFLock_Shared_IMP LUCY_LFLock_Shared_IMP
  #define LFLock_Request_IMP LUCY_LFLock_Request_IMP
  #define LFLock_Release_IMP LUCY_LFLock_Release_IMP
  #define LFLock_Is_Locked_IMP LUCY_LFLock_Is_Locked_IMP
  #define LFLock_Clear_Stale_IMP LUCY_LFLock_Clear_Stale_IMP
  #define LFLock_Maybe_Delete_File_IMP LUCY_LFLock_Maybe_Delete_File_IMP
  #define LFLock_Destroy_IMP LUCY_LFLock_Destroy_IMP
  #define LFLock_To_Host LUCY_LFLock_To_Host
  #define LFLock_To_Host_t LUCY_LFLock_To_Host_t
  #define LFLock_Clone LUCY_LFLock_Clone
  #define LFLock_Clone_t LUCY_LFLock_Clone_t
  #define LFLock_Equals LUCY_LFLock_Equals
  #define LFLock_Equals_t LUCY_LFLock_Equals_t
  #define LFLock_Compare_To LUCY_LFLock_Compare_To
  #define LFLock_Compare_To_t LUCY_LFLock_Compare_To_t
  #define LFLock_Destroy LUCY_LFLock_Destroy
  #define LFLock_Destroy_t LUCY_LFLock_Destroy_t
  #define LFLock_To_String LUCY_LFLock_To_String
  #define LFLock_To_String_t LUCY_LFLock_To_String_t
  #define LFLock_Shared LUCY_LFLock_Shared
  #define LFLock_Shared_t LUCY_LFLock_Shared_t
  #define LFLock_Obtain LUCY_LFLock_Obtain
  #define LFLock_Obtain_t LUCY_LFLock_Obtain_t
  #define LFLock_Request LUCY_LFLock_Request
  #define LFLock_Request_t LUCY_LFLock_Request_t
  #define LFLock_Release LUCY_LFLock_Release
  #define LFLock_Release_t LUCY_LFLock_Release_t
  #define LFLock_Is_Locked LUCY_LFLock_Is_Locked
  #define LFLock_Is_Locked_t LUCY_LFLock_Is_Locked_t
  #define LFLock_Clear_Stale LUCY_LFLock_Clear_Stale
  #define LFLock_Clear_Stale_t LUCY_LFLock_Clear_Stale_t
  #define LFLock_Get_Name LUCY_LFLock_Get_Name
  #define LFLock_Get_Name_t LUCY_LFLock_Get_Name_t
  #define LFLock_Get_Host LUCY_LFLock_Get_Host
  #define LFLock_Get_Host_t LUCY_LFLock_Get_Host_t
  #define LFLock_Get_Lock_Path LUCY_LFLock_Get_Lock_Path
  #define LFLock_Get_Lock_Path_t LUCY_LFLock_Get_Lock_Path_t
  #define LFLock_Maybe_Delete_File LUCY_LFLock_Maybe_Delete_File
  #define LFLock_Maybe_Delete_File_t LUCY_LFLock_Maybe_Delete_File_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Clownfish\Err.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_LOCKERR
extern uint32_t lucy_LockErr_IVARS_OFFSET;
typedef struct lucy_LockErrIVARS lucy_LockErrIVARS;
static CFISH_INLINE lucy_LockErrIVARS*
lucy_LockErr_IVARS(lucy_LockErr *self) {
   char *ptr = (char*)self + lucy_LockErr_IVARS_OFFSET;
   return (lucy_LockErrIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define LockErrIVARS lucy_LockErrIVARS
  #define LockErr_IVARS lucy_LockErr_IVARS
#endif


#endif /* C_LUCY_LOCKERR */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_LockErr*
lucy_LockErr_new(cfish_String* message);

LUCY_VISIBLE lucy_LockErr*
lucy_LockErr_init(lucy_LockErr* self, cfish_String* message);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_LockErr_To_Host_t)(lucy_LockErr* self, void* vcache);

typedef cfish_Obj*
(*LUCY_LockErr_Clone_t)(lucy_LockErr* self);

typedef bool
(*LUCY_LockErr_Equals_t)(lucy_LockErr* self, cfish_Obj* other);

typedef int32_t
(*LUCY_LockErr_Compare_To_t)(lucy_LockErr* self, cfish_Obj* other);

typedef void
(*LUCY_LockErr_Destroy_t)(lucy_LockErr* self);

typedef cfish_String*
(*LUCY_LockErr_To_String_t)(lucy_LockErr* self);

typedef void
(*LUCY_LockErr_Cat_Mess_t)(lucy_LockErr* self, cfish_String* mess);

typedef cfish_String*
(*LUCY_LockErr_Get_Mess_t)(lucy_LockErr* self);

typedef void
(*LUCY_LockErr_Add_Frame_t)(lucy_LockErr* self, const char* file, int line, const char* func);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_LockErr_get_class(lucy_LockErr *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_LockErr_get_class_name(lucy_LockErr *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_LockErr_is_a(lucy_LockErr *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_LockErr_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_LockErr_To_Host(lucy_LockErr* self, void* vcache) {
    const LUCY_LockErr_To_Host_t method = (LUCY_LockErr_To_Host_t)cfish_obj_method(self, LUCY_LockErr_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_LockErr_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_LockErr_Clone(lucy_LockErr* self) {
    const LUCY_LockErr_Clone_t method = (LUCY_LockErr_Clone_t)cfish_obj_method(self, LUCY_LockErr_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LockErr_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_LockErr_Equals(lucy_LockErr* self, cfish_Obj* other) {
    const LUCY_LockErr_Equals_t method = (LUCY_LockErr_Equals_t)cfish_obj_method(self, LUCY_LockErr_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_LockErr_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_LockErr_Compare_To(lucy_LockErr* self, cfish_Obj* other) {
    const LUCY_LockErr_Compare_To_t method = (LUCY_LockErr_Compare_To_t)cfish_obj_method(self, LUCY_LockErr_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_LockErr_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_LockErr_Destroy(lucy_LockErr* self) {
    const LUCY_LockErr_Destroy_t method = (LUCY_LockErr_Destroy_t)cfish_obj_method(self, LUCY_LockErr_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LockErr_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_LockErr_To_String(lucy_LockErr* self) {
    const LUCY_LockErr_To_String_t method = (LUCY_LockErr_To_String_t)cfish_obj_method(self, LUCY_LockErr_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LockErr_Cat_Mess_OFFSET;
static CFISH_INLINE void
LUCY_LockErr_Cat_Mess(lucy_LockErr* self, cfish_String* mess) {
    const LUCY_LockErr_Cat_Mess_t method = (LUCY_LockErr_Cat_Mess_t)cfish_obj_method(self, LUCY_LockErr_Cat_Mess_OFFSET);
    method(self, mess);
}

extern LUCY_VISIBLE uint32_t LUCY_LockErr_Get_Mess_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_LockErr_Get_Mess(lucy_LockErr* self) {
    const LUCY_LockErr_Get_Mess_t method = (LUCY_LockErr_Get_Mess_t)cfish_obj_method(self, LUCY_LockErr_Get_Mess_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LockErr_Add_Frame_OFFSET;
static CFISH_INLINE void
LUCY_LockErr_Add_Frame(lucy_LockErr* self, const char* file, int line, const char* func) {
    const LUCY_LockErr_Add_Frame_t method = (LUCY_LockErr_Add_Frame_t)cfish_obj_method(self, LUCY_LockErr_Add_Frame_OFFSET);
    method(self, file, line, func);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define LockErr lucy_LockErr
  #define LOCKERR LUCY_LOCKERR
  #define LockErr_new lucy_LockErr_new
  #define LockErr_init lucy_LockErr_init
  #define LockErr_get_class lucy_LockErr_get_class
  #define LockErr_get_class_name lucy_LockErr_get_class_name
  #define LockErr_is_a lucy_LockErr_is_a
  #define LockErr_To_Host LUCY_LockErr_To_Host
  #define LockErr_To_Host_t LUCY_LockErr_To_Host_t
  #define LockErr_Clone LUCY_LockErr_Clone
  #define LockErr_Clone_t LUCY_LockErr_Clone_t
  #define LockErr_Equals LUCY_LockErr_Equals
  #define LockErr_Equals_t LUCY_LockErr_Equals_t
  #define LockErr_Compare_To LUCY_LockErr_Compare_To
  #define LockErr_Compare_To_t LUCY_LockErr_Compare_To_t
  #define LockErr_Destroy LUCY_LockErr_Destroy
  #define LockErr_Destroy_t LUCY_LockErr_Destroy_t
  #define LockErr_To_String LUCY_LockErr_To_String
  #define LockErr_To_String_t LUCY_LockErr_To_String_t
  #define LockErr_Cat_Mess LUCY_LockErr_Cat_Mess
  #define LockErr_Cat_Mess_t LUCY_LockErr_Cat_Mess_t
  #define LockErr_Get_Mess LUCY_LockErr_Get_Mess
  #define LockErr_Get_Mess_t LUCY_LockErr_Get_Mess_t
  #define LockErr_Add_Frame LUCY_LockErr_Add_Frame
  #define LockErr_Add_Frame_t LUCY_LockErr_Add_Frame_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_STORE_LOCK */




