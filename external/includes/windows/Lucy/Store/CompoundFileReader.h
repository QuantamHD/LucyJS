/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_STORE_COMPOUNDFILEREADER
#define H_LUCY_STORE_COMPOUNDFILEREADER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy\Store\Folder.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_COMPOUNDFILEREADER
extern uint32_t lucy_CFReader_IVARS_OFFSET;
typedef struct lucy_CompoundFileReaderIVARS lucy_CompoundFileReaderIVARS;
static CFISH_INLINE lucy_CompoundFileReaderIVARS*
lucy_CFReader_IVARS(lucy_CompoundFileReader *self) {
   char *ptr = (char*)self + lucy_CFReader_IVARS_OFFSET;
   return (lucy_CompoundFileReaderIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define CompoundFileReaderIVARS lucy_CompoundFileReaderIVARS
  #define CFReader_IVARS lucy_CFReader_IVARS
#endif

struct lucy_CompoundFileReaderIVARS {
    cfish_String* path;
    cfish_Hash* entries;
    lucy_Folder* real_folder;
    cfish_Hash* records;
    lucy_InStream* instream;
    int32_t format;
};

#endif /* C_LUCY_COMPOUNDFILEREADER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_CompoundFileReader*
lucy_CFReader_open(lucy_Folder* folder);

LUCY_VISIBLE lucy_CompoundFileReader*
lucy_CFReader_do_open(lucy_CompoundFileReader* self, lucy_Folder* folder);

lucy_Folder*
LUCY_CFReader_Get_Real_Folder_IMP(lucy_CompoundFileReader* self);

void
LUCY_CFReader_Set_Path_IMP(lucy_CompoundFileReader* self, cfish_String* path);

void
LUCY_CFReader_Close_IMP(lucy_CompoundFileReader* self);

void
LUCY_CFReader_Destroy_IMP(lucy_CompoundFileReader* self);

bool
LUCY_CFReader_Local_Delete_IMP(lucy_CompoundFileReader* self, cfish_String* name);

bool
LUCY_CFReader_Local_Exists_IMP(lucy_CompoundFileReader* self, cfish_String* name);

bool
LUCY_CFReader_Local_Is_Directory_IMP(lucy_CompoundFileReader* self, cfish_String* name);

lucy_FileHandle*
LUCY_CFReader_Local_Open_FileHandle_IMP(lucy_CompoundFileReader* self, cfish_String* name, uint32_t flags);

lucy_InStream*
LUCY_CFReader_Local_Open_In_IMP(lucy_CompoundFileReader* self, cfish_String* name);

bool
LUCY_CFReader_Local_MkDir_IMP(lucy_CompoundFileReader* self, cfish_String* name);

lucy_Folder*
LUCY_CFReader_Local_Find_Folder_IMP(lucy_CompoundFileReader* self, cfish_String* name);

lucy_DirHandle*
LUCY_CFReader_Local_Open_Dir_IMP(lucy_CompoundFileReader* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_CFReader_To_Host_t)(lucy_CompoundFileReader* self, void* vcache);

typedef cfish_Obj*
(*LUCY_CFReader_Clone_t)(lucy_CompoundFileReader* self);

typedef bool
(*LUCY_CFReader_Equals_t)(lucy_CompoundFileReader* self, cfish_Obj* other);

typedef int32_t
(*LUCY_CFReader_Compare_To_t)(lucy_CompoundFileReader* self, cfish_Obj* other);

typedef void
(*LUCY_CFReader_Destroy_t)(lucy_CompoundFileReader* self);

typedef cfish_String*
(*LUCY_CFReader_To_String_t)(lucy_CompoundFileReader* self);

typedef cfish_String*
(*LUCY_CFReader_Get_Path_t)(lucy_CompoundFileReader* self);

typedef void
(*LUCY_CFReader_Set_Path_t)(lucy_CompoundFileReader* self, cfish_String* path);

typedef lucy_OutStream*
(*LUCY_CFReader_Open_Out_t)(lucy_CompoundFileReader* self, cfish_String* path);

typedef lucy_InStream*
(*LUCY_CFReader_Open_In_t)(lucy_CompoundFileReader* self, cfish_String* path);

typedef lucy_FileHandle*
(*LUCY_CFReader_Open_FileHandle_t)(lucy_CompoundFileReader* self, cfish_String* path, uint32_t flags);

typedef lucy_DirHandle*
(*LUCY_CFReader_Open_Dir_t)(lucy_CompoundFileReader* self, cfish_String* path);

typedef bool
(*LUCY_CFReader_MkDir_t)(lucy_CompoundFileReader* self, cfish_String* path);

typedef cfish_Vector*
(*LUCY_CFReader_List_t)(lucy_CompoundFileReader* self, cfish_String* path);

typedef cfish_Vector*
(*LUCY_CFReader_List_R_t)(lucy_CompoundFileReader* self, cfish_String* path);

typedef bool
(*LUCY_CFReader_Exists_t)(lucy_CompoundFileReader* self, cfish_String* path);

typedef bool
(*LUCY_CFReader_Is_Directory_t)(lucy_CompoundFileReader* self, cfish_String* path);

typedef bool
(*LUCY_CFReader_Delete_t)(lucy_CompoundFileReader* self, cfish_String* path);

typedef bool
(*LUCY_CFReader_Delete_Tree_t)(lucy_CompoundFileReader* self, cfish_String* path);

typedef bool
(*LUCY_CFReader_Rename_t)(lucy_CompoundFileReader* self, cfish_String* from, cfish_String* to);

typedef bool
(*LUCY_CFReader_Hard_Link_t)(lucy_CompoundFileReader* self, cfish_String* from, cfish_String* to);

typedef cfish_Blob*
(*LUCY_CFReader_Slurp_File_t)(lucy_CompoundFileReader* self, cfish_String* path);

typedef void
(*LUCY_CFReader_Consolidate_t)(lucy_CompoundFileReader* self, cfish_String* path);

typedef lucy_Folder*
(*LUCY_CFReader_Enclosing_Folder_t)(lucy_CompoundFileReader* self, cfish_String* path);

typedef lucy_Folder*
(*LUCY_CFReader_Find_Folder_t)(lucy_CompoundFileReader* self, cfish_String* path);

typedef void
(*LUCY_CFReader_Initialize_t)(lucy_CompoundFileReader* self);

typedef bool
(*LUCY_CFReader_Check_t)(lucy_CompoundFileReader* self);

typedef void
(*LUCY_CFReader_Close_t)(lucy_CompoundFileReader* self);

typedef lucy_FileHandle*
(*LUCY_CFReader_Local_Open_FileHandle_t)(lucy_CompoundFileReader* self, cfish_String* name, uint32_t flags);

typedef lucy_InStream*
(*LUCY_CFReader_Local_Open_In_t)(lucy_CompoundFileReader* self, cfish_String* name);

typedef lucy_DirHandle*
(*LUCY_CFReader_Local_Open_Dir_t)(lucy_CompoundFileReader* self);

typedef bool
(*LUCY_CFReader_Local_MkDir_t)(lucy_CompoundFileReader* self, cfish_String* name);

typedef bool
(*LUCY_CFReader_Local_Exists_t)(lucy_CompoundFileReader* self, cfish_String* name);

typedef bool
(*LUCY_CFReader_Local_Is_Directory_t)(lucy_CompoundFileReader* self, cfish_String* name);

typedef lucy_Folder*
(*LUCY_CFReader_Local_Find_Folder_t)(lucy_CompoundFileReader* self, cfish_String* name);

typedef bool
(*LUCY_CFReader_Local_Delete_t)(lucy_CompoundFileReader* self, cfish_String* name);

typedef lucy_Folder*
(*LUCY_CFReader_Get_Real_Folder_t)(lucy_CompoundFileReader* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_CFReader_get_class(lucy_CompoundFileReader *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_CFReader_get_class_name(lucy_CompoundFileReader *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_CFReader_is_a(lucy_CompoundFileReader *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_CFReader_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_CFReader_To_Host(lucy_CompoundFileReader* self, void* vcache) {
    const LUCY_CFReader_To_Host_t method = (LUCY_CFReader_To_Host_t)cfish_obj_method(self, LUCY_CFReader_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_CFReader_Clone(lucy_CompoundFileReader* self) {
    const LUCY_CFReader_Clone_t method = (LUCY_CFReader_Clone_t)cfish_obj_method(self, LUCY_CFReader_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_CFReader_Equals(lucy_CompoundFileReader* self, cfish_Obj* other) {
    const LUCY_CFReader_Equals_t method = (LUCY_CFReader_Equals_t)cfish_obj_method(self, LUCY_CFReader_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_CFReader_Compare_To(lucy_CompoundFileReader* self, cfish_Obj* other) {
    const LUCY_CFReader_Compare_To_t method = (LUCY_CFReader_Compare_To_t)cfish_obj_method(self, LUCY_CFReader_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_CFReader_Destroy(lucy_CompoundFileReader* self) {
    const LUCY_CFReader_Destroy_t method = (LUCY_CFReader_Destroy_t)cfish_obj_method(self, LUCY_CFReader_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_CFReader_To_String(lucy_CompoundFileReader* self) {
    const LUCY_CFReader_To_String_t method = (LUCY_CFReader_To_String_t)cfish_obj_method(self, LUCY_CFReader_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Get_Path_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_CFReader_Get_Path(lucy_CompoundFileReader* self) {
    const LUCY_CFReader_Get_Path_t method = (LUCY_CFReader_Get_Path_t)cfish_obj_method(self, LUCY_CFReader_Get_Path_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Set_Path_OFFSET;
static CFISH_INLINE void
LUCY_CFReader_Set_Path(lucy_CompoundFileReader* self, cfish_String* path) {
    const LUCY_CFReader_Set_Path_t method = (LUCY_CFReader_Set_Path_t)cfish_obj_method(self, LUCY_CFReader_Set_Path_OFFSET);
    method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Open_Out_OFFSET;
static CFISH_INLINE lucy_OutStream*
LUCY_CFReader_Open_Out(lucy_CompoundFileReader* self, cfish_String* path) {
    const LUCY_CFReader_Open_Out_t method = (LUCY_CFReader_Open_Out_t)cfish_obj_method(self, LUCY_CFReader_Open_Out_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Open_In_OFFSET;
static CFISH_INLINE lucy_InStream*
LUCY_CFReader_Open_In(lucy_CompoundFileReader* self, cfish_String* path) {
    const LUCY_CFReader_Open_In_t method = (LUCY_CFReader_Open_In_t)cfish_obj_method(self, LUCY_CFReader_Open_In_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Open_FileHandle_OFFSET;
static CFISH_INLINE lucy_FileHandle*
LUCY_CFReader_Open_FileHandle(lucy_CompoundFileReader* self, cfish_String* path, uint32_t flags) {
    const LUCY_CFReader_Open_FileHandle_t method = (LUCY_CFReader_Open_FileHandle_t)cfish_obj_method(self, LUCY_CFReader_Open_FileHandle_OFFSET);
    return method(self, path, flags);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Open_Dir_OFFSET;
static CFISH_INLINE lucy_DirHandle*
LUCY_CFReader_Open_Dir(lucy_CompoundFileReader* self, cfish_String* path) {
    const LUCY_CFReader_Open_Dir_t method = (LUCY_CFReader_Open_Dir_t)cfish_obj_method(self, LUCY_CFReader_Open_Dir_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_MkDir_OFFSET;
static CFISH_INLINE bool
LUCY_CFReader_MkDir(lucy_CompoundFileReader* self, cfish_String* path) {
    const LUCY_CFReader_MkDir_t method = (LUCY_CFReader_MkDir_t)cfish_obj_method(self, LUCY_CFReader_MkDir_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_List_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_CFReader_List(lucy_CompoundFileReader* self, cfish_String* path) {
    const LUCY_CFReader_List_t method = (LUCY_CFReader_List_t)cfish_obj_method(self, LUCY_CFReader_List_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_List_R_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_CFReader_List_R(lucy_CompoundFileReader* self, cfish_String* path) {
    const LUCY_CFReader_List_R_t method = (LUCY_CFReader_List_R_t)cfish_obj_method(self, LUCY_CFReader_List_R_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Exists_OFFSET;
static CFISH_INLINE bool
LUCY_CFReader_Exists(lucy_CompoundFileReader* self, cfish_String* path) {
    const LUCY_CFReader_Exists_t method = (LUCY_CFReader_Exists_t)cfish_obj_method(self, LUCY_CFReader_Exists_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Is_Directory_OFFSET;
static CFISH_INLINE bool
LUCY_CFReader_Is_Directory(lucy_CompoundFileReader* self, cfish_String* path) {
    const LUCY_CFReader_Is_Directory_t method = (LUCY_CFReader_Is_Directory_t)cfish_obj_method(self, LUCY_CFReader_Is_Directory_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Delete_OFFSET;
static CFISH_INLINE bool
LUCY_CFReader_Delete(lucy_CompoundFileReader* self, cfish_String* path) {
    const LUCY_CFReader_Delete_t method = (LUCY_CFReader_Delete_t)cfish_obj_method(self, LUCY_CFReader_Delete_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Delete_Tree_OFFSET;
static CFISH_INLINE bool
LUCY_CFReader_Delete_Tree(lucy_CompoundFileReader* self, cfish_String* path) {
    const LUCY_CFReader_Delete_Tree_t method = (LUCY_CFReader_Delete_Tree_t)cfish_obj_method(self, LUCY_CFReader_Delete_Tree_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Rename_OFFSET;
static CFISH_INLINE bool
LUCY_CFReader_Rename(lucy_CompoundFileReader* self, cfish_String* from, cfish_String* to) {
    const LUCY_CFReader_Rename_t method = (LUCY_CFReader_Rename_t)cfish_obj_method(self, LUCY_CFReader_Rename_OFFSET);
    return method(self, from, to);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Hard_Link_OFFSET;
static CFISH_INLINE bool
LUCY_CFReader_Hard_Link(lucy_CompoundFileReader* self, cfish_String* from, cfish_String* to) {
    const LUCY_CFReader_Hard_Link_t method = (LUCY_CFReader_Hard_Link_t)cfish_obj_method(self, LUCY_CFReader_Hard_Link_OFFSET);
    return method(self, from, to);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Slurp_File_OFFSET;
static CFISH_INLINE cfish_Blob*
LUCY_CFReader_Slurp_File(lucy_CompoundFileReader* self, cfish_String* path) {
    const LUCY_CFReader_Slurp_File_t method = (LUCY_CFReader_Slurp_File_t)cfish_obj_method(self, LUCY_CFReader_Slurp_File_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Consolidate_OFFSET;
static CFISH_INLINE void
LUCY_CFReader_Consolidate(lucy_CompoundFileReader* self, cfish_String* path) {
    const LUCY_CFReader_Consolidate_t method = (LUCY_CFReader_Consolidate_t)cfish_obj_method(self, LUCY_CFReader_Consolidate_OFFSET);
    method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Enclosing_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_CFReader_Enclosing_Folder(lucy_CompoundFileReader* self, cfish_String* path) {
    const LUCY_CFReader_Enclosing_Folder_t method = (LUCY_CFReader_Enclosing_Folder_t)cfish_obj_method(self, LUCY_CFReader_Enclosing_Folder_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Find_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_CFReader_Find_Folder(lucy_CompoundFileReader* self, cfish_String* path) {
    const LUCY_CFReader_Find_Folder_t method = (LUCY_CFReader_Find_Folder_t)cfish_obj_method(self, LUCY_CFReader_Find_Folder_OFFSET);
    return method(self, path);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Initialize_OFFSET;
static CFISH_INLINE void
LUCY_CFReader_Initialize(lucy_CompoundFileReader* self) {
    const LUCY_CFReader_Initialize_t method = (LUCY_CFReader_Initialize_t)cfish_obj_method(self, LUCY_CFReader_Initialize_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Check_OFFSET;
static CFISH_INLINE bool
LUCY_CFReader_Check(lucy_CompoundFileReader* self) {
    const LUCY_CFReader_Check_t method = (LUCY_CFReader_Check_t)cfish_obj_method(self, LUCY_CFReader_Check_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Close_OFFSET;
static CFISH_INLINE void
LUCY_CFReader_Close(lucy_CompoundFileReader* self) {
    const LUCY_CFReader_Close_t method = (LUCY_CFReader_Close_t)cfish_obj_method(self, LUCY_CFReader_Close_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Local_Open_FileHandle_OFFSET;
static CFISH_INLINE lucy_FileHandle*
LUCY_CFReader_Local_Open_FileHandle(lucy_CompoundFileReader* self, cfish_String* name, uint32_t flags) {
    const LUCY_CFReader_Local_Open_FileHandle_t method = (LUCY_CFReader_Local_Open_FileHandle_t)cfish_obj_method(self, LUCY_CFReader_Local_Open_FileHandle_OFFSET);
    return method(self, name, flags);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Local_Open_In_OFFSET;
static CFISH_INLINE lucy_InStream*
LUCY_CFReader_Local_Open_In(lucy_CompoundFileReader* self, cfish_String* name) {
    const LUCY_CFReader_Local_Open_In_t method = (LUCY_CFReader_Local_Open_In_t)cfish_obj_method(self, LUCY_CFReader_Local_Open_In_OFFSET);
    return method(self, name);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Local_Open_Dir_OFFSET;
static CFISH_INLINE lucy_DirHandle*
LUCY_CFReader_Local_Open_Dir(lucy_CompoundFileReader* self) {
    const LUCY_CFReader_Local_Open_Dir_t method = (LUCY_CFReader_Local_Open_Dir_t)cfish_obj_method(self, LUCY_CFReader_Local_Open_Dir_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Local_MkDir_OFFSET;
static CFISH_INLINE bool
LUCY_CFReader_Local_MkDir(lucy_CompoundFileReader* self, cfish_String* name) {
    const LUCY_CFReader_Local_MkDir_t method = (LUCY_CFReader_Local_MkDir_t)cfish_obj_method(self, LUCY_CFReader_Local_MkDir_OFFSET);
    return method(self, name);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Local_Exists_OFFSET;
static CFISH_INLINE bool
LUCY_CFReader_Local_Exists(lucy_CompoundFileReader* self, cfish_String* name) {
    const LUCY_CFReader_Local_Exists_t method = (LUCY_CFReader_Local_Exists_t)cfish_obj_method(self, LUCY_CFReader_Local_Exists_OFFSET);
    return method(self, name);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Local_Is_Directory_OFFSET;
static CFISH_INLINE bool
LUCY_CFReader_Local_Is_Directory(lucy_CompoundFileReader* self, cfish_String* name) {
    const LUCY_CFReader_Local_Is_Directory_t method = (LUCY_CFReader_Local_Is_Directory_t)cfish_obj_method(self, LUCY_CFReader_Local_Is_Directory_OFFSET);
    return method(self, name);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Local_Find_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_CFReader_Local_Find_Folder(lucy_CompoundFileReader* self, cfish_String* name) {
    const LUCY_CFReader_Local_Find_Folder_t method = (LUCY_CFReader_Local_Find_Folder_t)cfish_obj_method(self, LUCY_CFReader_Local_Find_Folder_OFFSET);
    return method(self, name);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Local_Delete_OFFSET;
static CFISH_INLINE bool
LUCY_CFReader_Local_Delete(lucy_CompoundFileReader* self, cfish_String* name) {
    const LUCY_CFReader_Local_Delete_t method = (LUCY_CFReader_Local_Delete_t)cfish_obj_method(self, LUCY_CFReader_Local_Delete_OFFSET);
    return method(self, name);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReader_Get_Real_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_CFReader_Get_Real_Folder(lucy_CompoundFileReader* self) {
    const LUCY_CFReader_Get_Real_Folder_t method = (LUCY_CFReader_Get_Real_Folder_t)cfish_obj_method(self, LUCY_CFReader_Get_Real_Folder_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_CFReader_Get_Real_Folder_OVERRIDE NULL
#else
lucy_Folder*
Lucy_CFReader_Get_Real_Folder_OVERRIDE(lucy_CompoundFileReader* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define CompoundFileReader lucy_CompoundFileReader
  #define COMPOUNDFILEREADER LUCY_COMPOUNDFILEREADER
  #define CFReader_open lucy_CFReader_open
  #define CFReader_do_open lucy_CFReader_do_open
  #define CFReader_get_class lucy_CFReader_get_class
  #define CFReader_get_class_name lucy_CFReader_get_class_name
  #define CFReader_is_a lucy_CFReader_is_a
  #define CFReader_Get_Real_Folder_IMP LUCY_CFReader_Get_Real_Folder_IMP
  #define CFReader_Set_Path_IMP LUCY_CFReader_Set_Path_IMP
  #define CFReader_Close_IMP LUCY_CFReader_Close_IMP
  #define CFReader_Destroy_IMP LUCY_CFReader_Destroy_IMP
  #define CFReader_Local_Delete_IMP LUCY_CFReader_Local_Delete_IMP
  #define CFReader_Local_Exists_IMP LUCY_CFReader_Local_Exists_IMP
  #define CFReader_Local_Is_Directory_IMP LUCY_CFReader_Local_Is_Directory_IMP
  #define CFReader_Local_Open_FileHandle_IMP LUCY_CFReader_Local_Open_FileHandle_IMP
  #define CFReader_Local_Open_In_IMP LUCY_CFReader_Local_Open_In_IMP
  #define CFReader_Local_MkDir_IMP LUCY_CFReader_Local_MkDir_IMP
  #define CFReader_Local_Find_Folder_IMP LUCY_CFReader_Local_Find_Folder_IMP
  #define CFReader_Local_Open_Dir_IMP LUCY_CFReader_Local_Open_Dir_IMP
  #define CFReader_To_Host LUCY_CFReader_To_Host
  #define CFReader_To_Host_t LUCY_CFReader_To_Host_t
  #define CFReader_Clone LUCY_CFReader_Clone
  #define CFReader_Clone_t LUCY_CFReader_Clone_t
  #define CFReader_Equals LUCY_CFReader_Equals
  #define CFReader_Equals_t LUCY_CFReader_Equals_t
  #define CFReader_Compare_To LUCY_CFReader_Compare_To
  #define CFReader_Compare_To_t LUCY_CFReader_Compare_To_t
  #define CFReader_Destroy LUCY_CFReader_Destroy
  #define CFReader_Destroy_t LUCY_CFReader_Destroy_t
  #define CFReader_To_String LUCY_CFReader_To_String
  #define CFReader_To_String_t LUCY_CFReader_To_String_t
  #define CFReader_Get_Path LUCY_CFReader_Get_Path
  #define CFReader_Get_Path_t LUCY_CFReader_Get_Path_t
  #define CFReader_Set_Path LUCY_CFReader_Set_Path
  #define CFReader_Set_Path_t LUCY_CFReader_Set_Path_t
  #define CFReader_Open_Out LUCY_CFReader_Open_Out
  #define CFReader_Open_Out_t LUCY_CFReader_Open_Out_t
  #define CFReader_Open_In LUCY_CFReader_Open_In
  #define CFReader_Open_In_t LUCY_CFReader_Open_In_t
  #define CFReader_Open_FileHandle LUCY_CFReader_Open_FileHandle
  #define CFReader_Open_FileHandle_t LUCY_CFReader_Open_FileHandle_t
  #define CFReader_Open_Dir LUCY_CFReader_Open_Dir
  #define CFReader_Open_Dir_t LUCY_CFReader_Open_Dir_t
  #define CFReader_MkDir LUCY_CFReader_MkDir
  #define CFReader_MkDir_t LUCY_CFReader_MkDir_t
  #define CFReader_List LUCY_CFReader_List
  #define CFReader_List_t LUCY_CFReader_List_t
  #define CFReader_List_R LUCY_CFReader_List_R
  #define CFReader_List_R_t LUCY_CFReader_List_R_t
  #define CFReader_Exists LUCY_CFReader_Exists
  #define CFReader_Exists_t LUCY_CFReader_Exists_t
  #define CFReader_Is_Directory LUCY_CFReader_Is_Directory
  #define CFReader_Is_Directory_t LUCY_CFReader_Is_Directory_t
  #define CFReader_Delete LUCY_CFReader_Delete
  #define CFReader_Delete_t LUCY_CFReader_Delete_t
  #define CFReader_Delete_Tree LUCY_CFReader_Delete_Tree
  #define CFReader_Delete_Tree_t LUCY_CFReader_Delete_Tree_t
  #define CFReader_Rename LUCY_CFReader_Rename
  #define CFReader_Rename_t LUCY_CFReader_Rename_t
  #define CFReader_Hard_Link LUCY_CFReader_Hard_Link
  #define CFReader_Hard_Link_t LUCY_CFReader_Hard_Link_t
  #define CFReader_Slurp_File LUCY_CFReader_Slurp_File
  #define CFReader_Slurp_File_t LUCY_CFReader_Slurp_File_t
  #define CFReader_Consolidate LUCY_CFReader_Consolidate
  #define CFReader_Consolidate_t LUCY_CFReader_Consolidate_t
  #define CFReader_Enclosing_Folder LUCY_CFReader_Enclosing_Folder
  #define CFReader_Enclosing_Folder_t LUCY_CFReader_Enclosing_Folder_t
  #define CFReader_Find_Folder LUCY_CFReader_Find_Folder
  #define CFReader_Find_Folder_t LUCY_CFReader_Find_Folder_t
  #define CFReader_Initialize LUCY_CFReader_Initialize
  #define CFReader_Initialize_t LUCY_CFReader_Initialize_t
  #define CFReader_Check LUCY_CFReader_Check
  #define CFReader_Check_t LUCY_CFReader_Check_t
  #define CFReader_Close LUCY_CFReader_Close
  #define CFReader_Close_t LUCY_CFReader_Close_t
  #define CFReader_Local_Open_FileHandle LUCY_CFReader_Local_Open_FileHandle
  #define CFReader_Local_Open_FileHandle_t LUCY_CFReader_Local_Open_FileHandle_t
  #define CFReader_Local_Open_In LUCY_CFReader_Local_Open_In
  #define CFReader_Local_Open_In_t LUCY_CFReader_Local_Open_In_t
  #define CFReader_Local_Open_Dir LUCY_CFReader_Local_Open_Dir
  #define CFReader_Local_Open_Dir_t LUCY_CFReader_Local_Open_Dir_t
  #define CFReader_Local_MkDir LUCY_CFReader_Local_MkDir
  #define CFReader_Local_MkDir_t LUCY_CFReader_Local_MkDir_t
  #define CFReader_Local_Exists LUCY_CFReader_Local_Exists
  #define CFReader_Local_Exists_t LUCY_CFReader_Local_Exists_t
  #define CFReader_Local_Is_Directory LUCY_CFReader_Local_Is_Directory
  #define CFReader_Local_Is_Directory_t LUCY_CFReader_Local_Is_Directory_t
  #define CFReader_Local_Find_Folder LUCY_CFReader_Local_Find_Folder
  #define CFReader_Local_Find_Folder_t LUCY_CFReader_Local_Find_Folder_t
  #define CFReader_Local_Delete LUCY_CFReader_Local_Delete
  #define CFReader_Local_Delete_t LUCY_CFReader_Local_Delete_t
  #define CFReader_Get_Real_Folder LUCY_CFReader_Get_Real_Folder
  #define CFReader_Get_Real_Folder_t LUCY_CFReader_Get_Real_Folder_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy\Store\DirHandle.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_CFREADERDIRHANDLE
extern uint32_t lucy_CFReaderDH_IVARS_OFFSET;
typedef struct lucy_CFReaderDirHandleIVARS lucy_CFReaderDirHandleIVARS;
static CFISH_INLINE lucy_CFReaderDirHandleIVARS*
lucy_CFReaderDH_IVARS(lucy_CFReaderDirHandle *self) {
   char *ptr = (char*)self + lucy_CFReaderDH_IVARS_OFFSET;
   return (lucy_CFReaderDirHandleIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define CFReaderDirHandleIVARS lucy_CFReaderDirHandleIVARS
  #define CFReaderDH_IVARS lucy_CFReaderDH_IVARS
#endif

struct lucy_CFReaderDirHandleIVARS {
    cfish_String* dir;
    cfish_String* entry;
    lucy_CompoundFileReader* cf_reader;
    cfish_Vector* elems;
    int32_t tick;
};

#endif /* C_LUCY_CFREADERDIRHANDLE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_CFReaderDirHandle*
lucy_CFReaderDH_new(lucy_CompoundFileReader* cf_reader);

LUCY_VISIBLE lucy_CFReaderDirHandle*
lucy_CFReaderDH_init(lucy_CFReaderDirHandle* self, lucy_CompoundFileReader* cf_reader);

bool
LUCY_CFReaderDH_Next_IMP(lucy_CFReaderDirHandle* self);

bool
LUCY_CFReaderDH_Entry_Is_Dir_IMP(lucy_CFReaderDirHandle* self);

bool
LUCY_CFReaderDH_Close_IMP(lucy_CFReaderDirHandle* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_CFReaderDH_To_Host_t)(lucy_CFReaderDirHandle* self, void* vcache);

typedef cfish_Obj*
(*LUCY_CFReaderDH_Clone_t)(lucy_CFReaderDirHandle* self);

typedef bool
(*LUCY_CFReaderDH_Equals_t)(lucy_CFReaderDirHandle* self, cfish_Obj* other);

typedef int32_t
(*LUCY_CFReaderDH_Compare_To_t)(lucy_CFReaderDirHandle* self, cfish_Obj* other);

typedef void
(*LUCY_CFReaderDH_Destroy_t)(lucy_CFReaderDirHandle* self);

typedef cfish_String*
(*LUCY_CFReaderDH_To_String_t)(lucy_CFReaderDirHandle* self);

typedef bool
(*LUCY_CFReaderDH_Next_t)(lucy_CFReaderDirHandle* self);

typedef bool
(*LUCY_CFReaderDH_Close_t)(lucy_CFReaderDirHandle* self);

typedef cfish_String*
(*LUCY_CFReaderDH_Get_Dir_t)(lucy_CFReaderDirHandle* self);

typedef cfish_String*
(*LUCY_CFReaderDH_Get_Entry_t)(lucy_CFReaderDirHandle* self);

typedef bool
(*LUCY_CFReaderDH_Entry_Is_Dir_t)(lucy_CFReaderDirHandle* self);

typedef bool
(*LUCY_CFReaderDH_Entry_Is_Symlink_t)(lucy_CFReaderDirHandle* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_CFReaderDH_get_class(lucy_CFReaderDirHandle *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_CFReaderDH_get_class_name(lucy_CFReaderDirHandle *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_CFReaderDH_is_a(lucy_CFReaderDirHandle *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_CFReaderDH_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_CFReaderDH_To_Host(lucy_CFReaderDirHandle* self, void* vcache) {
    const LUCY_CFReaderDH_To_Host_t method = (LUCY_CFReaderDH_To_Host_t)cfish_obj_method(self, LUCY_CFReaderDH_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReaderDH_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_CFReaderDH_Clone(lucy_CFReaderDirHandle* self) {
    const LUCY_CFReaderDH_Clone_t method = (LUCY_CFReaderDH_Clone_t)cfish_obj_method(self, LUCY_CFReaderDH_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReaderDH_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_CFReaderDH_Equals(lucy_CFReaderDirHandle* self, cfish_Obj* other) {
    const LUCY_CFReaderDH_Equals_t method = (LUCY_CFReaderDH_Equals_t)cfish_obj_method(self, LUCY_CFReaderDH_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReaderDH_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_CFReaderDH_Compare_To(lucy_CFReaderDirHandle* self, cfish_Obj* other) {
    const LUCY_CFReaderDH_Compare_To_t method = (LUCY_CFReaderDH_Compare_To_t)cfish_obj_method(self, LUCY_CFReaderDH_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReaderDH_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_CFReaderDH_Destroy(lucy_CFReaderDirHandle* self) {
    const LUCY_CFReaderDH_Destroy_t method = (LUCY_CFReaderDH_Destroy_t)cfish_obj_method(self, LUCY_CFReaderDH_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReaderDH_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_CFReaderDH_To_String(lucy_CFReaderDirHandle* self) {
    const LUCY_CFReaderDH_To_String_t method = (LUCY_CFReaderDH_To_String_t)cfish_obj_method(self, LUCY_CFReaderDH_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReaderDH_Next_OFFSET;
static CFISH_INLINE bool
LUCY_CFReaderDH_Next(lucy_CFReaderDirHandle* self) {
    const LUCY_CFReaderDH_Next_t method = (LUCY_CFReaderDH_Next_t)cfish_obj_method(self, LUCY_CFReaderDH_Next_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReaderDH_Close_OFFSET;
static CFISH_INLINE bool
LUCY_CFReaderDH_Close(lucy_CFReaderDirHandle* self) {
    const LUCY_CFReaderDH_Close_t method = (LUCY_CFReaderDH_Close_t)cfish_obj_method(self, LUCY_CFReaderDH_Close_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReaderDH_Get_Dir_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_CFReaderDH_Get_Dir(lucy_CFReaderDirHandle* self) {
    const LUCY_CFReaderDH_Get_Dir_t method = (LUCY_CFReaderDH_Get_Dir_t)cfish_obj_method(self, LUCY_CFReaderDH_Get_Dir_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReaderDH_Get_Entry_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_CFReaderDH_Get_Entry(lucy_CFReaderDirHandle* self) {
    const LUCY_CFReaderDH_Get_Entry_t method = (LUCY_CFReaderDH_Get_Entry_t)cfish_obj_method(self, LUCY_CFReaderDH_Get_Entry_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReaderDH_Entry_Is_Dir_OFFSET;
static CFISH_INLINE bool
LUCY_CFReaderDH_Entry_Is_Dir(lucy_CFReaderDirHandle* self) {
    const LUCY_CFReaderDH_Entry_Is_Dir_t method = (LUCY_CFReaderDH_Entry_Is_Dir_t)cfish_obj_method(self, LUCY_CFReaderDH_Entry_Is_Dir_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_CFReaderDH_Entry_Is_Symlink_OFFSET;
static CFISH_INLINE bool
LUCY_CFReaderDH_Entry_Is_Symlink(lucy_CFReaderDirHandle* self) {
    const LUCY_CFReaderDH_Entry_Is_Symlink_t method = (LUCY_CFReaderDH_Entry_Is_Symlink_t)cfish_obj_method(self, LUCY_CFReaderDH_Entry_Is_Symlink_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define CFReaderDirHandle lucy_CFReaderDirHandle
  #define CFREADERDIRHANDLE LUCY_CFREADERDIRHANDLE
  #define CFReaderDH_new lucy_CFReaderDH_new
  #define CFReaderDH_init lucy_CFReaderDH_init
  #define CFReaderDH_get_class lucy_CFReaderDH_get_class
  #define CFReaderDH_get_class_name lucy_CFReaderDH_get_class_name
  #define CFReaderDH_is_a lucy_CFReaderDH_is_a
  #define CFReaderDH_Next_IMP LUCY_CFReaderDH_Next_IMP
  #define CFReaderDH_Entry_Is_Dir_IMP LUCY_CFReaderDH_Entry_Is_Dir_IMP
  #define CFReaderDH_Close_IMP LUCY_CFReaderDH_Close_IMP
  #define CFReaderDH_To_Host LUCY_CFReaderDH_To_Host
  #define CFReaderDH_To_Host_t LUCY_CFReaderDH_To_Host_t
  #define CFReaderDH_Clone LUCY_CFReaderDH_Clone
  #define CFReaderDH_Clone_t LUCY_CFReaderDH_Clone_t
  #define CFReaderDH_Equals LUCY_CFReaderDH_Equals
  #define CFReaderDH_Equals_t LUCY_CFReaderDH_Equals_t
  #define CFReaderDH_Compare_To LUCY_CFReaderDH_Compare_To
  #define CFReaderDH_Compare_To_t LUCY_CFReaderDH_Compare_To_t
  #define CFReaderDH_Destroy LUCY_CFReaderDH_Destroy
  #define CFReaderDH_Destroy_t LUCY_CFReaderDH_Destroy_t
  #define CFReaderDH_To_String LUCY_CFReaderDH_To_String
  #define CFReaderDH_To_String_t LUCY_CFReaderDH_To_String_t
  #define CFReaderDH_Next LUCY_CFReaderDH_Next
  #define CFReaderDH_Next_t LUCY_CFReaderDH_Next_t
  #define CFReaderDH_Close LUCY_CFReaderDH_Close
  #define CFReaderDH_Close_t LUCY_CFReaderDH_Close_t
  #define CFReaderDH_Get_Dir LUCY_CFReaderDH_Get_Dir
  #define CFReaderDH_Get_Dir_t LUCY_CFReaderDH_Get_Dir_t
  #define CFReaderDH_Get_Entry LUCY_CFReaderDH_Get_Entry
  #define CFReaderDH_Get_Entry_t LUCY_CFReaderDH_Get_Entry_t
  #define CFReaderDH_Entry_Is_Dir LUCY_CFReaderDH_Entry_Is_Dir
  #define CFReaderDH_Entry_Is_Dir_t LUCY_CFReaderDH_Entry_Is_Dir_t
  #define CFReaderDH_Entry_Is_Symlink LUCY_CFReaderDH_Entry_Is_Symlink
  #define CFReaderDH_Entry_Is_Symlink_t LUCY_CFReaderDH_Entry_Is_Symlink_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_STORE_COMPOUNDFILEREADER */




