/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_STORE_OUTSTREAM
#define H_LUCY_STORE_OUTSTREAM 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish\Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_OUTSTREAM
extern uint32_t lucy_OutStream_IVARS_OFFSET;
typedef struct lucy_OutStreamIVARS lucy_OutStreamIVARS;
static CFISH_INLINE lucy_OutStreamIVARS*
lucy_OutStream_IVARS(lucy_OutStream *self) {
   char *ptr = (char*)self + lucy_OutStream_IVARS_OFFSET;
   return (lucy_OutStreamIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define OutStreamIVARS lucy_OutStreamIVARS
  #define OutStream_IVARS lucy_OutStream_IVARS
#endif

struct lucy_OutStreamIVARS {
    char* buf;
    int64_t buf_start;
    size_t buf_pos;
    lucy_FileHandle* file_handle;
    cfish_String* path;
};

#endif /* C_LUCY_OUTSTREAM */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_OutStream*
lucy_OutStream_open(cfish_Obj* file);

LUCY_VISIBLE lucy_OutStream*
lucy_OutStream_do_open(lucy_OutStream* self, cfish_Obj* file);

cfish_String*
LUCY_OutStream_Get_Path_IMP(lucy_OutStream* self);

int64_t
LUCY_OutStream_Tell_IMP(lucy_OutStream* self);

int64_t
LUCY_OutStream_Align_IMP(lucy_OutStream* self, int64_t modulus);

void
LUCY_OutStream_Flush_IMP(lucy_OutStream* self);

int64_t
LUCY_OutStream_Length_IMP(lucy_OutStream* self);

void
LUCY_OutStream_Grow_IMP(lucy_OutStream* self, int64_t length);

void
LUCY_OutStream_Write_Bytes_IMP(lucy_OutStream* self, const void* buf, size_t len);

void
LUCY_OutStream_Write_I8_IMP(lucy_OutStream* self, int8_t value);

void
LUCY_OutStream_Write_U8_IMP(lucy_OutStream* self, uint8_t value);

void
LUCY_OutStream_Write_I32_IMP(lucy_OutStream* self, int32_t value);

void
LUCY_OutStream_Write_U32_IMP(lucy_OutStream* self, uint32_t value);

void
LUCY_OutStream_Write_I64_IMP(lucy_OutStream* self, int64_t value);

void
LUCY_OutStream_Write_U64_IMP(lucy_OutStream* self, uint64_t value);

void
LUCY_OutStream_Write_CI32_IMP(lucy_OutStream* self, int32_t value);

void
LUCY_OutStream_Write_CU32_IMP(lucy_OutStream* self, uint32_t value);

void
LUCY_OutStream_Write_CI64_IMP(lucy_OutStream* self, int64_t value);

void
LUCY_OutStream_Write_CU64_IMP(lucy_OutStream* self, uint64_t value);

void
LUCY_OutStream_Write_F32_IMP(lucy_OutStream* self, float value);

void
LUCY_OutStream_Write_F64_IMP(lucy_OutStream* self, double value);

void
LUCY_OutStream_Write_String_IMP(lucy_OutStream* self, const char* buf, size_t len);

void
LUCY_OutStream_Absorb_IMP(lucy_OutStream* self, lucy_InStream* instream);

void
LUCY_OutStream_Close_IMP(lucy_OutStream* self);

void
LUCY_OutStream_Destroy_IMP(lucy_OutStream* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_OutStream_To_Host_t)(lucy_OutStream* self, void* vcache);

typedef cfish_Obj*
(*LUCY_OutStream_Clone_t)(lucy_OutStream* self);

typedef bool
(*LUCY_OutStream_Equals_t)(lucy_OutStream* self, cfish_Obj* other);

typedef int32_t
(*LUCY_OutStream_Compare_To_t)(lucy_OutStream* self, cfish_Obj* other);

typedef void
(*LUCY_OutStream_Destroy_t)(lucy_OutStream* self);

typedef cfish_String*
(*LUCY_OutStream_To_String_t)(lucy_OutStream* self);

typedef cfish_String*
(*LUCY_OutStream_Get_Path_t)(lucy_OutStream* self);

typedef int64_t
(*LUCY_OutStream_Tell_t)(lucy_OutStream* self);

typedef int64_t
(*LUCY_OutStream_Align_t)(lucy_OutStream* self, int64_t modulus);

typedef void
(*LUCY_OutStream_Flush_t)(lucy_OutStream* self);

typedef int64_t
(*LUCY_OutStream_Length_t)(lucy_OutStream* self);

typedef void
(*LUCY_OutStream_Grow_t)(lucy_OutStream* self, int64_t length);

typedef void
(*LUCY_OutStream_Write_Bytes_t)(lucy_OutStream* self, const void* buf, size_t len);

typedef void
(*LUCY_OutStream_Write_I8_t)(lucy_OutStream* self, int8_t value);

typedef void
(*LUCY_OutStream_Write_U8_t)(lucy_OutStream* self, uint8_t value);

typedef void
(*LUCY_OutStream_Write_I32_t)(lucy_OutStream* self, int32_t value);

typedef void
(*LUCY_OutStream_Write_U32_t)(lucy_OutStream* self, uint32_t value);

typedef void
(*LUCY_OutStream_Write_I64_t)(lucy_OutStream* self, int64_t value);

typedef void
(*LUCY_OutStream_Write_U64_t)(lucy_OutStream* self, uint64_t value);

typedef void
(*LUCY_OutStream_Write_CI32_t)(lucy_OutStream* self, int32_t value);

typedef void
(*LUCY_OutStream_Write_CU32_t)(lucy_OutStream* self, uint32_t value);

typedef void
(*LUCY_OutStream_Write_CI64_t)(lucy_OutStream* self, int64_t value);

typedef void
(*LUCY_OutStream_Write_CU64_t)(lucy_OutStream* self, uint64_t value);

typedef void
(*LUCY_OutStream_Write_F32_t)(lucy_OutStream* self, float value);

typedef void
(*LUCY_OutStream_Write_F64_t)(lucy_OutStream* self, double value);

typedef void
(*LUCY_OutStream_Write_String_t)(lucy_OutStream* self, const char* buf, size_t len);

typedef void
(*LUCY_OutStream_Absorb_t)(lucy_OutStream* self, lucy_InStream* instream);

typedef void
(*LUCY_OutStream_Close_t)(lucy_OutStream* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_OutStream_get_class(lucy_OutStream *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_OutStream_get_class_name(lucy_OutStream *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_OutStream_is_a(lucy_OutStream *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_OutStream_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_OutStream_To_Host(lucy_OutStream* self, void* vcache) {
    const LUCY_OutStream_To_Host_t method = (LUCY_OutStream_To_Host_t)cfish_obj_method(self, LUCY_OutStream_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_OutStream_Clone(lucy_OutStream* self) {
    const LUCY_OutStream_Clone_t method = (LUCY_OutStream_Clone_t)cfish_obj_method(self, LUCY_OutStream_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_OutStream_Equals(lucy_OutStream* self, cfish_Obj* other) {
    const LUCY_OutStream_Equals_t method = (LUCY_OutStream_Equals_t)cfish_obj_method(self, LUCY_OutStream_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_OutStream_Compare_To(lucy_OutStream* self, cfish_Obj* other) {
    const LUCY_OutStream_Compare_To_t method = (LUCY_OutStream_Compare_To_t)cfish_obj_method(self, LUCY_OutStream_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Destroy(lucy_OutStream* self) {
    const LUCY_OutStream_Destroy_t method = (LUCY_OutStream_Destroy_t)cfish_obj_method(self, LUCY_OutStream_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_OutStream_To_String(lucy_OutStream* self) {
    const LUCY_OutStream_To_String_t method = (LUCY_OutStream_To_String_t)cfish_obj_method(self, LUCY_OutStream_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Get_Path_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_OutStream_Get_Path(lucy_OutStream* self) {
    const LUCY_OutStream_Get_Path_t method = (LUCY_OutStream_Get_Path_t)cfish_obj_method(self, LUCY_OutStream_Get_Path_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Tell_OFFSET;
static CFISH_INLINE int64_t
LUCY_OutStream_Tell(lucy_OutStream* self) {
#ifdef CFP_LUCY
    return LUCY_OutStream_Tell_IMP(self);
#else
    const LUCY_OutStream_Tell_t method = (LUCY_OutStream_Tell_t)cfish_obj_method(self, LUCY_OutStream_Tell_OFFSET);
    return method(self);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Align_OFFSET;
static CFISH_INLINE int64_t
LUCY_OutStream_Align(lucy_OutStream* self, int64_t modulus) {
#ifdef CFP_LUCY
    return LUCY_OutStream_Align_IMP(self, modulus);
#else
    const LUCY_OutStream_Align_t method = (LUCY_OutStream_Align_t)cfish_obj_method(self, LUCY_OutStream_Align_OFFSET);
    return method(self, modulus);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Flush_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Flush(lucy_OutStream* self) {
#ifdef CFP_LUCY
    LUCY_OutStream_Flush_IMP(self);
#else
    const LUCY_OutStream_Flush_t method = (LUCY_OutStream_Flush_t)cfish_obj_method(self, LUCY_OutStream_Flush_OFFSET);
    method(self);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Length_OFFSET;
static CFISH_INLINE int64_t
LUCY_OutStream_Length(lucy_OutStream* self) {
#ifdef CFP_LUCY
    return LUCY_OutStream_Length_IMP(self);
#else
    const LUCY_OutStream_Length_t method = (LUCY_OutStream_Length_t)cfish_obj_method(self, LUCY_OutStream_Length_OFFSET);
    return method(self);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Grow_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Grow(lucy_OutStream* self, int64_t length) {
    const LUCY_OutStream_Grow_t method = (LUCY_OutStream_Grow_t)cfish_obj_method(self, LUCY_OutStream_Grow_OFFSET);
    method(self, length);
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Write_Bytes_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Write_Bytes(lucy_OutStream* self, const void* buf, size_t len) {
#ifdef CFP_LUCY
    LUCY_OutStream_Write_Bytes_IMP(self, buf, len);
#else
    const LUCY_OutStream_Write_Bytes_t method = (LUCY_OutStream_Write_Bytes_t)cfish_obj_method(self, LUCY_OutStream_Write_Bytes_OFFSET);
    method(self, buf, len);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Write_I8_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Write_I8(lucy_OutStream* self, int8_t value) {
#ifdef CFP_LUCY
    LUCY_OutStream_Write_I8_IMP(self, value);
#else
    const LUCY_OutStream_Write_I8_t method = (LUCY_OutStream_Write_I8_t)cfish_obj_method(self, LUCY_OutStream_Write_I8_OFFSET);
    method(self, value);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Write_U8_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Write_U8(lucy_OutStream* self, uint8_t value) {
#ifdef CFP_LUCY
    LUCY_OutStream_Write_U8_IMP(self, value);
#else
    const LUCY_OutStream_Write_U8_t method = (LUCY_OutStream_Write_U8_t)cfish_obj_method(self, LUCY_OutStream_Write_U8_OFFSET);
    method(self, value);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Write_I32_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Write_I32(lucy_OutStream* self, int32_t value) {
#ifdef CFP_LUCY
    LUCY_OutStream_Write_I32_IMP(self, value);
#else
    const LUCY_OutStream_Write_I32_t method = (LUCY_OutStream_Write_I32_t)cfish_obj_method(self, LUCY_OutStream_Write_I32_OFFSET);
    method(self, value);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Write_U32_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Write_U32(lucy_OutStream* self, uint32_t value) {
#ifdef CFP_LUCY
    LUCY_OutStream_Write_U32_IMP(self, value);
#else
    const LUCY_OutStream_Write_U32_t method = (LUCY_OutStream_Write_U32_t)cfish_obj_method(self, LUCY_OutStream_Write_U32_OFFSET);
    method(self, value);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Write_I64_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Write_I64(lucy_OutStream* self, int64_t value) {
#ifdef CFP_LUCY
    LUCY_OutStream_Write_I64_IMP(self, value);
#else
    const LUCY_OutStream_Write_I64_t method = (LUCY_OutStream_Write_I64_t)cfish_obj_method(self, LUCY_OutStream_Write_I64_OFFSET);
    method(self, value);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Write_U64_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Write_U64(lucy_OutStream* self, uint64_t value) {
#ifdef CFP_LUCY
    LUCY_OutStream_Write_U64_IMP(self, value);
#else
    const LUCY_OutStream_Write_U64_t method = (LUCY_OutStream_Write_U64_t)cfish_obj_method(self, LUCY_OutStream_Write_U64_OFFSET);
    method(self, value);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Write_CI32_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Write_CI32(lucy_OutStream* self, int32_t value) {
#ifdef CFP_LUCY
    LUCY_OutStream_Write_CI32_IMP(self, value);
#else
    const LUCY_OutStream_Write_CI32_t method = (LUCY_OutStream_Write_CI32_t)cfish_obj_method(self, LUCY_OutStream_Write_CI32_OFFSET);
    method(self, value);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Write_CU32_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Write_CU32(lucy_OutStream* self, uint32_t value) {
#ifdef CFP_LUCY
    LUCY_OutStream_Write_CU32_IMP(self, value);
#else
    const LUCY_OutStream_Write_CU32_t method = (LUCY_OutStream_Write_CU32_t)cfish_obj_method(self, LUCY_OutStream_Write_CU32_OFFSET);
    method(self, value);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Write_CI64_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Write_CI64(lucy_OutStream* self, int64_t value) {
#ifdef CFP_LUCY
    LUCY_OutStream_Write_CI64_IMP(self, value);
#else
    const LUCY_OutStream_Write_CI64_t method = (LUCY_OutStream_Write_CI64_t)cfish_obj_method(self, LUCY_OutStream_Write_CI64_OFFSET);
    method(self, value);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Write_CU64_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Write_CU64(lucy_OutStream* self, uint64_t value) {
#ifdef CFP_LUCY
    LUCY_OutStream_Write_CU64_IMP(self, value);
#else
    const LUCY_OutStream_Write_CU64_t method = (LUCY_OutStream_Write_CU64_t)cfish_obj_method(self, LUCY_OutStream_Write_CU64_OFFSET);
    method(self, value);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Write_F32_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Write_F32(lucy_OutStream* self, float value) {
#ifdef CFP_LUCY
    LUCY_OutStream_Write_F32_IMP(self, value);
#else
    const LUCY_OutStream_Write_F32_t method = (LUCY_OutStream_Write_F32_t)cfish_obj_method(self, LUCY_OutStream_Write_F32_OFFSET);
    method(self, value);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Write_F64_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Write_F64(lucy_OutStream* self, double value) {
#ifdef CFP_LUCY
    LUCY_OutStream_Write_F64_IMP(self, value);
#else
    const LUCY_OutStream_Write_F64_t method = (LUCY_OutStream_Write_F64_t)cfish_obj_method(self, LUCY_OutStream_Write_F64_OFFSET);
    method(self, value);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Write_String_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Write_String(lucy_OutStream* self, const char* buf, size_t len) {
#ifdef CFP_LUCY
    LUCY_OutStream_Write_String_IMP(self, buf, len);
#else
    const LUCY_OutStream_Write_String_t method = (LUCY_OutStream_Write_String_t)cfish_obj_method(self, LUCY_OutStream_Write_String_OFFSET);
    method(self, buf, len);
#endif
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Absorb_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Absorb(lucy_OutStream* self, lucy_InStream* instream) {
    const LUCY_OutStream_Absorb_t method = (LUCY_OutStream_Absorb_t)cfish_obj_method(self, LUCY_OutStream_Absorb_OFFSET);
    method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_OutStream_Close_OFFSET;
static CFISH_INLINE void
LUCY_OutStream_Close(lucy_OutStream* self) {
    const LUCY_OutStream_Close_t method = (LUCY_OutStream_Close_t)cfish_obj_method(self, LUCY_OutStream_Close_OFFSET);
    method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_OutStream_Get_Path_OVERRIDE NULL
#define Lucy_OutStream_Grow_OVERRIDE NULL
#define Lucy_OutStream_Absorb_OVERRIDE NULL
#define Lucy_OutStream_Close_OVERRIDE NULL
#else
cfish_String*
Lucy_OutStream_Get_Path_OVERRIDE(lucy_OutStream* self);
void
Lucy_OutStream_Grow_OVERRIDE(lucy_OutStream* self, int64_t length);
void
Lucy_OutStream_Absorb_OVERRIDE(lucy_OutStream* self, lucy_InStream* instream);
void
Lucy_OutStream_Close_OVERRIDE(lucy_OutStream* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define OutStream lucy_OutStream
  #define OUTSTREAM LUCY_OUTSTREAM
  #define OutStream_open lucy_OutStream_open
  #define OutStream_do_open lucy_OutStream_do_open
  #define OutStream_get_class lucy_OutStream_get_class
  #define OutStream_get_class_name lucy_OutStream_get_class_name
  #define OutStream_is_a lucy_OutStream_is_a
  #define OutStream_Get_Path_IMP LUCY_OutStream_Get_Path_IMP
  #define OutStream_Tell_IMP LUCY_OutStream_Tell_IMP
  #define OutStream_Align_IMP LUCY_OutStream_Align_IMP
  #define OutStream_Flush_IMP LUCY_OutStream_Flush_IMP
  #define OutStream_Length_IMP LUCY_OutStream_Length_IMP
  #define OutStream_Grow_IMP LUCY_OutStream_Grow_IMP
  #define OutStream_Write_Bytes_IMP LUCY_OutStream_Write_Bytes_IMP
  #define OutStream_Write_I8_IMP LUCY_OutStream_Write_I8_IMP
  #define OutStream_Write_U8_IMP LUCY_OutStream_Write_U8_IMP
  #define OutStream_Write_I32_IMP LUCY_OutStream_Write_I32_IMP
  #define OutStream_Write_U32_IMP LUCY_OutStream_Write_U32_IMP
  #define OutStream_Write_I64_IMP LUCY_OutStream_Write_I64_IMP
  #define OutStream_Write_U64_IMP LUCY_OutStream_Write_U64_IMP
  #define OutStream_Write_CI32_IMP LUCY_OutStream_Write_CI32_IMP
  #define OutStream_Write_CU32_IMP LUCY_OutStream_Write_CU32_IMP
  #define OutStream_Write_CI64_IMP LUCY_OutStream_Write_CI64_IMP
  #define OutStream_Write_CU64_IMP LUCY_OutStream_Write_CU64_IMP
  #define OutStream_Write_F32_IMP LUCY_OutStream_Write_F32_IMP
  #define OutStream_Write_F64_IMP LUCY_OutStream_Write_F64_IMP
  #define OutStream_Write_String_IMP LUCY_OutStream_Write_String_IMP
  #define OutStream_Absorb_IMP LUCY_OutStream_Absorb_IMP
  #define OutStream_Close_IMP LUCY_OutStream_Close_IMP
  #define OutStream_Destroy_IMP LUCY_OutStream_Destroy_IMP
  #define OutStream_To_Host LUCY_OutStream_To_Host
  #define OutStream_To_Host_t LUCY_OutStream_To_Host_t
  #define OutStream_Clone LUCY_OutStream_Clone
  #define OutStream_Clone_t LUCY_OutStream_Clone_t
  #define OutStream_Equals LUCY_OutStream_Equals
  #define OutStream_Equals_t LUCY_OutStream_Equals_t
  #define OutStream_Compare_To LUCY_OutStream_Compare_To
  #define OutStream_Compare_To_t LUCY_OutStream_Compare_To_t
  #define OutStream_Destroy LUCY_OutStream_Destroy
  #define OutStream_Destroy_t LUCY_OutStream_Destroy_t
  #define OutStream_To_String LUCY_OutStream_To_String
  #define OutStream_To_String_t LUCY_OutStream_To_String_t
  #define OutStream_Get_Path LUCY_OutStream_Get_Path
  #define OutStream_Get_Path_t LUCY_OutStream_Get_Path_t
  #define OutStream_Tell LUCY_OutStream_Tell
  #define OutStream_Tell_t LUCY_OutStream_Tell_t
  #define OutStream_Align LUCY_OutStream_Align
  #define OutStream_Align_t LUCY_OutStream_Align_t
  #define OutStream_Flush LUCY_OutStream_Flush
  #define OutStream_Flush_t LUCY_OutStream_Flush_t
  #define OutStream_Length LUCY_OutStream_Length
  #define OutStream_Length_t LUCY_OutStream_Length_t
  #define OutStream_Grow LUCY_OutStream_Grow
  #define OutStream_Grow_t LUCY_OutStream_Grow_t
  #define OutStream_Write_Bytes LUCY_OutStream_Write_Bytes
  #define OutStream_Write_Bytes_t LUCY_OutStream_Write_Bytes_t
  #define OutStream_Write_I8 LUCY_OutStream_Write_I8
  #define OutStream_Write_I8_t LUCY_OutStream_Write_I8_t
  #define OutStream_Write_U8 LUCY_OutStream_Write_U8
  #define OutStream_Write_U8_t LUCY_OutStream_Write_U8_t
  #define OutStream_Write_I32 LUCY_OutStream_Write_I32
  #define OutStream_Write_I32_t LUCY_OutStream_Write_I32_t
  #define OutStream_Write_U32 LUCY_OutStream_Write_U32
  #define OutStream_Write_U32_t LUCY_OutStream_Write_U32_t
  #define OutStream_Write_I64 LUCY_OutStream_Write_I64
  #define OutStream_Write_I64_t LUCY_OutStream_Write_I64_t
  #define OutStream_Write_U64 LUCY_OutStream_Write_U64
  #define OutStream_Write_U64_t LUCY_OutStream_Write_U64_t
  #define OutStream_Write_CI32 LUCY_OutStream_Write_CI32
  #define OutStream_Write_CI32_t LUCY_OutStream_Write_CI32_t
  #define OutStream_Write_CU32 LUCY_OutStream_Write_CU32
  #define OutStream_Write_CU32_t LUCY_OutStream_Write_CU32_t
  #define OutStream_Write_CI64 LUCY_OutStream_Write_CI64
  #define OutStream_Write_CI64_t LUCY_OutStream_Write_CI64_t
  #define OutStream_Write_CU64 LUCY_OutStream_Write_CU64
  #define OutStream_Write_CU64_t LUCY_OutStream_Write_CU64_t
  #define OutStream_Write_F32 LUCY_OutStream_Write_F32
  #define OutStream_Write_F32_t LUCY_OutStream_Write_F32_t
  #define OutStream_Write_F64 LUCY_OutStream_Write_F64
  #define OutStream_Write_F64_t LUCY_OutStream_Write_F64_t
  #define OutStream_Write_String LUCY_OutStream_Write_String
  #define OutStream_Write_String_t LUCY_OutStream_Write_String_t
  #define OutStream_Absorb LUCY_OutStream_Absorb
  #define OutStream_Absorb_t LUCY_OutStream_Absorb_t
  #define OutStream_Close LUCY_OutStream_Close
  #define OutStream_Close_t LUCY_OutStream_Close_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_STORE_OUTSTREAM */




