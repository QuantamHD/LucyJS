/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_STORE_FILEWINDOW
#define H_LUCY_STORE_FILEWINDOW 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish\Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_FILEWINDOW
extern uint32_t lucy_FileWindow_IVARS_OFFSET;
typedef struct lucy_FileWindowIVARS lucy_FileWindowIVARS;
static CFISH_INLINE lucy_FileWindowIVARS*
lucy_FileWindow_IVARS(lucy_FileWindow *self) {
   char *ptr = (char*)self + lucy_FileWindow_IVARS_OFFSET;
   return (lucy_FileWindowIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define FileWindowIVARS lucy_FileWindowIVARS
  #define FileWindow_IVARS lucy_FileWindow_IVARS
#endif

struct lucy_FileWindowIVARS {
    char* buf;
    int64_t offset;
    int64_t len;
};

#endif /* C_LUCY_FILEWINDOW */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_FileWindow*
lucy_FileWindow_init(lucy_FileWindow* self);

LUCY_VISIBLE lucy_FileWindow*
lucy_FileWindow_new(void);

void
LUCY_FileWindow_Set_Offset_IMP(lucy_FileWindow* self, int64_t offset);

void
LUCY_FileWindow_Set_Window_IMP(lucy_FileWindow* self, char* buf, int64_t offset, int64_t len);

char*
LUCY_FileWindow_Get_Buf_IMP(lucy_FileWindow* self);

int64_t
LUCY_FileWindow_Get_Offset_IMP(lucy_FileWindow* self);

int64_t
LUCY_FileWindow_Get_Len_IMP(lucy_FileWindow* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_FileWindow_To_Host_t)(lucy_FileWindow* self, void* vcache);

typedef cfish_Obj*
(*LUCY_FileWindow_Clone_t)(lucy_FileWindow* self);

typedef bool
(*LUCY_FileWindow_Equals_t)(lucy_FileWindow* self, cfish_Obj* other);

typedef int32_t
(*LUCY_FileWindow_Compare_To_t)(lucy_FileWindow* self, cfish_Obj* other);

typedef void
(*LUCY_FileWindow_Destroy_t)(lucy_FileWindow* self);

typedef cfish_String*
(*LUCY_FileWindow_To_String_t)(lucy_FileWindow* self);

typedef void
(*LUCY_FileWindow_Set_Offset_t)(lucy_FileWindow* self, int64_t offset);

typedef void
(*LUCY_FileWindow_Set_Window_t)(lucy_FileWindow* self, char* buf, int64_t offset, int64_t len);

typedef char*
(*LUCY_FileWindow_Get_Buf_t)(lucy_FileWindow* self);

typedef int64_t
(*LUCY_FileWindow_Get_Offset_t)(lucy_FileWindow* self);

typedef int64_t
(*LUCY_FileWindow_Get_Len_t)(lucy_FileWindow* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_FileWindow_get_class(lucy_FileWindow *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_FileWindow_get_class_name(lucy_FileWindow *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_FileWindow_is_a(lucy_FileWindow *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_FileWindow_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_FileWindow_To_Host(lucy_FileWindow* self, void* vcache) {
    const LUCY_FileWindow_To_Host_t method = (LUCY_FileWindow_To_Host_t)cfish_obj_method(self, LUCY_FileWindow_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_FileWindow_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_FileWindow_Clone(lucy_FileWindow* self) {
    const LUCY_FileWindow_Clone_t method = (LUCY_FileWindow_Clone_t)cfish_obj_method(self, LUCY_FileWindow_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FileWindow_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_FileWindow_Equals(lucy_FileWindow* self, cfish_Obj* other) {
    const LUCY_FileWindow_Equals_t method = (LUCY_FileWindow_Equals_t)cfish_obj_method(self, LUCY_FileWindow_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_FileWindow_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_FileWindow_Compare_To(lucy_FileWindow* self, cfish_Obj* other) {
    const LUCY_FileWindow_Compare_To_t method = (LUCY_FileWindow_Compare_To_t)cfish_obj_method(self, LUCY_FileWindow_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_FileWindow_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_FileWindow_Destroy(lucy_FileWindow* self) {
    const LUCY_FileWindow_Destroy_t method = (LUCY_FileWindow_Destroy_t)cfish_obj_method(self, LUCY_FileWindow_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FileWindow_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_FileWindow_To_String(lucy_FileWindow* self) {
    const LUCY_FileWindow_To_String_t method = (LUCY_FileWindow_To_String_t)cfish_obj_method(self, LUCY_FileWindow_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FileWindow_Set_Offset_OFFSET;
static CFISH_INLINE void
LUCY_FileWindow_Set_Offset(lucy_FileWindow* self, int64_t offset) {
    const LUCY_FileWindow_Set_Offset_t method = (LUCY_FileWindow_Set_Offset_t)cfish_obj_method(self, LUCY_FileWindow_Set_Offset_OFFSET);
    method(self, offset);
}

extern LUCY_VISIBLE uint32_t LUCY_FileWindow_Set_Window_OFFSET;
static CFISH_INLINE void
LUCY_FileWindow_Set_Window(lucy_FileWindow* self, char* buf, int64_t offset, int64_t len) {
    const LUCY_FileWindow_Set_Window_t method = (LUCY_FileWindow_Set_Window_t)cfish_obj_method(self, LUCY_FileWindow_Set_Window_OFFSET);
    method(self, buf, offset, len);
}

extern LUCY_VISIBLE uint32_t LUCY_FileWindow_Get_Buf_OFFSET;
static CFISH_INLINE char*
LUCY_FileWindow_Get_Buf(lucy_FileWindow* self) {
    const LUCY_FileWindow_Get_Buf_t method = (LUCY_FileWindow_Get_Buf_t)cfish_obj_method(self, LUCY_FileWindow_Get_Buf_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FileWindow_Get_Offset_OFFSET;
static CFISH_INLINE int64_t
LUCY_FileWindow_Get_Offset(lucy_FileWindow* self) {
    const LUCY_FileWindow_Get_Offset_t method = (LUCY_FileWindow_Get_Offset_t)cfish_obj_method(self, LUCY_FileWindow_Get_Offset_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FileWindow_Get_Len_OFFSET;
static CFISH_INLINE int64_t
LUCY_FileWindow_Get_Len(lucy_FileWindow* self) {
    const LUCY_FileWindow_Get_Len_t method = (LUCY_FileWindow_Get_Len_t)cfish_obj_method(self, LUCY_FileWindow_Get_Len_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_FileWindow_Set_Offset_OVERRIDE NULL
#define Lucy_FileWindow_Set_Window_OVERRIDE NULL
#define Lucy_FileWindow_Get_Buf_OVERRIDE NULL
#define Lucy_FileWindow_Get_Offset_OVERRIDE NULL
#define Lucy_FileWindow_Get_Len_OVERRIDE NULL
#else
void
Lucy_FileWindow_Set_Offset_OVERRIDE(lucy_FileWindow* self, int64_t offset);
void
Lucy_FileWindow_Set_Window_OVERRIDE(lucy_FileWindow* self, char* buf, int64_t offset, int64_t len);
char*
Lucy_FileWindow_Get_Buf_OVERRIDE(lucy_FileWindow* self);
int64_t
Lucy_FileWindow_Get_Offset_OVERRIDE(lucy_FileWindow* self);
int64_t
Lucy_FileWindow_Get_Len_OVERRIDE(lucy_FileWindow* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define FileWindow lucy_FileWindow
  #define FILEWINDOW LUCY_FILEWINDOW
  #define FileWindow_init lucy_FileWindow_init
  #define FileWindow_new lucy_FileWindow_new
  #define FileWindow_get_class lucy_FileWindow_get_class
  #define FileWindow_get_class_name lucy_FileWindow_get_class_name
  #define FileWindow_is_a lucy_FileWindow_is_a
  #define FileWindow_Set_Offset_IMP LUCY_FileWindow_Set_Offset_IMP
  #define FileWindow_Set_Window_IMP LUCY_FileWindow_Set_Window_IMP
  #define FileWindow_Get_Buf_IMP LUCY_FileWindow_Get_Buf_IMP
  #define FileWindow_Get_Offset_IMP LUCY_FileWindow_Get_Offset_IMP
  #define FileWindow_Get_Len_IMP LUCY_FileWindow_Get_Len_IMP
  #define FileWindow_To_Host LUCY_FileWindow_To_Host
  #define FileWindow_To_Host_t LUCY_FileWindow_To_Host_t
  #define FileWindow_Clone LUCY_FileWindow_Clone
  #define FileWindow_Clone_t LUCY_FileWindow_Clone_t
  #define FileWindow_Equals LUCY_FileWindow_Equals
  #define FileWindow_Equals_t LUCY_FileWindow_Equals_t
  #define FileWindow_Compare_To LUCY_FileWindow_Compare_To
  #define FileWindow_Compare_To_t LUCY_FileWindow_Compare_To_t
  #define FileWindow_Destroy LUCY_FileWindow_Destroy
  #define FileWindow_Destroy_t LUCY_FileWindow_Destroy_t
  #define FileWindow_To_String LUCY_FileWindow_To_String
  #define FileWindow_To_String_t LUCY_FileWindow_To_String_t
  #define FileWindow_Set_Offset LUCY_FileWindow_Set_Offset
  #define FileWindow_Set_Offset_t LUCY_FileWindow_Set_Offset_t
  #define FileWindow_Set_Window LUCY_FileWindow_Set_Window
  #define FileWindow_Set_Window_t LUCY_FileWindow_Set_Window_t
  #define FileWindow_Get_Buf LUCY_FileWindow_Get_Buf
  #define FileWindow_Get_Buf_t LUCY_FileWindow_Get_Buf_t
  #define FileWindow_Get_Offset LUCY_FileWindow_Get_Offset
  #define FileWindow_Get_Offset_t LUCY_FileWindow_Get_Offset_t
  #define FileWindow_Get_Len LUCY_FileWindow_Get_Len
  #define FileWindow_Get_Len_t LUCY_FileWindow_Get_Len_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_STORE_FILEWINDOW */




