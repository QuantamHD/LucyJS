/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_PLAN_FIELDTYPE
#define H_LUCY_PLAN_FIELDTYPE 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

#define lucy_FType_TEXT    1
#define lucy_FType_BLOB    2
#define lucy_FType_INT32   3
#define lucy_FType_INT64   4
#define lucy_FType_FLOAT32 5
#define lucy_FType_FLOAT64 6
#define lucy_FType_PRIMITIVE_ID_MASK 0x7

#ifdef LUCY_USE_SHORT_NAMES
  #define FType_TEXT              lucy_FType_TEXT
  #define FType_BLOB              lucy_FType_BLOB
  #define FType_INT32             lucy_FType_INT32
  #define FType_INT64             lucy_FType_INT64
  #define FType_FLOAT32           lucy_FType_FLOAT32
  #define FType_FLOAT64           lucy_FType_FLOAT64
  #define FType_PRIMITIVE_ID_MASK lucy_FType_PRIMITIVE_ID_MASK
#endif


/* Include the header for this class's parent. 
 */

#include "Clownfish\Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_FIELDTYPE
extern uint32_t lucy_FType_IVARS_OFFSET;
typedef struct lucy_FieldTypeIVARS lucy_FieldTypeIVARS;
static CFISH_INLINE lucy_FieldTypeIVARS*
lucy_FType_IVARS(lucy_FieldType *self) {
   char *ptr = (char*)self + lucy_FType_IVARS_OFFSET;
   return (lucy_FieldTypeIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define FieldTypeIVARS lucy_FieldTypeIVARS
  #define FType_IVARS lucy_FType_IVARS
#endif

struct lucy_FieldTypeIVARS {
    float boost;
    bool indexed;
    bool stored;
    bool sortable;
};

#endif /* C_LUCY_FIELDTYPE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_FieldType*
lucy_FType_init(lucy_FieldType* self);

LUCY_VISIBLE lucy_FieldType*
lucy_FType_init2(lucy_FieldType* self, float boost, bool indexed, bool stored, bool sortable);

static CFISH_INLINE int32_t
lucy_FType_null_back_compare_values(lucy_FieldType* self, cfish_Obj* a, cfish_Obj* b);

void
LUCY_FType_Set_Boost_IMP(lucy_FieldType* self, float boost);

float
LUCY_FType_Get_Boost_IMP(lucy_FieldType* self);

void
LUCY_FType_Set_Indexed_IMP(lucy_FieldType* self, bool indexed);

bool
LUCY_FType_Indexed_IMP(lucy_FieldType* self);

void
LUCY_FType_Set_Stored_IMP(lucy_FieldType* self, bool stored);

bool
LUCY_FType_Stored_IMP(lucy_FieldType* self);

void
LUCY_FType_Set_Sortable_IMP(lucy_FieldType* self, bool sortable);

bool
LUCY_FType_Sortable_IMP(lucy_FieldType* self);

bool
LUCY_FType_Binary_IMP(lucy_FieldType* self);

int32_t
LUCY_FType_Compare_Values_IMP(lucy_FieldType* self, cfish_Obj* a, cfish_Obj* b);

lucy_TermStepper*
LUCY_FType_Make_Term_Stepper_IMP(lucy_FieldType* self);

int8_t
LUCY_FType_Primitive_ID_IMP(lucy_FieldType* self);

cfish_Hash*
LUCY_FType_Dump_For_Schema_IMP(lucy_FieldType* self);

cfish_Obj*
LUCY_FType_Dump_IMP(lucy_FieldType* self);

cfish_Obj*
LUCY_FType_Load_IMP(lucy_FieldType* self, cfish_Obj* dump);

bool
LUCY_FType_Equals_IMP(lucy_FieldType* self, cfish_Obj* other);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_FType_To_Host_t)(lucy_FieldType* self, void* vcache);

typedef cfish_Obj*
(*LUCY_FType_Clone_t)(lucy_FieldType* self);

typedef bool
(*LUCY_FType_Equals_t)(lucy_FieldType* self, cfish_Obj* other);

typedef int32_t
(*LUCY_FType_Compare_To_t)(lucy_FieldType* self, cfish_Obj* other);

typedef void
(*LUCY_FType_Destroy_t)(lucy_FieldType* self);

typedef cfish_String*
(*LUCY_FType_To_String_t)(lucy_FieldType* self);

typedef void
(*LUCY_FType_Set_Boost_t)(lucy_FieldType* self, float boost);

typedef float
(*LUCY_FType_Get_Boost_t)(lucy_FieldType* self);

typedef void
(*LUCY_FType_Set_Indexed_t)(lucy_FieldType* self, bool indexed);

typedef bool
(*LUCY_FType_Indexed_t)(lucy_FieldType* self);

typedef void
(*LUCY_FType_Set_Stored_t)(lucy_FieldType* self, bool stored);

typedef bool
(*LUCY_FType_Stored_t)(lucy_FieldType* self);

typedef void
(*LUCY_FType_Set_Sortable_t)(lucy_FieldType* self, bool sortable);

typedef bool
(*LUCY_FType_Sortable_t)(lucy_FieldType* self);

typedef bool
(*LUCY_FType_Binary_t)(lucy_FieldType* self);

typedef int32_t
(*LUCY_FType_Compare_Values_t)(lucy_FieldType* self, cfish_Obj* a, cfish_Obj* b);

typedef lucy_TermStepper*
(*LUCY_FType_Make_Term_Stepper_t)(lucy_FieldType* self);

typedef int8_t
(*LUCY_FType_Primitive_ID_t)(lucy_FieldType* self);

typedef cfish_Hash*
(*LUCY_FType_Dump_For_Schema_t)(lucy_FieldType* self);

typedef cfish_Obj*
(*LUCY_FType_Dump_t)(lucy_FieldType* self);

typedef cfish_Obj*
(*LUCY_FType_Load_t)(lucy_FieldType* self, cfish_Obj* dump);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_FType_get_class(lucy_FieldType *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_FType_get_class_name(lucy_FieldType *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_FType_is_a(lucy_FieldType *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_FType_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_FType_To_Host(lucy_FieldType* self, void* vcache) {
    const LUCY_FType_To_Host_t method = (LUCY_FType_To_Host_t)cfish_obj_method(self, LUCY_FType_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_FType_Clone(lucy_FieldType* self) {
    const LUCY_FType_Clone_t method = (LUCY_FType_Clone_t)cfish_obj_method(self, LUCY_FType_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_FType_Equals(lucy_FieldType* self, cfish_Obj* other) {
    const LUCY_FType_Equals_t method = (LUCY_FType_Equals_t)cfish_obj_method(self, LUCY_FType_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_FType_Compare_To(lucy_FieldType* self, cfish_Obj* other) {
    const LUCY_FType_Compare_To_t method = (LUCY_FType_Compare_To_t)cfish_obj_method(self, LUCY_FType_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_FType_Destroy(lucy_FieldType* self) {
    const LUCY_FType_Destroy_t method = (LUCY_FType_Destroy_t)cfish_obj_method(self, LUCY_FType_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_FType_To_String(lucy_FieldType* self) {
    const LUCY_FType_To_String_t method = (LUCY_FType_To_String_t)cfish_obj_method(self, LUCY_FType_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_FType_Set_Boost(lucy_FieldType* self, float boost) {
    const LUCY_FType_Set_Boost_t method = (LUCY_FType_Set_Boost_t)cfish_obj_method(self, LUCY_FType_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_FType_Get_Boost(lucy_FieldType* self) {
    const LUCY_FType_Get_Boost_t method = (LUCY_FType_Get_Boost_t)cfish_obj_method(self, LUCY_FType_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Set_Indexed_OFFSET;
static CFISH_INLINE void
LUCY_FType_Set_Indexed(lucy_FieldType* self, bool indexed) {
    const LUCY_FType_Set_Indexed_t method = (LUCY_FType_Set_Indexed_t)cfish_obj_method(self, LUCY_FType_Set_Indexed_OFFSET);
    method(self, indexed);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Indexed_OFFSET;
static CFISH_INLINE bool
LUCY_FType_Indexed(lucy_FieldType* self) {
    const LUCY_FType_Indexed_t method = (LUCY_FType_Indexed_t)cfish_obj_method(self, LUCY_FType_Indexed_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Set_Stored_OFFSET;
static CFISH_INLINE void
LUCY_FType_Set_Stored(lucy_FieldType* self, bool stored) {
    const LUCY_FType_Set_Stored_t method = (LUCY_FType_Set_Stored_t)cfish_obj_method(self, LUCY_FType_Set_Stored_OFFSET);
    method(self, stored);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Stored_OFFSET;
static CFISH_INLINE bool
LUCY_FType_Stored(lucy_FieldType* self) {
    const LUCY_FType_Stored_t method = (LUCY_FType_Stored_t)cfish_obj_method(self, LUCY_FType_Stored_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Set_Sortable_OFFSET;
static CFISH_INLINE void
LUCY_FType_Set_Sortable(lucy_FieldType* self, bool sortable) {
    const LUCY_FType_Set_Sortable_t method = (LUCY_FType_Set_Sortable_t)cfish_obj_method(self, LUCY_FType_Set_Sortable_OFFSET);
    method(self, sortable);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Sortable_OFFSET;
static CFISH_INLINE bool
LUCY_FType_Sortable(lucy_FieldType* self) {
    const LUCY_FType_Sortable_t method = (LUCY_FType_Sortable_t)cfish_obj_method(self, LUCY_FType_Sortable_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Binary_OFFSET;
static CFISH_INLINE bool
LUCY_FType_Binary(lucy_FieldType* self) {
    const LUCY_FType_Binary_t method = (LUCY_FType_Binary_t)cfish_obj_method(self, LUCY_FType_Binary_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Compare_Values_OFFSET;
static CFISH_INLINE int32_t
LUCY_FType_Compare_Values(lucy_FieldType* self, cfish_Obj* a, cfish_Obj* b) {
    const LUCY_FType_Compare_Values_t method = (LUCY_FType_Compare_Values_t)cfish_obj_method(self, LUCY_FType_Compare_Values_OFFSET);
    return method(self, a, b);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Make_Term_Stepper_OFFSET;
static CFISH_INLINE lucy_TermStepper*
LUCY_FType_Make_Term_Stepper(lucy_FieldType* self) {
    const LUCY_FType_Make_Term_Stepper_t method = (LUCY_FType_Make_Term_Stepper_t)cfish_obj_method(self, LUCY_FType_Make_Term_Stepper_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Primitive_ID_OFFSET;
static CFISH_INLINE int8_t
LUCY_FType_Primitive_ID(lucy_FieldType* self) {
    const LUCY_FType_Primitive_ID_t method = (LUCY_FType_Primitive_ID_t)cfish_obj_method(self, LUCY_FType_Primitive_ID_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Dump_For_Schema_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_FType_Dump_For_Schema(lucy_FieldType* self) {
    const LUCY_FType_Dump_For_Schema_t method = (LUCY_FType_Dump_For_Schema_t)cfish_obj_method(self, LUCY_FType_Dump_For_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Dump_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_FType_Dump(lucy_FieldType* self) {
    const LUCY_FType_Dump_t method = (LUCY_FType_Dump_t)cfish_obj_method(self, LUCY_FType_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FType_Load_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_FType_Load(lucy_FieldType* self, cfish_Obj* dump) {
    const LUCY_FType_Load_t method = (LUCY_FType_Load_t)cfish_obj_method(self, LUCY_FType_Load_OFFSET);
    return method(self, dump);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_FType_Set_Boost_OVERRIDE NULL
#define Lucy_FType_Get_Boost_OVERRIDE NULL
#define Lucy_FType_Set_Indexed_OVERRIDE NULL
#define Lucy_FType_Indexed_OVERRIDE NULL
#define Lucy_FType_Set_Stored_OVERRIDE NULL
#define Lucy_FType_Stored_OVERRIDE NULL
#define Lucy_FType_Set_Sortable_OVERRIDE NULL
#define Lucy_FType_Sortable_OVERRIDE NULL
#define Lucy_FType_Binary_OVERRIDE NULL
#define Lucy_FType_Compare_Values_OVERRIDE NULL
#define Lucy_FType_Make_Term_Stepper_OVERRIDE NULL
#define Lucy_FType_Primitive_ID_OVERRIDE NULL
#define Lucy_FType_Dump_For_Schema_OVERRIDE NULL
#define Lucy_FType_Dump_OVERRIDE NULL
#define Lucy_FType_Load_OVERRIDE NULL
#else
void
Lucy_FType_Set_Boost_OVERRIDE(lucy_FieldType* self, float boost);
float
Lucy_FType_Get_Boost_OVERRIDE(lucy_FieldType* self);
void
Lucy_FType_Set_Indexed_OVERRIDE(lucy_FieldType* self, bool indexed);
bool
Lucy_FType_Indexed_OVERRIDE(lucy_FieldType* self);
void
Lucy_FType_Set_Stored_OVERRIDE(lucy_FieldType* self, bool stored);
bool
Lucy_FType_Stored_OVERRIDE(lucy_FieldType* self);
void
Lucy_FType_Set_Sortable_OVERRIDE(lucy_FieldType* self, bool sortable);
bool
Lucy_FType_Sortable_OVERRIDE(lucy_FieldType* self);
bool
Lucy_FType_Binary_OVERRIDE(lucy_FieldType* self);
int32_t
Lucy_FType_Compare_Values_OVERRIDE(lucy_FieldType* self, cfish_Obj* a, cfish_Obj* b);
lucy_TermStepper*
Lucy_FType_Make_Term_Stepper_OVERRIDE(lucy_FieldType* self);
int8_t
Lucy_FType_Primitive_ID_OVERRIDE(lucy_FieldType* self);
cfish_Hash*
Lucy_FType_Dump_For_Schema_OVERRIDE(lucy_FieldType* self);
cfish_Obj*
Lucy_FType_Dump_OVERRIDE(lucy_FieldType* self);
cfish_Obj*
Lucy_FType_Load_OVERRIDE(lucy_FieldType* self, cfish_Obj* dump);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define FieldType lucy_FieldType
  #define FIELDTYPE LUCY_FIELDTYPE
  #define FType_init lucy_FType_init
  #define FType_init2 lucy_FType_init2
  #define FType_null_back_compare_values lucy_FType_null_back_compare_values
  #define FType_get_class lucy_FType_get_class
  #define FType_get_class_name lucy_FType_get_class_name
  #define FType_is_a lucy_FType_is_a
  #define FType_Set_Boost_IMP LUCY_FType_Set_Boost_IMP
  #define FType_Get_Boost_IMP LUCY_FType_Get_Boost_IMP
  #define FType_Set_Indexed_IMP LUCY_FType_Set_Indexed_IMP
  #define FType_Indexed_IMP LUCY_FType_Indexed_IMP
  #define FType_Set_Stored_IMP LUCY_FType_Set_Stored_IMP
  #define FType_Stored_IMP LUCY_FType_Stored_IMP
  #define FType_Set_Sortable_IMP LUCY_FType_Set_Sortable_IMP
  #define FType_Sortable_IMP LUCY_FType_Sortable_IMP
  #define FType_Binary_IMP LUCY_FType_Binary_IMP
  #define FType_Compare_Values_IMP LUCY_FType_Compare_Values_IMP
  #define FType_Make_Term_Stepper_IMP LUCY_FType_Make_Term_Stepper_IMP
  #define FType_Primitive_ID_IMP LUCY_FType_Primitive_ID_IMP
  #define FType_Dump_For_Schema_IMP LUCY_FType_Dump_For_Schema_IMP
  #define FType_Dump_IMP LUCY_FType_Dump_IMP
  #define FType_Load_IMP LUCY_FType_Load_IMP
  #define FType_Equals_IMP LUCY_FType_Equals_IMP
  #define FType_To_Host LUCY_FType_To_Host
  #define FType_To_Host_t LUCY_FType_To_Host_t
  #define FType_Clone LUCY_FType_Clone
  #define FType_Clone_t LUCY_FType_Clone_t
  #define FType_Equals LUCY_FType_Equals
  #define FType_Equals_t LUCY_FType_Equals_t
  #define FType_Compare_To LUCY_FType_Compare_To
  #define FType_Compare_To_t LUCY_FType_Compare_To_t
  #define FType_Destroy LUCY_FType_Destroy
  #define FType_Destroy_t LUCY_FType_Destroy_t
  #define FType_To_String LUCY_FType_To_String
  #define FType_To_String_t LUCY_FType_To_String_t
  #define FType_Set_Boost LUCY_FType_Set_Boost
  #define FType_Set_Boost_t LUCY_FType_Set_Boost_t
  #define FType_Get_Boost LUCY_FType_Get_Boost
  #define FType_Get_Boost_t LUCY_FType_Get_Boost_t
  #define FType_Set_Indexed LUCY_FType_Set_Indexed
  #define FType_Set_Indexed_t LUCY_FType_Set_Indexed_t
  #define FType_Indexed LUCY_FType_Indexed
  #define FType_Indexed_t LUCY_FType_Indexed_t
  #define FType_Set_Stored LUCY_FType_Set_Stored
  #define FType_Set_Stored_t LUCY_FType_Set_Stored_t
  #define FType_Stored LUCY_FType_Stored
  #define FType_Stored_t LUCY_FType_Stored_t
  #define FType_Set_Sortable LUCY_FType_Set_Sortable
  #define FType_Set_Sortable_t LUCY_FType_Set_Sortable_t
  #define FType_Sortable LUCY_FType_Sortable
  #define FType_Sortable_t LUCY_FType_Sortable_t
  #define FType_Binary LUCY_FType_Binary
  #define FType_Binary_t LUCY_FType_Binary_t
  #define FType_Compare_Values LUCY_FType_Compare_Values
  #define FType_Compare_Values_t LUCY_FType_Compare_Values_t
  #define FType_Make_Term_Stepper LUCY_FType_Make_Term_Stepper
  #define FType_Make_Term_Stepper_t LUCY_FType_Make_Term_Stepper_t
  #define FType_Primitive_ID LUCY_FType_Primitive_ID
  #define FType_Primitive_ID_t LUCY_FType_Primitive_ID_t
  #define FType_Dump_For_Schema LUCY_FType_Dump_For_Schema
  #define FType_Dump_For_Schema_t LUCY_FType_Dump_For_Schema_t
  #define FType_Dump LUCY_FType_Dump
  #define FType_Dump_t LUCY_FType_Dump_t
  #define FType_Load LUCY_FType_Load
  #define FType_Load_t LUCY_FType_Load_t
#endif /* LUCY_USE_SHORT_NAMES */



static CFISH_INLINE int32_t
lucy_FType_null_back_compare_values(lucy_FieldType *self,
                                    cfish_Obj *a, cfish_Obj *b) {
    if (a == NULL) {
        if (b == NULL) { return 0; }
        else { return 1; }
    }
    else if (b == NULL) {
        return -1;
    }
    else {
        return LUCY_FType_Compare_Values(self, a, b);
    }
}




#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_PLAN_FIELDTYPE */




