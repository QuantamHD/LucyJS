/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_PLAN_NUMERICTYPE
#define H_LUCY_PLAN_NUMERICTYPE 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy\Plan\FieldType.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_NUMERICTYPE
extern uint32_t lucy_NumType_IVARS_OFFSET;
typedef struct lucy_NumericTypeIVARS lucy_NumericTypeIVARS;
static CFISH_INLINE lucy_NumericTypeIVARS*
lucy_NumType_IVARS(lucy_NumericType *self) {
   char *ptr = (char*)self + lucy_NumType_IVARS_OFFSET;
   return (lucy_NumericTypeIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define NumericTypeIVARS lucy_NumericTypeIVARS
  #define NumType_IVARS lucy_NumType_IVARS
#endif

struct lucy_NumericTypeIVARS {
    float boost;
    bool indexed;
    bool stored;
    bool sortable;
};

#endif /* C_LUCY_NUMERICTYPE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_NumericType*
lucy_NumType_init(lucy_NumericType* self);

LUCY_VISIBLE lucy_NumericType*
lucy_NumType_init2(lucy_NumericType* self, float boost, bool indexed, bool stored, bool sortable);

bool
LUCY_NumType_Binary_IMP(lucy_NumericType* self);

cfish_String*
LUCY_NumType_Specifier_IMP(lucy_NumericType* self);

cfish_Hash*
LUCY_NumType_Dump_For_Schema_IMP(lucy_NumericType* self);

cfish_Hash*
LUCY_NumType_Dump_IMP(lucy_NumericType* self);

lucy_NumericType*
LUCY_NumType_Load_IMP(lucy_NumericType* self, cfish_Obj* dump);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_NumType_To_Host_t)(lucy_NumericType* self, void* vcache);

typedef cfish_Obj*
(*LUCY_NumType_Clone_t)(lucy_NumericType* self);

typedef bool
(*LUCY_NumType_Equals_t)(lucy_NumericType* self, cfish_Obj* other);

typedef int32_t
(*LUCY_NumType_Compare_To_t)(lucy_NumericType* self, cfish_Obj* other);

typedef void
(*LUCY_NumType_Destroy_t)(lucy_NumericType* self);

typedef cfish_String*
(*LUCY_NumType_To_String_t)(lucy_NumericType* self);

typedef void
(*LUCY_NumType_Set_Boost_t)(lucy_NumericType* self, float boost);

typedef float
(*LUCY_NumType_Get_Boost_t)(lucy_NumericType* self);

typedef void
(*LUCY_NumType_Set_Indexed_t)(lucy_NumericType* self, bool indexed);

typedef bool
(*LUCY_NumType_Indexed_t)(lucy_NumericType* self);

typedef void
(*LUCY_NumType_Set_Stored_t)(lucy_NumericType* self, bool stored);

typedef bool
(*LUCY_NumType_Stored_t)(lucy_NumericType* self);

typedef void
(*LUCY_NumType_Set_Sortable_t)(lucy_NumericType* self, bool sortable);

typedef bool
(*LUCY_NumType_Sortable_t)(lucy_NumericType* self);

typedef bool
(*LUCY_NumType_Binary_t)(lucy_NumericType* self);

typedef int32_t
(*LUCY_NumType_Compare_Values_t)(lucy_NumericType* self, cfish_Obj* a, cfish_Obj* b);

typedef lucy_TermStepper*
(*LUCY_NumType_Make_Term_Stepper_t)(lucy_NumericType* self);

typedef int8_t
(*LUCY_NumType_Primitive_ID_t)(lucy_NumericType* self);

typedef cfish_Hash*
(*LUCY_NumType_Dump_For_Schema_t)(lucy_NumericType* self);

typedef cfish_Hash*
(*LUCY_NumType_Dump_t)(lucy_NumericType* self);

typedef lucy_NumericType*
(*LUCY_NumType_Load_t)(lucy_NumericType* self, cfish_Obj* dump);

typedef cfish_String*
(*LUCY_NumType_Specifier_t)(lucy_NumericType* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_NumType_get_class(lucy_NumericType *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_NumType_get_class_name(lucy_NumericType *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_NumType_is_a(lucy_NumericType *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_NumType_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_NumType_To_Host(lucy_NumericType* self, void* vcache) {
    const LUCY_NumType_To_Host_t method = (LUCY_NumType_To_Host_t)cfish_obj_method(self, LUCY_NumType_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_NumType_Clone(lucy_NumericType* self) {
    const LUCY_NumType_Clone_t method = (LUCY_NumType_Clone_t)cfish_obj_method(self, LUCY_NumType_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_NumType_Equals(lucy_NumericType* self, cfish_Obj* other) {
    const LUCY_NumType_Equals_t method = (LUCY_NumType_Equals_t)cfish_obj_method(self, LUCY_NumType_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_NumType_Compare_To(lucy_NumericType* self, cfish_Obj* other) {
    const LUCY_NumType_Compare_To_t method = (LUCY_NumType_Compare_To_t)cfish_obj_method(self, LUCY_NumType_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_NumType_Destroy(lucy_NumericType* self) {
    const LUCY_NumType_Destroy_t method = (LUCY_NumType_Destroy_t)cfish_obj_method(self, LUCY_NumType_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_NumType_To_String(lucy_NumericType* self) {
    const LUCY_NumType_To_String_t method = (LUCY_NumType_To_String_t)cfish_obj_method(self, LUCY_NumType_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_NumType_Set_Boost(lucy_NumericType* self, float boost) {
    const LUCY_NumType_Set_Boost_t method = (LUCY_NumType_Set_Boost_t)cfish_obj_method(self, LUCY_NumType_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_NumType_Get_Boost(lucy_NumericType* self) {
    const LUCY_NumType_Get_Boost_t method = (LUCY_NumType_Get_Boost_t)cfish_obj_method(self, LUCY_NumType_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Set_Indexed_OFFSET;
static CFISH_INLINE void
LUCY_NumType_Set_Indexed(lucy_NumericType* self, bool indexed) {
    const LUCY_NumType_Set_Indexed_t method = (LUCY_NumType_Set_Indexed_t)cfish_obj_method(self, LUCY_NumType_Set_Indexed_OFFSET);
    method(self, indexed);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Indexed_OFFSET;
static CFISH_INLINE bool
LUCY_NumType_Indexed(lucy_NumericType* self) {
    const LUCY_NumType_Indexed_t method = (LUCY_NumType_Indexed_t)cfish_obj_method(self, LUCY_NumType_Indexed_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Set_Stored_OFFSET;
static CFISH_INLINE void
LUCY_NumType_Set_Stored(lucy_NumericType* self, bool stored) {
    const LUCY_NumType_Set_Stored_t method = (LUCY_NumType_Set_Stored_t)cfish_obj_method(self, LUCY_NumType_Set_Stored_OFFSET);
    method(self, stored);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Stored_OFFSET;
static CFISH_INLINE bool
LUCY_NumType_Stored(lucy_NumericType* self) {
    const LUCY_NumType_Stored_t method = (LUCY_NumType_Stored_t)cfish_obj_method(self, LUCY_NumType_Stored_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Set_Sortable_OFFSET;
static CFISH_INLINE void
LUCY_NumType_Set_Sortable(lucy_NumericType* self, bool sortable) {
    const LUCY_NumType_Set_Sortable_t method = (LUCY_NumType_Set_Sortable_t)cfish_obj_method(self, LUCY_NumType_Set_Sortable_OFFSET);
    method(self, sortable);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Sortable_OFFSET;
static CFISH_INLINE bool
LUCY_NumType_Sortable(lucy_NumericType* self) {
    const LUCY_NumType_Sortable_t method = (LUCY_NumType_Sortable_t)cfish_obj_method(self, LUCY_NumType_Sortable_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Binary_OFFSET;
static CFISH_INLINE bool
LUCY_NumType_Binary(lucy_NumericType* self) {
    const LUCY_NumType_Binary_t method = (LUCY_NumType_Binary_t)cfish_obj_method(self, LUCY_NumType_Binary_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Compare_Values_OFFSET;
static CFISH_INLINE int32_t
LUCY_NumType_Compare_Values(lucy_NumericType* self, cfish_Obj* a, cfish_Obj* b) {
    const LUCY_NumType_Compare_Values_t method = (LUCY_NumType_Compare_Values_t)cfish_obj_method(self, LUCY_NumType_Compare_Values_OFFSET);
    return method(self, a, b);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Make_Term_Stepper_OFFSET;
static CFISH_INLINE lucy_TermStepper*
LUCY_NumType_Make_Term_Stepper(lucy_NumericType* self) {
    const LUCY_NumType_Make_Term_Stepper_t method = (LUCY_NumType_Make_Term_Stepper_t)cfish_obj_method(self, LUCY_NumType_Make_Term_Stepper_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Primitive_ID_OFFSET;
static CFISH_INLINE int8_t
LUCY_NumType_Primitive_ID(lucy_NumericType* self) {
    const LUCY_NumType_Primitive_ID_t method = (LUCY_NumType_Primitive_ID_t)cfish_obj_method(self, LUCY_NumType_Primitive_ID_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Dump_For_Schema_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_NumType_Dump_For_Schema(lucy_NumericType* self) {
    const LUCY_NumType_Dump_For_Schema_t method = (LUCY_NumType_Dump_For_Schema_t)cfish_obj_method(self, LUCY_NumType_Dump_For_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Dump_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_NumType_Dump(lucy_NumericType* self) {
    const LUCY_NumType_Dump_t method = (LUCY_NumType_Dump_t)cfish_obj_method(self, LUCY_NumType_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Load_OFFSET;
static CFISH_INLINE lucy_NumericType*
LUCY_NumType_Load(lucy_NumericType* self, cfish_Obj* dump) {
    const LUCY_NumType_Load_t method = (LUCY_NumType_Load_t)cfish_obj_method(self, LUCY_NumType_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_NumType_Specifier_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_NumType_Specifier(lucy_NumericType* self) {
    const LUCY_NumType_Specifier_t method = (LUCY_NumType_Specifier_t)cfish_obj_method(self, LUCY_NumType_Specifier_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_NumType_Specifier_OVERRIDE NULL
#else
cfish_String*
Lucy_NumType_Specifier_OVERRIDE(lucy_NumericType* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define NumericType lucy_NumericType
  #define NUMERICTYPE LUCY_NUMERICTYPE
  #define NumType_init lucy_NumType_init
  #define NumType_init2 lucy_NumType_init2
  #define NumType_get_class lucy_NumType_get_class
  #define NumType_get_class_name lucy_NumType_get_class_name
  #define NumType_is_a lucy_NumType_is_a
  #define NumType_Binary_IMP LUCY_NumType_Binary_IMP
  #define NumType_Specifier_IMP LUCY_NumType_Specifier_IMP
  #define NumType_Dump_For_Schema_IMP LUCY_NumType_Dump_For_Schema_IMP
  #define NumType_Dump_IMP LUCY_NumType_Dump_IMP
  #define NumType_Load_IMP LUCY_NumType_Load_IMP
  #define NumType_To_Host LUCY_NumType_To_Host
  #define NumType_To_Host_t LUCY_NumType_To_Host_t
  #define NumType_Clone LUCY_NumType_Clone
  #define NumType_Clone_t LUCY_NumType_Clone_t
  #define NumType_Equals LUCY_NumType_Equals
  #define NumType_Equals_t LUCY_NumType_Equals_t
  #define NumType_Compare_To LUCY_NumType_Compare_To
  #define NumType_Compare_To_t LUCY_NumType_Compare_To_t
  #define NumType_Destroy LUCY_NumType_Destroy
  #define NumType_Destroy_t LUCY_NumType_Destroy_t
  #define NumType_To_String LUCY_NumType_To_String
  #define NumType_To_String_t LUCY_NumType_To_String_t
  #define NumType_Set_Boost LUCY_NumType_Set_Boost
  #define NumType_Set_Boost_t LUCY_NumType_Set_Boost_t
  #define NumType_Get_Boost LUCY_NumType_Get_Boost
  #define NumType_Get_Boost_t LUCY_NumType_Get_Boost_t
  #define NumType_Set_Indexed LUCY_NumType_Set_Indexed
  #define NumType_Set_Indexed_t LUCY_NumType_Set_Indexed_t
  #define NumType_Indexed LUCY_NumType_Indexed
  #define NumType_Indexed_t LUCY_NumType_Indexed_t
  #define NumType_Set_Stored LUCY_NumType_Set_Stored
  #define NumType_Set_Stored_t LUCY_NumType_Set_Stored_t
  #define NumType_Stored LUCY_NumType_Stored
  #define NumType_Stored_t LUCY_NumType_Stored_t
  #define NumType_Set_Sortable LUCY_NumType_Set_Sortable
  #define NumType_Set_Sortable_t LUCY_NumType_Set_Sortable_t
  #define NumType_Sortable LUCY_NumType_Sortable
  #define NumType_Sortable_t LUCY_NumType_Sortable_t
  #define NumType_Binary LUCY_NumType_Binary
  #define NumType_Binary_t LUCY_NumType_Binary_t
  #define NumType_Compare_Values LUCY_NumType_Compare_Values
  #define NumType_Compare_Values_t LUCY_NumType_Compare_Values_t
  #define NumType_Make_Term_Stepper LUCY_NumType_Make_Term_Stepper
  #define NumType_Make_Term_Stepper_t LUCY_NumType_Make_Term_Stepper_t
  #define NumType_Primitive_ID LUCY_NumType_Primitive_ID
  #define NumType_Primitive_ID_t LUCY_NumType_Primitive_ID_t
  #define NumType_Dump_For_Schema LUCY_NumType_Dump_For_Schema
  #define NumType_Dump_For_Schema_t LUCY_NumType_Dump_For_Schema_t
  #define NumType_Dump LUCY_NumType_Dump
  #define NumType_Dump_t LUCY_NumType_Dump_t
  #define NumType_Load LUCY_NumType_Load
  #define NumType_Load_t LUCY_NumType_Load_t
  #define NumType_Specifier LUCY_NumType_Specifier
  #define NumType_Specifier_t LUCY_NumType_Specifier_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy\Plan\NumericType.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_FLOATTYPE
extern uint32_t lucy_FloatType_IVARS_OFFSET;
typedef struct lucy_FloatTypeIVARS lucy_FloatTypeIVARS;
static CFISH_INLINE lucy_FloatTypeIVARS*
lucy_FloatType_IVARS(lucy_FloatType *self) {
   char *ptr = (char*)self + lucy_FloatType_IVARS_OFFSET;
   return (lucy_FloatTypeIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define FloatTypeIVARS lucy_FloatTypeIVARS
  #define FloatType_IVARS lucy_FloatType_IVARS
#endif

struct lucy_FloatTypeIVARS {
    float boost;
    bool indexed;
    bool stored;
    bool sortable;
};

#endif /* C_LUCY_FLOATTYPE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_FloatType_To_Host_t)(lucy_FloatType* self, void* vcache);

typedef cfish_Obj*
(*LUCY_FloatType_Clone_t)(lucy_FloatType* self);

typedef bool
(*LUCY_FloatType_Equals_t)(lucy_FloatType* self, cfish_Obj* other);

typedef int32_t
(*LUCY_FloatType_Compare_To_t)(lucy_FloatType* self, cfish_Obj* other);

typedef void
(*LUCY_FloatType_Destroy_t)(lucy_FloatType* self);

typedef cfish_String*
(*LUCY_FloatType_To_String_t)(lucy_FloatType* self);

typedef void
(*LUCY_FloatType_Set_Boost_t)(lucy_FloatType* self, float boost);

typedef float
(*LUCY_FloatType_Get_Boost_t)(lucy_FloatType* self);

typedef void
(*LUCY_FloatType_Set_Indexed_t)(lucy_FloatType* self, bool indexed);

typedef bool
(*LUCY_FloatType_Indexed_t)(lucy_FloatType* self);

typedef void
(*LUCY_FloatType_Set_Stored_t)(lucy_FloatType* self, bool stored);

typedef bool
(*LUCY_FloatType_Stored_t)(lucy_FloatType* self);

typedef void
(*LUCY_FloatType_Set_Sortable_t)(lucy_FloatType* self, bool sortable);

typedef bool
(*LUCY_FloatType_Sortable_t)(lucy_FloatType* self);

typedef bool
(*LUCY_FloatType_Binary_t)(lucy_FloatType* self);

typedef int32_t
(*LUCY_FloatType_Compare_Values_t)(lucy_FloatType* self, cfish_Obj* a, cfish_Obj* b);

typedef lucy_TermStepper*
(*LUCY_FloatType_Make_Term_Stepper_t)(lucy_FloatType* self);

typedef int8_t
(*LUCY_FloatType_Primitive_ID_t)(lucy_FloatType* self);

typedef cfish_Hash*
(*LUCY_FloatType_Dump_For_Schema_t)(lucy_FloatType* self);

typedef cfish_Hash*
(*LUCY_FloatType_Dump_t)(lucy_FloatType* self);

typedef lucy_NumericType*
(*LUCY_FloatType_Load_t)(lucy_FloatType* self, cfish_Obj* dump);

typedef cfish_String*
(*LUCY_FloatType_Specifier_t)(lucy_FloatType* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_FloatType_get_class(lucy_FloatType *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_FloatType_get_class_name(lucy_FloatType *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_FloatType_is_a(lucy_FloatType *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_FloatType_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_FloatType_To_Host(lucy_FloatType* self, void* vcache) {
    const LUCY_FloatType_To_Host_t method = (LUCY_FloatType_To_Host_t)cfish_obj_method(self, LUCY_FloatType_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_FloatType_Clone(lucy_FloatType* self) {
    const LUCY_FloatType_Clone_t method = (LUCY_FloatType_Clone_t)cfish_obj_method(self, LUCY_FloatType_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_FloatType_Equals(lucy_FloatType* self, cfish_Obj* other) {
    const LUCY_FloatType_Equals_t method = (LUCY_FloatType_Equals_t)cfish_obj_method(self, LUCY_FloatType_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_FloatType_Compare_To(lucy_FloatType* self, cfish_Obj* other) {
    const LUCY_FloatType_Compare_To_t method = (LUCY_FloatType_Compare_To_t)cfish_obj_method(self, LUCY_FloatType_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_FloatType_Destroy(lucy_FloatType* self) {
    const LUCY_FloatType_Destroy_t method = (LUCY_FloatType_Destroy_t)cfish_obj_method(self, LUCY_FloatType_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_FloatType_To_String(lucy_FloatType* self) {
    const LUCY_FloatType_To_String_t method = (LUCY_FloatType_To_String_t)cfish_obj_method(self, LUCY_FloatType_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_FloatType_Set_Boost(lucy_FloatType* self, float boost) {
    const LUCY_FloatType_Set_Boost_t method = (LUCY_FloatType_Set_Boost_t)cfish_obj_method(self, LUCY_FloatType_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_FloatType_Get_Boost(lucy_FloatType* self) {
    const LUCY_FloatType_Get_Boost_t method = (LUCY_FloatType_Get_Boost_t)cfish_obj_method(self, LUCY_FloatType_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Set_Indexed_OFFSET;
static CFISH_INLINE void
LUCY_FloatType_Set_Indexed(lucy_FloatType* self, bool indexed) {
    const LUCY_FloatType_Set_Indexed_t method = (LUCY_FloatType_Set_Indexed_t)cfish_obj_method(self, LUCY_FloatType_Set_Indexed_OFFSET);
    method(self, indexed);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Indexed_OFFSET;
static CFISH_INLINE bool
LUCY_FloatType_Indexed(lucy_FloatType* self) {
    const LUCY_FloatType_Indexed_t method = (LUCY_FloatType_Indexed_t)cfish_obj_method(self, LUCY_FloatType_Indexed_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Set_Stored_OFFSET;
static CFISH_INLINE void
LUCY_FloatType_Set_Stored(lucy_FloatType* self, bool stored) {
    const LUCY_FloatType_Set_Stored_t method = (LUCY_FloatType_Set_Stored_t)cfish_obj_method(self, LUCY_FloatType_Set_Stored_OFFSET);
    method(self, stored);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Stored_OFFSET;
static CFISH_INLINE bool
LUCY_FloatType_Stored(lucy_FloatType* self) {
    const LUCY_FloatType_Stored_t method = (LUCY_FloatType_Stored_t)cfish_obj_method(self, LUCY_FloatType_Stored_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Set_Sortable_OFFSET;
static CFISH_INLINE void
LUCY_FloatType_Set_Sortable(lucy_FloatType* self, bool sortable) {
    const LUCY_FloatType_Set_Sortable_t method = (LUCY_FloatType_Set_Sortable_t)cfish_obj_method(self, LUCY_FloatType_Set_Sortable_OFFSET);
    method(self, sortable);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Sortable_OFFSET;
static CFISH_INLINE bool
LUCY_FloatType_Sortable(lucy_FloatType* self) {
    const LUCY_FloatType_Sortable_t method = (LUCY_FloatType_Sortable_t)cfish_obj_method(self, LUCY_FloatType_Sortable_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Binary_OFFSET;
static CFISH_INLINE bool
LUCY_FloatType_Binary(lucy_FloatType* self) {
    const LUCY_FloatType_Binary_t method = (LUCY_FloatType_Binary_t)cfish_obj_method(self, LUCY_FloatType_Binary_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Compare_Values_OFFSET;
static CFISH_INLINE int32_t
LUCY_FloatType_Compare_Values(lucy_FloatType* self, cfish_Obj* a, cfish_Obj* b) {
    const LUCY_FloatType_Compare_Values_t method = (LUCY_FloatType_Compare_Values_t)cfish_obj_method(self, LUCY_FloatType_Compare_Values_OFFSET);
    return method(self, a, b);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Make_Term_Stepper_OFFSET;
static CFISH_INLINE lucy_TermStepper*
LUCY_FloatType_Make_Term_Stepper(lucy_FloatType* self) {
    const LUCY_FloatType_Make_Term_Stepper_t method = (LUCY_FloatType_Make_Term_Stepper_t)cfish_obj_method(self, LUCY_FloatType_Make_Term_Stepper_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Primitive_ID_OFFSET;
static CFISH_INLINE int8_t
LUCY_FloatType_Primitive_ID(lucy_FloatType* self) {
    const LUCY_FloatType_Primitive_ID_t method = (LUCY_FloatType_Primitive_ID_t)cfish_obj_method(self, LUCY_FloatType_Primitive_ID_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Dump_For_Schema_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_FloatType_Dump_For_Schema(lucy_FloatType* self) {
    const LUCY_FloatType_Dump_For_Schema_t method = (LUCY_FloatType_Dump_For_Schema_t)cfish_obj_method(self, LUCY_FloatType_Dump_For_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Dump_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_FloatType_Dump(lucy_FloatType* self) {
    const LUCY_FloatType_Dump_t method = (LUCY_FloatType_Dump_t)cfish_obj_method(self, LUCY_FloatType_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Load_OFFSET;
static CFISH_INLINE lucy_NumericType*
LUCY_FloatType_Load(lucy_FloatType* self, cfish_Obj* dump) {
    const LUCY_FloatType_Load_t method = (LUCY_FloatType_Load_t)cfish_obj_method(self, LUCY_FloatType_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_FloatType_Specifier_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_FloatType_Specifier(lucy_FloatType* self) {
    const LUCY_FloatType_Specifier_t method = (LUCY_FloatType_Specifier_t)cfish_obj_method(self, LUCY_FloatType_Specifier_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define FloatType lucy_FloatType
  #define FLOATTYPE LUCY_FLOATTYPE
  #define FloatType_get_class lucy_FloatType_get_class
  #define FloatType_get_class_name lucy_FloatType_get_class_name
  #define FloatType_is_a lucy_FloatType_is_a
  #define FloatType_To_Host LUCY_FloatType_To_Host
  #define FloatType_To_Host_t LUCY_FloatType_To_Host_t
  #define FloatType_Clone LUCY_FloatType_Clone
  #define FloatType_Clone_t LUCY_FloatType_Clone_t
  #define FloatType_Equals LUCY_FloatType_Equals
  #define FloatType_Equals_t LUCY_FloatType_Equals_t
  #define FloatType_Compare_To LUCY_FloatType_Compare_To
  #define FloatType_Compare_To_t LUCY_FloatType_Compare_To_t
  #define FloatType_Destroy LUCY_FloatType_Destroy
  #define FloatType_Destroy_t LUCY_FloatType_Destroy_t
  #define FloatType_To_String LUCY_FloatType_To_String
  #define FloatType_To_String_t LUCY_FloatType_To_String_t
  #define FloatType_Set_Boost LUCY_FloatType_Set_Boost
  #define FloatType_Set_Boost_t LUCY_FloatType_Set_Boost_t
  #define FloatType_Get_Boost LUCY_FloatType_Get_Boost
  #define FloatType_Get_Boost_t LUCY_FloatType_Get_Boost_t
  #define FloatType_Set_Indexed LUCY_FloatType_Set_Indexed
  #define FloatType_Set_Indexed_t LUCY_FloatType_Set_Indexed_t
  #define FloatType_Indexed LUCY_FloatType_Indexed
  #define FloatType_Indexed_t LUCY_FloatType_Indexed_t
  #define FloatType_Set_Stored LUCY_FloatType_Set_Stored
  #define FloatType_Set_Stored_t LUCY_FloatType_Set_Stored_t
  #define FloatType_Stored LUCY_FloatType_Stored
  #define FloatType_Stored_t LUCY_FloatType_Stored_t
  #define FloatType_Set_Sortable LUCY_FloatType_Set_Sortable
  #define FloatType_Set_Sortable_t LUCY_FloatType_Set_Sortable_t
  #define FloatType_Sortable LUCY_FloatType_Sortable
  #define FloatType_Sortable_t LUCY_FloatType_Sortable_t
  #define FloatType_Binary LUCY_FloatType_Binary
  #define FloatType_Binary_t LUCY_FloatType_Binary_t
  #define FloatType_Compare_Values LUCY_FloatType_Compare_Values
  #define FloatType_Compare_Values_t LUCY_FloatType_Compare_Values_t
  #define FloatType_Make_Term_Stepper LUCY_FloatType_Make_Term_Stepper
  #define FloatType_Make_Term_Stepper_t LUCY_FloatType_Make_Term_Stepper_t
  #define FloatType_Primitive_ID LUCY_FloatType_Primitive_ID
  #define FloatType_Primitive_ID_t LUCY_FloatType_Primitive_ID_t
  #define FloatType_Dump_For_Schema LUCY_FloatType_Dump_For_Schema
  #define FloatType_Dump_For_Schema_t LUCY_FloatType_Dump_For_Schema_t
  #define FloatType_Dump LUCY_FloatType_Dump
  #define FloatType_Dump_t LUCY_FloatType_Dump_t
  #define FloatType_Load LUCY_FloatType_Load
  #define FloatType_Load_t LUCY_FloatType_Load_t
  #define FloatType_Specifier LUCY_FloatType_Specifier
  #define FloatType_Specifier_t LUCY_FloatType_Specifier_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy\Plan\NumericType.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_FLOAT64TYPE
extern uint32_t lucy_Float64Type_IVARS_OFFSET;
typedef struct lucy_Float64TypeIVARS lucy_Float64TypeIVARS;
static CFISH_INLINE lucy_Float64TypeIVARS*
lucy_Float64Type_IVARS(lucy_Float64Type *self) {
   char *ptr = (char*)self + lucy_Float64Type_IVARS_OFFSET;
   return (lucy_Float64TypeIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define Float64TypeIVARS lucy_Float64TypeIVARS
  #define Float64Type_IVARS lucy_Float64Type_IVARS
#endif

struct lucy_Float64TypeIVARS {
    float boost;
    bool indexed;
    bool stored;
    bool sortable;
};

#endif /* C_LUCY_FLOAT64TYPE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_Float64Type*
lucy_Float64Type_new(void);

LUCY_VISIBLE lucy_Float64Type*
lucy_Float64Type_init(lucy_Float64Type* self);

LUCY_VISIBLE lucy_Float64Type*
lucy_Float64Type_init2(lucy_Float64Type* self, float boost, bool indexed, bool stored, bool sortable);

int8_t
LUCY_Float64Type_Primitive_ID_IMP(lucy_Float64Type* self);

cfish_String*
LUCY_Float64Type_Specifier_IMP(lucy_Float64Type* self);

bool
LUCY_Float64Type_Equals_IMP(lucy_Float64Type* self, cfish_Obj* other);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_Float64Type_To_Host_t)(lucy_Float64Type* self, void* vcache);

typedef cfish_Obj*
(*LUCY_Float64Type_Clone_t)(lucy_Float64Type* self);

typedef bool
(*LUCY_Float64Type_Equals_t)(lucy_Float64Type* self, cfish_Obj* other);

typedef int32_t
(*LUCY_Float64Type_Compare_To_t)(lucy_Float64Type* self, cfish_Obj* other);

typedef void
(*LUCY_Float64Type_Destroy_t)(lucy_Float64Type* self);

typedef cfish_String*
(*LUCY_Float64Type_To_String_t)(lucy_Float64Type* self);

typedef void
(*LUCY_Float64Type_Set_Boost_t)(lucy_Float64Type* self, float boost);

typedef float
(*LUCY_Float64Type_Get_Boost_t)(lucy_Float64Type* self);

typedef void
(*LUCY_Float64Type_Set_Indexed_t)(lucy_Float64Type* self, bool indexed);

typedef bool
(*LUCY_Float64Type_Indexed_t)(lucy_Float64Type* self);

typedef void
(*LUCY_Float64Type_Set_Stored_t)(lucy_Float64Type* self, bool stored);

typedef bool
(*LUCY_Float64Type_Stored_t)(lucy_Float64Type* self);

typedef void
(*LUCY_Float64Type_Set_Sortable_t)(lucy_Float64Type* self, bool sortable);

typedef bool
(*LUCY_Float64Type_Sortable_t)(lucy_Float64Type* self);

typedef bool
(*LUCY_Float64Type_Binary_t)(lucy_Float64Type* self);

typedef int32_t
(*LUCY_Float64Type_Compare_Values_t)(lucy_Float64Type* self, cfish_Obj* a, cfish_Obj* b);

typedef lucy_TermStepper*
(*LUCY_Float64Type_Make_Term_Stepper_t)(lucy_Float64Type* self);

typedef int8_t
(*LUCY_Float64Type_Primitive_ID_t)(lucy_Float64Type* self);

typedef cfish_Hash*
(*LUCY_Float64Type_Dump_For_Schema_t)(lucy_Float64Type* self);

typedef cfish_Hash*
(*LUCY_Float64Type_Dump_t)(lucy_Float64Type* self);

typedef lucy_NumericType*
(*LUCY_Float64Type_Load_t)(lucy_Float64Type* self, cfish_Obj* dump);

typedef cfish_String*
(*LUCY_Float64Type_Specifier_t)(lucy_Float64Type* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_Float64Type_get_class(lucy_Float64Type *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_Float64Type_get_class_name(lucy_Float64Type *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_Float64Type_is_a(lucy_Float64Type *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_Float64Type_To_Host(lucy_Float64Type* self, void* vcache) {
    const LUCY_Float64Type_To_Host_t method = (LUCY_Float64Type_To_Host_t)cfish_obj_method(self, LUCY_Float64Type_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_Float64Type_Clone(lucy_Float64Type* self) {
    const LUCY_Float64Type_Clone_t method = (LUCY_Float64Type_Clone_t)cfish_obj_method(self, LUCY_Float64Type_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_Float64Type_Equals(lucy_Float64Type* self, cfish_Obj* other) {
    const LUCY_Float64Type_Equals_t method = (LUCY_Float64Type_Equals_t)cfish_obj_method(self, LUCY_Float64Type_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_Float64Type_Compare_To(lucy_Float64Type* self, cfish_Obj* other) {
    const LUCY_Float64Type_Compare_To_t method = (LUCY_Float64Type_Compare_To_t)cfish_obj_method(self, LUCY_Float64Type_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_Float64Type_Destroy(lucy_Float64Type* self) {
    const LUCY_Float64Type_Destroy_t method = (LUCY_Float64Type_Destroy_t)cfish_obj_method(self, LUCY_Float64Type_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Float64Type_To_String(lucy_Float64Type* self) {
    const LUCY_Float64Type_To_String_t method = (LUCY_Float64Type_To_String_t)cfish_obj_method(self, LUCY_Float64Type_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_Float64Type_Set_Boost(lucy_Float64Type* self, float boost) {
    const LUCY_Float64Type_Set_Boost_t method = (LUCY_Float64Type_Set_Boost_t)cfish_obj_method(self, LUCY_Float64Type_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_Float64Type_Get_Boost(lucy_Float64Type* self) {
    const LUCY_Float64Type_Get_Boost_t method = (LUCY_Float64Type_Get_Boost_t)cfish_obj_method(self, LUCY_Float64Type_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Set_Indexed_OFFSET;
static CFISH_INLINE void
LUCY_Float64Type_Set_Indexed(lucy_Float64Type* self, bool indexed) {
    const LUCY_Float64Type_Set_Indexed_t method = (LUCY_Float64Type_Set_Indexed_t)cfish_obj_method(self, LUCY_Float64Type_Set_Indexed_OFFSET);
    method(self, indexed);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Indexed_OFFSET;
static CFISH_INLINE bool
LUCY_Float64Type_Indexed(lucy_Float64Type* self) {
    const LUCY_Float64Type_Indexed_t method = (LUCY_Float64Type_Indexed_t)cfish_obj_method(self, LUCY_Float64Type_Indexed_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Set_Stored_OFFSET;
static CFISH_INLINE void
LUCY_Float64Type_Set_Stored(lucy_Float64Type* self, bool stored) {
    const LUCY_Float64Type_Set_Stored_t method = (LUCY_Float64Type_Set_Stored_t)cfish_obj_method(self, LUCY_Float64Type_Set_Stored_OFFSET);
    method(self, stored);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Stored_OFFSET;
static CFISH_INLINE bool
LUCY_Float64Type_Stored(lucy_Float64Type* self) {
    const LUCY_Float64Type_Stored_t method = (LUCY_Float64Type_Stored_t)cfish_obj_method(self, LUCY_Float64Type_Stored_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Set_Sortable_OFFSET;
static CFISH_INLINE void
LUCY_Float64Type_Set_Sortable(lucy_Float64Type* self, bool sortable) {
    const LUCY_Float64Type_Set_Sortable_t method = (LUCY_Float64Type_Set_Sortable_t)cfish_obj_method(self, LUCY_Float64Type_Set_Sortable_OFFSET);
    method(self, sortable);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Sortable_OFFSET;
static CFISH_INLINE bool
LUCY_Float64Type_Sortable(lucy_Float64Type* self) {
    const LUCY_Float64Type_Sortable_t method = (LUCY_Float64Type_Sortable_t)cfish_obj_method(self, LUCY_Float64Type_Sortable_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Binary_OFFSET;
static CFISH_INLINE bool
LUCY_Float64Type_Binary(lucy_Float64Type* self) {
    const LUCY_Float64Type_Binary_t method = (LUCY_Float64Type_Binary_t)cfish_obj_method(self, LUCY_Float64Type_Binary_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Compare_Values_OFFSET;
static CFISH_INLINE int32_t
LUCY_Float64Type_Compare_Values(lucy_Float64Type* self, cfish_Obj* a, cfish_Obj* b) {
    const LUCY_Float64Type_Compare_Values_t method = (LUCY_Float64Type_Compare_Values_t)cfish_obj_method(self, LUCY_Float64Type_Compare_Values_OFFSET);
    return method(self, a, b);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Make_Term_Stepper_OFFSET;
static CFISH_INLINE lucy_TermStepper*
LUCY_Float64Type_Make_Term_Stepper(lucy_Float64Type* self) {
    const LUCY_Float64Type_Make_Term_Stepper_t method = (LUCY_Float64Type_Make_Term_Stepper_t)cfish_obj_method(self, LUCY_Float64Type_Make_Term_Stepper_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Primitive_ID_OFFSET;
static CFISH_INLINE int8_t
LUCY_Float64Type_Primitive_ID(lucy_Float64Type* self) {
    const LUCY_Float64Type_Primitive_ID_t method = (LUCY_Float64Type_Primitive_ID_t)cfish_obj_method(self, LUCY_Float64Type_Primitive_ID_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Dump_For_Schema_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_Float64Type_Dump_For_Schema(lucy_Float64Type* self) {
    const LUCY_Float64Type_Dump_For_Schema_t method = (LUCY_Float64Type_Dump_For_Schema_t)cfish_obj_method(self, LUCY_Float64Type_Dump_For_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Dump_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_Float64Type_Dump(lucy_Float64Type* self) {
    const LUCY_Float64Type_Dump_t method = (LUCY_Float64Type_Dump_t)cfish_obj_method(self, LUCY_Float64Type_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Load_OFFSET;
static CFISH_INLINE lucy_NumericType*
LUCY_Float64Type_Load(lucy_Float64Type* self, cfish_Obj* dump) {
    const LUCY_Float64Type_Load_t method = (LUCY_Float64Type_Load_t)cfish_obj_method(self, LUCY_Float64Type_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_Float64Type_Specifier_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Float64Type_Specifier(lucy_Float64Type* self) {
    const LUCY_Float64Type_Specifier_t method = (LUCY_Float64Type_Specifier_t)cfish_obj_method(self, LUCY_Float64Type_Specifier_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define Float64Type lucy_Float64Type
  #define FLOAT64TYPE LUCY_FLOAT64TYPE
  #define Float64Type_new lucy_Float64Type_new
  #define Float64Type_init lucy_Float64Type_init
  #define Float64Type_init2 lucy_Float64Type_init2
  #define Float64Type_get_class lucy_Float64Type_get_class
  #define Float64Type_get_class_name lucy_Float64Type_get_class_name
  #define Float64Type_is_a lucy_Float64Type_is_a
  #define Float64Type_Primitive_ID_IMP LUCY_Float64Type_Primitive_ID_IMP
  #define Float64Type_Specifier_IMP LUCY_Float64Type_Specifier_IMP
  #define Float64Type_Equals_IMP LUCY_Float64Type_Equals_IMP
  #define Float64Type_To_Host LUCY_Float64Type_To_Host
  #define Float64Type_To_Host_t LUCY_Float64Type_To_Host_t
  #define Float64Type_Clone LUCY_Float64Type_Clone
  #define Float64Type_Clone_t LUCY_Float64Type_Clone_t
  #define Float64Type_Equals LUCY_Float64Type_Equals
  #define Float64Type_Equals_t LUCY_Float64Type_Equals_t
  #define Float64Type_Compare_To LUCY_Float64Type_Compare_To
  #define Float64Type_Compare_To_t LUCY_Float64Type_Compare_To_t
  #define Float64Type_Destroy LUCY_Float64Type_Destroy
  #define Float64Type_Destroy_t LUCY_Float64Type_Destroy_t
  #define Float64Type_To_String LUCY_Float64Type_To_String
  #define Float64Type_To_String_t LUCY_Float64Type_To_String_t
  #define Float64Type_Set_Boost LUCY_Float64Type_Set_Boost
  #define Float64Type_Set_Boost_t LUCY_Float64Type_Set_Boost_t
  #define Float64Type_Get_Boost LUCY_Float64Type_Get_Boost
  #define Float64Type_Get_Boost_t LUCY_Float64Type_Get_Boost_t
  #define Float64Type_Set_Indexed LUCY_Float64Type_Set_Indexed
  #define Float64Type_Set_Indexed_t LUCY_Float64Type_Set_Indexed_t
  #define Float64Type_Indexed LUCY_Float64Type_Indexed
  #define Float64Type_Indexed_t LUCY_Float64Type_Indexed_t
  #define Float64Type_Set_Stored LUCY_Float64Type_Set_Stored
  #define Float64Type_Set_Stored_t LUCY_Float64Type_Set_Stored_t
  #define Float64Type_Stored LUCY_Float64Type_Stored
  #define Float64Type_Stored_t LUCY_Float64Type_Stored_t
  #define Float64Type_Set_Sortable LUCY_Float64Type_Set_Sortable
  #define Float64Type_Set_Sortable_t LUCY_Float64Type_Set_Sortable_t
  #define Float64Type_Sortable LUCY_Float64Type_Sortable
  #define Float64Type_Sortable_t LUCY_Float64Type_Sortable_t
  #define Float64Type_Binary LUCY_Float64Type_Binary
  #define Float64Type_Binary_t LUCY_Float64Type_Binary_t
  #define Float64Type_Compare_Values LUCY_Float64Type_Compare_Values
  #define Float64Type_Compare_Values_t LUCY_Float64Type_Compare_Values_t
  #define Float64Type_Make_Term_Stepper LUCY_Float64Type_Make_Term_Stepper
  #define Float64Type_Make_Term_Stepper_t LUCY_Float64Type_Make_Term_Stepper_t
  #define Float64Type_Primitive_ID LUCY_Float64Type_Primitive_ID
  #define Float64Type_Primitive_ID_t LUCY_Float64Type_Primitive_ID_t
  #define Float64Type_Dump_For_Schema LUCY_Float64Type_Dump_For_Schema
  #define Float64Type_Dump_For_Schema_t LUCY_Float64Type_Dump_For_Schema_t
  #define Float64Type_Dump LUCY_Float64Type_Dump
  #define Float64Type_Dump_t LUCY_Float64Type_Dump_t
  #define Float64Type_Load LUCY_Float64Type_Load
  #define Float64Type_Load_t LUCY_Float64Type_Load_t
  #define Float64Type_Specifier LUCY_Float64Type_Specifier
  #define Float64Type_Specifier_t LUCY_Float64Type_Specifier_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy\Plan\NumericType.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_FLOAT32TYPE
extern uint32_t lucy_Float32Type_IVARS_OFFSET;
typedef struct lucy_Float32TypeIVARS lucy_Float32TypeIVARS;
static CFISH_INLINE lucy_Float32TypeIVARS*
lucy_Float32Type_IVARS(lucy_Float32Type *self) {
   char *ptr = (char*)self + lucy_Float32Type_IVARS_OFFSET;
   return (lucy_Float32TypeIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define Float32TypeIVARS lucy_Float32TypeIVARS
  #define Float32Type_IVARS lucy_Float32Type_IVARS
#endif

struct lucy_Float32TypeIVARS {
    float boost;
    bool indexed;
    bool stored;
    bool sortable;
};

#endif /* C_LUCY_FLOAT32TYPE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_Float32Type*
lucy_Float32Type_new(void);

LUCY_VISIBLE lucy_Float32Type*
lucy_Float32Type_init(lucy_Float32Type* self);

LUCY_VISIBLE lucy_Float32Type*
lucy_Float32Type_init2(lucy_Float32Type* self, float boost, bool indexed, bool stored, bool sortable);

int8_t
LUCY_Float32Type_Primitive_ID_IMP(lucy_Float32Type* self);

cfish_String*
LUCY_Float32Type_Specifier_IMP(lucy_Float32Type* self);

bool
LUCY_Float32Type_Equals_IMP(lucy_Float32Type* self, cfish_Obj* other);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_Float32Type_To_Host_t)(lucy_Float32Type* self, void* vcache);

typedef cfish_Obj*
(*LUCY_Float32Type_Clone_t)(lucy_Float32Type* self);

typedef bool
(*LUCY_Float32Type_Equals_t)(lucy_Float32Type* self, cfish_Obj* other);

typedef int32_t
(*LUCY_Float32Type_Compare_To_t)(lucy_Float32Type* self, cfish_Obj* other);

typedef void
(*LUCY_Float32Type_Destroy_t)(lucy_Float32Type* self);

typedef cfish_String*
(*LUCY_Float32Type_To_String_t)(lucy_Float32Type* self);

typedef void
(*LUCY_Float32Type_Set_Boost_t)(lucy_Float32Type* self, float boost);

typedef float
(*LUCY_Float32Type_Get_Boost_t)(lucy_Float32Type* self);

typedef void
(*LUCY_Float32Type_Set_Indexed_t)(lucy_Float32Type* self, bool indexed);

typedef bool
(*LUCY_Float32Type_Indexed_t)(lucy_Float32Type* self);

typedef void
(*LUCY_Float32Type_Set_Stored_t)(lucy_Float32Type* self, bool stored);

typedef bool
(*LUCY_Float32Type_Stored_t)(lucy_Float32Type* self);

typedef void
(*LUCY_Float32Type_Set_Sortable_t)(lucy_Float32Type* self, bool sortable);

typedef bool
(*LUCY_Float32Type_Sortable_t)(lucy_Float32Type* self);

typedef bool
(*LUCY_Float32Type_Binary_t)(lucy_Float32Type* self);

typedef int32_t
(*LUCY_Float32Type_Compare_Values_t)(lucy_Float32Type* self, cfish_Obj* a, cfish_Obj* b);

typedef lucy_TermStepper*
(*LUCY_Float32Type_Make_Term_Stepper_t)(lucy_Float32Type* self);

typedef int8_t
(*LUCY_Float32Type_Primitive_ID_t)(lucy_Float32Type* self);

typedef cfish_Hash*
(*LUCY_Float32Type_Dump_For_Schema_t)(lucy_Float32Type* self);

typedef cfish_Hash*
(*LUCY_Float32Type_Dump_t)(lucy_Float32Type* self);

typedef lucy_NumericType*
(*LUCY_Float32Type_Load_t)(lucy_Float32Type* self, cfish_Obj* dump);

typedef cfish_String*
(*LUCY_Float32Type_Specifier_t)(lucy_Float32Type* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_Float32Type_get_class(lucy_Float32Type *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_Float32Type_get_class_name(lucy_Float32Type *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_Float32Type_is_a(lucy_Float32Type *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_Float32Type_To_Host(lucy_Float32Type* self, void* vcache) {
    const LUCY_Float32Type_To_Host_t method = (LUCY_Float32Type_To_Host_t)cfish_obj_method(self, LUCY_Float32Type_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_Float32Type_Clone(lucy_Float32Type* self) {
    const LUCY_Float32Type_Clone_t method = (LUCY_Float32Type_Clone_t)cfish_obj_method(self, LUCY_Float32Type_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_Float32Type_Equals(lucy_Float32Type* self, cfish_Obj* other) {
    const LUCY_Float32Type_Equals_t method = (LUCY_Float32Type_Equals_t)cfish_obj_method(self, LUCY_Float32Type_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_Float32Type_Compare_To(lucy_Float32Type* self, cfish_Obj* other) {
    const LUCY_Float32Type_Compare_To_t method = (LUCY_Float32Type_Compare_To_t)cfish_obj_method(self, LUCY_Float32Type_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_Float32Type_Destroy(lucy_Float32Type* self) {
    const LUCY_Float32Type_Destroy_t method = (LUCY_Float32Type_Destroy_t)cfish_obj_method(self, LUCY_Float32Type_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Float32Type_To_String(lucy_Float32Type* self) {
    const LUCY_Float32Type_To_String_t method = (LUCY_Float32Type_To_String_t)cfish_obj_method(self, LUCY_Float32Type_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_Float32Type_Set_Boost(lucy_Float32Type* self, float boost) {
    const LUCY_Float32Type_Set_Boost_t method = (LUCY_Float32Type_Set_Boost_t)cfish_obj_method(self, LUCY_Float32Type_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_Float32Type_Get_Boost(lucy_Float32Type* self) {
    const LUCY_Float32Type_Get_Boost_t method = (LUCY_Float32Type_Get_Boost_t)cfish_obj_method(self, LUCY_Float32Type_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Set_Indexed_OFFSET;
static CFISH_INLINE void
LUCY_Float32Type_Set_Indexed(lucy_Float32Type* self, bool indexed) {
    const LUCY_Float32Type_Set_Indexed_t method = (LUCY_Float32Type_Set_Indexed_t)cfish_obj_method(self, LUCY_Float32Type_Set_Indexed_OFFSET);
    method(self, indexed);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Indexed_OFFSET;
static CFISH_INLINE bool
LUCY_Float32Type_Indexed(lucy_Float32Type* self) {
    const LUCY_Float32Type_Indexed_t method = (LUCY_Float32Type_Indexed_t)cfish_obj_method(self, LUCY_Float32Type_Indexed_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Set_Stored_OFFSET;
static CFISH_INLINE void
LUCY_Float32Type_Set_Stored(lucy_Float32Type* self, bool stored) {
    const LUCY_Float32Type_Set_Stored_t method = (LUCY_Float32Type_Set_Stored_t)cfish_obj_method(self, LUCY_Float32Type_Set_Stored_OFFSET);
    method(self, stored);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Stored_OFFSET;
static CFISH_INLINE bool
LUCY_Float32Type_Stored(lucy_Float32Type* self) {
    const LUCY_Float32Type_Stored_t method = (LUCY_Float32Type_Stored_t)cfish_obj_method(self, LUCY_Float32Type_Stored_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Set_Sortable_OFFSET;
static CFISH_INLINE void
LUCY_Float32Type_Set_Sortable(lucy_Float32Type* self, bool sortable) {
    const LUCY_Float32Type_Set_Sortable_t method = (LUCY_Float32Type_Set_Sortable_t)cfish_obj_method(self, LUCY_Float32Type_Set_Sortable_OFFSET);
    method(self, sortable);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Sortable_OFFSET;
static CFISH_INLINE bool
LUCY_Float32Type_Sortable(lucy_Float32Type* self) {
    const LUCY_Float32Type_Sortable_t method = (LUCY_Float32Type_Sortable_t)cfish_obj_method(self, LUCY_Float32Type_Sortable_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Binary_OFFSET;
static CFISH_INLINE bool
LUCY_Float32Type_Binary(lucy_Float32Type* self) {
    const LUCY_Float32Type_Binary_t method = (LUCY_Float32Type_Binary_t)cfish_obj_method(self, LUCY_Float32Type_Binary_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Compare_Values_OFFSET;
static CFISH_INLINE int32_t
LUCY_Float32Type_Compare_Values(lucy_Float32Type* self, cfish_Obj* a, cfish_Obj* b) {
    const LUCY_Float32Type_Compare_Values_t method = (LUCY_Float32Type_Compare_Values_t)cfish_obj_method(self, LUCY_Float32Type_Compare_Values_OFFSET);
    return method(self, a, b);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Make_Term_Stepper_OFFSET;
static CFISH_INLINE lucy_TermStepper*
LUCY_Float32Type_Make_Term_Stepper(lucy_Float32Type* self) {
    const LUCY_Float32Type_Make_Term_Stepper_t method = (LUCY_Float32Type_Make_Term_Stepper_t)cfish_obj_method(self, LUCY_Float32Type_Make_Term_Stepper_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Primitive_ID_OFFSET;
static CFISH_INLINE int8_t
LUCY_Float32Type_Primitive_ID(lucy_Float32Type* self) {
    const LUCY_Float32Type_Primitive_ID_t method = (LUCY_Float32Type_Primitive_ID_t)cfish_obj_method(self, LUCY_Float32Type_Primitive_ID_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Dump_For_Schema_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_Float32Type_Dump_For_Schema(lucy_Float32Type* self) {
    const LUCY_Float32Type_Dump_For_Schema_t method = (LUCY_Float32Type_Dump_For_Schema_t)cfish_obj_method(self, LUCY_Float32Type_Dump_For_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Dump_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_Float32Type_Dump(lucy_Float32Type* self) {
    const LUCY_Float32Type_Dump_t method = (LUCY_Float32Type_Dump_t)cfish_obj_method(self, LUCY_Float32Type_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Load_OFFSET;
static CFISH_INLINE lucy_NumericType*
LUCY_Float32Type_Load(lucy_Float32Type* self, cfish_Obj* dump) {
    const LUCY_Float32Type_Load_t method = (LUCY_Float32Type_Load_t)cfish_obj_method(self, LUCY_Float32Type_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_Float32Type_Specifier_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Float32Type_Specifier(lucy_Float32Type* self) {
    const LUCY_Float32Type_Specifier_t method = (LUCY_Float32Type_Specifier_t)cfish_obj_method(self, LUCY_Float32Type_Specifier_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define Float32Type lucy_Float32Type
  #define FLOAT32TYPE LUCY_FLOAT32TYPE
  #define Float32Type_new lucy_Float32Type_new
  #define Float32Type_init lucy_Float32Type_init
  #define Float32Type_init2 lucy_Float32Type_init2
  #define Float32Type_get_class lucy_Float32Type_get_class
  #define Float32Type_get_class_name lucy_Float32Type_get_class_name
  #define Float32Type_is_a lucy_Float32Type_is_a
  #define Float32Type_Primitive_ID_IMP LUCY_Float32Type_Primitive_ID_IMP
  #define Float32Type_Specifier_IMP LUCY_Float32Type_Specifier_IMP
  #define Float32Type_Equals_IMP LUCY_Float32Type_Equals_IMP
  #define Float32Type_To_Host LUCY_Float32Type_To_Host
  #define Float32Type_To_Host_t LUCY_Float32Type_To_Host_t
  #define Float32Type_Clone LUCY_Float32Type_Clone
  #define Float32Type_Clone_t LUCY_Float32Type_Clone_t
  #define Float32Type_Equals LUCY_Float32Type_Equals
  #define Float32Type_Equals_t LUCY_Float32Type_Equals_t
  #define Float32Type_Compare_To LUCY_Float32Type_Compare_To
  #define Float32Type_Compare_To_t LUCY_Float32Type_Compare_To_t
  #define Float32Type_Destroy LUCY_Float32Type_Destroy
  #define Float32Type_Destroy_t LUCY_Float32Type_Destroy_t
  #define Float32Type_To_String LUCY_Float32Type_To_String
  #define Float32Type_To_String_t LUCY_Float32Type_To_String_t
  #define Float32Type_Set_Boost LUCY_Float32Type_Set_Boost
  #define Float32Type_Set_Boost_t LUCY_Float32Type_Set_Boost_t
  #define Float32Type_Get_Boost LUCY_Float32Type_Get_Boost
  #define Float32Type_Get_Boost_t LUCY_Float32Type_Get_Boost_t
  #define Float32Type_Set_Indexed LUCY_Float32Type_Set_Indexed
  #define Float32Type_Set_Indexed_t LUCY_Float32Type_Set_Indexed_t
  #define Float32Type_Indexed LUCY_Float32Type_Indexed
  #define Float32Type_Indexed_t LUCY_Float32Type_Indexed_t
  #define Float32Type_Set_Stored LUCY_Float32Type_Set_Stored
  #define Float32Type_Set_Stored_t LUCY_Float32Type_Set_Stored_t
  #define Float32Type_Stored LUCY_Float32Type_Stored
  #define Float32Type_Stored_t LUCY_Float32Type_Stored_t
  #define Float32Type_Set_Sortable LUCY_Float32Type_Set_Sortable
  #define Float32Type_Set_Sortable_t LUCY_Float32Type_Set_Sortable_t
  #define Float32Type_Sortable LUCY_Float32Type_Sortable
  #define Float32Type_Sortable_t LUCY_Float32Type_Sortable_t
  #define Float32Type_Binary LUCY_Float32Type_Binary
  #define Float32Type_Binary_t LUCY_Float32Type_Binary_t
  #define Float32Type_Compare_Values LUCY_Float32Type_Compare_Values
  #define Float32Type_Compare_Values_t LUCY_Float32Type_Compare_Values_t
  #define Float32Type_Make_Term_Stepper LUCY_Float32Type_Make_Term_Stepper
  #define Float32Type_Make_Term_Stepper_t LUCY_Float32Type_Make_Term_Stepper_t
  #define Float32Type_Primitive_ID LUCY_Float32Type_Primitive_ID
  #define Float32Type_Primitive_ID_t LUCY_Float32Type_Primitive_ID_t
  #define Float32Type_Dump_For_Schema LUCY_Float32Type_Dump_For_Schema
  #define Float32Type_Dump_For_Schema_t LUCY_Float32Type_Dump_For_Schema_t
  #define Float32Type_Dump LUCY_Float32Type_Dump
  #define Float32Type_Dump_t LUCY_Float32Type_Dump_t
  #define Float32Type_Load LUCY_Float32Type_Load
  #define Float32Type_Load_t LUCY_Float32Type_Load_t
  #define Float32Type_Specifier LUCY_Float32Type_Specifier
  #define Float32Type_Specifier_t LUCY_Float32Type_Specifier_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy\Plan\NumericType.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_INTTYPE
extern uint32_t lucy_IntType_IVARS_OFFSET;
typedef struct lucy_IntTypeIVARS lucy_IntTypeIVARS;
static CFISH_INLINE lucy_IntTypeIVARS*
lucy_IntType_IVARS(lucy_IntType *self) {
   char *ptr = (char*)self + lucy_IntType_IVARS_OFFSET;
   return (lucy_IntTypeIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define IntTypeIVARS lucy_IntTypeIVARS
  #define IntType_IVARS lucy_IntType_IVARS
#endif

struct lucy_IntTypeIVARS {
    float boost;
    bool indexed;
    bool stored;
    bool sortable;
};

#endif /* C_LUCY_INTTYPE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_IntType_To_Host_t)(lucy_IntType* self, void* vcache);

typedef cfish_Obj*
(*LUCY_IntType_Clone_t)(lucy_IntType* self);

typedef bool
(*LUCY_IntType_Equals_t)(lucy_IntType* self, cfish_Obj* other);

typedef int32_t
(*LUCY_IntType_Compare_To_t)(lucy_IntType* self, cfish_Obj* other);

typedef void
(*LUCY_IntType_Destroy_t)(lucy_IntType* self);

typedef cfish_String*
(*LUCY_IntType_To_String_t)(lucy_IntType* self);

typedef void
(*LUCY_IntType_Set_Boost_t)(lucy_IntType* self, float boost);

typedef float
(*LUCY_IntType_Get_Boost_t)(lucy_IntType* self);

typedef void
(*LUCY_IntType_Set_Indexed_t)(lucy_IntType* self, bool indexed);

typedef bool
(*LUCY_IntType_Indexed_t)(lucy_IntType* self);

typedef void
(*LUCY_IntType_Set_Stored_t)(lucy_IntType* self, bool stored);

typedef bool
(*LUCY_IntType_Stored_t)(lucy_IntType* self);

typedef void
(*LUCY_IntType_Set_Sortable_t)(lucy_IntType* self, bool sortable);

typedef bool
(*LUCY_IntType_Sortable_t)(lucy_IntType* self);

typedef bool
(*LUCY_IntType_Binary_t)(lucy_IntType* self);

typedef int32_t
(*LUCY_IntType_Compare_Values_t)(lucy_IntType* self, cfish_Obj* a, cfish_Obj* b);

typedef lucy_TermStepper*
(*LUCY_IntType_Make_Term_Stepper_t)(lucy_IntType* self);

typedef int8_t
(*LUCY_IntType_Primitive_ID_t)(lucy_IntType* self);

typedef cfish_Hash*
(*LUCY_IntType_Dump_For_Schema_t)(lucy_IntType* self);

typedef cfish_Hash*
(*LUCY_IntType_Dump_t)(lucy_IntType* self);

typedef lucy_NumericType*
(*LUCY_IntType_Load_t)(lucy_IntType* self, cfish_Obj* dump);

typedef cfish_String*
(*LUCY_IntType_Specifier_t)(lucy_IntType* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_IntType_get_class(lucy_IntType *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_IntType_get_class_name(lucy_IntType *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_IntType_is_a(lucy_IntType *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_IntType_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_IntType_To_Host(lucy_IntType* self, void* vcache) {
    const LUCY_IntType_To_Host_t method = (LUCY_IntType_To_Host_t)cfish_obj_method(self, LUCY_IntType_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_IntType_Clone(lucy_IntType* self) {
    const LUCY_IntType_Clone_t method = (LUCY_IntType_Clone_t)cfish_obj_method(self, LUCY_IntType_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_IntType_Equals(lucy_IntType* self, cfish_Obj* other) {
    const LUCY_IntType_Equals_t method = (LUCY_IntType_Equals_t)cfish_obj_method(self, LUCY_IntType_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_IntType_Compare_To(lucy_IntType* self, cfish_Obj* other) {
    const LUCY_IntType_Compare_To_t method = (LUCY_IntType_Compare_To_t)cfish_obj_method(self, LUCY_IntType_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_IntType_Destroy(lucy_IntType* self) {
    const LUCY_IntType_Destroy_t method = (LUCY_IntType_Destroy_t)cfish_obj_method(self, LUCY_IntType_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_IntType_To_String(lucy_IntType* self) {
    const LUCY_IntType_To_String_t method = (LUCY_IntType_To_String_t)cfish_obj_method(self, LUCY_IntType_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_IntType_Set_Boost(lucy_IntType* self, float boost) {
    const LUCY_IntType_Set_Boost_t method = (LUCY_IntType_Set_Boost_t)cfish_obj_method(self, LUCY_IntType_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_IntType_Get_Boost(lucy_IntType* self) {
    const LUCY_IntType_Get_Boost_t method = (LUCY_IntType_Get_Boost_t)cfish_obj_method(self, LUCY_IntType_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Set_Indexed_OFFSET;
static CFISH_INLINE void
LUCY_IntType_Set_Indexed(lucy_IntType* self, bool indexed) {
    const LUCY_IntType_Set_Indexed_t method = (LUCY_IntType_Set_Indexed_t)cfish_obj_method(self, LUCY_IntType_Set_Indexed_OFFSET);
    method(self, indexed);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Indexed_OFFSET;
static CFISH_INLINE bool
LUCY_IntType_Indexed(lucy_IntType* self) {
    const LUCY_IntType_Indexed_t method = (LUCY_IntType_Indexed_t)cfish_obj_method(self, LUCY_IntType_Indexed_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Set_Stored_OFFSET;
static CFISH_INLINE void
LUCY_IntType_Set_Stored(lucy_IntType* self, bool stored) {
    const LUCY_IntType_Set_Stored_t method = (LUCY_IntType_Set_Stored_t)cfish_obj_method(self, LUCY_IntType_Set_Stored_OFFSET);
    method(self, stored);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Stored_OFFSET;
static CFISH_INLINE bool
LUCY_IntType_Stored(lucy_IntType* self) {
    const LUCY_IntType_Stored_t method = (LUCY_IntType_Stored_t)cfish_obj_method(self, LUCY_IntType_Stored_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Set_Sortable_OFFSET;
static CFISH_INLINE void
LUCY_IntType_Set_Sortable(lucy_IntType* self, bool sortable) {
    const LUCY_IntType_Set_Sortable_t method = (LUCY_IntType_Set_Sortable_t)cfish_obj_method(self, LUCY_IntType_Set_Sortable_OFFSET);
    method(self, sortable);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Sortable_OFFSET;
static CFISH_INLINE bool
LUCY_IntType_Sortable(lucy_IntType* self) {
    const LUCY_IntType_Sortable_t method = (LUCY_IntType_Sortable_t)cfish_obj_method(self, LUCY_IntType_Sortable_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Binary_OFFSET;
static CFISH_INLINE bool
LUCY_IntType_Binary(lucy_IntType* self) {
    const LUCY_IntType_Binary_t method = (LUCY_IntType_Binary_t)cfish_obj_method(self, LUCY_IntType_Binary_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Compare_Values_OFFSET;
static CFISH_INLINE int32_t
LUCY_IntType_Compare_Values(lucy_IntType* self, cfish_Obj* a, cfish_Obj* b) {
    const LUCY_IntType_Compare_Values_t method = (LUCY_IntType_Compare_Values_t)cfish_obj_method(self, LUCY_IntType_Compare_Values_OFFSET);
    return method(self, a, b);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Make_Term_Stepper_OFFSET;
static CFISH_INLINE lucy_TermStepper*
LUCY_IntType_Make_Term_Stepper(lucy_IntType* self) {
    const LUCY_IntType_Make_Term_Stepper_t method = (LUCY_IntType_Make_Term_Stepper_t)cfish_obj_method(self, LUCY_IntType_Make_Term_Stepper_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Primitive_ID_OFFSET;
static CFISH_INLINE int8_t
LUCY_IntType_Primitive_ID(lucy_IntType* self) {
    const LUCY_IntType_Primitive_ID_t method = (LUCY_IntType_Primitive_ID_t)cfish_obj_method(self, LUCY_IntType_Primitive_ID_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Dump_For_Schema_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_IntType_Dump_For_Schema(lucy_IntType* self) {
    const LUCY_IntType_Dump_For_Schema_t method = (LUCY_IntType_Dump_For_Schema_t)cfish_obj_method(self, LUCY_IntType_Dump_For_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Dump_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_IntType_Dump(lucy_IntType* self) {
    const LUCY_IntType_Dump_t method = (LUCY_IntType_Dump_t)cfish_obj_method(self, LUCY_IntType_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Load_OFFSET;
static CFISH_INLINE lucy_NumericType*
LUCY_IntType_Load(lucy_IntType* self, cfish_Obj* dump) {
    const LUCY_IntType_Load_t method = (LUCY_IntType_Load_t)cfish_obj_method(self, LUCY_IntType_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_IntType_Specifier_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_IntType_Specifier(lucy_IntType* self) {
    const LUCY_IntType_Specifier_t method = (LUCY_IntType_Specifier_t)cfish_obj_method(self, LUCY_IntType_Specifier_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define IntType lucy_IntType
  #define INTTYPE LUCY_INTTYPE
  #define IntType_get_class lucy_IntType_get_class
  #define IntType_get_class_name lucy_IntType_get_class_name
  #define IntType_is_a lucy_IntType_is_a
  #define IntType_To_Host LUCY_IntType_To_Host
  #define IntType_To_Host_t LUCY_IntType_To_Host_t
  #define IntType_Clone LUCY_IntType_Clone
  #define IntType_Clone_t LUCY_IntType_Clone_t
  #define IntType_Equals LUCY_IntType_Equals
  #define IntType_Equals_t LUCY_IntType_Equals_t
  #define IntType_Compare_To LUCY_IntType_Compare_To
  #define IntType_Compare_To_t LUCY_IntType_Compare_To_t
  #define IntType_Destroy LUCY_IntType_Destroy
  #define IntType_Destroy_t LUCY_IntType_Destroy_t
  #define IntType_To_String LUCY_IntType_To_String
  #define IntType_To_String_t LUCY_IntType_To_String_t
  #define IntType_Set_Boost LUCY_IntType_Set_Boost
  #define IntType_Set_Boost_t LUCY_IntType_Set_Boost_t
  #define IntType_Get_Boost LUCY_IntType_Get_Boost
  #define IntType_Get_Boost_t LUCY_IntType_Get_Boost_t
  #define IntType_Set_Indexed LUCY_IntType_Set_Indexed
  #define IntType_Set_Indexed_t LUCY_IntType_Set_Indexed_t
  #define IntType_Indexed LUCY_IntType_Indexed
  #define IntType_Indexed_t LUCY_IntType_Indexed_t
  #define IntType_Set_Stored LUCY_IntType_Set_Stored
  #define IntType_Set_Stored_t LUCY_IntType_Set_Stored_t
  #define IntType_Stored LUCY_IntType_Stored
  #define IntType_Stored_t LUCY_IntType_Stored_t
  #define IntType_Set_Sortable LUCY_IntType_Set_Sortable
  #define IntType_Set_Sortable_t LUCY_IntType_Set_Sortable_t
  #define IntType_Sortable LUCY_IntType_Sortable
  #define IntType_Sortable_t LUCY_IntType_Sortable_t
  #define IntType_Binary LUCY_IntType_Binary
  #define IntType_Binary_t LUCY_IntType_Binary_t
  #define IntType_Compare_Values LUCY_IntType_Compare_Values
  #define IntType_Compare_Values_t LUCY_IntType_Compare_Values_t
  #define IntType_Make_Term_Stepper LUCY_IntType_Make_Term_Stepper
  #define IntType_Make_Term_Stepper_t LUCY_IntType_Make_Term_Stepper_t
  #define IntType_Primitive_ID LUCY_IntType_Primitive_ID
  #define IntType_Primitive_ID_t LUCY_IntType_Primitive_ID_t
  #define IntType_Dump_For_Schema LUCY_IntType_Dump_For_Schema
  #define IntType_Dump_For_Schema_t LUCY_IntType_Dump_For_Schema_t
  #define IntType_Dump LUCY_IntType_Dump
  #define IntType_Dump_t LUCY_IntType_Dump_t
  #define IntType_Load LUCY_IntType_Load
  #define IntType_Load_t LUCY_IntType_Load_t
  #define IntType_Specifier LUCY_IntType_Specifier
  #define IntType_Specifier_t LUCY_IntType_Specifier_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy\Plan\NumericType.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_INT32TYPE
extern uint32_t lucy_Int32Type_IVARS_OFFSET;
typedef struct lucy_Int32TypeIVARS lucy_Int32TypeIVARS;
static CFISH_INLINE lucy_Int32TypeIVARS*
lucy_Int32Type_IVARS(lucy_Int32Type *self) {
   char *ptr = (char*)self + lucy_Int32Type_IVARS_OFFSET;
   return (lucy_Int32TypeIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define Int32TypeIVARS lucy_Int32TypeIVARS
  #define Int32Type_IVARS lucy_Int32Type_IVARS
#endif

struct lucy_Int32TypeIVARS {
    float boost;
    bool indexed;
    bool stored;
    bool sortable;
};

#endif /* C_LUCY_INT32TYPE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_Int32Type*
lucy_Int32Type_new(void);

LUCY_VISIBLE lucy_Int32Type*
lucy_Int32Type_init(lucy_Int32Type* self);

LUCY_VISIBLE lucy_Int32Type*
lucy_Int32Type_init2(lucy_Int32Type* self, float boost, bool indexed, bool stored, bool sortable);

int8_t
LUCY_Int32Type_Primitive_ID_IMP(lucy_Int32Type* self);

cfish_String*
LUCY_Int32Type_Specifier_IMP(lucy_Int32Type* self);

bool
LUCY_Int32Type_Equals_IMP(lucy_Int32Type* self, cfish_Obj* other);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_Int32Type_To_Host_t)(lucy_Int32Type* self, void* vcache);

typedef cfish_Obj*
(*LUCY_Int32Type_Clone_t)(lucy_Int32Type* self);

typedef bool
(*LUCY_Int32Type_Equals_t)(lucy_Int32Type* self, cfish_Obj* other);

typedef int32_t
(*LUCY_Int32Type_Compare_To_t)(lucy_Int32Type* self, cfish_Obj* other);

typedef void
(*LUCY_Int32Type_Destroy_t)(lucy_Int32Type* self);

typedef cfish_String*
(*LUCY_Int32Type_To_String_t)(lucy_Int32Type* self);

typedef void
(*LUCY_Int32Type_Set_Boost_t)(lucy_Int32Type* self, float boost);

typedef float
(*LUCY_Int32Type_Get_Boost_t)(lucy_Int32Type* self);

typedef void
(*LUCY_Int32Type_Set_Indexed_t)(lucy_Int32Type* self, bool indexed);

typedef bool
(*LUCY_Int32Type_Indexed_t)(lucy_Int32Type* self);

typedef void
(*LUCY_Int32Type_Set_Stored_t)(lucy_Int32Type* self, bool stored);

typedef bool
(*LUCY_Int32Type_Stored_t)(lucy_Int32Type* self);

typedef void
(*LUCY_Int32Type_Set_Sortable_t)(lucy_Int32Type* self, bool sortable);

typedef bool
(*LUCY_Int32Type_Sortable_t)(lucy_Int32Type* self);

typedef bool
(*LUCY_Int32Type_Binary_t)(lucy_Int32Type* self);

typedef int32_t
(*LUCY_Int32Type_Compare_Values_t)(lucy_Int32Type* self, cfish_Obj* a, cfish_Obj* b);

typedef lucy_TermStepper*
(*LUCY_Int32Type_Make_Term_Stepper_t)(lucy_Int32Type* self);

typedef int8_t
(*LUCY_Int32Type_Primitive_ID_t)(lucy_Int32Type* self);

typedef cfish_Hash*
(*LUCY_Int32Type_Dump_For_Schema_t)(lucy_Int32Type* self);

typedef cfish_Hash*
(*LUCY_Int32Type_Dump_t)(lucy_Int32Type* self);

typedef lucy_NumericType*
(*LUCY_Int32Type_Load_t)(lucy_Int32Type* self, cfish_Obj* dump);

typedef cfish_String*
(*LUCY_Int32Type_Specifier_t)(lucy_Int32Type* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_Int32Type_get_class(lucy_Int32Type *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_Int32Type_get_class_name(lucy_Int32Type *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_Int32Type_is_a(lucy_Int32Type *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_Int32Type_To_Host(lucy_Int32Type* self, void* vcache) {
    const LUCY_Int32Type_To_Host_t method = (LUCY_Int32Type_To_Host_t)cfish_obj_method(self, LUCY_Int32Type_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_Int32Type_Clone(lucy_Int32Type* self) {
    const LUCY_Int32Type_Clone_t method = (LUCY_Int32Type_Clone_t)cfish_obj_method(self, LUCY_Int32Type_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_Int32Type_Equals(lucy_Int32Type* self, cfish_Obj* other) {
    const LUCY_Int32Type_Equals_t method = (LUCY_Int32Type_Equals_t)cfish_obj_method(self, LUCY_Int32Type_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_Int32Type_Compare_To(lucy_Int32Type* self, cfish_Obj* other) {
    const LUCY_Int32Type_Compare_To_t method = (LUCY_Int32Type_Compare_To_t)cfish_obj_method(self, LUCY_Int32Type_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_Int32Type_Destroy(lucy_Int32Type* self) {
    const LUCY_Int32Type_Destroy_t method = (LUCY_Int32Type_Destroy_t)cfish_obj_method(self, LUCY_Int32Type_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Int32Type_To_String(lucy_Int32Type* self) {
    const LUCY_Int32Type_To_String_t method = (LUCY_Int32Type_To_String_t)cfish_obj_method(self, LUCY_Int32Type_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_Int32Type_Set_Boost(lucy_Int32Type* self, float boost) {
    const LUCY_Int32Type_Set_Boost_t method = (LUCY_Int32Type_Set_Boost_t)cfish_obj_method(self, LUCY_Int32Type_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_Int32Type_Get_Boost(lucy_Int32Type* self) {
    const LUCY_Int32Type_Get_Boost_t method = (LUCY_Int32Type_Get_Boost_t)cfish_obj_method(self, LUCY_Int32Type_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Set_Indexed_OFFSET;
static CFISH_INLINE void
LUCY_Int32Type_Set_Indexed(lucy_Int32Type* self, bool indexed) {
    const LUCY_Int32Type_Set_Indexed_t method = (LUCY_Int32Type_Set_Indexed_t)cfish_obj_method(self, LUCY_Int32Type_Set_Indexed_OFFSET);
    method(self, indexed);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Indexed_OFFSET;
static CFISH_INLINE bool
LUCY_Int32Type_Indexed(lucy_Int32Type* self) {
    const LUCY_Int32Type_Indexed_t method = (LUCY_Int32Type_Indexed_t)cfish_obj_method(self, LUCY_Int32Type_Indexed_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Set_Stored_OFFSET;
static CFISH_INLINE void
LUCY_Int32Type_Set_Stored(lucy_Int32Type* self, bool stored) {
    const LUCY_Int32Type_Set_Stored_t method = (LUCY_Int32Type_Set_Stored_t)cfish_obj_method(self, LUCY_Int32Type_Set_Stored_OFFSET);
    method(self, stored);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Stored_OFFSET;
static CFISH_INLINE bool
LUCY_Int32Type_Stored(lucy_Int32Type* self) {
    const LUCY_Int32Type_Stored_t method = (LUCY_Int32Type_Stored_t)cfish_obj_method(self, LUCY_Int32Type_Stored_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Set_Sortable_OFFSET;
static CFISH_INLINE void
LUCY_Int32Type_Set_Sortable(lucy_Int32Type* self, bool sortable) {
    const LUCY_Int32Type_Set_Sortable_t method = (LUCY_Int32Type_Set_Sortable_t)cfish_obj_method(self, LUCY_Int32Type_Set_Sortable_OFFSET);
    method(self, sortable);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Sortable_OFFSET;
static CFISH_INLINE bool
LUCY_Int32Type_Sortable(lucy_Int32Type* self) {
    const LUCY_Int32Type_Sortable_t method = (LUCY_Int32Type_Sortable_t)cfish_obj_method(self, LUCY_Int32Type_Sortable_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Binary_OFFSET;
static CFISH_INLINE bool
LUCY_Int32Type_Binary(lucy_Int32Type* self) {
    const LUCY_Int32Type_Binary_t method = (LUCY_Int32Type_Binary_t)cfish_obj_method(self, LUCY_Int32Type_Binary_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Compare_Values_OFFSET;
static CFISH_INLINE int32_t
LUCY_Int32Type_Compare_Values(lucy_Int32Type* self, cfish_Obj* a, cfish_Obj* b) {
    const LUCY_Int32Type_Compare_Values_t method = (LUCY_Int32Type_Compare_Values_t)cfish_obj_method(self, LUCY_Int32Type_Compare_Values_OFFSET);
    return method(self, a, b);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Make_Term_Stepper_OFFSET;
static CFISH_INLINE lucy_TermStepper*
LUCY_Int32Type_Make_Term_Stepper(lucy_Int32Type* self) {
    const LUCY_Int32Type_Make_Term_Stepper_t method = (LUCY_Int32Type_Make_Term_Stepper_t)cfish_obj_method(self, LUCY_Int32Type_Make_Term_Stepper_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Primitive_ID_OFFSET;
static CFISH_INLINE int8_t
LUCY_Int32Type_Primitive_ID(lucy_Int32Type* self) {
    const LUCY_Int32Type_Primitive_ID_t method = (LUCY_Int32Type_Primitive_ID_t)cfish_obj_method(self, LUCY_Int32Type_Primitive_ID_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Dump_For_Schema_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_Int32Type_Dump_For_Schema(lucy_Int32Type* self) {
    const LUCY_Int32Type_Dump_For_Schema_t method = (LUCY_Int32Type_Dump_For_Schema_t)cfish_obj_method(self, LUCY_Int32Type_Dump_For_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Dump_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_Int32Type_Dump(lucy_Int32Type* self) {
    const LUCY_Int32Type_Dump_t method = (LUCY_Int32Type_Dump_t)cfish_obj_method(self, LUCY_Int32Type_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Load_OFFSET;
static CFISH_INLINE lucy_NumericType*
LUCY_Int32Type_Load(lucy_Int32Type* self, cfish_Obj* dump) {
    const LUCY_Int32Type_Load_t method = (LUCY_Int32Type_Load_t)cfish_obj_method(self, LUCY_Int32Type_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_Int32Type_Specifier_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Int32Type_Specifier(lucy_Int32Type* self) {
    const LUCY_Int32Type_Specifier_t method = (LUCY_Int32Type_Specifier_t)cfish_obj_method(self, LUCY_Int32Type_Specifier_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define Int32Type lucy_Int32Type
  #define INT32TYPE LUCY_INT32TYPE
  #define Int32Type_new lucy_Int32Type_new
  #define Int32Type_init lucy_Int32Type_init
  #define Int32Type_init2 lucy_Int32Type_init2
  #define Int32Type_get_class lucy_Int32Type_get_class
  #define Int32Type_get_class_name lucy_Int32Type_get_class_name
  #define Int32Type_is_a lucy_Int32Type_is_a
  #define Int32Type_Primitive_ID_IMP LUCY_Int32Type_Primitive_ID_IMP
  #define Int32Type_Specifier_IMP LUCY_Int32Type_Specifier_IMP
  #define Int32Type_Equals_IMP LUCY_Int32Type_Equals_IMP
  #define Int32Type_To_Host LUCY_Int32Type_To_Host
  #define Int32Type_To_Host_t LUCY_Int32Type_To_Host_t
  #define Int32Type_Clone LUCY_Int32Type_Clone
  #define Int32Type_Clone_t LUCY_Int32Type_Clone_t
  #define Int32Type_Equals LUCY_Int32Type_Equals
  #define Int32Type_Equals_t LUCY_Int32Type_Equals_t
  #define Int32Type_Compare_To LUCY_Int32Type_Compare_To
  #define Int32Type_Compare_To_t LUCY_Int32Type_Compare_To_t
  #define Int32Type_Destroy LUCY_Int32Type_Destroy
  #define Int32Type_Destroy_t LUCY_Int32Type_Destroy_t
  #define Int32Type_To_String LUCY_Int32Type_To_String
  #define Int32Type_To_String_t LUCY_Int32Type_To_String_t
  #define Int32Type_Set_Boost LUCY_Int32Type_Set_Boost
  #define Int32Type_Set_Boost_t LUCY_Int32Type_Set_Boost_t
  #define Int32Type_Get_Boost LUCY_Int32Type_Get_Boost
  #define Int32Type_Get_Boost_t LUCY_Int32Type_Get_Boost_t
  #define Int32Type_Set_Indexed LUCY_Int32Type_Set_Indexed
  #define Int32Type_Set_Indexed_t LUCY_Int32Type_Set_Indexed_t
  #define Int32Type_Indexed LUCY_Int32Type_Indexed
  #define Int32Type_Indexed_t LUCY_Int32Type_Indexed_t
  #define Int32Type_Set_Stored LUCY_Int32Type_Set_Stored
  #define Int32Type_Set_Stored_t LUCY_Int32Type_Set_Stored_t
  #define Int32Type_Stored LUCY_Int32Type_Stored
  #define Int32Type_Stored_t LUCY_Int32Type_Stored_t
  #define Int32Type_Set_Sortable LUCY_Int32Type_Set_Sortable
  #define Int32Type_Set_Sortable_t LUCY_Int32Type_Set_Sortable_t
  #define Int32Type_Sortable LUCY_Int32Type_Sortable
  #define Int32Type_Sortable_t LUCY_Int32Type_Sortable_t
  #define Int32Type_Binary LUCY_Int32Type_Binary
  #define Int32Type_Binary_t LUCY_Int32Type_Binary_t
  #define Int32Type_Compare_Values LUCY_Int32Type_Compare_Values
  #define Int32Type_Compare_Values_t LUCY_Int32Type_Compare_Values_t
  #define Int32Type_Make_Term_Stepper LUCY_Int32Type_Make_Term_Stepper
  #define Int32Type_Make_Term_Stepper_t LUCY_Int32Type_Make_Term_Stepper_t
  #define Int32Type_Primitive_ID LUCY_Int32Type_Primitive_ID
  #define Int32Type_Primitive_ID_t LUCY_Int32Type_Primitive_ID_t
  #define Int32Type_Dump_For_Schema LUCY_Int32Type_Dump_For_Schema
  #define Int32Type_Dump_For_Schema_t LUCY_Int32Type_Dump_For_Schema_t
  #define Int32Type_Dump LUCY_Int32Type_Dump
  #define Int32Type_Dump_t LUCY_Int32Type_Dump_t
  #define Int32Type_Load LUCY_Int32Type_Load
  #define Int32Type_Load_t LUCY_Int32Type_Load_t
  #define Int32Type_Specifier LUCY_Int32Type_Specifier
  #define Int32Type_Specifier_t LUCY_Int32Type_Specifier_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy\Plan\NumericType.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_INT64TYPE
extern uint32_t lucy_Int64Type_IVARS_OFFSET;
typedef struct lucy_Int64TypeIVARS lucy_Int64TypeIVARS;
static CFISH_INLINE lucy_Int64TypeIVARS*
lucy_Int64Type_IVARS(lucy_Int64Type *self) {
   char *ptr = (char*)self + lucy_Int64Type_IVARS_OFFSET;
   return (lucy_Int64TypeIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define Int64TypeIVARS lucy_Int64TypeIVARS
  #define Int64Type_IVARS lucy_Int64Type_IVARS
#endif

struct lucy_Int64TypeIVARS {
    float boost;
    bool indexed;
    bool stored;
    bool sortable;
};

#endif /* C_LUCY_INT64TYPE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_Int64Type*
lucy_Int64Type_new(void);

LUCY_VISIBLE lucy_Int64Type*
lucy_Int64Type_init(lucy_Int64Type* self);

LUCY_VISIBLE lucy_Int64Type*
lucy_Int64Type_init2(lucy_Int64Type* self, float boost, bool indexed, bool stored, bool sortable);

int8_t
LUCY_Int64Type_Primitive_ID_IMP(lucy_Int64Type* self);

cfish_String*
LUCY_Int64Type_Specifier_IMP(lucy_Int64Type* self);

bool
LUCY_Int64Type_Equals_IMP(lucy_Int64Type* self, cfish_Obj* other);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_Int64Type_To_Host_t)(lucy_Int64Type* self, void* vcache);

typedef cfish_Obj*
(*LUCY_Int64Type_Clone_t)(lucy_Int64Type* self);

typedef bool
(*LUCY_Int64Type_Equals_t)(lucy_Int64Type* self, cfish_Obj* other);

typedef int32_t
(*LUCY_Int64Type_Compare_To_t)(lucy_Int64Type* self, cfish_Obj* other);

typedef void
(*LUCY_Int64Type_Destroy_t)(lucy_Int64Type* self);

typedef cfish_String*
(*LUCY_Int64Type_To_String_t)(lucy_Int64Type* self);

typedef void
(*LUCY_Int64Type_Set_Boost_t)(lucy_Int64Type* self, float boost);

typedef float
(*LUCY_Int64Type_Get_Boost_t)(lucy_Int64Type* self);

typedef void
(*LUCY_Int64Type_Set_Indexed_t)(lucy_Int64Type* self, bool indexed);

typedef bool
(*LUCY_Int64Type_Indexed_t)(lucy_Int64Type* self);

typedef void
(*LUCY_Int64Type_Set_Stored_t)(lucy_Int64Type* self, bool stored);

typedef bool
(*LUCY_Int64Type_Stored_t)(lucy_Int64Type* self);

typedef void
(*LUCY_Int64Type_Set_Sortable_t)(lucy_Int64Type* self, bool sortable);

typedef bool
(*LUCY_Int64Type_Sortable_t)(lucy_Int64Type* self);

typedef bool
(*LUCY_Int64Type_Binary_t)(lucy_Int64Type* self);

typedef int32_t
(*LUCY_Int64Type_Compare_Values_t)(lucy_Int64Type* self, cfish_Obj* a, cfish_Obj* b);

typedef lucy_TermStepper*
(*LUCY_Int64Type_Make_Term_Stepper_t)(lucy_Int64Type* self);

typedef int8_t
(*LUCY_Int64Type_Primitive_ID_t)(lucy_Int64Type* self);

typedef cfish_Hash*
(*LUCY_Int64Type_Dump_For_Schema_t)(lucy_Int64Type* self);

typedef cfish_Hash*
(*LUCY_Int64Type_Dump_t)(lucy_Int64Type* self);

typedef lucy_NumericType*
(*LUCY_Int64Type_Load_t)(lucy_Int64Type* self, cfish_Obj* dump);

typedef cfish_String*
(*LUCY_Int64Type_Specifier_t)(lucy_Int64Type* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_Int64Type_get_class(lucy_Int64Type *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_Int64Type_get_class_name(lucy_Int64Type *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_Int64Type_is_a(lucy_Int64Type *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_Int64Type_To_Host(lucy_Int64Type* self, void* vcache) {
    const LUCY_Int64Type_To_Host_t method = (LUCY_Int64Type_To_Host_t)cfish_obj_method(self, LUCY_Int64Type_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_Int64Type_Clone(lucy_Int64Type* self) {
    const LUCY_Int64Type_Clone_t method = (LUCY_Int64Type_Clone_t)cfish_obj_method(self, LUCY_Int64Type_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_Int64Type_Equals(lucy_Int64Type* self, cfish_Obj* other) {
    const LUCY_Int64Type_Equals_t method = (LUCY_Int64Type_Equals_t)cfish_obj_method(self, LUCY_Int64Type_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_Int64Type_Compare_To(lucy_Int64Type* self, cfish_Obj* other) {
    const LUCY_Int64Type_Compare_To_t method = (LUCY_Int64Type_Compare_To_t)cfish_obj_method(self, LUCY_Int64Type_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_Int64Type_Destroy(lucy_Int64Type* self) {
    const LUCY_Int64Type_Destroy_t method = (LUCY_Int64Type_Destroy_t)cfish_obj_method(self, LUCY_Int64Type_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Int64Type_To_String(lucy_Int64Type* self) {
    const LUCY_Int64Type_To_String_t method = (LUCY_Int64Type_To_String_t)cfish_obj_method(self, LUCY_Int64Type_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_Int64Type_Set_Boost(lucy_Int64Type* self, float boost) {
    const LUCY_Int64Type_Set_Boost_t method = (LUCY_Int64Type_Set_Boost_t)cfish_obj_method(self, LUCY_Int64Type_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_Int64Type_Get_Boost(lucy_Int64Type* self) {
    const LUCY_Int64Type_Get_Boost_t method = (LUCY_Int64Type_Get_Boost_t)cfish_obj_method(self, LUCY_Int64Type_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Set_Indexed_OFFSET;
static CFISH_INLINE void
LUCY_Int64Type_Set_Indexed(lucy_Int64Type* self, bool indexed) {
    const LUCY_Int64Type_Set_Indexed_t method = (LUCY_Int64Type_Set_Indexed_t)cfish_obj_method(self, LUCY_Int64Type_Set_Indexed_OFFSET);
    method(self, indexed);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Indexed_OFFSET;
static CFISH_INLINE bool
LUCY_Int64Type_Indexed(lucy_Int64Type* self) {
    const LUCY_Int64Type_Indexed_t method = (LUCY_Int64Type_Indexed_t)cfish_obj_method(self, LUCY_Int64Type_Indexed_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Set_Stored_OFFSET;
static CFISH_INLINE void
LUCY_Int64Type_Set_Stored(lucy_Int64Type* self, bool stored) {
    const LUCY_Int64Type_Set_Stored_t method = (LUCY_Int64Type_Set_Stored_t)cfish_obj_method(self, LUCY_Int64Type_Set_Stored_OFFSET);
    method(self, stored);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Stored_OFFSET;
static CFISH_INLINE bool
LUCY_Int64Type_Stored(lucy_Int64Type* self) {
    const LUCY_Int64Type_Stored_t method = (LUCY_Int64Type_Stored_t)cfish_obj_method(self, LUCY_Int64Type_Stored_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Set_Sortable_OFFSET;
static CFISH_INLINE void
LUCY_Int64Type_Set_Sortable(lucy_Int64Type* self, bool sortable) {
    const LUCY_Int64Type_Set_Sortable_t method = (LUCY_Int64Type_Set_Sortable_t)cfish_obj_method(self, LUCY_Int64Type_Set_Sortable_OFFSET);
    method(self, sortable);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Sortable_OFFSET;
static CFISH_INLINE bool
LUCY_Int64Type_Sortable(lucy_Int64Type* self) {
    const LUCY_Int64Type_Sortable_t method = (LUCY_Int64Type_Sortable_t)cfish_obj_method(self, LUCY_Int64Type_Sortable_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Binary_OFFSET;
static CFISH_INLINE bool
LUCY_Int64Type_Binary(lucy_Int64Type* self) {
    const LUCY_Int64Type_Binary_t method = (LUCY_Int64Type_Binary_t)cfish_obj_method(self, LUCY_Int64Type_Binary_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Compare_Values_OFFSET;
static CFISH_INLINE int32_t
LUCY_Int64Type_Compare_Values(lucy_Int64Type* self, cfish_Obj* a, cfish_Obj* b) {
    const LUCY_Int64Type_Compare_Values_t method = (LUCY_Int64Type_Compare_Values_t)cfish_obj_method(self, LUCY_Int64Type_Compare_Values_OFFSET);
    return method(self, a, b);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Make_Term_Stepper_OFFSET;
static CFISH_INLINE lucy_TermStepper*
LUCY_Int64Type_Make_Term_Stepper(lucy_Int64Type* self) {
    const LUCY_Int64Type_Make_Term_Stepper_t method = (LUCY_Int64Type_Make_Term_Stepper_t)cfish_obj_method(self, LUCY_Int64Type_Make_Term_Stepper_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Primitive_ID_OFFSET;
static CFISH_INLINE int8_t
LUCY_Int64Type_Primitive_ID(lucy_Int64Type* self) {
    const LUCY_Int64Type_Primitive_ID_t method = (LUCY_Int64Type_Primitive_ID_t)cfish_obj_method(self, LUCY_Int64Type_Primitive_ID_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Dump_For_Schema_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_Int64Type_Dump_For_Schema(lucy_Int64Type* self) {
    const LUCY_Int64Type_Dump_For_Schema_t method = (LUCY_Int64Type_Dump_For_Schema_t)cfish_obj_method(self, LUCY_Int64Type_Dump_For_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Dump_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_Int64Type_Dump(lucy_Int64Type* self) {
    const LUCY_Int64Type_Dump_t method = (LUCY_Int64Type_Dump_t)cfish_obj_method(self, LUCY_Int64Type_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Load_OFFSET;
static CFISH_INLINE lucy_NumericType*
LUCY_Int64Type_Load(lucy_Int64Type* self, cfish_Obj* dump) {
    const LUCY_Int64Type_Load_t method = (LUCY_Int64Type_Load_t)cfish_obj_method(self, LUCY_Int64Type_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_Int64Type_Specifier_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Int64Type_Specifier(lucy_Int64Type* self) {
    const LUCY_Int64Type_Specifier_t method = (LUCY_Int64Type_Specifier_t)cfish_obj_method(self, LUCY_Int64Type_Specifier_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define Int64Type lucy_Int64Type
  #define INT64TYPE LUCY_INT64TYPE
  #define Int64Type_new lucy_Int64Type_new
  #define Int64Type_init lucy_Int64Type_init
  #define Int64Type_init2 lucy_Int64Type_init2
  #define Int64Type_get_class lucy_Int64Type_get_class
  #define Int64Type_get_class_name lucy_Int64Type_get_class_name
  #define Int64Type_is_a lucy_Int64Type_is_a
  #define Int64Type_Primitive_ID_IMP LUCY_Int64Type_Primitive_ID_IMP
  #define Int64Type_Specifier_IMP LUCY_Int64Type_Specifier_IMP
  #define Int64Type_Equals_IMP LUCY_Int64Type_Equals_IMP
  #define Int64Type_To_Host LUCY_Int64Type_To_Host
  #define Int64Type_To_Host_t LUCY_Int64Type_To_Host_t
  #define Int64Type_Clone LUCY_Int64Type_Clone
  #define Int64Type_Clone_t LUCY_Int64Type_Clone_t
  #define Int64Type_Equals LUCY_Int64Type_Equals
  #define Int64Type_Equals_t LUCY_Int64Type_Equals_t
  #define Int64Type_Compare_To LUCY_Int64Type_Compare_To
  #define Int64Type_Compare_To_t LUCY_Int64Type_Compare_To_t
  #define Int64Type_Destroy LUCY_Int64Type_Destroy
  #define Int64Type_Destroy_t LUCY_Int64Type_Destroy_t
  #define Int64Type_To_String LUCY_Int64Type_To_String
  #define Int64Type_To_String_t LUCY_Int64Type_To_String_t
  #define Int64Type_Set_Boost LUCY_Int64Type_Set_Boost
  #define Int64Type_Set_Boost_t LUCY_Int64Type_Set_Boost_t
  #define Int64Type_Get_Boost LUCY_Int64Type_Get_Boost
  #define Int64Type_Get_Boost_t LUCY_Int64Type_Get_Boost_t
  #define Int64Type_Set_Indexed LUCY_Int64Type_Set_Indexed
  #define Int64Type_Set_Indexed_t LUCY_Int64Type_Set_Indexed_t
  #define Int64Type_Indexed LUCY_Int64Type_Indexed
  #define Int64Type_Indexed_t LUCY_Int64Type_Indexed_t
  #define Int64Type_Set_Stored LUCY_Int64Type_Set_Stored
  #define Int64Type_Set_Stored_t LUCY_Int64Type_Set_Stored_t
  #define Int64Type_Stored LUCY_Int64Type_Stored
  #define Int64Type_Stored_t LUCY_Int64Type_Stored_t
  #define Int64Type_Set_Sortable LUCY_Int64Type_Set_Sortable
  #define Int64Type_Set_Sortable_t LUCY_Int64Type_Set_Sortable_t
  #define Int64Type_Sortable LUCY_Int64Type_Sortable
  #define Int64Type_Sortable_t LUCY_Int64Type_Sortable_t
  #define Int64Type_Binary LUCY_Int64Type_Binary
  #define Int64Type_Binary_t LUCY_Int64Type_Binary_t
  #define Int64Type_Compare_Values LUCY_Int64Type_Compare_Values
  #define Int64Type_Compare_Values_t LUCY_Int64Type_Compare_Values_t
  #define Int64Type_Make_Term_Stepper LUCY_Int64Type_Make_Term_Stepper
  #define Int64Type_Make_Term_Stepper_t LUCY_Int64Type_Make_Term_Stepper_t
  #define Int64Type_Primitive_ID LUCY_Int64Type_Primitive_ID
  #define Int64Type_Primitive_ID_t LUCY_Int64Type_Primitive_ID_t
  #define Int64Type_Dump_For_Schema LUCY_Int64Type_Dump_For_Schema
  #define Int64Type_Dump_For_Schema_t LUCY_Int64Type_Dump_For_Schema_t
  #define Int64Type_Dump LUCY_Int64Type_Dump
  #define Int64Type_Dump_t LUCY_Int64Type_Dump_t
  #define Int64Type_Load LUCY_Int64Type_Load
  #define Int64Type_Load_t LUCY_Int64Type_Load_t
  #define Int64Type_Specifier LUCY_Int64Type_Specifier
  #define Int64Type_Specifier_t LUCY_Int64Type_Specifier_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_PLAN_NUMERICTYPE */




