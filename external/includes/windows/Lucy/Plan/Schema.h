/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_PLAN_SCHEMA
#define H_LUCY_PLAN_SCHEMA 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish\Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_SCHEMA
extern uint32_t lucy_Schema_IVARS_OFFSET;
typedef struct lucy_SchemaIVARS lucy_SchemaIVARS;
static CFISH_INLINE lucy_SchemaIVARS*
lucy_Schema_IVARS(lucy_Schema *self) {
   char *ptr = (char*)self + lucy_Schema_IVARS_OFFSET;
   return (lucy_SchemaIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define SchemaIVARS lucy_SchemaIVARS
  #define Schema_IVARS lucy_Schema_IVARS
#endif

struct lucy_SchemaIVARS {
    lucy_Architecture* arch;
    lucy_Similarity* sim;
    cfish_Hash* types;
    cfish_Hash* sims;
    cfish_Hash* analyzers;
    cfish_Vector* uniq_analyzers;
};

#endif /* C_LUCY_SCHEMA */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_Schema*
lucy_Schema_new(void);

LUCY_VISIBLE lucy_Schema*
lucy_Schema_init(lucy_Schema* self);

lucy_Architecture*
LUCY_Schema_Architecture_IMP(lucy_Schema* self);

void
LUCY_Schema_Spec_Field_IMP(lucy_Schema* self, cfish_String* name, lucy_FieldType* type);

lucy_FieldType*
LUCY_Schema_Fetch_Type_IMP(lucy_Schema* self, cfish_String* field);

lucy_Analyzer*
LUCY_Schema_Fetch_Analyzer_IMP(lucy_Schema* self, cfish_String* field);

lucy_Similarity*
LUCY_Schema_Fetch_Sim_IMP(lucy_Schema* self, cfish_String* field);

uint32_t
LUCY_Schema_Num_Fields_IMP(lucy_Schema* self);

cfish_Vector*
LUCY_Schema_All_Fields_IMP(lucy_Schema* self);

lucy_Architecture*
LUCY_Schema_Get_Architecture_IMP(lucy_Schema* self);

lucy_Similarity*
LUCY_Schema_Get_Similarity_IMP(lucy_Schema* self);

cfish_Hash*
LUCY_Schema_Dump_IMP(lucy_Schema* self);

lucy_Schema*
LUCY_Schema_Load_IMP(lucy_Schema* self, cfish_Obj* dump);

void
LUCY_Schema_Eat_IMP(lucy_Schema* self, lucy_Schema* other);

void
LUCY_Schema_Write_IMP(lucy_Schema* self, lucy_Folder* folder, cfish_String* filename);

void
LUCY_Schema_Destroy_IMP(lucy_Schema* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_Schema_To_Host_t)(lucy_Schema* self, void* vcache);

typedef cfish_Obj*
(*LUCY_Schema_Clone_t)(lucy_Schema* self);

typedef bool
(*LUCY_Schema_Equals_t)(lucy_Schema* self, cfish_Obj* other);

typedef int32_t
(*LUCY_Schema_Compare_To_t)(lucy_Schema* self, cfish_Obj* other);

typedef void
(*LUCY_Schema_Destroy_t)(lucy_Schema* self);

typedef cfish_String*
(*LUCY_Schema_To_String_t)(lucy_Schema* self);

typedef lucy_Architecture*
(*LUCY_Schema_Architecture_t)(lucy_Schema* self);

typedef void
(*LUCY_Schema_Spec_Field_t)(lucy_Schema* self, cfish_String* name, lucy_FieldType* type);

typedef lucy_FieldType*
(*LUCY_Schema_Fetch_Type_t)(lucy_Schema* self, cfish_String* field);

typedef lucy_Analyzer*
(*LUCY_Schema_Fetch_Analyzer_t)(lucy_Schema* self, cfish_String* field);

typedef lucy_Similarity*
(*LUCY_Schema_Fetch_Sim_t)(lucy_Schema* self, cfish_String* field);

typedef uint32_t
(*LUCY_Schema_Num_Fields_t)(lucy_Schema* self);

typedef cfish_Vector*
(*LUCY_Schema_All_Fields_t)(lucy_Schema* self);

typedef lucy_Architecture*
(*LUCY_Schema_Get_Architecture_t)(lucy_Schema* self);

typedef lucy_Similarity*
(*LUCY_Schema_Get_Similarity_t)(lucy_Schema* self);

typedef cfish_Hash*
(*LUCY_Schema_Dump_t)(lucy_Schema* self);

typedef lucy_Schema*
(*LUCY_Schema_Load_t)(lucy_Schema* self, cfish_Obj* dump);

typedef void
(*LUCY_Schema_Eat_t)(lucy_Schema* self, lucy_Schema* other);

typedef void
(*LUCY_Schema_Write_t)(lucy_Schema* self, lucy_Folder* folder, cfish_String* filename);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_Schema_get_class(lucy_Schema *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_Schema_get_class_name(lucy_Schema *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_Schema_is_a(lucy_Schema *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_Schema_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_Schema_To_Host(lucy_Schema* self, void* vcache) {
    const LUCY_Schema_To_Host_t method = (LUCY_Schema_To_Host_t)cfish_obj_method(self, LUCY_Schema_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_Schema_Clone(lucy_Schema* self) {
    const LUCY_Schema_Clone_t method = (LUCY_Schema_Clone_t)cfish_obj_method(self, LUCY_Schema_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_Schema_Equals(lucy_Schema* self, cfish_Obj* other) {
    const LUCY_Schema_Equals_t method = (LUCY_Schema_Equals_t)cfish_obj_method(self, LUCY_Schema_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_Schema_Compare_To(lucy_Schema* self, cfish_Obj* other) {
    const LUCY_Schema_Compare_To_t method = (LUCY_Schema_Compare_To_t)cfish_obj_method(self, LUCY_Schema_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_Schema_Destroy(lucy_Schema* self) {
    const LUCY_Schema_Destroy_t method = (LUCY_Schema_Destroy_t)cfish_obj_method(self, LUCY_Schema_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Schema_To_String(lucy_Schema* self) {
    const LUCY_Schema_To_String_t method = (LUCY_Schema_To_String_t)cfish_obj_method(self, LUCY_Schema_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_Architecture_OFFSET;
static CFISH_INLINE lucy_Architecture*
LUCY_Schema_Architecture(lucy_Schema* self) {
    const LUCY_Schema_Architecture_t method = (LUCY_Schema_Architecture_t)cfish_obj_method(self, LUCY_Schema_Architecture_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_Spec_Field_OFFSET;
static CFISH_INLINE void
LUCY_Schema_Spec_Field(lucy_Schema* self, cfish_String* name, lucy_FieldType* type) {
    const LUCY_Schema_Spec_Field_t method = (LUCY_Schema_Spec_Field_t)cfish_obj_method(self, LUCY_Schema_Spec_Field_OFFSET);
    method(self, name, type);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_Fetch_Type_OFFSET;
static CFISH_INLINE lucy_FieldType*
LUCY_Schema_Fetch_Type(lucy_Schema* self, cfish_String* field) {
    const LUCY_Schema_Fetch_Type_t method = (LUCY_Schema_Fetch_Type_t)cfish_obj_method(self, LUCY_Schema_Fetch_Type_OFFSET);
    return method(self, field);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_Fetch_Analyzer_OFFSET;
static CFISH_INLINE lucy_Analyzer*
LUCY_Schema_Fetch_Analyzer(lucy_Schema* self, cfish_String* field) {
    const LUCY_Schema_Fetch_Analyzer_t method = (LUCY_Schema_Fetch_Analyzer_t)cfish_obj_method(self, LUCY_Schema_Fetch_Analyzer_OFFSET);
    return method(self, field);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_Fetch_Sim_OFFSET;
static CFISH_INLINE lucy_Similarity*
LUCY_Schema_Fetch_Sim(lucy_Schema* self, cfish_String* field) {
    const LUCY_Schema_Fetch_Sim_t method = (LUCY_Schema_Fetch_Sim_t)cfish_obj_method(self, LUCY_Schema_Fetch_Sim_OFFSET);
    return method(self, field);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_Num_Fields_OFFSET;
static CFISH_INLINE uint32_t
LUCY_Schema_Num_Fields(lucy_Schema* self) {
    const LUCY_Schema_Num_Fields_t method = (LUCY_Schema_Num_Fields_t)cfish_obj_method(self, LUCY_Schema_Num_Fields_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_All_Fields_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_Schema_All_Fields(lucy_Schema* self) {
    const LUCY_Schema_All_Fields_t method = (LUCY_Schema_All_Fields_t)cfish_obj_method(self, LUCY_Schema_All_Fields_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_Get_Architecture_OFFSET;
static CFISH_INLINE lucy_Architecture*
LUCY_Schema_Get_Architecture(lucy_Schema* self) {
    const LUCY_Schema_Get_Architecture_t method = (LUCY_Schema_Get_Architecture_t)cfish_obj_method(self, LUCY_Schema_Get_Architecture_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_Get_Similarity_OFFSET;
static CFISH_INLINE lucy_Similarity*
LUCY_Schema_Get_Similarity(lucy_Schema* self) {
    const LUCY_Schema_Get_Similarity_t method = (LUCY_Schema_Get_Similarity_t)cfish_obj_method(self, LUCY_Schema_Get_Similarity_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_Dump_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_Schema_Dump(lucy_Schema* self) {
    const LUCY_Schema_Dump_t method = (LUCY_Schema_Dump_t)cfish_obj_method(self, LUCY_Schema_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_Load_OFFSET;
static CFISH_INLINE lucy_Schema*
LUCY_Schema_Load(lucy_Schema* self, cfish_Obj* dump) {
    const LUCY_Schema_Load_t method = (LUCY_Schema_Load_t)cfish_obj_method(self, LUCY_Schema_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_Eat_OFFSET;
static CFISH_INLINE void
LUCY_Schema_Eat(lucy_Schema* self, lucy_Schema* other) {
    const LUCY_Schema_Eat_t method = (LUCY_Schema_Eat_t)cfish_obj_method(self, LUCY_Schema_Eat_OFFSET);
    method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Schema_Write_OFFSET;
static CFISH_INLINE void
LUCY_Schema_Write(lucy_Schema* self, lucy_Folder* folder, cfish_String* filename) {
    const LUCY_Schema_Write_t method = (LUCY_Schema_Write_t)cfish_obj_method(self, LUCY_Schema_Write_OFFSET);
    method(self, folder, filename);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_Schema_Architecture_OVERRIDE NULL
#define Lucy_Schema_Spec_Field_OVERRIDE NULL
#define Lucy_Schema_Fetch_Type_OVERRIDE NULL
#define Lucy_Schema_Fetch_Analyzer_OVERRIDE NULL
#define Lucy_Schema_Fetch_Sim_OVERRIDE NULL
#define Lucy_Schema_Num_Fields_OVERRIDE NULL
#define Lucy_Schema_All_Fields_OVERRIDE NULL
#define Lucy_Schema_Get_Architecture_OVERRIDE NULL
#define Lucy_Schema_Get_Similarity_OVERRIDE NULL
#define Lucy_Schema_Dump_OVERRIDE NULL
#define Lucy_Schema_Load_OVERRIDE NULL
#define Lucy_Schema_Eat_OVERRIDE NULL
#define Lucy_Schema_Write_OVERRIDE NULL
#else
lucy_Architecture*
Lucy_Schema_Architecture_OVERRIDE(lucy_Schema* self);
void
Lucy_Schema_Spec_Field_OVERRIDE(lucy_Schema* self, cfish_String* name, lucy_FieldType* type);
lucy_FieldType*
Lucy_Schema_Fetch_Type_OVERRIDE(lucy_Schema* self, cfish_String* field);
lucy_Analyzer*
Lucy_Schema_Fetch_Analyzer_OVERRIDE(lucy_Schema* self, cfish_String* field);
lucy_Similarity*
Lucy_Schema_Fetch_Sim_OVERRIDE(lucy_Schema* self, cfish_String* field);
uint32_t
Lucy_Schema_Num_Fields_OVERRIDE(lucy_Schema* self);
cfish_Vector*
Lucy_Schema_All_Fields_OVERRIDE(lucy_Schema* self);
lucy_Architecture*
Lucy_Schema_Get_Architecture_OVERRIDE(lucy_Schema* self);
lucy_Similarity*
Lucy_Schema_Get_Similarity_OVERRIDE(lucy_Schema* self);
cfish_Hash*
Lucy_Schema_Dump_OVERRIDE(lucy_Schema* self);
lucy_Schema*
Lucy_Schema_Load_OVERRIDE(lucy_Schema* self, cfish_Obj* dump);
void
Lucy_Schema_Eat_OVERRIDE(lucy_Schema* self, lucy_Schema* other);
void
Lucy_Schema_Write_OVERRIDE(lucy_Schema* self, lucy_Folder* folder, cfish_String* filename);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define Schema lucy_Schema
  #define SCHEMA LUCY_SCHEMA
  #define Schema_new lucy_Schema_new
  #define Schema_init lucy_Schema_init
  #define Schema_get_class lucy_Schema_get_class
  #define Schema_get_class_name lucy_Schema_get_class_name
  #define Schema_is_a lucy_Schema_is_a
  #define Schema_Architecture_IMP LUCY_Schema_Architecture_IMP
  #define Schema_Spec_Field_IMP LUCY_Schema_Spec_Field_IMP
  #define Schema_Fetch_Type_IMP LUCY_Schema_Fetch_Type_IMP
  #define Schema_Fetch_Analyzer_IMP LUCY_Schema_Fetch_Analyzer_IMP
  #define Schema_Fetch_Sim_IMP LUCY_Schema_Fetch_Sim_IMP
  #define Schema_Num_Fields_IMP LUCY_Schema_Num_Fields_IMP
  #define Schema_All_Fields_IMP LUCY_Schema_All_Fields_IMP
  #define Schema_Get_Architecture_IMP LUCY_Schema_Get_Architecture_IMP
  #define Schema_Get_Similarity_IMP LUCY_Schema_Get_Similarity_IMP
  #define Schema_Dump_IMP LUCY_Schema_Dump_IMP
  #define Schema_Load_IMP LUCY_Schema_Load_IMP
  #define Schema_Eat_IMP LUCY_Schema_Eat_IMP
  #define Schema_Write_IMP LUCY_Schema_Write_IMP
  #define Schema_Destroy_IMP LUCY_Schema_Destroy_IMP
  #define Schema_To_Host LUCY_Schema_To_Host
  #define Schema_To_Host_t LUCY_Schema_To_Host_t
  #define Schema_Clone LUCY_Schema_Clone
  #define Schema_Clone_t LUCY_Schema_Clone_t
  #define Schema_Equals LUCY_Schema_Equals
  #define Schema_Equals_t LUCY_Schema_Equals_t
  #define Schema_Compare_To LUCY_Schema_Compare_To
  #define Schema_Compare_To_t LUCY_Schema_Compare_To_t
  #define Schema_Destroy LUCY_Schema_Destroy
  #define Schema_Destroy_t LUCY_Schema_Destroy_t
  #define Schema_To_String LUCY_Schema_To_String
  #define Schema_To_String_t LUCY_Schema_To_String_t
  #define Schema_Architecture LUCY_Schema_Architecture
  #define Schema_Architecture_t LUCY_Schema_Architecture_t
  #define Schema_Spec_Field LUCY_Schema_Spec_Field
  #define Schema_Spec_Field_t LUCY_Schema_Spec_Field_t
  #define Schema_Fetch_Type LUCY_Schema_Fetch_Type
  #define Schema_Fetch_Type_t LUCY_Schema_Fetch_Type_t
  #define Schema_Fetch_Analyzer LUCY_Schema_Fetch_Analyzer
  #define Schema_Fetch_Analyzer_t LUCY_Schema_Fetch_Analyzer_t
  #define Schema_Fetch_Sim LUCY_Schema_Fetch_Sim
  #define Schema_Fetch_Sim_t LUCY_Schema_Fetch_Sim_t
  #define Schema_Num_Fields LUCY_Schema_Num_Fields
  #define Schema_Num_Fields_t LUCY_Schema_Num_Fields_t
  #define Schema_All_Fields LUCY_Schema_All_Fields
  #define Schema_All_Fields_t LUCY_Schema_All_Fields_t
  #define Schema_Get_Architecture LUCY_Schema_Get_Architecture
  #define Schema_Get_Architecture_t LUCY_Schema_Get_Architecture_t
  #define Schema_Get_Similarity LUCY_Schema_Get_Similarity
  #define Schema_Get_Similarity_t LUCY_Schema_Get_Similarity_t
  #define Schema_Dump LUCY_Schema_Dump
  #define Schema_Dump_t LUCY_Schema_Dump_t
  #define Schema_Load LUCY_Schema_Load
  #define Schema_Load_t LUCY_Schema_Load_t
  #define Schema_Eat LUCY_Schema_Eat
  #define Schema_Eat_t LUCY_Schema_Eat_t
  #define Schema_Write LUCY_Schema_Write
  #define Schema_Write_t LUCY_Schema_Write_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_PLAN_SCHEMA */




