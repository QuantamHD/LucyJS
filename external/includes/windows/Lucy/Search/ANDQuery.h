/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_SEARCH_ANDQUERY
#define H_LUCY_SEARCH_ANDQUERY 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy\Search\PolyQuery.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_ANDQUERY
extern uint32_t lucy_ANDQuery_IVARS_OFFSET;
typedef struct lucy_ANDQueryIVARS lucy_ANDQueryIVARS;
static CFISH_INLINE lucy_ANDQueryIVARS*
lucy_ANDQuery_IVARS(lucy_ANDQuery *self) {
   char *ptr = (char*)self + lucy_ANDQuery_IVARS_OFFSET;
   return (lucy_ANDQueryIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define ANDQueryIVARS lucy_ANDQueryIVARS
  #define ANDQuery_IVARS lucy_ANDQuery_IVARS
#endif

struct lucy_ANDQueryIVARS {
    float boost;
    cfish_Vector* children;
};

#endif /* C_LUCY_ANDQUERY */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_ANDQuery*
lucy_ANDQuery_new(cfish_Vector* children);

LUCY_VISIBLE lucy_ANDQuery*
lucy_ANDQuery_init(lucy_ANDQuery* self, cfish_Vector* children);

lucy_Compiler*
LUCY_ANDQuery_Make_Compiler_IMP(lucy_ANDQuery* self, lucy_Searcher* searcher, float boost, bool subordinate);

cfish_String*
LUCY_ANDQuery_To_String_IMP(lucy_ANDQuery* self);

bool
LUCY_ANDQuery_Equals_IMP(lucy_ANDQuery* self, cfish_Obj* other);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_ANDQuery_To_Host_t)(lucy_ANDQuery* self, void* vcache);

typedef cfish_Obj*
(*LUCY_ANDQuery_Clone_t)(lucy_ANDQuery* self);

typedef bool
(*LUCY_ANDQuery_Equals_t)(lucy_ANDQuery* self, cfish_Obj* other);

typedef int32_t
(*LUCY_ANDQuery_Compare_To_t)(lucy_ANDQuery* self, cfish_Obj* other);

typedef void
(*LUCY_ANDQuery_Destroy_t)(lucy_ANDQuery* self);

typedef cfish_String*
(*LUCY_ANDQuery_To_String_t)(lucy_ANDQuery* self);

typedef lucy_Compiler*
(*LUCY_ANDQuery_Make_Compiler_t)(lucy_ANDQuery* self, lucy_Searcher* searcher, float boost, bool subordinate);

typedef void
(*LUCY_ANDQuery_Set_Boost_t)(lucy_ANDQuery* self, float boost);

typedef float
(*LUCY_ANDQuery_Get_Boost_t)(lucy_ANDQuery* self);

typedef void
(*LUCY_ANDQuery_Serialize_t)(lucy_ANDQuery* self, lucy_OutStream* outstream);

typedef lucy_PolyQuery*
(*LUCY_ANDQuery_Deserialize_t)(lucy_ANDQuery* self, lucy_InStream* instream);

typedef cfish_Obj*
(*LUCY_ANDQuery_Dump_t)(lucy_ANDQuery* self);

typedef cfish_Obj*
(*LUCY_ANDQuery_Load_t)(lucy_ANDQuery* self, cfish_Obj* dump);

typedef void
(*LUCY_ANDQuery_Add_Child_t)(lucy_ANDQuery* self, lucy_Query* query);

typedef void
(*LUCY_ANDQuery_Set_Children_t)(lucy_ANDQuery* self, cfish_Vector* children);

typedef cfish_Vector*
(*LUCY_ANDQuery_Get_Children_t)(lucy_ANDQuery* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_ANDQuery_get_class(lucy_ANDQuery *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_ANDQuery_get_class_name(lucy_ANDQuery *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_ANDQuery_is_a(lucy_ANDQuery *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_ANDQuery_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_ANDQuery_To_Host(lucy_ANDQuery* self, void* vcache) {
    const LUCY_ANDQuery_To_Host_t method = (LUCY_ANDQuery_To_Host_t)cfish_obj_method(self, LUCY_ANDQuery_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDQuery_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_ANDQuery_Clone(lucy_ANDQuery* self) {
    const LUCY_ANDQuery_Clone_t method = (LUCY_ANDQuery_Clone_t)cfish_obj_method(self, LUCY_ANDQuery_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDQuery_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_ANDQuery_Equals(lucy_ANDQuery* self, cfish_Obj* other) {
    const LUCY_ANDQuery_Equals_t method = (LUCY_ANDQuery_Equals_t)cfish_obj_method(self, LUCY_ANDQuery_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDQuery_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_ANDQuery_Compare_To(lucy_ANDQuery* self, cfish_Obj* other) {
    const LUCY_ANDQuery_Compare_To_t method = (LUCY_ANDQuery_Compare_To_t)cfish_obj_method(self, LUCY_ANDQuery_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDQuery_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_ANDQuery_Destroy(lucy_ANDQuery* self) {
    const LUCY_ANDQuery_Destroy_t method = (LUCY_ANDQuery_Destroy_t)cfish_obj_method(self, LUCY_ANDQuery_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDQuery_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_ANDQuery_To_String(lucy_ANDQuery* self) {
    const LUCY_ANDQuery_To_String_t method = (LUCY_ANDQuery_To_String_t)cfish_obj_method(self, LUCY_ANDQuery_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDQuery_Make_Compiler_OFFSET;
static CFISH_INLINE lucy_Compiler*
LUCY_ANDQuery_Make_Compiler(lucy_ANDQuery* self, lucy_Searcher* searcher, float boost, bool subordinate) {
    const LUCY_ANDQuery_Make_Compiler_t method = (LUCY_ANDQuery_Make_Compiler_t)cfish_obj_method(self, LUCY_ANDQuery_Make_Compiler_OFFSET);
    return method(self, searcher, boost, subordinate);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDQuery_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_ANDQuery_Set_Boost(lucy_ANDQuery* self, float boost) {
    const LUCY_ANDQuery_Set_Boost_t method = (LUCY_ANDQuery_Set_Boost_t)cfish_obj_method(self, LUCY_ANDQuery_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDQuery_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_ANDQuery_Get_Boost(lucy_ANDQuery* self) {
    const LUCY_ANDQuery_Get_Boost_t method = (LUCY_ANDQuery_Get_Boost_t)cfish_obj_method(self, LUCY_ANDQuery_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDQuery_Serialize_OFFSET;
static CFISH_INLINE void
LUCY_ANDQuery_Serialize(lucy_ANDQuery* self, lucy_OutStream* outstream) {
    const LUCY_ANDQuery_Serialize_t method = (LUCY_ANDQuery_Serialize_t)cfish_obj_method(self, LUCY_ANDQuery_Serialize_OFFSET);
    method(self, outstream);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDQuery_Deserialize_OFFSET;
static CFISH_INLINE lucy_PolyQuery*
LUCY_ANDQuery_Deserialize(lucy_ANDQuery* self, lucy_InStream* instream) {
    const LUCY_ANDQuery_Deserialize_t method = (LUCY_ANDQuery_Deserialize_t)cfish_obj_method(self, LUCY_ANDQuery_Deserialize_OFFSET);
    return method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDQuery_Dump_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_ANDQuery_Dump(lucy_ANDQuery* self) {
    const LUCY_ANDQuery_Dump_t method = (LUCY_ANDQuery_Dump_t)cfish_obj_method(self, LUCY_ANDQuery_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDQuery_Load_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_ANDQuery_Load(lucy_ANDQuery* self, cfish_Obj* dump) {
    const LUCY_ANDQuery_Load_t method = (LUCY_ANDQuery_Load_t)cfish_obj_method(self, LUCY_ANDQuery_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDQuery_Add_Child_OFFSET;
static CFISH_INLINE void
LUCY_ANDQuery_Add_Child(lucy_ANDQuery* self, lucy_Query* query) {
    const LUCY_ANDQuery_Add_Child_t method = (LUCY_ANDQuery_Add_Child_t)cfish_obj_method(self, LUCY_ANDQuery_Add_Child_OFFSET);
    method(self, query);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDQuery_Set_Children_OFFSET;
static CFISH_INLINE void
LUCY_ANDQuery_Set_Children(lucy_ANDQuery* self, cfish_Vector* children) {
    const LUCY_ANDQuery_Set_Children_t method = (LUCY_ANDQuery_Set_Children_t)cfish_obj_method(self, LUCY_ANDQuery_Set_Children_OFFSET);
    method(self, children);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDQuery_Get_Children_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_ANDQuery_Get_Children(lucy_ANDQuery* self) {
    const LUCY_ANDQuery_Get_Children_t method = (LUCY_ANDQuery_Get_Children_t)cfish_obj_method(self, LUCY_ANDQuery_Get_Children_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define ANDQuery lucy_ANDQuery
  #define ANDQUERY LUCY_ANDQUERY
  #define ANDQuery_new lucy_ANDQuery_new
  #define ANDQuery_init lucy_ANDQuery_init
  #define ANDQuery_get_class lucy_ANDQuery_get_class
  #define ANDQuery_get_class_name lucy_ANDQuery_get_class_name
  #define ANDQuery_is_a lucy_ANDQuery_is_a
  #define ANDQuery_Make_Compiler_IMP LUCY_ANDQuery_Make_Compiler_IMP
  #define ANDQuery_To_String_IMP LUCY_ANDQuery_To_String_IMP
  #define ANDQuery_Equals_IMP LUCY_ANDQuery_Equals_IMP
  #define ANDQuery_To_Host LUCY_ANDQuery_To_Host
  #define ANDQuery_To_Host_t LUCY_ANDQuery_To_Host_t
  #define ANDQuery_Clone LUCY_ANDQuery_Clone
  #define ANDQuery_Clone_t LUCY_ANDQuery_Clone_t
  #define ANDQuery_Equals LUCY_ANDQuery_Equals
  #define ANDQuery_Equals_t LUCY_ANDQuery_Equals_t
  #define ANDQuery_Compare_To LUCY_ANDQuery_Compare_To
  #define ANDQuery_Compare_To_t LUCY_ANDQuery_Compare_To_t
  #define ANDQuery_Destroy LUCY_ANDQuery_Destroy
  #define ANDQuery_Destroy_t LUCY_ANDQuery_Destroy_t
  #define ANDQuery_To_String LUCY_ANDQuery_To_String
  #define ANDQuery_To_String_t LUCY_ANDQuery_To_String_t
  #define ANDQuery_Make_Compiler LUCY_ANDQuery_Make_Compiler
  #define ANDQuery_Make_Compiler_t LUCY_ANDQuery_Make_Compiler_t
  #define ANDQuery_Set_Boost LUCY_ANDQuery_Set_Boost
  #define ANDQuery_Set_Boost_t LUCY_ANDQuery_Set_Boost_t
  #define ANDQuery_Get_Boost LUCY_ANDQuery_Get_Boost
  #define ANDQuery_Get_Boost_t LUCY_ANDQuery_Get_Boost_t
  #define ANDQuery_Serialize LUCY_ANDQuery_Serialize
  #define ANDQuery_Serialize_t LUCY_ANDQuery_Serialize_t
  #define ANDQuery_Deserialize LUCY_ANDQuery_Deserialize
  #define ANDQuery_Deserialize_t LUCY_ANDQuery_Deserialize_t
  #define ANDQuery_Dump LUCY_ANDQuery_Dump
  #define ANDQuery_Dump_t LUCY_ANDQuery_Dump_t
  #define ANDQuery_Load LUCY_ANDQuery_Load
  #define ANDQuery_Load_t LUCY_ANDQuery_Load_t
  #define ANDQuery_Add_Child LUCY_ANDQuery_Add_Child
  #define ANDQuery_Add_Child_t LUCY_ANDQuery_Add_Child_t
  #define ANDQuery_Set_Children LUCY_ANDQuery_Set_Children
  #define ANDQuery_Set_Children_t LUCY_ANDQuery_Set_Children_t
  #define ANDQuery_Get_Children LUCY_ANDQuery_Get_Children
  #define ANDQuery_Get_Children_t LUCY_ANDQuery_Get_Children_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy\Search\PolyQuery.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_ANDCOMPILER
extern uint32_t lucy_ANDCompiler_IVARS_OFFSET;
typedef struct lucy_ANDCompilerIVARS lucy_ANDCompilerIVARS;
static CFISH_INLINE lucy_ANDCompilerIVARS*
lucy_ANDCompiler_IVARS(lucy_ANDCompiler *self) {
   char *ptr = (char*)self + lucy_ANDCompiler_IVARS_OFFSET;
   return (lucy_ANDCompilerIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define ANDCompilerIVARS lucy_ANDCompilerIVARS
  #define ANDCompiler_IVARS lucy_ANDCompiler_IVARS
#endif

struct lucy_ANDCompilerIVARS {
    float boost;
    lucy_Query* parent;
    lucy_Similarity* sim;
    cfish_Vector* children;
};

#endif /* C_LUCY_ANDCOMPILER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_ANDCompiler*
lucy_ANDCompiler_new(lucy_ANDQuery* parent, lucy_Searcher* searcher, float boost);

LUCY_VISIBLE lucy_ANDCompiler*
lucy_ANDCompiler_init(lucy_ANDCompiler* self, lucy_ANDQuery* parent, lucy_Searcher* searcher, float boost);

lucy_Matcher*
LUCY_ANDCompiler_Make_Matcher_IMP(lucy_ANDCompiler* self, lucy_SegReader* reader, bool need_score);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_ANDCompiler_To_Host_t)(lucy_ANDCompiler* self, void* vcache);

typedef cfish_Obj*
(*LUCY_ANDCompiler_Clone_t)(lucy_ANDCompiler* self);

typedef bool
(*LUCY_ANDCompiler_Equals_t)(lucy_ANDCompiler* self, cfish_Obj* other);

typedef int32_t
(*LUCY_ANDCompiler_Compare_To_t)(lucy_ANDCompiler* self, cfish_Obj* other);

typedef void
(*LUCY_ANDCompiler_Destroy_t)(lucy_ANDCompiler* self);

typedef cfish_String*
(*LUCY_ANDCompiler_To_String_t)(lucy_ANDCompiler* self);

typedef lucy_Compiler*
(*LUCY_ANDCompiler_Make_Compiler_t)(lucy_ANDCompiler* self, lucy_Searcher* searcher, float boost, bool subordinate);

typedef void
(*LUCY_ANDCompiler_Set_Boost_t)(lucy_ANDCompiler* self, float boost);

typedef float
(*LUCY_ANDCompiler_Get_Boost_t)(lucy_ANDCompiler* self);

typedef void
(*LUCY_ANDCompiler_Serialize_t)(lucy_ANDCompiler* self, lucy_OutStream* outstream);

typedef lucy_PolyCompiler*
(*LUCY_ANDCompiler_Deserialize_t)(lucy_ANDCompiler* self, lucy_InStream* instream);

typedef cfish_Obj*
(*LUCY_ANDCompiler_Dump_t)(lucy_ANDCompiler* self);

typedef cfish_Obj*
(*LUCY_ANDCompiler_Load_t)(lucy_ANDCompiler* self, cfish_Obj* dump);

typedef lucy_Matcher*
(*LUCY_ANDCompiler_Make_Matcher_t)(lucy_ANDCompiler* self, lucy_SegReader* reader, bool need_score);

typedef float
(*LUCY_ANDCompiler_Get_Weight_t)(lucy_ANDCompiler* self);

typedef lucy_Similarity*
(*LUCY_ANDCompiler_Get_Similarity_t)(lucy_ANDCompiler* self);

typedef lucy_Query*
(*LUCY_ANDCompiler_Get_Parent_t)(lucy_ANDCompiler* self);

typedef float
(*LUCY_ANDCompiler_Sum_Of_Squared_Weights_t)(lucy_ANDCompiler* self);

typedef void
(*LUCY_ANDCompiler_Apply_Norm_Factor_t)(lucy_ANDCompiler* self, float factor);

typedef void
(*LUCY_ANDCompiler_Normalize_t)(lucy_ANDCompiler* self);

typedef cfish_Vector*
(*LUCY_ANDCompiler_Highlight_Spans_t)(lucy_ANDCompiler* self, lucy_Searcher* searcher, lucy_DocVector* doc_vec, cfish_String* field);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_ANDCompiler_get_class(lucy_ANDCompiler *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_ANDCompiler_get_class_name(lucy_ANDCompiler *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_ANDCompiler_is_a(lucy_ANDCompiler *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_ANDCompiler_To_Host(lucy_ANDCompiler* self, void* vcache) {
    const LUCY_ANDCompiler_To_Host_t method = (LUCY_ANDCompiler_To_Host_t)cfish_obj_method(self, LUCY_ANDCompiler_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_ANDCompiler_Clone(lucy_ANDCompiler* self) {
    const LUCY_ANDCompiler_Clone_t method = (LUCY_ANDCompiler_Clone_t)cfish_obj_method(self, LUCY_ANDCompiler_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_ANDCompiler_Equals(lucy_ANDCompiler* self, cfish_Obj* other) {
    const LUCY_ANDCompiler_Equals_t method = (LUCY_ANDCompiler_Equals_t)cfish_obj_method(self, LUCY_ANDCompiler_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_ANDCompiler_Compare_To(lucy_ANDCompiler* self, cfish_Obj* other) {
    const LUCY_ANDCompiler_Compare_To_t method = (LUCY_ANDCompiler_Compare_To_t)cfish_obj_method(self, LUCY_ANDCompiler_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_ANDCompiler_Destroy(lucy_ANDCompiler* self) {
    const LUCY_ANDCompiler_Destroy_t method = (LUCY_ANDCompiler_Destroy_t)cfish_obj_method(self, LUCY_ANDCompiler_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_ANDCompiler_To_String(lucy_ANDCompiler* self) {
    const LUCY_ANDCompiler_To_String_t method = (LUCY_ANDCompiler_To_String_t)cfish_obj_method(self, LUCY_ANDCompiler_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Make_Compiler_OFFSET;
static CFISH_INLINE lucy_Compiler*
LUCY_ANDCompiler_Make_Compiler(lucy_ANDCompiler* self, lucy_Searcher* searcher, float boost, bool subordinate) {
    const LUCY_ANDCompiler_Make_Compiler_t method = (LUCY_ANDCompiler_Make_Compiler_t)cfish_obj_method(self, LUCY_ANDCompiler_Make_Compiler_OFFSET);
    return method(self, searcher, boost, subordinate);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_ANDCompiler_Set_Boost(lucy_ANDCompiler* self, float boost) {
    const LUCY_ANDCompiler_Set_Boost_t method = (LUCY_ANDCompiler_Set_Boost_t)cfish_obj_method(self, LUCY_ANDCompiler_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_ANDCompiler_Get_Boost(lucy_ANDCompiler* self) {
    const LUCY_ANDCompiler_Get_Boost_t method = (LUCY_ANDCompiler_Get_Boost_t)cfish_obj_method(self, LUCY_ANDCompiler_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Serialize_OFFSET;
static CFISH_INLINE void
LUCY_ANDCompiler_Serialize(lucy_ANDCompiler* self, lucy_OutStream* outstream) {
    const LUCY_ANDCompiler_Serialize_t method = (LUCY_ANDCompiler_Serialize_t)cfish_obj_method(self, LUCY_ANDCompiler_Serialize_OFFSET);
    method(self, outstream);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Deserialize_OFFSET;
static CFISH_INLINE lucy_PolyCompiler*
LUCY_ANDCompiler_Deserialize(lucy_ANDCompiler* self, lucy_InStream* instream) {
    const LUCY_ANDCompiler_Deserialize_t method = (LUCY_ANDCompiler_Deserialize_t)cfish_obj_method(self, LUCY_ANDCompiler_Deserialize_OFFSET);
    return method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Dump_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_ANDCompiler_Dump(lucy_ANDCompiler* self) {
    const LUCY_ANDCompiler_Dump_t method = (LUCY_ANDCompiler_Dump_t)cfish_obj_method(self, LUCY_ANDCompiler_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Load_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_ANDCompiler_Load(lucy_ANDCompiler* self, cfish_Obj* dump) {
    const LUCY_ANDCompiler_Load_t method = (LUCY_ANDCompiler_Load_t)cfish_obj_method(self, LUCY_ANDCompiler_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Make_Matcher_OFFSET;
static CFISH_INLINE lucy_Matcher*
LUCY_ANDCompiler_Make_Matcher(lucy_ANDCompiler* self, lucy_SegReader* reader, bool need_score) {
    const LUCY_ANDCompiler_Make_Matcher_t method = (LUCY_ANDCompiler_Make_Matcher_t)cfish_obj_method(self, LUCY_ANDCompiler_Make_Matcher_OFFSET);
    return method(self, reader, need_score);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Get_Weight_OFFSET;
static CFISH_INLINE float
LUCY_ANDCompiler_Get_Weight(lucy_ANDCompiler* self) {
    const LUCY_ANDCompiler_Get_Weight_t method = (LUCY_ANDCompiler_Get_Weight_t)cfish_obj_method(self, LUCY_ANDCompiler_Get_Weight_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Get_Similarity_OFFSET;
static CFISH_INLINE lucy_Similarity*
LUCY_ANDCompiler_Get_Similarity(lucy_ANDCompiler* self) {
    const LUCY_ANDCompiler_Get_Similarity_t method = (LUCY_ANDCompiler_Get_Similarity_t)cfish_obj_method(self, LUCY_ANDCompiler_Get_Similarity_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Get_Parent_OFFSET;
static CFISH_INLINE lucy_Query*
LUCY_ANDCompiler_Get_Parent(lucy_ANDCompiler* self) {
    const LUCY_ANDCompiler_Get_Parent_t method = (LUCY_ANDCompiler_Get_Parent_t)cfish_obj_method(self, LUCY_ANDCompiler_Get_Parent_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Sum_Of_Squared_Weights_OFFSET;
static CFISH_INLINE float
LUCY_ANDCompiler_Sum_Of_Squared_Weights(lucy_ANDCompiler* self) {
    const LUCY_ANDCompiler_Sum_Of_Squared_Weights_t method = (LUCY_ANDCompiler_Sum_Of_Squared_Weights_t)cfish_obj_method(self, LUCY_ANDCompiler_Sum_Of_Squared_Weights_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Apply_Norm_Factor_OFFSET;
static CFISH_INLINE void
LUCY_ANDCompiler_Apply_Norm_Factor(lucy_ANDCompiler* self, float factor) {
    const LUCY_ANDCompiler_Apply_Norm_Factor_t method = (LUCY_ANDCompiler_Apply_Norm_Factor_t)cfish_obj_method(self, LUCY_ANDCompiler_Apply_Norm_Factor_OFFSET);
    method(self, factor);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Normalize_OFFSET;
static CFISH_INLINE void
LUCY_ANDCompiler_Normalize(lucy_ANDCompiler* self) {
    const LUCY_ANDCompiler_Normalize_t method = (LUCY_ANDCompiler_Normalize_t)cfish_obj_method(self, LUCY_ANDCompiler_Normalize_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_ANDCompiler_Highlight_Spans_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_ANDCompiler_Highlight_Spans(lucy_ANDCompiler* self, lucy_Searcher* searcher, lucy_DocVector* doc_vec, cfish_String* field) {
    const LUCY_ANDCompiler_Highlight_Spans_t method = (LUCY_ANDCompiler_Highlight_Spans_t)cfish_obj_method(self, LUCY_ANDCompiler_Highlight_Spans_OFFSET);
    return method(self, searcher, doc_vec, field);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define ANDCompiler lucy_ANDCompiler
  #define ANDCOMPILER LUCY_ANDCOMPILER
  #define ANDCompiler_new lucy_ANDCompiler_new
  #define ANDCompiler_init lucy_ANDCompiler_init
  #define ANDCompiler_get_class lucy_ANDCompiler_get_class
  #define ANDCompiler_get_class_name lucy_ANDCompiler_get_class_name
  #define ANDCompiler_is_a lucy_ANDCompiler_is_a
  #define ANDCompiler_Make_Matcher_IMP LUCY_ANDCompiler_Make_Matcher_IMP
  #define ANDCompiler_To_Host LUCY_ANDCompiler_To_Host
  #define ANDCompiler_To_Host_t LUCY_ANDCompiler_To_Host_t
  #define ANDCompiler_Clone LUCY_ANDCompiler_Clone
  #define ANDCompiler_Clone_t LUCY_ANDCompiler_Clone_t
  #define ANDCompiler_Equals LUCY_ANDCompiler_Equals
  #define ANDCompiler_Equals_t LUCY_ANDCompiler_Equals_t
  #define ANDCompiler_Compare_To LUCY_ANDCompiler_Compare_To
  #define ANDCompiler_Compare_To_t LUCY_ANDCompiler_Compare_To_t
  #define ANDCompiler_Destroy LUCY_ANDCompiler_Destroy
  #define ANDCompiler_Destroy_t LUCY_ANDCompiler_Destroy_t
  #define ANDCompiler_To_String LUCY_ANDCompiler_To_String
  #define ANDCompiler_To_String_t LUCY_ANDCompiler_To_String_t
  #define ANDCompiler_Make_Compiler LUCY_ANDCompiler_Make_Compiler
  #define ANDCompiler_Make_Compiler_t LUCY_ANDCompiler_Make_Compiler_t
  #define ANDCompiler_Set_Boost LUCY_ANDCompiler_Set_Boost
  #define ANDCompiler_Set_Boost_t LUCY_ANDCompiler_Set_Boost_t
  #define ANDCompiler_Get_Boost LUCY_ANDCompiler_Get_Boost
  #define ANDCompiler_Get_Boost_t LUCY_ANDCompiler_Get_Boost_t
  #define ANDCompiler_Serialize LUCY_ANDCompiler_Serialize
  #define ANDCompiler_Serialize_t LUCY_ANDCompiler_Serialize_t
  #define ANDCompiler_Deserialize LUCY_ANDCompiler_Deserialize
  #define ANDCompiler_Deserialize_t LUCY_ANDCompiler_Deserialize_t
  #define ANDCompiler_Dump LUCY_ANDCompiler_Dump
  #define ANDCompiler_Dump_t LUCY_ANDCompiler_Dump_t
  #define ANDCompiler_Load LUCY_ANDCompiler_Load
  #define ANDCompiler_Load_t LUCY_ANDCompiler_Load_t
  #define ANDCompiler_Make_Matcher LUCY_ANDCompiler_Make_Matcher
  #define ANDCompiler_Make_Matcher_t LUCY_ANDCompiler_Make_Matcher_t
  #define ANDCompiler_Get_Weight LUCY_ANDCompiler_Get_Weight
  #define ANDCompiler_Get_Weight_t LUCY_ANDCompiler_Get_Weight_t
  #define ANDCompiler_Get_Similarity LUCY_ANDCompiler_Get_Similarity
  #define ANDCompiler_Get_Similarity_t LUCY_ANDCompiler_Get_Similarity_t
  #define ANDCompiler_Get_Parent LUCY_ANDCompiler_Get_Parent
  #define ANDCompiler_Get_Parent_t LUCY_ANDCompiler_Get_Parent_t
  #define ANDCompiler_Sum_Of_Squared_Weights LUCY_ANDCompiler_Sum_Of_Squared_Weights
  #define ANDCompiler_Sum_Of_Squared_Weights_t LUCY_ANDCompiler_Sum_Of_Squared_Weights_t
  #define ANDCompiler_Apply_Norm_Factor LUCY_ANDCompiler_Apply_Norm_Factor
  #define ANDCompiler_Apply_Norm_Factor_t LUCY_ANDCompiler_Apply_Norm_Factor_t
  #define ANDCompiler_Normalize LUCY_ANDCompiler_Normalize
  #define ANDCompiler_Normalize_t LUCY_ANDCompiler_Normalize_t
  #define ANDCompiler_Highlight_Spans LUCY_ANDCompiler_Highlight_Spans
  #define ANDCompiler_Highlight_Spans_t LUCY_ANDCompiler_Highlight_Spans_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_SEARCH_ANDQUERY */




