/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_SEARCH_NOTQUERY
#define H_LUCY_SEARCH_NOTQUERY 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy\Search\PolyQuery.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_NOTQUERY
extern uint32_t lucy_NOTQuery_IVARS_OFFSET;
typedef struct lucy_NOTQueryIVARS lucy_NOTQueryIVARS;
static CFISH_INLINE lucy_NOTQueryIVARS*
lucy_NOTQuery_IVARS(lucy_NOTQuery *self) {
   char *ptr = (char*)self + lucy_NOTQuery_IVARS_OFFSET;
   return (lucy_NOTQueryIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define NOTQueryIVARS lucy_NOTQueryIVARS
  #define NOTQuery_IVARS lucy_NOTQuery_IVARS
#endif

struct lucy_NOTQueryIVARS {
    float boost;
    cfish_Vector* children;
};

#endif /* C_LUCY_NOTQUERY */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_NOTQuery*
lucy_NOTQuery_new(lucy_Query* negated_query);

LUCY_VISIBLE lucy_NOTQuery*
lucy_NOTQuery_init(lucy_NOTQuery* self, lucy_Query* negated_query);

lucy_Query*
LUCY_NOTQuery_Get_Negated_Query_IMP(lucy_NOTQuery* self);

void
LUCY_NOTQuery_Set_Negated_Query_IMP(lucy_NOTQuery* self, lucy_Query* negated_query);

lucy_Compiler*
LUCY_NOTQuery_Make_Compiler_IMP(lucy_NOTQuery* self, lucy_Searcher* searcher, float boost, bool subordinate);

cfish_String*
LUCY_NOTQuery_To_String_IMP(lucy_NOTQuery* self);

bool
LUCY_NOTQuery_Equals_IMP(lucy_NOTQuery* self, cfish_Obj* other);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_NOTQuery_To_Host_t)(lucy_NOTQuery* self, void* vcache);

typedef cfish_Obj*
(*LUCY_NOTQuery_Clone_t)(lucy_NOTQuery* self);

typedef bool
(*LUCY_NOTQuery_Equals_t)(lucy_NOTQuery* self, cfish_Obj* other);

typedef int32_t
(*LUCY_NOTQuery_Compare_To_t)(lucy_NOTQuery* self, cfish_Obj* other);

typedef void
(*LUCY_NOTQuery_Destroy_t)(lucy_NOTQuery* self);

typedef cfish_String*
(*LUCY_NOTQuery_To_String_t)(lucy_NOTQuery* self);

typedef lucy_Compiler*
(*LUCY_NOTQuery_Make_Compiler_t)(lucy_NOTQuery* self, lucy_Searcher* searcher, float boost, bool subordinate);

typedef void
(*LUCY_NOTQuery_Set_Boost_t)(lucy_NOTQuery* self, float boost);

typedef float
(*LUCY_NOTQuery_Get_Boost_t)(lucy_NOTQuery* self);

typedef void
(*LUCY_NOTQuery_Serialize_t)(lucy_NOTQuery* self, lucy_OutStream* outstream);

typedef lucy_PolyQuery*
(*LUCY_NOTQuery_Deserialize_t)(lucy_NOTQuery* self, lucy_InStream* instream);

typedef cfish_Obj*
(*LUCY_NOTQuery_Dump_t)(lucy_NOTQuery* self);

typedef cfish_Obj*
(*LUCY_NOTQuery_Load_t)(lucy_NOTQuery* self, cfish_Obj* dump);

typedef void
(*LUCY_NOTQuery_Add_Child_t)(lucy_NOTQuery* self, lucy_Query* query);

typedef void
(*LUCY_NOTQuery_Set_Children_t)(lucy_NOTQuery* self, cfish_Vector* children);

typedef cfish_Vector*
(*LUCY_NOTQuery_Get_Children_t)(lucy_NOTQuery* self);

typedef lucy_Query*
(*LUCY_NOTQuery_Get_Negated_Query_t)(lucy_NOTQuery* self);

typedef void
(*LUCY_NOTQuery_Set_Negated_Query_t)(lucy_NOTQuery* self, lucy_Query* negated_query);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_NOTQuery_get_class(lucy_NOTQuery *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_NOTQuery_get_class_name(lucy_NOTQuery *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_NOTQuery_is_a(lucy_NOTQuery *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_NOTQuery_To_Host(lucy_NOTQuery* self, void* vcache) {
    const LUCY_NOTQuery_To_Host_t method = (LUCY_NOTQuery_To_Host_t)cfish_obj_method(self, LUCY_NOTQuery_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_NOTQuery_Clone(lucy_NOTQuery* self) {
    const LUCY_NOTQuery_Clone_t method = (LUCY_NOTQuery_Clone_t)cfish_obj_method(self, LUCY_NOTQuery_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_NOTQuery_Equals(lucy_NOTQuery* self, cfish_Obj* other) {
    const LUCY_NOTQuery_Equals_t method = (LUCY_NOTQuery_Equals_t)cfish_obj_method(self, LUCY_NOTQuery_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_NOTQuery_Compare_To(lucy_NOTQuery* self, cfish_Obj* other) {
    const LUCY_NOTQuery_Compare_To_t method = (LUCY_NOTQuery_Compare_To_t)cfish_obj_method(self, LUCY_NOTQuery_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_NOTQuery_Destroy(lucy_NOTQuery* self) {
    const LUCY_NOTQuery_Destroy_t method = (LUCY_NOTQuery_Destroy_t)cfish_obj_method(self, LUCY_NOTQuery_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_NOTQuery_To_String(lucy_NOTQuery* self) {
    const LUCY_NOTQuery_To_String_t method = (LUCY_NOTQuery_To_String_t)cfish_obj_method(self, LUCY_NOTQuery_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_Make_Compiler_OFFSET;
static CFISH_INLINE lucy_Compiler*
LUCY_NOTQuery_Make_Compiler(lucy_NOTQuery* self, lucy_Searcher* searcher, float boost, bool subordinate) {
    const LUCY_NOTQuery_Make_Compiler_t method = (LUCY_NOTQuery_Make_Compiler_t)cfish_obj_method(self, LUCY_NOTQuery_Make_Compiler_OFFSET);
    return method(self, searcher, boost, subordinate);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_NOTQuery_Set_Boost(lucy_NOTQuery* self, float boost) {
    const LUCY_NOTQuery_Set_Boost_t method = (LUCY_NOTQuery_Set_Boost_t)cfish_obj_method(self, LUCY_NOTQuery_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_NOTQuery_Get_Boost(lucy_NOTQuery* self) {
    const LUCY_NOTQuery_Get_Boost_t method = (LUCY_NOTQuery_Get_Boost_t)cfish_obj_method(self, LUCY_NOTQuery_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_Serialize_OFFSET;
static CFISH_INLINE void
LUCY_NOTQuery_Serialize(lucy_NOTQuery* self, lucy_OutStream* outstream) {
    const LUCY_NOTQuery_Serialize_t method = (LUCY_NOTQuery_Serialize_t)cfish_obj_method(self, LUCY_NOTQuery_Serialize_OFFSET);
    method(self, outstream);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_Deserialize_OFFSET;
static CFISH_INLINE lucy_PolyQuery*
LUCY_NOTQuery_Deserialize(lucy_NOTQuery* self, lucy_InStream* instream) {
    const LUCY_NOTQuery_Deserialize_t method = (LUCY_NOTQuery_Deserialize_t)cfish_obj_method(self, LUCY_NOTQuery_Deserialize_OFFSET);
    return method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_Dump_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_NOTQuery_Dump(lucy_NOTQuery* self) {
    const LUCY_NOTQuery_Dump_t method = (LUCY_NOTQuery_Dump_t)cfish_obj_method(self, LUCY_NOTQuery_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_Load_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_NOTQuery_Load(lucy_NOTQuery* self, cfish_Obj* dump) {
    const LUCY_NOTQuery_Load_t method = (LUCY_NOTQuery_Load_t)cfish_obj_method(self, LUCY_NOTQuery_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_Add_Child_OFFSET;
static CFISH_INLINE void
LUCY_NOTQuery_Add_Child(lucy_NOTQuery* self, lucy_Query* query) {
    const LUCY_NOTQuery_Add_Child_t method = (LUCY_NOTQuery_Add_Child_t)cfish_obj_method(self, LUCY_NOTQuery_Add_Child_OFFSET);
    method(self, query);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_Set_Children_OFFSET;
static CFISH_INLINE void
LUCY_NOTQuery_Set_Children(lucy_NOTQuery* self, cfish_Vector* children) {
    const LUCY_NOTQuery_Set_Children_t method = (LUCY_NOTQuery_Set_Children_t)cfish_obj_method(self, LUCY_NOTQuery_Set_Children_OFFSET);
    method(self, children);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_Get_Children_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_NOTQuery_Get_Children(lucy_NOTQuery* self) {
    const LUCY_NOTQuery_Get_Children_t method = (LUCY_NOTQuery_Get_Children_t)cfish_obj_method(self, LUCY_NOTQuery_Get_Children_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_Get_Negated_Query_OFFSET;
static CFISH_INLINE lucy_Query*
LUCY_NOTQuery_Get_Negated_Query(lucy_NOTQuery* self) {
    const LUCY_NOTQuery_Get_Negated_Query_t method = (LUCY_NOTQuery_Get_Negated_Query_t)cfish_obj_method(self, LUCY_NOTQuery_Get_Negated_Query_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTQuery_Set_Negated_Query_OFFSET;
static CFISH_INLINE void
LUCY_NOTQuery_Set_Negated_Query(lucy_NOTQuery* self, lucy_Query* negated_query) {
    const LUCY_NOTQuery_Set_Negated_Query_t method = (LUCY_NOTQuery_Set_Negated_Query_t)cfish_obj_method(self, LUCY_NOTQuery_Set_Negated_Query_OFFSET);
    method(self, negated_query);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_NOTQuery_Get_Negated_Query_OVERRIDE NULL
#define Lucy_NOTQuery_Set_Negated_Query_OVERRIDE NULL
#else
lucy_Query*
Lucy_NOTQuery_Get_Negated_Query_OVERRIDE(lucy_NOTQuery* self);
void
Lucy_NOTQuery_Set_Negated_Query_OVERRIDE(lucy_NOTQuery* self, lucy_Query* negated_query);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define NOTQuery lucy_NOTQuery
  #define NOTQUERY LUCY_NOTQUERY
  #define NOTQuery_new lucy_NOTQuery_new
  #define NOTQuery_init lucy_NOTQuery_init
  #define NOTQuery_get_class lucy_NOTQuery_get_class
  #define NOTQuery_get_class_name lucy_NOTQuery_get_class_name
  #define NOTQuery_is_a lucy_NOTQuery_is_a
  #define NOTQuery_Get_Negated_Query_IMP LUCY_NOTQuery_Get_Negated_Query_IMP
  #define NOTQuery_Set_Negated_Query_IMP LUCY_NOTQuery_Set_Negated_Query_IMP
  #define NOTQuery_Make_Compiler_IMP LUCY_NOTQuery_Make_Compiler_IMP
  #define NOTQuery_To_String_IMP LUCY_NOTQuery_To_String_IMP
  #define NOTQuery_Equals_IMP LUCY_NOTQuery_Equals_IMP
  #define NOTQuery_To_Host LUCY_NOTQuery_To_Host
  #define NOTQuery_To_Host_t LUCY_NOTQuery_To_Host_t
  #define NOTQuery_Clone LUCY_NOTQuery_Clone
  #define NOTQuery_Clone_t LUCY_NOTQuery_Clone_t
  #define NOTQuery_Equals LUCY_NOTQuery_Equals
  #define NOTQuery_Equals_t LUCY_NOTQuery_Equals_t
  #define NOTQuery_Compare_To LUCY_NOTQuery_Compare_To
  #define NOTQuery_Compare_To_t LUCY_NOTQuery_Compare_To_t
  #define NOTQuery_Destroy LUCY_NOTQuery_Destroy
  #define NOTQuery_Destroy_t LUCY_NOTQuery_Destroy_t
  #define NOTQuery_To_String LUCY_NOTQuery_To_String
  #define NOTQuery_To_String_t LUCY_NOTQuery_To_String_t
  #define NOTQuery_Make_Compiler LUCY_NOTQuery_Make_Compiler
  #define NOTQuery_Make_Compiler_t LUCY_NOTQuery_Make_Compiler_t
  #define NOTQuery_Set_Boost LUCY_NOTQuery_Set_Boost
  #define NOTQuery_Set_Boost_t LUCY_NOTQuery_Set_Boost_t
  #define NOTQuery_Get_Boost LUCY_NOTQuery_Get_Boost
  #define NOTQuery_Get_Boost_t LUCY_NOTQuery_Get_Boost_t
  #define NOTQuery_Serialize LUCY_NOTQuery_Serialize
  #define NOTQuery_Serialize_t LUCY_NOTQuery_Serialize_t
  #define NOTQuery_Deserialize LUCY_NOTQuery_Deserialize
  #define NOTQuery_Deserialize_t LUCY_NOTQuery_Deserialize_t
  #define NOTQuery_Dump LUCY_NOTQuery_Dump
  #define NOTQuery_Dump_t LUCY_NOTQuery_Dump_t
  #define NOTQuery_Load LUCY_NOTQuery_Load
  #define NOTQuery_Load_t LUCY_NOTQuery_Load_t
  #define NOTQuery_Add_Child LUCY_NOTQuery_Add_Child
  #define NOTQuery_Add_Child_t LUCY_NOTQuery_Add_Child_t
  #define NOTQuery_Set_Children LUCY_NOTQuery_Set_Children
  #define NOTQuery_Set_Children_t LUCY_NOTQuery_Set_Children_t
  #define NOTQuery_Get_Children LUCY_NOTQuery_Get_Children
  #define NOTQuery_Get_Children_t LUCY_NOTQuery_Get_Children_t
  #define NOTQuery_Get_Negated_Query LUCY_NOTQuery_Get_Negated_Query
  #define NOTQuery_Get_Negated_Query_t LUCY_NOTQuery_Get_Negated_Query_t
  #define NOTQuery_Set_Negated_Query LUCY_NOTQuery_Set_Negated_Query
  #define NOTQuery_Set_Negated_Query_t LUCY_NOTQuery_Set_Negated_Query_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy\Search\PolyQuery.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_NOTCOMPILER
extern uint32_t lucy_NOTCompiler_IVARS_OFFSET;
typedef struct lucy_NOTCompilerIVARS lucy_NOTCompilerIVARS;
static CFISH_INLINE lucy_NOTCompilerIVARS*
lucy_NOTCompiler_IVARS(lucy_NOTCompiler *self) {
   char *ptr = (char*)self + lucy_NOTCompiler_IVARS_OFFSET;
   return (lucy_NOTCompilerIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define NOTCompilerIVARS lucy_NOTCompilerIVARS
  #define NOTCompiler_IVARS lucy_NOTCompiler_IVARS
#endif

struct lucy_NOTCompilerIVARS {
    float boost;
    lucy_Query* parent;
    lucy_Similarity* sim;
    cfish_Vector* children;
};

#endif /* C_LUCY_NOTCOMPILER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_NOTCompiler*
lucy_NOTCompiler_new(lucy_NOTQuery* parent, lucy_Searcher* searcher, float boost);

LUCY_VISIBLE lucy_NOTCompiler*
lucy_NOTCompiler_init(lucy_NOTCompiler* self, lucy_NOTQuery* parent, lucy_Searcher* searcher, float boost);

lucy_Matcher*
LUCY_NOTCompiler_Make_Matcher_IMP(lucy_NOTCompiler* self, lucy_SegReader* reader, bool need_score);

float
LUCY_NOTCompiler_Sum_Of_Squared_Weights_IMP(lucy_NOTCompiler* self);

cfish_Vector*
LUCY_NOTCompiler_Highlight_Spans_IMP(lucy_NOTCompiler* self, lucy_Searcher* searcher, lucy_DocVector* doc_vec, cfish_String* field);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_NOTCompiler_To_Host_t)(lucy_NOTCompiler* self, void* vcache);

typedef cfish_Obj*
(*LUCY_NOTCompiler_Clone_t)(lucy_NOTCompiler* self);

typedef bool
(*LUCY_NOTCompiler_Equals_t)(lucy_NOTCompiler* self, cfish_Obj* other);

typedef int32_t
(*LUCY_NOTCompiler_Compare_To_t)(lucy_NOTCompiler* self, cfish_Obj* other);

typedef void
(*LUCY_NOTCompiler_Destroy_t)(lucy_NOTCompiler* self);

typedef cfish_String*
(*LUCY_NOTCompiler_To_String_t)(lucy_NOTCompiler* self);

typedef lucy_Compiler*
(*LUCY_NOTCompiler_Make_Compiler_t)(lucy_NOTCompiler* self, lucy_Searcher* searcher, float boost, bool subordinate);

typedef void
(*LUCY_NOTCompiler_Set_Boost_t)(lucy_NOTCompiler* self, float boost);

typedef float
(*LUCY_NOTCompiler_Get_Boost_t)(lucy_NOTCompiler* self);

typedef void
(*LUCY_NOTCompiler_Serialize_t)(lucy_NOTCompiler* self, lucy_OutStream* outstream);

typedef lucy_PolyCompiler*
(*LUCY_NOTCompiler_Deserialize_t)(lucy_NOTCompiler* self, lucy_InStream* instream);

typedef cfish_Obj*
(*LUCY_NOTCompiler_Dump_t)(lucy_NOTCompiler* self);

typedef cfish_Obj*
(*LUCY_NOTCompiler_Load_t)(lucy_NOTCompiler* self, cfish_Obj* dump);

typedef lucy_Matcher*
(*LUCY_NOTCompiler_Make_Matcher_t)(lucy_NOTCompiler* self, lucy_SegReader* reader, bool need_score);

typedef float
(*LUCY_NOTCompiler_Get_Weight_t)(lucy_NOTCompiler* self);

typedef lucy_Similarity*
(*LUCY_NOTCompiler_Get_Similarity_t)(lucy_NOTCompiler* self);

typedef lucy_Query*
(*LUCY_NOTCompiler_Get_Parent_t)(lucy_NOTCompiler* self);

typedef float
(*LUCY_NOTCompiler_Sum_Of_Squared_Weights_t)(lucy_NOTCompiler* self);

typedef void
(*LUCY_NOTCompiler_Apply_Norm_Factor_t)(lucy_NOTCompiler* self, float factor);

typedef void
(*LUCY_NOTCompiler_Normalize_t)(lucy_NOTCompiler* self);

typedef cfish_Vector*
(*LUCY_NOTCompiler_Highlight_Spans_t)(lucy_NOTCompiler* self, lucy_Searcher* searcher, lucy_DocVector* doc_vec, cfish_String* field);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_NOTCompiler_get_class(lucy_NOTCompiler *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_NOTCompiler_get_class_name(lucy_NOTCompiler *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_NOTCompiler_is_a(lucy_NOTCompiler *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_NOTCompiler_To_Host(lucy_NOTCompiler* self, void* vcache) {
    const LUCY_NOTCompiler_To_Host_t method = (LUCY_NOTCompiler_To_Host_t)cfish_obj_method(self, LUCY_NOTCompiler_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_NOTCompiler_Clone(lucy_NOTCompiler* self) {
    const LUCY_NOTCompiler_Clone_t method = (LUCY_NOTCompiler_Clone_t)cfish_obj_method(self, LUCY_NOTCompiler_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_NOTCompiler_Equals(lucy_NOTCompiler* self, cfish_Obj* other) {
    const LUCY_NOTCompiler_Equals_t method = (LUCY_NOTCompiler_Equals_t)cfish_obj_method(self, LUCY_NOTCompiler_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_NOTCompiler_Compare_To(lucy_NOTCompiler* self, cfish_Obj* other) {
    const LUCY_NOTCompiler_Compare_To_t method = (LUCY_NOTCompiler_Compare_To_t)cfish_obj_method(self, LUCY_NOTCompiler_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_NOTCompiler_Destroy(lucy_NOTCompiler* self) {
    const LUCY_NOTCompiler_Destroy_t method = (LUCY_NOTCompiler_Destroy_t)cfish_obj_method(self, LUCY_NOTCompiler_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_NOTCompiler_To_String(lucy_NOTCompiler* self) {
    const LUCY_NOTCompiler_To_String_t method = (LUCY_NOTCompiler_To_String_t)cfish_obj_method(self, LUCY_NOTCompiler_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Make_Compiler_OFFSET;
static CFISH_INLINE lucy_Compiler*
LUCY_NOTCompiler_Make_Compiler(lucy_NOTCompiler* self, lucy_Searcher* searcher, float boost, bool subordinate) {
    const LUCY_NOTCompiler_Make_Compiler_t method = (LUCY_NOTCompiler_Make_Compiler_t)cfish_obj_method(self, LUCY_NOTCompiler_Make_Compiler_OFFSET);
    return method(self, searcher, boost, subordinate);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_NOTCompiler_Set_Boost(lucy_NOTCompiler* self, float boost) {
    const LUCY_NOTCompiler_Set_Boost_t method = (LUCY_NOTCompiler_Set_Boost_t)cfish_obj_method(self, LUCY_NOTCompiler_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_NOTCompiler_Get_Boost(lucy_NOTCompiler* self) {
    const LUCY_NOTCompiler_Get_Boost_t method = (LUCY_NOTCompiler_Get_Boost_t)cfish_obj_method(self, LUCY_NOTCompiler_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Serialize_OFFSET;
static CFISH_INLINE void
LUCY_NOTCompiler_Serialize(lucy_NOTCompiler* self, lucy_OutStream* outstream) {
    const LUCY_NOTCompiler_Serialize_t method = (LUCY_NOTCompiler_Serialize_t)cfish_obj_method(self, LUCY_NOTCompiler_Serialize_OFFSET);
    method(self, outstream);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Deserialize_OFFSET;
static CFISH_INLINE lucy_PolyCompiler*
LUCY_NOTCompiler_Deserialize(lucy_NOTCompiler* self, lucy_InStream* instream) {
    const LUCY_NOTCompiler_Deserialize_t method = (LUCY_NOTCompiler_Deserialize_t)cfish_obj_method(self, LUCY_NOTCompiler_Deserialize_OFFSET);
    return method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Dump_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_NOTCompiler_Dump(lucy_NOTCompiler* self) {
    const LUCY_NOTCompiler_Dump_t method = (LUCY_NOTCompiler_Dump_t)cfish_obj_method(self, LUCY_NOTCompiler_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Load_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_NOTCompiler_Load(lucy_NOTCompiler* self, cfish_Obj* dump) {
    const LUCY_NOTCompiler_Load_t method = (LUCY_NOTCompiler_Load_t)cfish_obj_method(self, LUCY_NOTCompiler_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Make_Matcher_OFFSET;
static CFISH_INLINE lucy_Matcher*
LUCY_NOTCompiler_Make_Matcher(lucy_NOTCompiler* self, lucy_SegReader* reader, bool need_score) {
    const LUCY_NOTCompiler_Make_Matcher_t method = (LUCY_NOTCompiler_Make_Matcher_t)cfish_obj_method(self, LUCY_NOTCompiler_Make_Matcher_OFFSET);
    return method(self, reader, need_score);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Get_Weight_OFFSET;
static CFISH_INLINE float
LUCY_NOTCompiler_Get_Weight(lucy_NOTCompiler* self) {
    const LUCY_NOTCompiler_Get_Weight_t method = (LUCY_NOTCompiler_Get_Weight_t)cfish_obj_method(self, LUCY_NOTCompiler_Get_Weight_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Get_Similarity_OFFSET;
static CFISH_INLINE lucy_Similarity*
LUCY_NOTCompiler_Get_Similarity(lucy_NOTCompiler* self) {
    const LUCY_NOTCompiler_Get_Similarity_t method = (LUCY_NOTCompiler_Get_Similarity_t)cfish_obj_method(self, LUCY_NOTCompiler_Get_Similarity_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Get_Parent_OFFSET;
static CFISH_INLINE lucy_Query*
LUCY_NOTCompiler_Get_Parent(lucy_NOTCompiler* self) {
    const LUCY_NOTCompiler_Get_Parent_t method = (LUCY_NOTCompiler_Get_Parent_t)cfish_obj_method(self, LUCY_NOTCompiler_Get_Parent_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Sum_Of_Squared_Weights_OFFSET;
static CFISH_INLINE float
LUCY_NOTCompiler_Sum_Of_Squared_Weights(lucy_NOTCompiler* self) {
    const LUCY_NOTCompiler_Sum_Of_Squared_Weights_t method = (LUCY_NOTCompiler_Sum_Of_Squared_Weights_t)cfish_obj_method(self, LUCY_NOTCompiler_Sum_Of_Squared_Weights_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Apply_Norm_Factor_OFFSET;
static CFISH_INLINE void
LUCY_NOTCompiler_Apply_Norm_Factor(lucy_NOTCompiler* self, float factor) {
    const LUCY_NOTCompiler_Apply_Norm_Factor_t method = (LUCY_NOTCompiler_Apply_Norm_Factor_t)cfish_obj_method(self, LUCY_NOTCompiler_Apply_Norm_Factor_OFFSET);
    method(self, factor);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Normalize_OFFSET;
static CFISH_INLINE void
LUCY_NOTCompiler_Normalize(lucy_NOTCompiler* self) {
    const LUCY_NOTCompiler_Normalize_t method = (LUCY_NOTCompiler_Normalize_t)cfish_obj_method(self, LUCY_NOTCompiler_Normalize_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_NOTCompiler_Highlight_Spans_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_NOTCompiler_Highlight_Spans(lucy_NOTCompiler* self, lucy_Searcher* searcher, lucy_DocVector* doc_vec, cfish_String* field) {
    const LUCY_NOTCompiler_Highlight_Spans_t method = (LUCY_NOTCompiler_Highlight_Spans_t)cfish_obj_method(self, LUCY_NOTCompiler_Highlight_Spans_OFFSET);
    return method(self, searcher, doc_vec, field);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define NOTCompiler lucy_NOTCompiler
  #define NOTCOMPILER LUCY_NOTCOMPILER
  #define NOTCompiler_new lucy_NOTCompiler_new
  #define NOTCompiler_init lucy_NOTCompiler_init
  #define NOTCompiler_get_class lucy_NOTCompiler_get_class
  #define NOTCompiler_get_class_name lucy_NOTCompiler_get_class_name
  #define NOTCompiler_is_a lucy_NOTCompiler_is_a
  #define NOTCompiler_Make_Matcher_IMP LUCY_NOTCompiler_Make_Matcher_IMP
  #define NOTCompiler_Sum_Of_Squared_Weights_IMP LUCY_NOTCompiler_Sum_Of_Squared_Weights_IMP
  #define NOTCompiler_Highlight_Spans_IMP LUCY_NOTCompiler_Highlight_Spans_IMP
  #define NOTCompiler_To_Host LUCY_NOTCompiler_To_Host
  #define NOTCompiler_To_Host_t LUCY_NOTCompiler_To_Host_t
  #define NOTCompiler_Clone LUCY_NOTCompiler_Clone
  #define NOTCompiler_Clone_t LUCY_NOTCompiler_Clone_t
  #define NOTCompiler_Equals LUCY_NOTCompiler_Equals
  #define NOTCompiler_Equals_t LUCY_NOTCompiler_Equals_t
  #define NOTCompiler_Compare_To LUCY_NOTCompiler_Compare_To
  #define NOTCompiler_Compare_To_t LUCY_NOTCompiler_Compare_To_t
  #define NOTCompiler_Destroy LUCY_NOTCompiler_Destroy
  #define NOTCompiler_Destroy_t LUCY_NOTCompiler_Destroy_t
  #define NOTCompiler_To_String LUCY_NOTCompiler_To_String
  #define NOTCompiler_To_String_t LUCY_NOTCompiler_To_String_t
  #define NOTCompiler_Make_Compiler LUCY_NOTCompiler_Make_Compiler
  #define NOTCompiler_Make_Compiler_t LUCY_NOTCompiler_Make_Compiler_t
  #define NOTCompiler_Set_Boost LUCY_NOTCompiler_Set_Boost
  #define NOTCompiler_Set_Boost_t LUCY_NOTCompiler_Set_Boost_t
  #define NOTCompiler_Get_Boost LUCY_NOTCompiler_Get_Boost
  #define NOTCompiler_Get_Boost_t LUCY_NOTCompiler_Get_Boost_t
  #define NOTCompiler_Serialize LUCY_NOTCompiler_Serialize
  #define NOTCompiler_Serialize_t LUCY_NOTCompiler_Serialize_t
  #define NOTCompiler_Deserialize LUCY_NOTCompiler_Deserialize
  #define NOTCompiler_Deserialize_t LUCY_NOTCompiler_Deserialize_t
  #define NOTCompiler_Dump LUCY_NOTCompiler_Dump
  #define NOTCompiler_Dump_t LUCY_NOTCompiler_Dump_t
  #define NOTCompiler_Load LUCY_NOTCompiler_Load
  #define NOTCompiler_Load_t LUCY_NOTCompiler_Load_t
  #define NOTCompiler_Make_Matcher LUCY_NOTCompiler_Make_Matcher
  #define NOTCompiler_Make_Matcher_t LUCY_NOTCompiler_Make_Matcher_t
  #define NOTCompiler_Get_Weight LUCY_NOTCompiler_Get_Weight
  #define NOTCompiler_Get_Weight_t LUCY_NOTCompiler_Get_Weight_t
  #define NOTCompiler_Get_Similarity LUCY_NOTCompiler_Get_Similarity
  #define NOTCompiler_Get_Similarity_t LUCY_NOTCompiler_Get_Similarity_t
  #define NOTCompiler_Get_Parent LUCY_NOTCompiler_Get_Parent
  #define NOTCompiler_Get_Parent_t LUCY_NOTCompiler_Get_Parent_t
  #define NOTCompiler_Sum_Of_Squared_Weights LUCY_NOTCompiler_Sum_Of_Squared_Weights
  #define NOTCompiler_Sum_Of_Squared_Weights_t LUCY_NOTCompiler_Sum_Of_Squared_Weights_t
  #define NOTCompiler_Apply_Norm_Factor LUCY_NOTCompiler_Apply_Norm_Factor
  #define NOTCompiler_Apply_Norm_Factor_t LUCY_NOTCompiler_Apply_Norm_Factor_t
  #define NOTCompiler_Normalize LUCY_NOTCompiler_Normalize
  #define NOTCompiler_Normalize_t LUCY_NOTCompiler_Normalize_t
  #define NOTCompiler_Highlight_Spans LUCY_NOTCompiler_Highlight_Spans
  #define NOTCompiler_Highlight_Spans_t LUCY_NOTCompiler_Highlight_Spans_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_SEARCH_NOTQUERY */




