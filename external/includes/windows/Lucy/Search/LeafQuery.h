/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_SEARCH_LEAFQUERY
#define H_LUCY_SEARCH_LEAFQUERY 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy\Search\Query.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_LEAFQUERY
extern uint32_t lucy_LeafQuery_IVARS_OFFSET;
typedef struct lucy_LeafQueryIVARS lucy_LeafQueryIVARS;
static CFISH_INLINE lucy_LeafQueryIVARS*
lucy_LeafQuery_IVARS(lucy_LeafQuery *self) {
   char *ptr = (char*)self + lucy_LeafQuery_IVARS_OFFSET;
   return (lucy_LeafQueryIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define LeafQueryIVARS lucy_LeafQueryIVARS
  #define LeafQuery_IVARS lucy_LeafQuery_IVARS
#endif

struct lucy_LeafQueryIVARS {
    float boost;
    cfish_String* field;
    cfish_String* text;
};

#endif /* C_LUCY_LEAFQUERY */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_LeafQuery*
lucy_LeafQuery_new(cfish_String* field, cfish_String* text);

LUCY_VISIBLE lucy_LeafQuery*
lucy_LeafQuery_init(lucy_LeafQuery* self, cfish_String* field, cfish_String* text);

cfish_String*
LUCY_LeafQuery_Get_Field_IMP(lucy_LeafQuery* self);

cfish_String*
LUCY_LeafQuery_Get_Text_IMP(lucy_LeafQuery* self);

bool
LUCY_LeafQuery_Equals_IMP(lucy_LeafQuery* self, cfish_Obj* other);

cfish_String*
LUCY_LeafQuery_To_String_IMP(lucy_LeafQuery* self);

void
LUCY_LeafQuery_Serialize_IMP(lucy_LeafQuery* self, lucy_OutStream* outstream);

lucy_LeafQuery*
LUCY_LeafQuery_Deserialize_IMP(lucy_LeafQuery* self, lucy_InStream* instream);

cfish_Obj*
LUCY_LeafQuery_Dump_IMP(lucy_LeafQuery* self);

cfish_Obj*
LUCY_LeafQuery_Load_IMP(lucy_LeafQuery* self, cfish_Obj* dump);

lucy_Compiler*
LUCY_LeafQuery_Make_Compiler_IMP(lucy_LeafQuery* self, lucy_Searcher* searcher, float boost, bool subordinate);

void
LUCY_LeafQuery_Destroy_IMP(lucy_LeafQuery* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_LeafQuery_To_Host_t)(lucy_LeafQuery* self, void* vcache);

typedef cfish_Obj*
(*LUCY_LeafQuery_Clone_t)(lucy_LeafQuery* self);

typedef bool
(*LUCY_LeafQuery_Equals_t)(lucy_LeafQuery* self, cfish_Obj* other);

typedef int32_t
(*LUCY_LeafQuery_Compare_To_t)(lucy_LeafQuery* self, cfish_Obj* other);

typedef void
(*LUCY_LeafQuery_Destroy_t)(lucy_LeafQuery* self);

typedef cfish_String*
(*LUCY_LeafQuery_To_String_t)(lucy_LeafQuery* self);

typedef lucy_Compiler*
(*LUCY_LeafQuery_Make_Compiler_t)(lucy_LeafQuery* self, lucy_Searcher* searcher, float boost, bool subordinate);

typedef void
(*LUCY_LeafQuery_Set_Boost_t)(lucy_LeafQuery* self, float boost);

typedef float
(*LUCY_LeafQuery_Get_Boost_t)(lucy_LeafQuery* self);

typedef void
(*LUCY_LeafQuery_Serialize_t)(lucy_LeafQuery* self, lucy_OutStream* outstream);

typedef lucy_LeafQuery*
(*LUCY_LeafQuery_Deserialize_t)(lucy_LeafQuery* self, lucy_InStream* instream);

typedef cfish_Obj*
(*LUCY_LeafQuery_Dump_t)(lucy_LeafQuery* self);

typedef cfish_Obj*
(*LUCY_LeafQuery_Load_t)(lucy_LeafQuery* self, cfish_Obj* dump);

typedef cfish_String*
(*LUCY_LeafQuery_Get_Field_t)(lucy_LeafQuery* self);

typedef cfish_String*
(*LUCY_LeafQuery_Get_Text_t)(lucy_LeafQuery* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_LeafQuery_get_class(lucy_LeafQuery *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_LeafQuery_get_class_name(lucy_LeafQuery *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_LeafQuery_is_a(lucy_LeafQuery *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_LeafQuery_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_LeafQuery_To_Host(lucy_LeafQuery* self, void* vcache) {
    const LUCY_LeafQuery_To_Host_t method = (LUCY_LeafQuery_To_Host_t)cfish_obj_method(self, LUCY_LeafQuery_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_LeafQuery_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_LeafQuery_Clone(lucy_LeafQuery* self) {
    const LUCY_LeafQuery_Clone_t method = (LUCY_LeafQuery_Clone_t)cfish_obj_method(self, LUCY_LeafQuery_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LeafQuery_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_LeafQuery_Equals(lucy_LeafQuery* self, cfish_Obj* other) {
    const LUCY_LeafQuery_Equals_t method = (LUCY_LeafQuery_Equals_t)cfish_obj_method(self, LUCY_LeafQuery_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_LeafQuery_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_LeafQuery_Compare_To(lucy_LeafQuery* self, cfish_Obj* other) {
    const LUCY_LeafQuery_Compare_To_t method = (LUCY_LeafQuery_Compare_To_t)cfish_obj_method(self, LUCY_LeafQuery_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_LeafQuery_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_LeafQuery_Destroy(lucy_LeafQuery* self) {
    const LUCY_LeafQuery_Destroy_t method = (LUCY_LeafQuery_Destroy_t)cfish_obj_method(self, LUCY_LeafQuery_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LeafQuery_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_LeafQuery_To_String(lucy_LeafQuery* self) {
    const LUCY_LeafQuery_To_String_t method = (LUCY_LeafQuery_To_String_t)cfish_obj_method(self, LUCY_LeafQuery_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LeafQuery_Make_Compiler_OFFSET;
static CFISH_INLINE lucy_Compiler*
LUCY_LeafQuery_Make_Compiler(lucy_LeafQuery* self, lucy_Searcher* searcher, float boost, bool subordinate) {
    const LUCY_LeafQuery_Make_Compiler_t method = (LUCY_LeafQuery_Make_Compiler_t)cfish_obj_method(self, LUCY_LeafQuery_Make_Compiler_OFFSET);
    return method(self, searcher, boost, subordinate);
}

extern LUCY_VISIBLE uint32_t LUCY_LeafQuery_Set_Boost_OFFSET;
static CFISH_INLINE void
LUCY_LeafQuery_Set_Boost(lucy_LeafQuery* self, float boost) {
    const LUCY_LeafQuery_Set_Boost_t method = (LUCY_LeafQuery_Set_Boost_t)cfish_obj_method(self, LUCY_LeafQuery_Set_Boost_OFFSET);
    method(self, boost);
}

extern LUCY_VISIBLE uint32_t LUCY_LeafQuery_Get_Boost_OFFSET;
static CFISH_INLINE float
LUCY_LeafQuery_Get_Boost(lucy_LeafQuery* self) {
    const LUCY_LeafQuery_Get_Boost_t method = (LUCY_LeafQuery_Get_Boost_t)cfish_obj_method(self, LUCY_LeafQuery_Get_Boost_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LeafQuery_Serialize_OFFSET;
static CFISH_INLINE void
LUCY_LeafQuery_Serialize(lucy_LeafQuery* self, lucy_OutStream* outstream) {
    const LUCY_LeafQuery_Serialize_t method = (LUCY_LeafQuery_Serialize_t)cfish_obj_method(self, LUCY_LeafQuery_Serialize_OFFSET);
    method(self, outstream);
}

extern LUCY_VISIBLE uint32_t LUCY_LeafQuery_Deserialize_OFFSET;
static CFISH_INLINE lucy_LeafQuery*
LUCY_LeafQuery_Deserialize(lucy_LeafQuery* self, lucy_InStream* instream) {
    const LUCY_LeafQuery_Deserialize_t method = (LUCY_LeafQuery_Deserialize_t)cfish_obj_method(self, LUCY_LeafQuery_Deserialize_OFFSET);
    return method(self, instream);
}

extern LUCY_VISIBLE uint32_t LUCY_LeafQuery_Dump_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_LeafQuery_Dump(lucy_LeafQuery* self) {
    const LUCY_LeafQuery_Dump_t method = (LUCY_LeafQuery_Dump_t)cfish_obj_method(self, LUCY_LeafQuery_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LeafQuery_Load_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_LeafQuery_Load(lucy_LeafQuery* self, cfish_Obj* dump) {
    const LUCY_LeafQuery_Load_t method = (LUCY_LeafQuery_Load_t)cfish_obj_method(self, LUCY_LeafQuery_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_LeafQuery_Get_Field_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_LeafQuery_Get_Field(lucy_LeafQuery* self) {
    const LUCY_LeafQuery_Get_Field_t method = (LUCY_LeafQuery_Get_Field_t)cfish_obj_method(self, LUCY_LeafQuery_Get_Field_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LeafQuery_Get_Text_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_LeafQuery_Get_Text(lucy_LeafQuery* self) {
    const LUCY_LeafQuery_Get_Text_t method = (LUCY_LeafQuery_Get_Text_t)cfish_obj_method(self, LUCY_LeafQuery_Get_Text_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_LeafQuery_Get_Field_OVERRIDE NULL
#define Lucy_LeafQuery_Get_Text_OVERRIDE NULL
#else
cfish_String*
Lucy_LeafQuery_Get_Field_OVERRIDE(lucy_LeafQuery* self);
cfish_String*
Lucy_LeafQuery_Get_Text_OVERRIDE(lucy_LeafQuery* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define LeafQuery lucy_LeafQuery
  #define LEAFQUERY LUCY_LEAFQUERY
  #define LeafQuery_new lucy_LeafQuery_new
  #define LeafQuery_init lucy_LeafQuery_init
  #define LeafQuery_get_class lucy_LeafQuery_get_class
  #define LeafQuery_get_class_name lucy_LeafQuery_get_class_name
  #define LeafQuery_is_a lucy_LeafQuery_is_a
  #define LeafQuery_Get_Field_IMP LUCY_LeafQuery_Get_Field_IMP
  #define LeafQuery_Get_Text_IMP LUCY_LeafQuery_Get_Text_IMP
  #define LeafQuery_Equals_IMP LUCY_LeafQuery_Equals_IMP
  #define LeafQuery_To_String_IMP LUCY_LeafQuery_To_String_IMP
  #define LeafQuery_Serialize_IMP LUCY_LeafQuery_Serialize_IMP
  #define LeafQuery_Deserialize_IMP LUCY_LeafQuery_Deserialize_IMP
  #define LeafQuery_Dump_IMP LUCY_LeafQuery_Dump_IMP
  #define LeafQuery_Load_IMP LUCY_LeafQuery_Load_IMP
  #define LeafQuery_Make_Compiler_IMP LUCY_LeafQuery_Make_Compiler_IMP
  #define LeafQuery_Destroy_IMP LUCY_LeafQuery_Destroy_IMP
  #define LeafQuery_To_Host LUCY_LeafQuery_To_Host
  #define LeafQuery_To_Host_t LUCY_LeafQuery_To_Host_t
  #define LeafQuery_Clone LUCY_LeafQuery_Clone
  #define LeafQuery_Clone_t LUCY_LeafQuery_Clone_t
  #define LeafQuery_Equals LUCY_LeafQuery_Equals
  #define LeafQuery_Equals_t LUCY_LeafQuery_Equals_t
  #define LeafQuery_Compare_To LUCY_LeafQuery_Compare_To
  #define LeafQuery_Compare_To_t LUCY_LeafQuery_Compare_To_t
  #define LeafQuery_Destroy LUCY_LeafQuery_Destroy
  #define LeafQuery_Destroy_t LUCY_LeafQuery_Destroy_t
  #define LeafQuery_To_String LUCY_LeafQuery_To_String
  #define LeafQuery_To_String_t LUCY_LeafQuery_To_String_t
  #define LeafQuery_Make_Compiler LUCY_LeafQuery_Make_Compiler
  #define LeafQuery_Make_Compiler_t LUCY_LeafQuery_Make_Compiler_t
  #define LeafQuery_Set_Boost LUCY_LeafQuery_Set_Boost
  #define LeafQuery_Set_Boost_t LUCY_LeafQuery_Set_Boost_t
  #define LeafQuery_Get_Boost LUCY_LeafQuery_Get_Boost
  #define LeafQuery_Get_Boost_t LUCY_LeafQuery_Get_Boost_t
  #define LeafQuery_Serialize LUCY_LeafQuery_Serialize
  #define LeafQuery_Serialize_t LUCY_LeafQuery_Serialize_t
  #define LeafQuery_Deserialize LUCY_LeafQuery_Deserialize
  #define LeafQuery_Deserialize_t LUCY_LeafQuery_Deserialize_t
  #define LeafQuery_Dump LUCY_LeafQuery_Dump
  #define LeafQuery_Dump_t LUCY_LeafQuery_Dump_t
  #define LeafQuery_Load LUCY_LeafQuery_Load
  #define LeafQuery_Load_t LUCY_LeafQuery_Load_t
  #define LeafQuery_Get_Field LUCY_LeafQuery_Get_Field
  #define LeafQuery_Get_Field_t LUCY_LeafQuery_Get_Field_t
  #define LeafQuery_Get_Text LUCY_LeafQuery_Get_Text
  #define LeafQuery_Get_Text_t LUCY_LeafQuery_Get_Text_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_SEARCH_LEAFQUERY */




