/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_SEARCH_COLLECTOR
#define H_LUCY_SEARCH_COLLECTOR 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish\Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_COLLECTOR
extern uint32_t lucy_Coll_IVARS_OFFSET;
typedef struct lucy_CollectorIVARS lucy_CollectorIVARS;
static CFISH_INLINE lucy_CollectorIVARS*
lucy_Coll_IVARS(lucy_Collector *self) {
   char *ptr = (char*)self + lucy_Coll_IVARS_OFFSET;
   return (lucy_CollectorIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define CollectorIVARS lucy_CollectorIVARS
  #define Coll_IVARS lucy_Coll_IVARS
#endif

struct lucy_CollectorIVARS {
    lucy_SegReader* reader;
    lucy_Matcher* matcher;
    int32_t base;
};

#endif /* C_LUCY_COLLECTOR */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_Collector*
lucy_Coll_init(lucy_Collector* self);

void
LUCY_Coll_Destroy_IMP(lucy_Collector* self);

void
LUCY_Coll_Collect_IMP(lucy_Collector* self, int32_t doc_id);

void
LUCY_Coll_Set_Reader_IMP(lucy_Collector* self, lucy_SegReader* reader);

void
LUCY_Coll_Set_Base_IMP(lucy_Collector* self, int32_t base);

bool
LUCY_Coll_Need_Score_IMP(lucy_Collector* self);

void
LUCY_Coll_Set_Matcher_IMP(lucy_Collector* self, lucy_Matcher* matcher);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_Coll_To_Host_t)(lucy_Collector* self, void* vcache);

typedef cfish_Obj*
(*LUCY_Coll_Clone_t)(lucy_Collector* self);

typedef bool
(*LUCY_Coll_Equals_t)(lucy_Collector* self, cfish_Obj* other);

typedef int32_t
(*LUCY_Coll_Compare_To_t)(lucy_Collector* self, cfish_Obj* other);

typedef void
(*LUCY_Coll_Destroy_t)(lucy_Collector* self);

typedef cfish_String*
(*LUCY_Coll_To_String_t)(lucy_Collector* self);

typedef void
(*LUCY_Coll_Collect_t)(lucy_Collector* self, int32_t doc_id);

typedef void
(*LUCY_Coll_Set_Reader_t)(lucy_Collector* self, lucy_SegReader* reader);

typedef void
(*LUCY_Coll_Set_Base_t)(lucy_Collector* self, int32_t base);

typedef bool
(*LUCY_Coll_Need_Score_t)(lucy_Collector* self);

typedef void
(*LUCY_Coll_Set_Matcher_t)(lucy_Collector* self, lucy_Matcher* matcher);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_Coll_get_class(lucy_Collector *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_Coll_get_class_name(lucy_Collector *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_Coll_is_a(lucy_Collector *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_Coll_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_Coll_To_Host(lucy_Collector* self, void* vcache) {
    const LUCY_Coll_To_Host_t method = (LUCY_Coll_To_Host_t)cfish_obj_method(self, LUCY_Coll_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_Coll_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_Coll_Clone(lucy_Collector* self) {
    const LUCY_Coll_Clone_t method = (LUCY_Coll_Clone_t)cfish_obj_method(self, LUCY_Coll_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Coll_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_Coll_Equals(lucy_Collector* self, cfish_Obj* other) {
    const LUCY_Coll_Equals_t method = (LUCY_Coll_Equals_t)cfish_obj_method(self, LUCY_Coll_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Coll_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_Coll_Compare_To(lucy_Collector* self, cfish_Obj* other) {
    const LUCY_Coll_Compare_To_t method = (LUCY_Coll_Compare_To_t)cfish_obj_method(self, LUCY_Coll_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Coll_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_Coll_Destroy(lucy_Collector* self) {
    const LUCY_Coll_Destroy_t method = (LUCY_Coll_Destroy_t)cfish_obj_method(self, LUCY_Coll_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Coll_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Coll_To_String(lucy_Collector* self) {
    const LUCY_Coll_To_String_t method = (LUCY_Coll_To_String_t)cfish_obj_method(self, LUCY_Coll_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Coll_Collect_OFFSET;
static CFISH_INLINE void
LUCY_Coll_Collect(lucy_Collector* self, int32_t doc_id) {
    const LUCY_Coll_Collect_t method = (LUCY_Coll_Collect_t)cfish_obj_method(self, LUCY_Coll_Collect_OFFSET);
    method(self, doc_id);
}

extern LUCY_VISIBLE uint32_t LUCY_Coll_Set_Reader_OFFSET;
static CFISH_INLINE void
LUCY_Coll_Set_Reader(lucy_Collector* self, lucy_SegReader* reader) {
    const LUCY_Coll_Set_Reader_t method = (LUCY_Coll_Set_Reader_t)cfish_obj_method(self, LUCY_Coll_Set_Reader_OFFSET);
    method(self, reader);
}

extern LUCY_VISIBLE uint32_t LUCY_Coll_Set_Base_OFFSET;
static CFISH_INLINE void
LUCY_Coll_Set_Base(lucy_Collector* self, int32_t base) {
    const LUCY_Coll_Set_Base_t method = (LUCY_Coll_Set_Base_t)cfish_obj_method(self, LUCY_Coll_Set_Base_OFFSET);
    method(self, base);
}

extern LUCY_VISIBLE uint32_t LUCY_Coll_Need_Score_OFFSET;
static CFISH_INLINE bool
LUCY_Coll_Need_Score(lucy_Collector* self) {
    const LUCY_Coll_Need_Score_t method = (LUCY_Coll_Need_Score_t)cfish_obj_method(self, LUCY_Coll_Need_Score_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Coll_Set_Matcher_OFFSET;
static CFISH_INLINE void
LUCY_Coll_Set_Matcher(lucy_Collector* self, lucy_Matcher* matcher) {
    const LUCY_Coll_Set_Matcher_t method = (LUCY_Coll_Set_Matcher_t)cfish_obj_method(self, LUCY_Coll_Set_Matcher_OFFSET);
    method(self, matcher);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_Coll_Collect_OVERRIDE NULL
#define Lucy_Coll_Set_Reader_OVERRIDE NULL
#define Lucy_Coll_Set_Base_OVERRIDE NULL
#define Lucy_Coll_Need_Score_OVERRIDE NULL
#define Lucy_Coll_Set_Matcher_OVERRIDE NULL
#else
void
Lucy_Coll_Collect_OVERRIDE(lucy_Collector* self, int32_t doc_id);
void
Lucy_Coll_Set_Reader_OVERRIDE(lucy_Collector* self, lucy_SegReader* reader);
void
Lucy_Coll_Set_Base_OVERRIDE(lucy_Collector* self, int32_t base);
bool
Lucy_Coll_Need_Score_OVERRIDE(lucy_Collector* self);
void
Lucy_Coll_Set_Matcher_OVERRIDE(lucy_Collector* self, lucy_Matcher* matcher);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define Collector lucy_Collector
  #define COLLECTOR LUCY_COLLECTOR
  #define Coll_init lucy_Coll_init
  #define Coll_get_class lucy_Coll_get_class
  #define Coll_get_class_name lucy_Coll_get_class_name
  #define Coll_is_a lucy_Coll_is_a
  #define Coll_Destroy_IMP LUCY_Coll_Destroy_IMP
  #define Coll_Collect_IMP LUCY_Coll_Collect_IMP
  #define Coll_Set_Reader_IMP LUCY_Coll_Set_Reader_IMP
  #define Coll_Set_Base_IMP LUCY_Coll_Set_Base_IMP
  #define Coll_Need_Score_IMP LUCY_Coll_Need_Score_IMP
  #define Coll_Set_Matcher_IMP LUCY_Coll_Set_Matcher_IMP
  #define Coll_To_Host LUCY_Coll_To_Host
  #define Coll_To_Host_t LUCY_Coll_To_Host_t
  #define Coll_Clone LUCY_Coll_Clone
  #define Coll_Clone_t LUCY_Coll_Clone_t
  #define Coll_Equals LUCY_Coll_Equals
  #define Coll_Equals_t LUCY_Coll_Equals_t
  #define Coll_Compare_To LUCY_Coll_Compare_To
  #define Coll_Compare_To_t LUCY_Coll_Compare_To_t
  #define Coll_Destroy LUCY_Coll_Destroy
  #define Coll_Destroy_t LUCY_Coll_Destroy_t
  #define Coll_To_String LUCY_Coll_To_String
  #define Coll_To_String_t LUCY_Coll_To_String_t
  #define Coll_Collect LUCY_Coll_Collect
  #define Coll_Collect_t LUCY_Coll_Collect_t
  #define Coll_Set_Reader LUCY_Coll_Set_Reader
  #define Coll_Set_Reader_t LUCY_Coll_Set_Reader_t
  #define Coll_Set_Base LUCY_Coll_Set_Base
  #define Coll_Set_Base_t LUCY_Coll_Set_Base_t
  #define Coll_Need_Score LUCY_Coll_Need_Score
  #define Coll_Need_Score_t LUCY_Coll_Need_Score_t
  #define Coll_Set_Matcher LUCY_Coll_Set_Matcher
  #define Coll_Set_Matcher_t LUCY_Coll_Set_Matcher_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy\Search\Collector.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_BITCOLLECTOR
extern uint32_t lucy_BitColl_IVARS_OFFSET;
typedef struct lucy_BitCollectorIVARS lucy_BitCollectorIVARS;
static CFISH_INLINE lucy_BitCollectorIVARS*
lucy_BitColl_IVARS(lucy_BitCollector *self) {
   char *ptr = (char*)self + lucy_BitColl_IVARS_OFFSET;
   return (lucy_BitCollectorIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define BitCollectorIVARS lucy_BitCollectorIVARS
  #define BitColl_IVARS lucy_BitColl_IVARS
#endif

struct lucy_BitCollectorIVARS {
    lucy_SegReader* reader;
    lucy_Matcher* matcher;
    int32_t base;
    lucy_BitVector* bit_vec;
};

#endif /* C_LUCY_BITCOLLECTOR */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_BitCollector*
lucy_BitColl_new(lucy_BitVector* bit_vector);

LUCY_VISIBLE lucy_BitCollector*
lucy_BitColl_init(lucy_BitCollector* self, lucy_BitVector* bit_vector);

void
LUCY_BitColl_Destroy_IMP(lucy_BitCollector* self);

void
LUCY_BitColl_Collect_IMP(lucy_BitCollector* self, int32_t doc_id);

bool
LUCY_BitColl_Need_Score_IMP(lucy_BitCollector* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_BitColl_To_Host_t)(lucy_BitCollector* self, void* vcache);

typedef cfish_Obj*
(*LUCY_BitColl_Clone_t)(lucy_BitCollector* self);

typedef bool
(*LUCY_BitColl_Equals_t)(lucy_BitCollector* self, cfish_Obj* other);

typedef int32_t
(*LUCY_BitColl_Compare_To_t)(lucy_BitCollector* self, cfish_Obj* other);

typedef void
(*LUCY_BitColl_Destroy_t)(lucy_BitCollector* self);

typedef cfish_String*
(*LUCY_BitColl_To_String_t)(lucy_BitCollector* self);

typedef void
(*LUCY_BitColl_Collect_t)(lucy_BitCollector* self, int32_t doc_id);

typedef void
(*LUCY_BitColl_Set_Reader_t)(lucy_BitCollector* self, lucy_SegReader* reader);

typedef void
(*LUCY_BitColl_Set_Base_t)(lucy_BitCollector* self, int32_t base);

typedef bool
(*LUCY_BitColl_Need_Score_t)(lucy_BitCollector* self);

typedef void
(*LUCY_BitColl_Set_Matcher_t)(lucy_BitCollector* self, lucy_Matcher* matcher);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_BitColl_get_class(lucy_BitCollector *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_BitColl_get_class_name(lucy_BitCollector *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_BitColl_is_a(lucy_BitCollector *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_BitColl_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_BitColl_To_Host(lucy_BitCollector* self, void* vcache) {
    const LUCY_BitColl_To_Host_t method = (LUCY_BitColl_To_Host_t)cfish_obj_method(self, LUCY_BitColl_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_BitColl_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_BitColl_Clone(lucy_BitCollector* self) {
    const LUCY_BitColl_Clone_t method = (LUCY_BitColl_Clone_t)cfish_obj_method(self, LUCY_BitColl_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BitColl_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_BitColl_Equals(lucy_BitCollector* self, cfish_Obj* other) {
    const LUCY_BitColl_Equals_t method = (LUCY_BitColl_Equals_t)cfish_obj_method(self, LUCY_BitColl_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_BitColl_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_BitColl_Compare_To(lucy_BitCollector* self, cfish_Obj* other) {
    const LUCY_BitColl_Compare_To_t method = (LUCY_BitColl_Compare_To_t)cfish_obj_method(self, LUCY_BitColl_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_BitColl_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_BitColl_Destroy(lucy_BitCollector* self) {
    const LUCY_BitColl_Destroy_t method = (LUCY_BitColl_Destroy_t)cfish_obj_method(self, LUCY_BitColl_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BitColl_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_BitColl_To_String(lucy_BitCollector* self) {
    const LUCY_BitColl_To_String_t method = (LUCY_BitColl_To_String_t)cfish_obj_method(self, LUCY_BitColl_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BitColl_Collect_OFFSET;
static CFISH_INLINE void
LUCY_BitColl_Collect(lucy_BitCollector* self, int32_t doc_id) {
    const LUCY_BitColl_Collect_t method = (LUCY_BitColl_Collect_t)cfish_obj_method(self, LUCY_BitColl_Collect_OFFSET);
    method(self, doc_id);
}

extern LUCY_VISIBLE uint32_t LUCY_BitColl_Set_Reader_OFFSET;
static CFISH_INLINE void
LUCY_BitColl_Set_Reader(lucy_BitCollector* self, lucy_SegReader* reader) {
    const LUCY_BitColl_Set_Reader_t method = (LUCY_BitColl_Set_Reader_t)cfish_obj_method(self, LUCY_BitColl_Set_Reader_OFFSET);
    method(self, reader);
}

extern LUCY_VISIBLE uint32_t LUCY_BitColl_Set_Base_OFFSET;
static CFISH_INLINE void
LUCY_BitColl_Set_Base(lucy_BitCollector* self, int32_t base) {
    const LUCY_BitColl_Set_Base_t method = (LUCY_BitColl_Set_Base_t)cfish_obj_method(self, LUCY_BitColl_Set_Base_OFFSET);
    method(self, base);
}

extern LUCY_VISIBLE uint32_t LUCY_BitColl_Need_Score_OFFSET;
static CFISH_INLINE bool
LUCY_BitColl_Need_Score(lucy_BitCollector* self) {
    const LUCY_BitColl_Need_Score_t method = (LUCY_BitColl_Need_Score_t)cfish_obj_method(self, LUCY_BitColl_Need_Score_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BitColl_Set_Matcher_OFFSET;
static CFISH_INLINE void
LUCY_BitColl_Set_Matcher(lucy_BitCollector* self, lucy_Matcher* matcher) {
    const LUCY_BitColl_Set_Matcher_t method = (LUCY_BitColl_Set_Matcher_t)cfish_obj_method(self, LUCY_BitColl_Set_Matcher_OFFSET);
    method(self, matcher);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define BitCollector lucy_BitCollector
  #define BITCOLLECTOR LUCY_BITCOLLECTOR
  #define BitColl_new lucy_BitColl_new
  #define BitColl_init lucy_BitColl_init
  #define BitColl_get_class lucy_BitColl_get_class
  #define BitColl_get_class_name lucy_BitColl_get_class_name
  #define BitColl_is_a lucy_BitColl_is_a
  #define BitColl_Destroy_IMP LUCY_BitColl_Destroy_IMP
  #define BitColl_Collect_IMP LUCY_BitColl_Collect_IMP
  #define BitColl_Need_Score_IMP LUCY_BitColl_Need_Score_IMP
  #define BitColl_To_Host LUCY_BitColl_To_Host
  #define BitColl_To_Host_t LUCY_BitColl_To_Host_t
  #define BitColl_Clone LUCY_BitColl_Clone
  #define BitColl_Clone_t LUCY_BitColl_Clone_t
  #define BitColl_Equals LUCY_BitColl_Equals
  #define BitColl_Equals_t LUCY_BitColl_Equals_t
  #define BitColl_Compare_To LUCY_BitColl_Compare_To
  #define BitColl_Compare_To_t LUCY_BitColl_Compare_To_t
  #define BitColl_Destroy LUCY_BitColl_Destroy
  #define BitColl_Destroy_t LUCY_BitColl_Destroy_t
  #define BitColl_To_String LUCY_BitColl_To_String
  #define BitColl_To_String_t LUCY_BitColl_To_String_t
  #define BitColl_Collect LUCY_BitColl_Collect
  #define BitColl_Collect_t LUCY_BitColl_Collect_t
  #define BitColl_Set_Reader LUCY_BitColl_Set_Reader
  #define BitColl_Set_Reader_t LUCY_BitColl_Set_Reader_t
  #define BitColl_Set_Base LUCY_BitColl_Set_Base
  #define BitColl_Set_Base_t LUCY_BitColl_Set_Base_t
  #define BitColl_Need_Score LUCY_BitColl_Need_Score
  #define BitColl_Need_Score_t LUCY_BitColl_Need_Score_t
  #define BitColl_Set_Matcher LUCY_BitColl_Set_Matcher
  #define BitColl_Set_Matcher_t LUCY_BitColl_Set_Matcher_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy\Search\Collector.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_OFFSETCOLLECTOR
extern uint32_t lucy_OffsetColl_IVARS_OFFSET;
typedef struct lucy_OffsetCollectorIVARS lucy_OffsetCollectorIVARS;
static CFISH_INLINE lucy_OffsetCollectorIVARS*
lucy_OffsetColl_IVARS(lucy_OffsetCollector *self) {
   char *ptr = (char*)self + lucy_OffsetColl_IVARS_OFFSET;
   return (lucy_OffsetCollectorIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define OffsetCollectorIVARS lucy_OffsetCollectorIVARS
  #define OffsetColl_IVARS lucy_OffsetColl_IVARS
#endif

struct lucy_OffsetCollectorIVARS {
    lucy_SegReader* reader;
    lucy_Matcher* matcher;
    int32_t base;
    int32_t offset;
    lucy_Collector* inner_coll;
};

#endif /* C_LUCY_OFFSETCOLLECTOR */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_OffsetCollector*
lucy_OffsetColl_new(lucy_Collector* collector, int32_t offset);

LUCY_VISIBLE lucy_OffsetCollector*
lucy_OffsetColl_init(lucy_OffsetCollector* self, lucy_Collector* collector, int32_t offset);

void
LUCY_OffsetColl_Destroy_IMP(lucy_OffsetCollector* self);

void
LUCY_OffsetColl_Collect_IMP(lucy_OffsetCollector* self, int32_t doc_id);

bool
LUCY_OffsetColl_Need_Score_IMP(lucy_OffsetCollector* self);

void
LUCY_OffsetColl_Set_Reader_IMP(lucy_OffsetCollector* self, lucy_SegReader* reader);

void
LUCY_OffsetColl_Set_Base_IMP(lucy_OffsetCollector* self, int32_t base);

void
LUCY_OffsetColl_Set_Matcher_IMP(lucy_OffsetCollector* self, lucy_Matcher* matcher);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_OffsetColl_To_Host_t)(lucy_OffsetCollector* self, void* vcache);

typedef cfish_Obj*
(*LUCY_OffsetColl_Clone_t)(lucy_OffsetCollector* self);

typedef bool
(*LUCY_OffsetColl_Equals_t)(lucy_OffsetCollector* self, cfish_Obj* other);

typedef int32_t
(*LUCY_OffsetColl_Compare_To_t)(lucy_OffsetCollector* self, cfish_Obj* other);

typedef void
(*LUCY_OffsetColl_Destroy_t)(lucy_OffsetCollector* self);

typedef cfish_String*
(*LUCY_OffsetColl_To_String_t)(lucy_OffsetCollector* self);

typedef void
(*LUCY_OffsetColl_Collect_t)(lucy_OffsetCollector* self, int32_t doc_id);

typedef void
(*LUCY_OffsetColl_Set_Reader_t)(lucy_OffsetCollector* self, lucy_SegReader* reader);

typedef void
(*LUCY_OffsetColl_Set_Base_t)(lucy_OffsetCollector* self, int32_t base);

typedef bool
(*LUCY_OffsetColl_Need_Score_t)(lucy_OffsetCollector* self);

typedef void
(*LUCY_OffsetColl_Set_Matcher_t)(lucy_OffsetCollector* self, lucy_Matcher* matcher);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_OffsetColl_get_class(lucy_OffsetCollector *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_OffsetColl_get_class_name(lucy_OffsetCollector *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_OffsetColl_is_a(lucy_OffsetCollector *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_OffsetColl_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_OffsetColl_To_Host(lucy_OffsetCollector* self, void* vcache) {
    const LUCY_OffsetColl_To_Host_t method = (LUCY_OffsetColl_To_Host_t)cfish_obj_method(self, LUCY_OffsetColl_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_OffsetColl_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_OffsetColl_Clone(lucy_OffsetCollector* self) {
    const LUCY_OffsetColl_Clone_t method = (LUCY_OffsetColl_Clone_t)cfish_obj_method(self, LUCY_OffsetColl_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_OffsetColl_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_OffsetColl_Equals(lucy_OffsetCollector* self, cfish_Obj* other) {
    const LUCY_OffsetColl_Equals_t method = (LUCY_OffsetColl_Equals_t)cfish_obj_method(self, LUCY_OffsetColl_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_OffsetColl_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_OffsetColl_Compare_To(lucy_OffsetCollector* self, cfish_Obj* other) {
    const LUCY_OffsetColl_Compare_To_t method = (LUCY_OffsetColl_Compare_To_t)cfish_obj_method(self, LUCY_OffsetColl_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_OffsetColl_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_OffsetColl_Destroy(lucy_OffsetCollector* self) {
    const LUCY_OffsetColl_Destroy_t method = (LUCY_OffsetColl_Destroy_t)cfish_obj_method(self, LUCY_OffsetColl_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_OffsetColl_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_OffsetColl_To_String(lucy_OffsetCollector* self) {
    const LUCY_OffsetColl_To_String_t method = (LUCY_OffsetColl_To_String_t)cfish_obj_method(self, LUCY_OffsetColl_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_OffsetColl_Collect_OFFSET;
static CFISH_INLINE void
LUCY_OffsetColl_Collect(lucy_OffsetCollector* self, int32_t doc_id) {
    const LUCY_OffsetColl_Collect_t method = (LUCY_OffsetColl_Collect_t)cfish_obj_method(self, LUCY_OffsetColl_Collect_OFFSET);
    method(self, doc_id);
}

extern LUCY_VISIBLE uint32_t LUCY_OffsetColl_Set_Reader_OFFSET;
static CFISH_INLINE void
LUCY_OffsetColl_Set_Reader(lucy_OffsetCollector* self, lucy_SegReader* reader) {
    const LUCY_OffsetColl_Set_Reader_t method = (LUCY_OffsetColl_Set_Reader_t)cfish_obj_method(self, LUCY_OffsetColl_Set_Reader_OFFSET);
    method(self, reader);
}

extern LUCY_VISIBLE uint32_t LUCY_OffsetColl_Set_Base_OFFSET;
static CFISH_INLINE void
LUCY_OffsetColl_Set_Base(lucy_OffsetCollector* self, int32_t base) {
    const LUCY_OffsetColl_Set_Base_t method = (LUCY_OffsetColl_Set_Base_t)cfish_obj_method(self, LUCY_OffsetColl_Set_Base_OFFSET);
    method(self, base);
}

extern LUCY_VISIBLE uint32_t LUCY_OffsetColl_Need_Score_OFFSET;
static CFISH_INLINE bool
LUCY_OffsetColl_Need_Score(lucy_OffsetCollector* self) {
    const LUCY_OffsetColl_Need_Score_t method = (LUCY_OffsetColl_Need_Score_t)cfish_obj_method(self, LUCY_OffsetColl_Need_Score_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_OffsetColl_Set_Matcher_OFFSET;
static CFISH_INLINE void
LUCY_OffsetColl_Set_Matcher(lucy_OffsetCollector* self, lucy_Matcher* matcher) {
    const LUCY_OffsetColl_Set_Matcher_t method = (LUCY_OffsetColl_Set_Matcher_t)cfish_obj_method(self, LUCY_OffsetColl_Set_Matcher_OFFSET);
    method(self, matcher);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define OffsetCollector lucy_OffsetCollector
  #define OFFSETCOLLECTOR LUCY_OFFSETCOLLECTOR
  #define OffsetColl_new lucy_OffsetColl_new
  #define OffsetColl_init lucy_OffsetColl_init
  #define OffsetColl_get_class lucy_OffsetColl_get_class
  #define OffsetColl_get_class_name lucy_OffsetColl_get_class_name
  #define OffsetColl_is_a lucy_OffsetColl_is_a
  #define OffsetColl_Destroy_IMP LUCY_OffsetColl_Destroy_IMP
  #define OffsetColl_Collect_IMP LUCY_OffsetColl_Collect_IMP
  #define OffsetColl_Need_Score_IMP LUCY_OffsetColl_Need_Score_IMP
  #define OffsetColl_Set_Reader_IMP LUCY_OffsetColl_Set_Reader_IMP
  #define OffsetColl_Set_Base_IMP LUCY_OffsetColl_Set_Base_IMP
  #define OffsetColl_Set_Matcher_IMP LUCY_OffsetColl_Set_Matcher_IMP
  #define OffsetColl_To_Host LUCY_OffsetColl_To_Host
  #define OffsetColl_To_Host_t LUCY_OffsetColl_To_Host_t
  #define OffsetColl_Clone LUCY_OffsetColl_Clone
  #define OffsetColl_Clone_t LUCY_OffsetColl_Clone_t
  #define OffsetColl_Equals LUCY_OffsetColl_Equals
  #define OffsetColl_Equals_t LUCY_OffsetColl_Equals_t
  #define OffsetColl_Compare_To LUCY_OffsetColl_Compare_To
  #define OffsetColl_Compare_To_t LUCY_OffsetColl_Compare_To_t
  #define OffsetColl_Destroy LUCY_OffsetColl_Destroy
  #define OffsetColl_Destroy_t LUCY_OffsetColl_Destroy_t
  #define OffsetColl_To_String LUCY_OffsetColl_To_String
  #define OffsetColl_To_String_t LUCY_OffsetColl_To_String_t
  #define OffsetColl_Collect LUCY_OffsetColl_Collect
  #define OffsetColl_Collect_t LUCY_OffsetColl_Collect_t
  #define OffsetColl_Set_Reader LUCY_OffsetColl_Set_Reader
  #define OffsetColl_Set_Reader_t LUCY_OffsetColl_Set_Reader_t
  #define OffsetColl_Set_Base LUCY_OffsetColl_Set_Base
  #define OffsetColl_Set_Base_t LUCY_OffsetColl_Set_Base_t
  #define OffsetColl_Need_Score LUCY_OffsetColl_Need_Score
  #define OffsetColl_Need_Score_t LUCY_OffsetColl_Need_Score_t
  #define OffsetColl_Set_Matcher LUCY_OffsetColl_Set_Matcher
  #define OffsetColl_Set_Matcher_t LUCY_OffsetColl_Set_Matcher_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_SEARCH_COLLECTOR */




