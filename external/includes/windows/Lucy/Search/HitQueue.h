/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_SEARCH_HITQUEUE
#define H_LUCY_SEARCH_HITQUEUE 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy\Util\PriorityQueue.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_HITQUEUE
extern uint32_t lucy_HitQ_IVARS_OFFSET;
typedef struct lucy_HitQueueIVARS lucy_HitQueueIVARS;
static CFISH_INLINE lucy_HitQueueIVARS*
lucy_HitQ_IVARS(lucy_HitQueue *self) {
   char *ptr = (char*)self + lucy_HitQ_IVARS_OFFSET;
   return (lucy_HitQueueIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define HitQueueIVARS lucy_HitQueueIVARS
  #define HitQ_IVARS lucy_HitQ_IVARS
#endif

struct lucy_HitQueueIVARS {
    uint32_t size;
    uint32_t max_size;
    cfish_Obj** heap;
    lucy_FieldType** field_types;
    uint8_t* actions;
    uint32_t num_actions;
    bool need_values;
};

#endif /* C_LUCY_HITQUEUE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_HitQueue*
lucy_HitQ_new(lucy_Schema* schema, lucy_SortSpec* sort_spec, uint32_t wanted);

LUCY_VISIBLE lucy_HitQueue*
lucy_HitQ_init(lucy_HitQueue* self, lucy_Schema* schema, lucy_SortSpec* sort_spec, uint32_t wanted);

void
LUCY_HitQ_Destroy_IMP(lucy_HitQueue* self);

cfish_Obj*
LUCY_HitQ_Jostle_IMP(lucy_HitQueue* self, cfish_Obj* element);

bool
LUCY_HitQ_Less_Than_IMP(lucy_HitQueue* self, cfish_Obj* a, cfish_Obj* b);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_HitQ_To_Host_t)(lucy_HitQueue* self, void* vcache);

typedef cfish_Obj*
(*LUCY_HitQ_Clone_t)(lucy_HitQueue* self);

typedef bool
(*LUCY_HitQ_Equals_t)(lucy_HitQueue* self, cfish_Obj* other);

typedef int32_t
(*LUCY_HitQ_Compare_To_t)(lucy_HitQueue* self, cfish_Obj* other);

typedef void
(*LUCY_HitQ_Destroy_t)(lucy_HitQueue* self);

typedef cfish_String*
(*LUCY_HitQ_To_String_t)(lucy_HitQueue* self);

typedef bool
(*LUCY_HitQ_Less_Than_t)(lucy_HitQueue* self, cfish_Obj* a, cfish_Obj* b);

typedef bool
(*LUCY_HitQ_Insert_t)(lucy_HitQueue* self, cfish_Obj* element);

typedef cfish_Obj*
(*LUCY_HitQ_Jostle_t)(lucy_HitQueue* self, cfish_Obj* element);

typedef cfish_Obj*
(*LUCY_HitQ_Pop_t)(lucy_HitQueue* self);

typedef cfish_Vector*
(*LUCY_HitQ_Pop_All_t)(lucy_HitQueue* self);

typedef cfish_Obj*
(*LUCY_HitQ_Peek_t)(lucy_HitQueue* self);

typedef uint32_t
(*LUCY_HitQ_Get_Size_t)(lucy_HitQueue* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_HitQ_get_class(lucy_HitQueue *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_HitQ_get_class_name(lucy_HitQueue *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_HitQ_is_a(lucy_HitQueue *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_HitQ_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_HitQ_To_Host(lucy_HitQueue* self, void* vcache) {
    const LUCY_HitQ_To_Host_t method = (LUCY_HitQ_To_Host_t)cfish_obj_method(self, LUCY_HitQ_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_HitQ_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_HitQ_Clone(lucy_HitQueue* self) {
    const LUCY_HitQ_Clone_t method = (LUCY_HitQ_Clone_t)cfish_obj_method(self, LUCY_HitQ_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_HitQ_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_HitQ_Equals(lucy_HitQueue* self, cfish_Obj* other) {
    const LUCY_HitQ_Equals_t method = (LUCY_HitQ_Equals_t)cfish_obj_method(self, LUCY_HitQ_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_HitQ_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_HitQ_Compare_To(lucy_HitQueue* self, cfish_Obj* other) {
    const LUCY_HitQ_Compare_To_t method = (LUCY_HitQ_Compare_To_t)cfish_obj_method(self, LUCY_HitQ_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_HitQ_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_HitQ_Destroy(lucy_HitQueue* self) {
    const LUCY_HitQ_Destroy_t method = (LUCY_HitQ_Destroy_t)cfish_obj_method(self, LUCY_HitQ_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_HitQ_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_HitQ_To_String(lucy_HitQueue* self) {
    const LUCY_HitQ_To_String_t method = (LUCY_HitQ_To_String_t)cfish_obj_method(self, LUCY_HitQ_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_HitQ_Less_Than_OFFSET;
static CFISH_INLINE bool
LUCY_HitQ_Less_Than(lucy_HitQueue* self, cfish_Obj* a, cfish_Obj* b) {
    const LUCY_HitQ_Less_Than_t method = (LUCY_HitQ_Less_Than_t)cfish_obj_method(self, LUCY_HitQ_Less_Than_OFFSET);
    return method(self, a, b);
}

extern LUCY_VISIBLE uint32_t LUCY_HitQ_Insert_OFFSET;
static CFISH_INLINE bool
LUCY_HitQ_Insert(lucy_HitQueue* self, cfish_Obj* element) {
    const LUCY_HitQ_Insert_t method = (LUCY_HitQ_Insert_t)cfish_obj_method(self, LUCY_HitQ_Insert_OFFSET);
    return method(self, element);
}

extern LUCY_VISIBLE uint32_t LUCY_HitQ_Jostle_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_HitQ_Jostle(lucy_HitQueue* self, cfish_Obj* element) {
    const LUCY_HitQ_Jostle_t method = (LUCY_HitQ_Jostle_t)cfish_obj_method(self, LUCY_HitQ_Jostle_OFFSET);
    return method(self, element);
}

extern LUCY_VISIBLE uint32_t LUCY_HitQ_Pop_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_HitQ_Pop(lucy_HitQueue* self) {
    const LUCY_HitQ_Pop_t method = (LUCY_HitQ_Pop_t)cfish_obj_method(self, LUCY_HitQ_Pop_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_HitQ_Pop_All_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_HitQ_Pop_All(lucy_HitQueue* self) {
    const LUCY_HitQ_Pop_All_t method = (LUCY_HitQ_Pop_All_t)cfish_obj_method(self, LUCY_HitQ_Pop_All_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_HitQ_Peek_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_HitQ_Peek(lucy_HitQueue* self) {
    const LUCY_HitQ_Peek_t method = (LUCY_HitQ_Peek_t)cfish_obj_method(self, LUCY_HitQ_Peek_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_HitQ_Get_Size_OFFSET;
static CFISH_INLINE uint32_t
LUCY_HitQ_Get_Size(lucy_HitQueue* self) {
    const LUCY_HitQ_Get_Size_t method = (LUCY_HitQ_Get_Size_t)cfish_obj_method(self, LUCY_HitQ_Get_Size_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define HitQueue lucy_HitQueue
  #define HITQUEUE LUCY_HITQUEUE
  #define HitQ_new lucy_HitQ_new
  #define HitQ_init lucy_HitQ_init
  #define HitQ_get_class lucy_HitQ_get_class
  #define HitQ_get_class_name lucy_HitQ_get_class_name
  #define HitQ_is_a lucy_HitQ_is_a
  #define HitQ_Destroy_IMP LUCY_HitQ_Destroy_IMP
  #define HitQ_Jostle_IMP LUCY_HitQ_Jostle_IMP
  #define HitQ_Less_Than_IMP LUCY_HitQ_Less_Than_IMP
  #define HitQ_To_Host LUCY_HitQ_To_Host
  #define HitQ_To_Host_t LUCY_HitQ_To_Host_t
  #define HitQ_Clone LUCY_HitQ_Clone
  #define HitQ_Clone_t LUCY_HitQ_Clone_t
  #define HitQ_Equals LUCY_HitQ_Equals
  #define HitQ_Equals_t LUCY_HitQ_Equals_t
  #define HitQ_Compare_To LUCY_HitQ_Compare_To
  #define HitQ_Compare_To_t LUCY_HitQ_Compare_To_t
  #define HitQ_Destroy LUCY_HitQ_Destroy
  #define HitQ_Destroy_t LUCY_HitQ_Destroy_t
  #define HitQ_To_String LUCY_HitQ_To_String
  #define HitQ_To_String_t LUCY_HitQ_To_String_t
  #define HitQ_Less_Than LUCY_HitQ_Less_Than
  #define HitQ_Less_Than_t LUCY_HitQ_Less_Than_t
  #define HitQ_Insert LUCY_HitQ_Insert
  #define HitQ_Insert_t LUCY_HitQ_Insert_t
  #define HitQ_Jostle LUCY_HitQ_Jostle
  #define HitQ_Jostle_t LUCY_HitQ_Jostle_t
  #define HitQ_Pop LUCY_HitQ_Pop
  #define HitQ_Pop_t LUCY_HitQ_Pop_t
  #define HitQ_Pop_All LUCY_HitQ_Pop_All
  #define HitQ_Pop_All_t LUCY_HitQ_Pop_All_t
  #define HitQ_Peek LUCY_HitQ_Peek
  #define HitQ_Peek_t LUCY_HitQ_Peek_t
  #define HitQ_Get_Size LUCY_HitQ_Get_Size
  #define HitQ_Get_Size_t LUCY_HitQ_Get_Size_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_SEARCH_HITQUEUE */




