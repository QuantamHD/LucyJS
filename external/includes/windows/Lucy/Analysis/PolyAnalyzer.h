/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_ANALYSIS_POLYANALYZER
#define H_LUCY_ANALYSIS_POLYANALYZER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy\Analysis\Analyzer.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_POLYANALYZER
extern uint32_t lucy_PolyAnalyzer_IVARS_OFFSET;
typedef struct lucy_PolyAnalyzerIVARS lucy_PolyAnalyzerIVARS;
static CFISH_INLINE lucy_PolyAnalyzerIVARS*
lucy_PolyAnalyzer_IVARS(lucy_PolyAnalyzer *self) {
   char *ptr = (char*)self + lucy_PolyAnalyzer_IVARS_OFFSET;
   return (lucy_PolyAnalyzerIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define PolyAnalyzerIVARS lucy_PolyAnalyzerIVARS
  #define PolyAnalyzer_IVARS lucy_PolyAnalyzer_IVARS
#endif

struct lucy_PolyAnalyzerIVARS {
    cfish_Vector* analyzers;
};

#endif /* C_LUCY_POLYANALYZER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_PolyAnalyzer*
lucy_PolyAnalyzer_new(cfish_String* language, cfish_Vector* analyzers);

LUCY_VISIBLE lucy_PolyAnalyzer*
lucy_PolyAnalyzer_init(lucy_PolyAnalyzer* self, cfish_String* language, cfish_Vector* analyzers);

cfish_Vector*
LUCY_PolyAnalyzer_Get_Analyzers_IMP(lucy_PolyAnalyzer* self);

lucy_Inversion*
LUCY_PolyAnalyzer_Transform_IMP(lucy_PolyAnalyzer* self, lucy_Inversion* inversion);

lucy_Inversion*
LUCY_PolyAnalyzer_Transform_Text_IMP(lucy_PolyAnalyzer* self, cfish_String* text);

bool
LUCY_PolyAnalyzer_Equals_IMP(lucy_PolyAnalyzer* self, cfish_Obj* other);

cfish_Obj*
LUCY_PolyAnalyzer_Dump_IMP(lucy_PolyAnalyzer* self);

lucy_PolyAnalyzer*
LUCY_PolyAnalyzer_Load_IMP(lucy_PolyAnalyzer* self, cfish_Obj* dump);

void
LUCY_PolyAnalyzer_Destroy_IMP(lucy_PolyAnalyzer* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_PolyAnalyzer_To_Host_t)(lucy_PolyAnalyzer* self, void* vcache);

typedef cfish_Obj*
(*LUCY_PolyAnalyzer_Clone_t)(lucy_PolyAnalyzer* self);

typedef bool
(*LUCY_PolyAnalyzer_Equals_t)(lucy_PolyAnalyzer* self, cfish_Obj* other);

typedef int32_t
(*LUCY_PolyAnalyzer_Compare_To_t)(lucy_PolyAnalyzer* self, cfish_Obj* other);

typedef void
(*LUCY_PolyAnalyzer_Destroy_t)(lucy_PolyAnalyzer* self);

typedef cfish_String*
(*LUCY_PolyAnalyzer_To_String_t)(lucy_PolyAnalyzer* self);

typedef lucy_Inversion*
(*LUCY_PolyAnalyzer_Transform_t)(lucy_PolyAnalyzer* self, lucy_Inversion* inversion);

typedef lucy_Inversion*
(*LUCY_PolyAnalyzer_Transform_Text_t)(lucy_PolyAnalyzer* self, cfish_String* text);

typedef cfish_Vector*
(*LUCY_PolyAnalyzer_Split_t)(lucy_PolyAnalyzer* self, cfish_String* text);

typedef cfish_Obj*
(*LUCY_PolyAnalyzer_Dump_t)(lucy_PolyAnalyzer* self);

typedef lucy_PolyAnalyzer*
(*LUCY_PolyAnalyzer_Load_t)(lucy_PolyAnalyzer* self, cfish_Obj* dump);

typedef cfish_Vector*
(*LUCY_PolyAnalyzer_Get_Analyzers_t)(lucy_PolyAnalyzer* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_PolyAnalyzer_get_class(lucy_PolyAnalyzer *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_PolyAnalyzer_get_class_name(lucy_PolyAnalyzer *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_PolyAnalyzer_is_a(lucy_PolyAnalyzer *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_PolyAnalyzer_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_PolyAnalyzer_To_Host(lucy_PolyAnalyzer* self, void* vcache) {
    const LUCY_PolyAnalyzer_To_Host_t method = (LUCY_PolyAnalyzer_To_Host_t)cfish_obj_method(self, LUCY_PolyAnalyzer_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyAnalyzer_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PolyAnalyzer_Clone(lucy_PolyAnalyzer* self) {
    const LUCY_PolyAnalyzer_Clone_t method = (LUCY_PolyAnalyzer_Clone_t)cfish_obj_method(self, LUCY_PolyAnalyzer_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyAnalyzer_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_PolyAnalyzer_Equals(lucy_PolyAnalyzer* self, cfish_Obj* other) {
    const LUCY_PolyAnalyzer_Equals_t method = (LUCY_PolyAnalyzer_Equals_t)cfish_obj_method(self, LUCY_PolyAnalyzer_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyAnalyzer_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_PolyAnalyzer_Compare_To(lucy_PolyAnalyzer* self, cfish_Obj* other) {
    const LUCY_PolyAnalyzer_Compare_To_t method = (LUCY_PolyAnalyzer_Compare_To_t)cfish_obj_method(self, LUCY_PolyAnalyzer_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyAnalyzer_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_PolyAnalyzer_Destroy(lucy_PolyAnalyzer* self) {
    const LUCY_PolyAnalyzer_Destroy_t method = (LUCY_PolyAnalyzer_Destroy_t)cfish_obj_method(self, LUCY_PolyAnalyzer_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyAnalyzer_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_PolyAnalyzer_To_String(lucy_PolyAnalyzer* self) {
    const LUCY_PolyAnalyzer_To_String_t method = (LUCY_PolyAnalyzer_To_String_t)cfish_obj_method(self, LUCY_PolyAnalyzer_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyAnalyzer_Transform_OFFSET;
static CFISH_INLINE lucy_Inversion*
LUCY_PolyAnalyzer_Transform(lucy_PolyAnalyzer* self, lucy_Inversion* inversion) {
    const LUCY_PolyAnalyzer_Transform_t method = (LUCY_PolyAnalyzer_Transform_t)cfish_obj_method(self, LUCY_PolyAnalyzer_Transform_OFFSET);
    return method(self, inversion);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyAnalyzer_Transform_Text_OFFSET;
static CFISH_INLINE lucy_Inversion*
LUCY_PolyAnalyzer_Transform_Text(lucy_PolyAnalyzer* self, cfish_String* text) {
    const LUCY_PolyAnalyzer_Transform_Text_t method = (LUCY_PolyAnalyzer_Transform_Text_t)cfish_obj_method(self, LUCY_PolyAnalyzer_Transform_Text_OFFSET);
    return method(self, text);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyAnalyzer_Split_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_PolyAnalyzer_Split(lucy_PolyAnalyzer* self, cfish_String* text) {
    const LUCY_PolyAnalyzer_Split_t method = (LUCY_PolyAnalyzer_Split_t)cfish_obj_method(self, LUCY_PolyAnalyzer_Split_OFFSET);
    return method(self, text);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyAnalyzer_Dump_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PolyAnalyzer_Dump(lucy_PolyAnalyzer* self) {
    const LUCY_PolyAnalyzer_Dump_t method = (LUCY_PolyAnalyzer_Dump_t)cfish_obj_method(self, LUCY_PolyAnalyzer_Dump_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyAnalyzer_Load_OFFSET;
static CFISH_INLINE lucy_PolyAnalyzer*
LUCY_PolyAnalyzer_Load(lucy_PolyAnalyzer* self, cfish_Obj* dump) {
    const LUCY_PolyAnalyzer_Load_t method = (LUCY_PolyAnalyzer_Load_t)cfish_obj_method(self, LUCY_PolyAnalyzer_Load_OFFSET);
    return method(self, dump);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyAnalyzer_Get_Analyzers_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_PolyAnalyzer_Get_Analyzers(lucy_PolyAnalyzer* self) {
    const LUCY_PolyAnalyzer_Get_Analyzers_t method = (LUCY_PolyAnalyzer_Get_Analyzers_t)cfish_obj_method(self, LUCY_PolyAnalyzer_Get_Analyzers_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_PolyAnalyzer_Get_Analyzers_OVERRIDE NULL
#else
cfish_Vector*
Lucy_PolyAnalyzer_Get_Analyzers_OVERRIDE(lucy_PolyAnalyzer* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define PolyAnalyzer lucy_PolyAnalyzer
  #define POLYANALYZER LUCY_POLYANALYZER
  #define PolyAnalyzer_new lucy_PolyAnalyzer_new
  #define PolyAnalyzer_init lucy_PolyAnalyzer_init
  #define PolyAnalyzer_get_class lucy_PolyAnalyzer_get_class
  #define PolyAnalyzer_get_class_name lucy_PolyAnalyzer_get_class_name
  #define PolyAnalyzer_is_a lucy_PolyAnalyzer_is_a
  #define PolyAnalyzer_Get_Analyzers_IMP LUCY_PolyAnalyzer_Get_Analyzers_IMP
  #define PolyAnalyzer_Transform_IMP LUCY_PolyAnalyzer_Transform_IMP
  #define PolyAnalyzer_Transform_Text_IMP LUCY_PolyAnalyzer_Transform_Text_IMP
  #define PolyAnalyzer_Equals_IMP LUCY_PolyAnalyzer_Equals_IMP
  #define PolyAnalyzer_Dump_IMP LUCY_PolyAnalyzer_Dump_IMP
  #define PolyAnalyzer_Load_IMP LUCY_PolyAnalyzer_Load_IMP
  #define PolyAnalyzer_Destroy_IMP LUCY_PolyAnalyzer_Destroy_IMP
  #define PolyAnalyzer_To_Host LUCY_PolyAnalyzer_To_Host
  #define PolyAnalyzer_To_Host_t LUCY_PolyAnalyzer_To_Host_t
  #define PolyAnalyzer_Clone LUCY_PolyAnalyzer_Clone
  #define PolyAnalyzer_Clone_t LUCY_PolyAnalyzer_Clone_t
  #define PolyAnalyzer_Equals LUCY_PolyAnalyzer_Equals
  #define PolyAnalyzer_Equals_t LUCY_PolyAnalyzer_Equals_t
  #define PolyAnalyzer_Compare_To LUCY_PolyAnalyzer_Compare_To
  #define PolyAnalyzer_Compare_To_t LUCY_PolyAnalyzer_Compare_To_t
  #define PolyAnalyzer_Destroy LUCY_PolyAnalyzer_Destroy
  #define PolyAnalyzer_Destroy_t LUCY_PolyAnalyzer_Destroy_t
  #define PolyAnalyzer_To_String LUCY_PolyAnalyzer_To_String
  #define PolyAnalyzer_To_String_t LUCY_PolyAnalyzer_To_String_t
  #define PolyAnalyzer_Transform LUCY_PolyAnalyzer_Transform
  #define PolyAnalyzer_Transform_t LUCY_PolyAnalyzer_Transform_t
  #define PolyAnalyzer_Transform_Text LUCY_PolyAnalyzer_Transform_Text
  #define PolyAnalyzer_Transform_Text_t LUCY_PolyAnalyzer_Transform_Text_t
  #define PolyAnalyzer_Split LUCY_PolyAnalyzer_Split
  #define PolyAnalyzer_Split_t LUCY_PolyAnalyzer_Split_t
  #define PolyAnalyzer_Dump LUCY_PolyAnalyzer_Dump
  #define PolyAnalyzer_Dump_t LUCY_PolyAnalyzer_Dump_t
  #define PolyAnalyzer_Load LUCY_PolyAnalyzer_Load
  #define PolyAnalyzer_Load_t LUCY_PolyAnalyzer_Load_t
  #define PolyAnalyzer_Get_Analyzers LUCY_PolyAnalyzer_Get_Analyzers
  #define PolyAnalyzer_Get_Analyzers_t LUCY_PolyAnalyzer_Get_Analyzers_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_ANALYSIS_POLYANALYZER */




