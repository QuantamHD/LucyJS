/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_UTIL_JSON
#define H_LUCY_UTIL_JSON 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish\Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_JSON
extern uint32_t lucy_Json_IVARS_OFFSET;
typedef struct lucy_JsonIVARS lucy_JsonIVARS;
static CFISH_INLINE lucy_JsonIVARS*
lucy_Json_IVARS(lucy_Json *self) {
   char *ptr = (char*)self + lucy_Json_IVARS_OFFSET;
   return (lucy_JsonIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define JsonIVARS lucy_JsonIVARS
  #define Json_IVARS lucy_Json_IVARS
#endif


#endif /* C_LUCY_JSON */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE cfish_String*
lucy_Json_to_json(cfish_Obj* dump);

LUCY_VISIBLE cfish_Obj*
lucy_Json_from_json(cfish_String* json);

LUCY_VISIBLE bool
lucy_Json_spew_json(cfish_Obj* dump, lucy_Folder* folder, cfish_String* path);

LUCY_VISIBLE cfish_Obj*
lucy_Json_slurp_json(lucy_Folder* folder, cfish_String* path);

LUCY_VISIBLE void
lucy_Json_set_tolerant(bool tolerant);

LUCY_VISIBLE int64_t
lucy_Json_obj_to_i64(cfish_Obj* obj);

LUCY_VISIBLE double
lucy_Json_obj_to_f64(cfish_Obj* obj);

LUCY_VISIBLE bool
lucy_Json_obj_to_bool(cfish_Obj* obj);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_Json_To_Host_t)(lucy_Json* self, void* vcache);

typedef cfish_Obj*
(*LUCY_Json_Clone_t)(lucy_Json* self);

typedef bool
(*LUCY_Json_Equals_t)(lucy_Json* self, cfish_Obj* other);

typedef int32_t
(*LUCY_Json_Compare_To_t)(lucy_Json* self, cfish_Obj* other);

typedef void
(*LUCY_Json_Destroy_t)(lucy_Json* self);

typedef cfish_String*
(*LUCY_Json_To_String_t)(lucy_Json* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_Json_get_class(lucy_Json *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_Json_get_class_name(lucy_Json *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_Json_is_a(lucy_Json *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_Json_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_Json_To_Host(lucy_Json* self, void* vcache) {
    const LUCY_Json_To_Host_t method = (LUCY_Json_To_Host_t)cfish_obj_method(self, LUCY_Json_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_Json_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_Json_Clone(lucy_Json* self) {
    const LUCY_Json_Clone_t method = (LUCY_Json_Clone_t)cfish_obj_method(self, LUCY_Json_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Json_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_Json_Equals(lucy_Json* self, cfish_Obj* other) {
    const LUCY_Json_Equals_t method = (LUCY_Json_Equals_t)cfish_obj_method(self, LUCY_Json_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Json_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_Json_Compare_To(lucy_Json* self, cfish_Obj* other) {
    const LUCY_Json_Compare_To_t method = (LUCY_Json_Compare_To_t)cfish_obj_method(self, LUCY_Json_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_Json_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_Json_Destroy(lucy_Json* self) {
    const LUCY_Json_Destroy_t method = (LUCY_Json_Destroy_t)cfish_obj_method(self, LUCY_Json_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_Json_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_Json_To_String(lucy_Json* self) {
    const LUCY_Json_To_String_t method = (LUCY_Json_To_String_t)cfish_obj_method(self, LUCY_Json_To_String_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define Json lucy_Json
  #define JSON LUCY_JSON
  #define Json_to_json lucy_Json_to_json
  #define Json_from_json lucy_Json_from_json
  #define Json_spew_json lucy_Json_spew_json
  #define Json_slurp_json lucy_Json_slurp_json
  #define Json_set_tolerant lucy_Json_set_tolerant
  #define Json_obj_to_i64 lucy_Json_obj_to_i64
  #define Json_obj_to_f64 lucy_Json_obj_to_f64
  #define Json_obj_to_bool lucy_Json_obj_to_bool
  #define Json_get_class lucy_Json_get_class
  #define Json_get_class_name lucy_Json_get_class_name
  #define Json_is_a lucy_Json_is_a
  #define Json_To_Host LUCY_Json_To_Host
  #define Json_To_Host_t LUCY_Json_To_Host_t
  #define Json_Clone LUCY_Json_Clone
  #define Json_Clone_t LUCY_Json_Clone_t
  #define Json_Equals LUCY_Json_Equals
  #define Json_Equals_t LUCY_Json_Equals_t
  #define Json_Compare_To LUCY_Json_Compare_To
  #define Json_Compare_To_t LUCY_Json_Compare_To_t
  #define Json_Destroy LUCY_Json_Destroy
  #define Json_Destroy_t LUCY_Json_Destroy_t
  #define Json_To_String LUCY_Json_To_String
  #define Json_To_String_t LUCY_Json_To_String_t
#endif /* LUCY_USE_SHORT_NAMES */



struct lucy_JsonParserState 
{
    cfish_Obj *result;
    bool       errors;
};
typedef struct lucy_JsonParserState lucy_JsonParserState;




#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_UTIL_JSON */




