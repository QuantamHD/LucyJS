/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_UTIL_BLOBSORTEX
#define H_LUCY_UTIL_BLOBSORTEX 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy\Util\SortExternal.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_BLOBSORTEX
extern uint32_t lucy_BlobSortEx_IVARS_OFFSET;
typedef struct lucy_BlobSortExIVARS lucy_BlobSortExIVARS;
static CFISH_INLINE lucy_BlobSortExIVARS*
lucy_BlobSortEx_IVARS(lucy_BlobSortEx *self) {
   char *ptr = (char*)self + lucy_BlobSortEx_IVARS_OFFSET;
   return (lucy_BlobSortExIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define BlobSortExIVARS lucy_BlobSortExIVARS
  #define BlobSortEx_IVARS lucy_BlobSortEx_IVARS
#endif

struct lucy_BlobSortExIVARS {
    cfish_Obj** buffer;
    uint32_t buf_cap;
    uint32_t buf_max;
    uint32_t buf_tick;
    cfish_Obj** scratch;
    uint32_t scratch_cap;
    cfish_Vector* runs;
    cfish_Obj*** slice_starts;
    uint32_t* slice_sizes;
    uint32_t mem_thresh;
    bool flipped;
    cfish_Vector* external;
    uint32_t external_tick;
    uint32_t mem_consumed;
};

#endif /* C_LUCY_BLOBSORTEX */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_BlobSortEx*
lucy_BlobSortEx_new(uint32_t mem_thresh, cfish_Vector* external);

LUCY_VISIBLE lucy_BlobSortEx*
lucy_BlobSortEx_init(lucy_BlobSortEx* self, uint32_t mem_thresh, cfish_Vector* external);

void
LUCY_BlobSortEx_Feed_IMP(lucy_BlobSortEx* self, cfish_Obj* item);

void
LUCY_BlobSortEx_Flush_IMP(lucy_BlobSortEx* self);

uint32_t
LUCY_BlobSortEx_Refill_IMP(lucy_BlobSortEx* self);

void
LUCY_BlobSortEx_Clear_Buffer_IMP(lucy_BlobSortEx* self);

void
LUCY_BlobSortEx_Flip_IMP(lucy_BlobSortEx* self);

int
LUCY_BlobSortEx_Compare_IMP(lucy_BlobSortEx* self, cfish_Obj** ptr_a, cfish_Obj** ptr_b);

cfish_Vector*
LUCY_BlobSortEx_Peek_Cache_IMP(lucy_BlobSortEx* self);

cfish_Obj*
LUCY_BlobSortEx_Peek_Last_IMP(lucy_BlobSortEx* self);

uint32_t
LUCY_BlobSortEx_Get_Num_Runs_IMP(lucy_BlobSortEx* self);

void
LUCY_BlobSortEx_Destroy_IMP(lucy_BlobSortEx* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_BlobSortEx_To_Host_t)(lucy_BlobSortEx* self, void* vcache);

typedef cfish_Obj*
(*LUCY_BlobSortEx_Clone_t)(lucy_BlobSortEx* self);

typedef bool
(*LUCY_BlobSortEx_Equals_t)(lucy_BlobSortEx* self, cfish_Obj* other);

typedef int32_t
(*LUCY_BlobSortEx_Compare_To_t)(lucy_BlobSortEx* self, cfish_Obj* other);

typedef void
(*LUCY_BlobSortEx_Destroy_t)(lucy_BlobSortEx* self);

typedef cfish_String*
(*LUCY_BlobSortEx_To_String_t)(lucy_BlobSortEx* self);

typedef int
(*LUCY_BlobSortEx_Compare_t)(lucy_BlobSortEx* self, cfish_Obj** ptr_a, cfish_Obj** ptr_b);

typedef void
(*LUCY_BlobSortEx_Flush_t)(lucy_BlobSortEx* self);

typedef void
(*LUCY_BlobSortEx_Feed_t)(lucy_BlobSortEx* self, cfish_Obj* item);

typedef void
(*LUCY_BlobSortEx_Flip_t)(lucy_BlobSortEx* self);

typedef cfish_Obj*
(*LUCY_BlobSortEx_Fetch_t)(lucy_BlobSortEx* self);

typedef cfish_Obj*
(*LUCY_BlobSortEx_Peek_t)(lucy_BlobSortEx* self);

typedef void
(*LUCY_BlobSortEx_Add_Run_t)(lucy_BlobSortEx* self, lucy_SortExternal* run);

typedef void
(*LUCY_BlobSortEx_Shrink_t)(lucy_BlobSortEx* self);

typedef uint32_t
(*LUCY_BlobSortEx_Refill_t)(lucy_BlobSortEx* self);

typedef void
(*LUCY_BlobSortEx_Sort_Buffer_t)(lucy_BlobSortEx* self);

typedef void
(*LUCY_BlobSortEx_Clear_Buffer_t)(lucy_BlobSortEx* self);

typedef uint32_t
(*LUCY_BlobSortEx_Buffer_Count_t)(lucy_BlobSortEx* self);

typedef void
(*LUCY_BlobSortEx_Grow_Buffer_t)(lucy_BlobSortEx* self, uint32_t cap);

typedef void
(*LUCY_BlobSortEx_Set_Mem_Thresh_t)(lucy_BlobSortEx* self, uint32_t mem_thresh);

typedef cfish_Vector*
(*LUCY_BlobSortEx_Peek_Cache_t)(lucy_BlobSortEx* self);

typedef cfish_Obj*
(*LUCY_BlobSortEx_Peek_Last_t)(lucy_BlobSortEx* self);

typedef uint32_t
(*LUCY_BlobSortEx_Get_Num_Runs_t)(lucy_BlobSortEx* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_BlobSortEx_get_class(lucy_BlobSortEx *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_BlobSortEx_get_class_name(lucy_BlobSortEx *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_BlobSortEx_is_a(lucy_BlobSortEx *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_BlobSortEx_To_Host(lucy_BlobSortEx* self, void* vcache) {
    const LUCY_BlobSortEx_To_Host_t method = (LUCY_BlobSortEx_To_Host_t)cfish_obj_method(self, LUCY_BlobSortEx_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_BlobSortEx_Clone(lucy_BlobSortEx* self) {
    const LUCY_BlobSortEx_Clone_t method = (LUCY_BlobSortEx_Clone_t)cfish_obj_method(self, LUCY_BlobSortEx_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_BlobSortEx_Equals(lucy_BlobSortEx* self, cfish_Obj* other) {
    const LUCY_BlobSortEx_Equals_t method = (LUCY_BlobSortEx_Equals_t)cfish_obj_method(self, LUCY_BlobSortEx_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_BlobSortEx_Compare_To(lucy_BlobSortEx* self, cfish_Obj* other) {
    const LUCY_BlobSortEx_Compare_To_t method = (LUCY_BlobSortEx_Compare_To_t)cfish_obj_method(self, LUCY_BlobSortEx_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_BlobSortEx_Destroy(lucy_BlobSortEx* self) {
    const LUCY_BlobSortEx_Destroy_t method = (LUCY_BlobSortEx_Destroy_t)cfish_obj_method(self, LUCY_BlobSortEx_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_BlobSortEx_To_String(lucy_BlobSortEx* self) {
    const LUCY_BlobSortEx_To_String_t method = (LUCY_BlobSortEx_To_String_t)cfish_obj_method(self, LUCY_BlobSortEx_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Compare_OFFSET;
static CFISH_INLINE int
LUCY_BlobSortEx_Compare(lucy_BlobSortEx* self, cfish_Obj** ptr_a, cfish_Obj** ptr_b) {
    const LUCY_BlobSortEx_Compare_t method = (LUCY_BlobSortEx_Compare_t)cfish_obj_method(self, LUCY_BlobSortEx_Compare_OFFSET);
    return method(self, ptr_a, ptr_b);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Flush_OFFSET;
static CFISH_INLINE void
LUCY_BlobSortEx_Flush(lucy_BlobSortEx* self) {
    const LUCY_BlobSortEx_Flush_t method = (LUCY_BlobSortEx_Flush_t)cfish_obj_method(self, LUCY_BlobSortEx_Flush_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Feed_OFFSET;
static CFISH_INLINE void
LUCY_BlobSortEx_Feed(lucy_BlobSortEx* self, cfish_Obj* item) {
    const LUCY_BlobSortEx_Feed_t method = (LUCY_BlobSortEx_Feed_t)cfish_obj_method(self, LUCY_BlobSortEx_Feed_OFFSET);
    method(self, item);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Flip_OFFSET;
static CFISH_INLINE void
LUCY_BlobSortEx_Flip(lucy_BlobSortEx* self) {
    const LUCY_BlobSortEx_Flip_t method = (LUCY_BlobSortEx_Flip_t)cfish_obj_method(self, LUCY_BlobSortEx_Flip_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Fetch_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_BlobSortEx_Fetch(lucy_BlobSortEx* self) {
    const LUCY_BlobSortEx_Fetch_t method = (LUCY_BlobSortEx_Fetch_t)cfish_obj_method(self, LUCY_BlobSortEx_Fetch_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Peek_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_BlobSortEx_Peek(lucy_BlobSortEx* self) {
    const LUCY_BlobSortEx_Peek_t method = (LUCY_BlobSortEx_Peek_t)cfish_obj_method(self, LUCY_BlobSortEx_Peek_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Add_Run_OFFSET;
static CFISH_INLINE void
LUCY_BlobSortEx_Add_Run(lucy_BlobSortEx* self, lucy_SortExternal* run) {
    const LUCY_BlobSortEx_Add_Run_t method = (LUCY_BlobSortEx_Add_Run_t)cfish_obj_method(self, LUCY_BlobSortEx_Add_Run_OFFSET);
    method(self, run);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Shrink_OFFSET;
static CFISH_INLINE void
LUCY_BlobSortEx_Shrink(lucy_BlobSortEx* self) {
    const LUCY_BlobSortEx_Shrink_t method = (LUCY_BlobSortEx_Shrink_t)cfish_obj_method(self, LUCY_BlobSortEx_Shrink_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Refill_OFFSET;
static CFISH_INLINE uint32_t
LUCY_BlobSortEx_Refill(lucy_BlobSortEx* self) {
    const LUCY_BlobSortEx_Refill_t method = (LUCY_BlobSortEx_Refill_t)cfish_obj_method(self, LUCY_BlobSortEx_Refill_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Sort_Buffer_OFFSET;
static CFISH_INLINE void
LUCY_BlobSortEx_Sort_Buffer(lucy_BlobSortEx* self) {
    const LUCY_BlobSortEx_Sort_Buffer_t method = (LUCY_BlobSortEx_Sort_Buffer_t)cfish_obj_method(self, LUCY_BlobSortEx_Sort_Buffer_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Clear_Buffer_OFFSET;
static CFISH_INLINE void
LUCY_BlobSortEx_Clear_Buffer(lucy_BlobSortEx* self) {
    const LUCY_BlobSortEx_Clear_Buffer_t method = (LUCY_BlobSortEx_Clear_Buffer_t)cfish_obj_method(self, LUCY_BlobSortEx_Clear_Buffer_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Buffer_Count_OFFSET;
static CFISH_INLINE uint32_t
LUCY_BlobSortEx_Buffer_Count(lucy_BlobSortEx* self) {
    const LUCY_BlobSortEx_Buffer_Count_t method = (LUCY_BlobSortEx_Buffer_Count_t)cfish_obj_method(self, LUCY_BlobSortEx_Buffer_Count_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Grow_Buffer_OFFSET;
static CFISH_INLINE void
LUCY_BlobSortEx_Grow_Buffer(lucy_BlobSortEx* self, uint32_t cap) {
    const LUCY_BlobSortEx_Grow_Buffer_t method = (LUCY_BlobSortEx_Grow_Buffer_t)cfish_obj_method(self, LUCY_BlobSortEx_Grow_Buffer_OFFSET);
    method(self, cap);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Set_Mem_Thresh_OFFSET;
static CFISH_INLINE void
LUCY_BlobSortEx_Set_Mem_Thresh(lucy_BlobSortEx* self, uint32_t mem_thresh) {
    const LUCY_BlobSortEx_Set_Mem_Thresh_t method = (LUCY_BlobSortEx_Set_Mem_Thresh_t)cfish_obj_method(self, LUCY_BlobSortEx_Set_Mem_Thresh_OFFSET);
    method(self, mem_thresh);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Peek_Cache_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_BlobSortEx_Peek_Cache(lucy_BlobSortEx* self) {
    const LUCY_BlobSortEx_Peek_Cache_t method = (LUCY_BlobSortEx_Peek_Cache_t)cfish_obj_method(self, LUCY_BlobSortEx_Peek_Cache_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Peek_Last_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_BlobSortEx_Peek_Last(lucy_BlobSortEx* self) {
    const LUCY_BlobSortEx_Peek_Last_t method = (LUCY_BlobSortEx_Peek_Last_t)cfish_obj_method(self, LUCY_BlobSortEx_Peek_Last_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BlobSortEx_Get_Num_Runs_OFFSET;
static CFISH_INLINE uint32_t
LUCY_BlobSortEx_Get_Num_Runs(lucy_BlobSortEx* self) {
    const LUCY_BlobSortEx_Get_Num_Runs_t method = (LUCY_BlobSortEx_Get_Num_Runs_t)cfish_obj_method(self, LUCY_BlobSortEx_Get_Num_Runs_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_BlobSortEx_Peek_Cache_OVERRIDE NULL
#define Lucy_BlobSortEx_Peek_Last_OVERRIDE NULL
#define Lucy_BlobSortEx_Get_Num_Runs_OVERRIDE NULL
#else
cfish_Vector*
Lucy_BlobSortEx_Peek_Cache_OVERRIDE(lucy_BlobSortEx* self);
cfish_Obj*
Lucy_BlobSortEx_Peek_Last_OVERRIDE(lucy_BlobSortEx* self);
uint32_t
Lucy_BlobSortEx_Get_Num_Runs_OVERRIDE(lucy_BlobSortEx* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define BlobSortEx lucy_BlobSortEx
  #define BLOBSORTEX LUCY_BLOBSORTEX
  #define BlobSortEx_new lucy_BlobSortEx_new
  #define BlobSortEx_init lucy_BlobSortEx_init
  #define BlobSortEx_get_class lucy_BlobSortEx_get_class
  #define BlobSortEx_get_class_name lucy_BlobSortEx_get_class_name
  #define BlobSortEx_is_a lucy_BlobSortEx_is_a
  #define BlobSortEx_Feed_IMP LUCY_BlobSortEx_Feed_IMP
  #define BlobSortEx_Flush_IMP LUCY_BlobSortEx_Flush_IMP
  #define BlobSortEx_Refill_IMP LUCY_BlobSortEx_Refill_IMP
  #define BlobSortEx_Clear_Buffer_IMP LUCY_BlobSortEx_Clear_Buffer_IMP
  #define BlobSortEx_Flip_IMP LUCY_BlobSortEx_Flip_IMP
  #define BlobSortEx_Compare_IMP LUCY_BlobSortEx_Compare_IMP
  #define BlobSortEx_Peek_Cache_IMP LUCY_BlobSortEx_Peek_Cache_IMP
  #define BlobSortEx_Peek_Last_IMP LUCY_BlobSortEx_Peek_Last_IMP
  #define BlobSortEx_Get_Num_Runs_IMP LUCY_BlobSortEx_Get_Num_Runs_IMP
  #define BlobSortEx_Destroy_IMP LUCY_BlobSortEx_Destroy_IMP
  #define BlobSortEx_To_Host LUCY_BlobSortEx_To_Host
  #define BlobSortEx_To_Host_t LUCY_BlobSortEx_To_Host_t
  #define BlobSortEx_Clone LUCY_BlobSortEx_Clone
  #define BlobSortEx_Clone_t LUCY_BlobSortEx_Clone_t
  #define BlobSortEx_Equals LUCY_BlobSortEx_Equals
  #define BlobSortEx_Equals_t LUCY_BlobSortEx_Equals_t
  #define BlobSortEx_Compare_To LUCY_BlobSortEx_Compare_To
  #define BlobSortEx_Compare_To_t LUCY_BlobSortEx_Compare_To_t
  #define BlobSortEx_Destroy LUCY_BlobSortEx_Destroy
  #define BlobSortEx_Destroy_t LUCY_BlobSortEx_Destroy_t
  #define BlobSortEx_To_String LUCY_BlobSortEx_To_String
  #define BlobSortEx_To_String_t LUCY_BlobSortEx_To_String_t
  #define BlobSortEx_Compare LUCY_BlobSortEx_Compare
  #define BlobSortEx_Compare_t LUCY_BlobSortEx_Compare_t
  #define BlobSortEx_Flush LUCY_BlobSortEx_Flush
  #define BlobSortEx_Flush_t LUCY_BlobSortEx_Flush_t
  #define BlobSortEx_Feed LUCY_BlobSortEx_Feed
  #define BlobSortEx_Feed_t LUCY_BlobSortEx_Feed_t
  #define BlobSortEx_Flip LUCY_BlobSortEx_Flip
  #define BlobSortEx_Flip_t LUCY_BlobSortEx_Flip_t
  #define BlobSortEx_Fetch LUCY_BlobSortEx_Fetch
  #define BlobSortEx_Fetch_t LUCY_BlobSortEx_Fetch_t
  #define BlobSortEx_Peek LUCY_BlobSortEx_Peek
  #define BlobSortEx_Peek_t LUCY_BlobSortEx_Peek_t
  #define BlobSortEx_Add_Run LUCY_BlobSortEx_Add_Run
  #define BlobSortEx_Add_Run_t LUCY_BlobSortEx_Add_Run_t
  #define BlobSortEx_Shrink LUCY_BlobSortEx_Shrink
  #define BlobSortEx_Shrink_t LUCY_BlobSortEx_Shrink_t
  #define BlobSortEx_Refill LUCY_BlobSortEx_Refill
  #define BlobSortEx_Refill_t LUCY_BlobSortEx_Refill_t
  #define BlobSortEx_Sort_Buffer LUCY_BlobSortEx_Sort_Buffer
  #define BlobSortEx_Sort_Buffer_t LUCY_BlobSortEx_Sort_Buffer_t
  #define BlobSortEx_Clear_Buffer LUCY_BlobSortEx_Clear_Buffer
  #define BlobSortEx_Clear_Buffer_t LUCY_BlobSortEx_Clear_Buffer_t
  #define BlobSortEx_Buffer_Count LUCY_BlobSortEx_Buffer_Count
  #define BlobSortEx_Buffer_Count_t LUCY_BlobSortEx_Buffer_Count_t
  #define BlobSortEx_Grow_Buffer LUCY_BlobSortEx_Grow_Buffer
  #define BlobSortEx_Grow_Buffer_t LUCY_BlobSortEx_Grow_Buffer_t
  #define BlobSortEx_Set_Mem_Thresh LUCY_BlobSortEx_Set_Mem_Thresh
  #define BlobSortEx_Set_Mem_Thresh_t LUCY_BlobSortEx_Set_Mem_Thresh_t
  #define BlobSortEx_Peek_Cache LUCY_BlobSortEx_Peek_Cache
  #define BlobSortEx_Peek_Cache_t LUCY_BlobSortEx_Peek_Cache_t
  #define BlobSortEx_Peek_Last LUCY_BlobSortEx_Peek_Last
  #define BlobSortEx_Peek_Last_t LUCY_BlobSortEx_Peek_Last_t
  #define BlobSortEx_Get_Num_Runs LUCY_BlobSortEx_Get_Num_Runs
  #define BlobSortEx_Get_Num_Runs_t LUCY_BlobSortEx_Get_Num_Runs_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_UTIL_BLOBSORTEX */




