/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_TERMINFO
#define H_LUCY_INDEX_TERMINFO 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish\Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_TERMINFO
extern uint32_t lucy_TInfo_IVARS_OFFSET;
typedef struct lucy_TermInfoIVARS lucy_TermInfoIVARS;
static CFISH_INLINE lucy_TermInfoIVARS*
lucy_TInfo_IVARS(lucy_TermInfo *self) {
   char *ptr = (char*)self + lucy_TInfo_IVARS_OFFSET;
   return (lucy_TermInfoIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define TermInfoIVARS lucy_TermInfoIVARS
  #define TInfo_IVARS lucy_TInfo_IVARS
#endif

struct lucy_TermInfoIVARS {
    int32_t doc_freq;
    int64_t post_filepos;
    int64_t skip_filepos;
    int64_t lex_filepos;
};

#endif /* C_LUCY_TERMINFO */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_TermInfo*
lucy_TInfo_new(int32_t doc_freq);

LUCY_VISIBLE lucy_TermInfo*
lucy_TInfo_init(lucy_TermInfo* self, int32_t doc_freq);

int32_t
LUCY_TInfo_Get_Doc_Freq_IMP(lucy_TermInfo* self);

int64_t
LUCY_TInfo_Get_Lex_FilePos_IMP(lucy_TermInfo* self);

int64_t
LUCY_TInfo_Get_Post_FilePos_IMP(lucy_TermInfo* self);

int64_t
LUCY_TInfo_Get_Skip_FilePos_IMP(lucy_TermInfo* self);

void
LUCY_TInfo_Set_Doc_Freq_IMP(lucy_TermInfo* self, int32_t doc_freq);

void
LUCY_TInfo_Set_Lex_FilePos_IMP(lucy_TermInfo* self, int64_t filepos);

void
LUCY_TInfo_Set_Post_FilePos_IMP(lucy_TermInfo* self, int64_t filepos);

void
LUCY_TInfo_Set_Skip_FilePos_IMP(lucy_TermInfo* self, int64_t filepos);

void
LUCY_TInfo_Reset_IMP(lucy_TermInfo* self);

void
LUCY_TInfo_Mimic_IMP(lucy_TermInfo* self, cfish_Obj* other);

lucy_TermInfo*
LUCY_TInfo_Clone_IMP(lucy_TermInfo* self);

cfish_String*
LUCY_TInfo_To_String_IMP(lucy_TermInfo* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_TInfo_To_Host_t)(lucy_TermInfo* self, void* vcache);

typedef lucy_TermInfo*
(*LUCY_TInfo_Clone_t)(lucy_TermInfo* self);

typedef bool
(*LUCY_TInfo_Equals_t)(lucy_TermInfo* self, cfish_Obj* other);

typedef int32_t
(*LUCY_TInfo_Compare_To_t)(lucy_TermInfo* self, cfish_Obj* other);

typedef void
(*LUCY_TInfo_Destroy_t)(lucy_TermInfo* self);

typedef cfish_String*
(*LUCY_TInfo_To_String_t)(lucy_TermInfo* self);

typedef int32_t
(*LUCY_TInfo_Get_Doc_Freq_t)(lucy_TermInfo* self);

typedef int64_t
(*LUCY_TInfo_Get_Lex_FilePos_t)(lucy_TermInfo* self);

typedef int64_t
(*LUCY_TInfo_Get_Post_FilePos_t)(lucy_TermInfo* self);

typedef int64_t
(*LUCY_TInfo_Get_Skip_FilePos_t)(lucy_TermInfo* self);

typedef void
(*LUCY_TInfo_Set_Doc_Freq_t)(lucy_TermInfo* self, int32_t doc_freq);

typedef void
(*LUCY_TInfo_Set_Lex_FilePos_t)(lucy_TermInfo* self, int64_t filepos);

typedef void
(*LUCY_TInfo_Set_Post_FilePos_t)(lucy_TermInfo* self, int64_t filepos);

typedef void
(*LUCY_TInfo_Set_Skip_FilePos_t)(lucy_TermInfo* self, int64_t filepos);

typedef void
(*LUCY_TInfo_Reset_t)(lucy_TermInfo* self);

typedef void
(*LUCY_TInfo_Mimic_t)(lucy_TermInfo* self, cfish_Obj* other);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_TInfo_get_class(lucy_TermInfo *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_TInfo_get_class_name(lucy_TermInfo *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_TInfo_is_a(lucy_TermInfo *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_TInfo_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_TInfo_To_Host(lucy_TermInfo* self, void* vcache) {
    const LUCY_TInfo_To_Host_t method = (LUCY_TInfo_To_Host_t)cfish_obj_method(self, LUCY_TInfo_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_TInfo_Clone_OFFSET;
static CFISH_INLINE lucy_TermInfo*
LUCY_TInfo_Clone(lucy_TermInfo* self) {
    const LUCY_TInfo_Clone_t method = (LUCY_TInfo_Clone_t)cfish_obj_method(self, LUCY_TInfo_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TInfo_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_TInfo_Equals(lucy_TermInfo* self, cfish_Obj* other) {
    const LUCY_TInfo_Equals_t method = (LUCY_TInfo_Equals_t)cfish_obj_method(self, LUCY_TInfo_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_TInfo_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_TInfo_Compare_To(lucy_TermInfo* self, cfish_Obj* other) {
    const LUCY_TInfo_Compare_To_t method = (LUCY_TInfo_Compare_To_t)cfish_obj_method(self, LUCY_TInfo_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_TInfo_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_TInfo_Destroy(lucy_TermInfo* self) {
    const LUCY_TInfo_Destroy_t method = (LUCY_TInfo_Destroy_t)cfish_obj_method(self, LUCY_TInfo_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TInfo_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_TInfo_To_String(lucy_TermInfo* self) {
    const LUCY_TInfo_To_String_t method = (LUCY_TInfo_To_String_t)cfish_obj_method(self, LUCY_TInfo_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TInfo_Get_Doc_Freq_OFFSET;
static CFISH_INLINE int32_t
LUCY_TInfo_Get_Doc_Freq(lucy_TermInfo* self) {
    const LUCY_TInfo_Get_Doc_Freq_t method = (LUCY_TInfo_Get_Doc_Freq_t)cfish_obj_method(self, LUCY_TInfo_Get_Doc_Freq_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TInfo_Get_Lex_FilePos_OFFSET;
static CFISH_INLINE int64_t
LUCY_TInfo_Get_Lex_FilePos(lucy_TermInfo* self) {
    const LUCY_TInfo_Get_Lex_FilePos_t method = (LUCY_TInfo_Get_Lex_FilePos_t)cfish_obj_method(self, LUCY_TInfo_Get_Lex_FilePos_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TInfo_Get_Post_FilePos_OFFSET;
static CFISH_INLINE int64_t
LUCY_TInfo_Get_Post_FilePos(lucy_TermInfo* self) {
    const LUCY_TInfo_Get_Post_FilePos_t method = (LUCY_TInfo_Get_Post_FilePos_t)cfish_obj_method(self, LUCY_TInfo_Get_Post_FilePos_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TInfo_Get_Skip_FilePos_OFFSET;
static CFISH_INLINE int64_t
LUCY_TInfo_Get_Skip_FilePos(lucy_TermInfo* self) {
    const LUCY_TInfo_Get_Skip_FilePos_t method = (LUCY_TInfo_Get_Skip_FilePos_t)cfish_obj_method(self, LUCY_TInfo_Get_Skip_FilePos_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TInfo_Set_Doc_Freq_OFFSET;
static CFISH_INLINE void
LUCY_TInfo_Set_Doc_Freq(lucy_TermInfo* self, int32_t doc_freq) {
    const LUCY_TInfo_Set_Doc_Freq_t method = (LUCY_TInfo_Set_Doc_Freq_t)cfish_obj_method(self, LUCY_TInfo_Set_Doc_Freq_OFFSET);
    method(self, doc_freq);
}

extern LUCY_VISIBLE uint32_t LUCY_TInfo_Set_Lex_FilePos_OFFSET;
static CFISH_INLINE void
LUCY_TInfo_Set_Lex_FilePos(lucy_TermInfo* self, int64_t filepos) {
    const LUCY_TInfo_Set_Lex_FilePos_t method = (LUCY_TInfo_Set_Lex_FilePos_t)cfish_obj_method(self, LUCY_TInfo_Set_Lex_FilePos_OFFSET);
    method(self, filepos);
}

extern LUCY_VISIBLE uint32_t LUCY_TInfo_Set_Post_FilePos_OFFSET;
static CFISH_INLINE void
LUCY_TInfo_Set_Post_FilePos(lucy_TermInfo* self, int64_t filepos) {
    const LUCY_TInfo_Set_Post_FilePos_t method = (LUCY_TInfo_Set_Post_FilePos_t)cfish_obj_method(self, LUCY_TInfo_Set_Post_FilePos_OFFSET);
    method(self, filepos);
}

extern LUCY_VISIBLE uint32_t LUCY_TInfo_Set_Skip_FilePos_OFFSET;
static CFISH_INLINE void
LUCY_TInfo_Set_Skip_FilePos(lucy_TermInfo* self, int64_t filepos) {
    const LUCY_TInfo_Set_Skip_FilePos_t method = (LUCY_TInfo_Set_Skip_FilePos_t)cfish_obj_method(self, LUCY_TInfo_Set_Skip_FilePos_OFFSET);
    method(self, filepos);
}

extern LUCY_VISIBLE uint32_t LUCY_TInfo_Reset_OFFSET;
static CFISH_INLINE void
LUCY_TInfo_Reset(lucy_TermInfo* self) {
    const LUCY_TInfo_Reset_t method = (LUCY_TInfo_Reset_t)cfish_obj_method(self, LUCY_TInfo_Reset_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TInfo_Mimic_OFFSET;
static CFISH_INLINE void
LUCY_TInfo_Mimic(lucy_TermInfo* self, cfish_Obj* other) {
    const LUCY_TInfo_Mimic_t method = (LUCY_TInfo_Mimic_t)cfish_obj_method(self, LUCY_TInfo_Mimic_OFFSET);
    method(self, other);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_TInfo_Get_Doc_Freq_OVERRIDE NULL
#define Lucy_TInfo_Get_Lex_FilePos_OVERRIDE NULL
#define Lucy_TInfo_Get_Post_FilePos_OVERRIDE NULL
#define Lucy_TInfo_Get_Skip_FilePos_OVERRIDE NULL
#define Lucy_TInfo_Set_Doc_Freq_OVERRIDE NULL
#define Lucy_TInfo_Set_Lex_FilePos_OVERRIDE NULL
#define Lucy_TInfo_Set_Post_FilePos_OVERRIDE NULL
#define Lucy_TInfo_Set_Skip_FilePos_OVERRIDE NULL
#define Lucy_TInfo_Reset_OVERRIDE NULL
#define Lucy_TInfo_Mimic_OVERRIDE NULL
#else
int32_t
Lucy_TInfo_Get_Doc_Freq_OVERRIDE(lucy_TermInfo* self);
int64_t
Lucy_TInfo_Get_Lex_FilePos_OVERRIDE(lucy_TermInfo* self);
int64_t
Lucy_TInfo_Get_Post_FilePos_OVERRIDE(lucy_TermInfo* self);
int64_t
Lucy_TInfo_Get_Skip_FilePos_OVERRIDE(lucy_TermInfo* self);
void
Lucy_TInfo_Set_Doc_Freq_OVERRIDE(lucy_TermInfo* self, int32_t doc_freq);
void
Lucy_TInfo_Set_Lex_FilePos_OVERRIDE(lucy_TermInfo* self, int64_t filepos);
void
Lucy_TInfo_Set_Post_FilePos_OVERRIDE(lucy_TermInfo* self, int64_t filepos);
void
Lucy_TInfo_Set_Skip_FilePos_OVERRIDE(lucy_TermInfo* self, int64_t filepos);
void
Lucy_TInfo_Reset_OVERRIDE(lucy_TermInfo* self);
void
Lucy_TInfo_Mimic_OVERRIDE(lucy_TermInfo* self, cfish_Obj* other);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define TermInfo lucy_TermInfo
  #define TERMINFO LUCY_TERMINFO
  #define TInfo_new lucy_TInfo_new
  #define TInfo_init lucy_TInfo_init
  #define TInfo_get_class lucy_TInfo_get_class
  #define TInfo_get_class_name lucy_TInfo_get_class_name
  #define TInfo_is_a lucy_TInfo_is_a
  #define TInfo_Get_Doc_Freq_IMP LUCY_TInfo_Get_Doc_Freq_IMP
  #define TInfo_Get_Lex_FilePos_IMP LUCY_TInfo_Get_Lex_FilePos_IMP
  #define TInfo_Get_Post_FilePos_IMP LUCY_TInfo_Get_Post_FilePos_IMP
  #define TInfo_Get_Skip_FilePos_IMP LUCY_TInfo_Get_Skip_FilePos_IMP
  #define TInfo_Set_Doc_Freq_IMP LUCY_TInfo_Set_Doc_Freq_IMP
  #define TInfo_Set_Lex_FilePos_IMP LUCY_TInfo_Set_Lex_FilePos_IMP
  #define TInfo_Set_Post_FilePos_IMP LUCY_TInfo_Set_Post_FilePos_IMP
  #define TInfo_Set_Skip_FilePos_IMP LUCY_TInfo_Set_Skip_FilePos_IMP
  #define TInfo_Reset_IMP LUCY_TInfo_Reset_IMP
  #define TInfo_Mimic_IMP LUCY_TInfo_Mimic_IMP
  #define TInfo_Clone_IMP LUCY_TInfo_Clone_IMP
  #define TInfo_To_String_IMP LUCY_TInfo_To_String_IMP
  #define TInfo_To_Host LUCY_TInfo_To_Host
  #define TInfo_To_Host_t LUCY_TInfo_To_Host_t
  #define TInfo_Clone LUCY_TInfo_Clone
  #define TInfo_Clone_t LUCY_TInfo_Clone_t
  #define TInfo_Equals LUCY_TInfo_Equals
  #define TInfo_Equals_t LUCY_TInfo_Equals_t
  #define TInfo_Compare_To LUCY_TInfo_Compare_To
  #define TInfo_Compare_To_t LUCY_TInfo_Compare_To_t
  #define TInfo_Destroy LUCY_TInfo_Destroy
  #define TInfo_Destroy_t LUCY_TInfo_Destroy_t
  #define TInfo_To_String LUCY_TInfo_To_String
  #define TInfo_To_String_t LUCY_TInfo_To_String_t
  #define TInfo_Get_Doc_Freq LUCY_TInfo_Get_Doc_Freq
  #define TInfo_Get_Doc_Freq_t LUCY_TInfo_Get_Doc_Freq_t
  #define TInfo_Get_Lex_FilePos LUCY_TInfo_Get_Lex_FilePos
  #define TInfo_Get_Lex_FilePos_t LUCY_TInfo_Get_Lex_FilePos_t
  #define TInfo_Get_Post_FilePos LUCY_TInfo_Get_Post_FilePos
  #define TInfo_Get_Post_FilePos_t LUCY_TInfo_Get_Post_FilePos_t
  #define TInfo_Get_Skip_FilePos LUCY_TInfo_Get_Skip_FilePos
  #define TInfo_Get_Skip_FilePos_t LUCY_TInfo_Get_Skip_FilePos_t
  #define TInfo_Set_Doc_Freq LUCY_TInfo_Set_Doc_Freq
  #define TInfo_Set_Doc_Freq_t LUCY_TInfo_Set_Doc_Freq_t
  #define TInfo_Set_Lex_FilePos LUCY_TInfo_Set_Lex_FilePos
  #define TInfo_Set_Lex_FilePos_t LUCY_TInfo_Set_Lex_FilePos_t
  #define TInfo_Set_Post_FilePos LUCY_TInfo_Set_Post_FilePos
  #define TInfo_Set_Post_FilePos_t LUCY_TInfo_Set_Post_FilePos_t
  #define TInfo_Set_Skip_FilePos LUCY_TInfo_Set_Skip_FilePos
  #define TInfo_Set_Skip_FilePos_t LUCY_TInfo_Set_Skip_FilePos_t
  #define TInfo_Reset LUCY_TInfo_Reset
  #define TInfo_Reset_t LUCY_TInfo_Reset_t
  #define TInfo_Mimic LUCY_TInfo_Mimic
  #define TInfo_Mimic_t LUCY_TInfo_Mimic_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_TERMINFO */




