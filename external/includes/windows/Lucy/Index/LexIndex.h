/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_LEXINDEX
#define H_LUCY_INDEX_LEXINDEX 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy\Index\Lexicon.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_LEXINDEX
extern uint32_t lucy_LexIndex_IVARS_OFFSET;
typedef struct lucy_LexIndexIVARS lucy_LexIndexIVARS;
static CFISH_INLINE lucy_LexIndexIVARS*
lucy_LexIndex_IVARS(lucy_LexIndex *self) {
   char *ptr = (char*)self + lucy_LexIndex_IVARS_OFFSET;
   return (lucy_LexIndexIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define LexIndexIVARS lucy_LexIndexIVARS
  #define LexIndex_IVARS lucy_LexIndex_IVARS
#endif

struct lucy_LexIndexIVARS {
    cfish_String* field;
    lucy_FieldType* field_type;
    lucy_InStream* ixix_in;
    lucy_InStream* ix_in;
    const int64_t* offsets;
    int32_t tick;
    int32_t size;
    int32_t index_interval;
    int32_t skip_interval;
    lucy_TermStepper* term_stepper;
    lucy_TermInfo* tinfo;
};

#endif /* C_LUCY_LEXINDEX */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_LexIndex*
lucy_LexIndex_new(lucy_Schema* schema, lucy_Folder* folder, lucy_Segment* segment, cfish_String* field);

LUCY_VISIBLE lucy_LexIndex*
lucy_LexIndex_init(lucy_LexIndex* self, lucy_Schema* schema, lucy_Folder* folder, lucy_Segment* segment, cfish_String* field);

void
LUCY_LexIndex_Seek_IMP(lucy_LexIndex* self, cfish_Obj* target);

int32_t
LUCY_LexIndex_Get_Term_Num_IMP(lucy_LexIndex* self);

lucy_TermInfo*
LUCY_LexIndex_Get_Term_Info_IMP(lucy_LexIndex* self);

cfish_Obj*
LUCY_LexIndex_Get_Term_IMP(lucy_LexIndex* self);

void
LUCY_LexIndex_Destroy_IMP(lucy_LexIndex* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_LexIndex_To_Host_t)(lucy_LexIndex* self, void* vcache);

typedef cfish_Obj*
(*LUCY_LexIndex_Clone_t)(lucy_LexIndex* self);

typedef bool
(*LUCY_LexIndex_Equals_t)(lucy_LexIndex* self, cfish_Obj* other);

typedef int32_t
(*LUCY_LexIndex_Compare_To_t)(lucy_LexIndex* self, cfish_Obj* other);

typedef void
(*LUCY_LexIndex_Destroy_t)(lucy_LexIndex* self);

typedef cfish_String*
(*LUCY_LexIndex_To_String_t)(lucy_LexIndex* self);

typedef void
(*LUCY_LexIndex_Seek_t)(lucy_LexIndex* self, cfish_Obj* target);

typedef bool
(*LUCY_LexIndex_Next_t)(lucy_LexIndex* self);

typedef void
(*LUCY_LexIndex_Reset_t)(lucy_LexIndex* self);

typedef int32_t
(*LUCY_LexIndex_Doc_Freq_t)(lucy_LexIndex* self);

typedef cfish_Obj*
(*LUCY_LexIndex_Get_Term_t)(lucy_LexIndex* self);

typedef cfish_String*
(*LUCY_LexIndex_Get_Field_t)(lucy_LexIndex* self);

typedef int32_t
(*LUCY_LexIndex_Get_Term_Num_t)(lucy_LexIndex* self);

typedef lucy_TermInfo*
(*LUCY_LexIndex_Get_Term_Info_t)(lucy_LexIndex* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_LexIndex_get_class(lucy_LexIndex *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_LexIndex_get_class_name(lucy_LexIndex *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_LexIndex_is_a(lucy_LexIndex *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_LexIndex_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_LexIndex_To_Host(lucy_LexIndex* self, void* vcache) {
    const LUCY_LexIndex_To_Host_t method = (LUCY_LexIndex_To_Host_t)cfish_obj_method(self, LUCY_LexIndex_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_LexIndex_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_LexIndex_Clone(lucy_LexIndex* self) {
    const LUCY_LexIndex_Clone_t method = (LUCY_LexIndex_Clone_t)cfish_obj_method(self, LUCY_LexIndex_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexIndex_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_LexIndex_Equals(lucy_LexIndex* self, cfish_Obj* other) {
    const LUCY_LexIndex_Equals_t method = (LUCY_LexIndex_Equals_t)cfish_obj_method(self, LUCY_LexIndex_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_LexIndex_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_LexIndex_Compare_To(lucy_LexIndex* self, cfish_Obj* other) {
    const LUCY_LexIndex_Compare_To_t method = (LUCY_LexIndex_Compare_To_t)cfish_obj_method(self, LUCY_LexIndex_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_LexIndex_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_LexIndex_Destroy(lucy_LexIndex* self) {
    const LUCY_LexIndex_Destroy_t method = (LUCY_LexIndex_Destroy_t)cfish_obj_method(self, LUCY_LexIndex_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexIndex_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_LexIndex_To_String(lucy_LexIndex* self) {
    const LUCY_LexIndex_To_String_t method = (LUCY_LexIndex_To_String_t)cfish_obj_method(self, LUCY_LexIndex_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexIndex_Seek_OFFSET;
static CFISH_INLINE void
LUCY_LexIndex_Seek(lucy_LexIndex* self, cfish_Obj* target) {
    const LUCY_LexIndex_Seek_t method = (LUCY_LexIndex_Seek_t)cfish_obj_method(self, LUCY_LexIndex_Seek_OFFSET);
    method(self, target);
}

extern LUCY_VISIBLE uint32_t LUCY_LexIndex_Next_OFFSET;
static CFISH_INLINE bool
LUCY_LexIndex_Next(lucy_LexIndex* self) {
    const LUCY_LexIndex_Next_t method = (LUCY_LexIndex_Next_t)cfish_obj_method(self, LUCY_LexIndex_Next_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexIndex_Reset_OFFSET;
static CFISH_INLINE void
LUCY_LexIndex_Reset(lucy_LexIndex* self) {
    const LUCY_LexIndex_Reset_t method = (LUCY_LexIndex_Reset_t)cfish_obj_method(self, LUCY_LexIndex_Reset_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexIndex_Doc_Freq_OFFSET;
static CFISH_INLINE int32_t
LUCY_LexIndex_Doc_Freq(lucy_LexIndex* self) {
    const LUCY_LexIndex_Doc_Freq_t method = (LUCY_LexIndex_Doc_Freq_t)cfish_obj_method(self, LUCY_LexIndex_Doc_Freq_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexIndex_Get_Term_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_LexIndex_Get_Term(lucy_LexIndex* self) {
    const LUCY_LexIndex_Get_Term_t method = (LUCY_LexIndex_Get_Term_t)cfish_obj_method(self, LUCY_LexIndex_Get_Term_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexIndex_Get_Field_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_LexIndex_Get_Field(lucy_LexIndex* self) {
    const LUCY_LexIndex_Get_Field_t method = (LUCY_LexIndex_Get_Field_t)cfish_obj_method(self, LUCY_LexIndex_Get_Field_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexIndex_Get_Term_Num_OFFSET;
static CFISH_INLINE int32_t
LUCY_LexIndex_Get_Term_Num(lucy_LexIndex* self) {
    const LUCY_LexIndex_Get_Term_Num_t method = (LUCY_LexIndex_Get_Term_Num_t)cfish_obj_method(self, LUCY_LexIndex_Get_Term_Num_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexIndex_Get_Term_Info_OFFSET;
static CFISH_INLINE lucy_TermInfo*
LUCY_LexIndex_Get_Term_Info(lucy_LexIndex* self) {
    const LUCY_LexIndex_Get_Term_Info_t method = (LUCY_LexIndex_Get_Term_Info_t)cfish_obj_method(self, LUCY_LexIndex_Get_Term_Info_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_LexIndex_Get_Term_Num_OVERRIDE NULL
#define Lucy_LexIndex_Get_Term_Info_OVERRIDE NULL
#else
int32_t
Lucy_LexIndex_Get_Term_Num_OVERRIDE(lucy_LexIndex* self);
lucy_TermInfo*
Lucy_LexIndex_Get_Term_Info_OVERRIDE(lucy_LexIndex* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define LexIndex lucy_LexIndex
  #define LEXINDEX LUCY_LEXINDEX
  #define LexIndex_new lucy_LexIndex_new
  #define LexIndex_init lucy_LexIndex_init
  #define LexIndex_get_class lucy_LexIndex_get_class
  #define LexIndex_get_class_name lucy_LexIndex_get_class_name
  #define LexIndex_is_a lucy_LexIndex_is_a
  #define LexIndex_Seek_IMP LUCY_LexIndex_Seek_IMP
  #define LexIndex_Get_Term_Num_IMP LUCY_LexIndex_Get_Term_Num_IMP
  #define LexIndex_Get_Term_Info_IMP LUCY_LexIndex_Get_Term_Info_IMP
  #define LexIndex_Get_Term_IMP LUCY_LexIndex_Get_Term_IMP
  #define LexIndex_Destroy_IMP LUCY_LexIndex_Destroy_IMP
  #define LexIndex_To_Host LUCY_LexIndex_To_Host
  #define LexIndex_To_Host_t LUCY_LexIndex_To_Host_t
  #define LexIndex_Clone LUCY_LexIndex_Clone
  #define LexIndex_Clone_t LUCY_LexIndex_Clone_t
  #define LexIndex_Equals LUCY_LexIndex_Equals
  #define LexIndex_Equals_t LUCY_LexIndex_Equals_t
  #define LexIndex_Compare_To LUCY_LexIndex_Compare_To
  #define LexIndex_Compare_To_t LUCY_LexIndex_Compare_To_t
  #define LexIndex_Destroy LUCY_LexIndex_Destroy
  #define LexIndex_Destroy_t LUCY_LexIndex_Destroy_t
  #define LexIndex_To_String LUCY_LexIndex_To_String
  #define LexIndex_To_String_t LUCY_LexIndex_To_String_t
  #define LexIndex_Seek LUCY_LexIndex_Seek
  #define LexIndex_Seek_t LUCY_LexIndex_Seek_t
  #define LexIndex_Next LUCY_LexIndex_Next
  #define LexIndex_Next_t LUCY_LexIndex_Next_t
  #define LexIndex_Reset LUCY_LexIndex_Reset
  #define LexIndex_Reset_t LUCY_LexIndex_Reset_t
  #define LexIndex_Doc_Freq LUCY_LexIndex_Doc_Freq
  #define LexIndex_Doc_Freq_t LUCY_LexIndex_Doc_Freq_t
  #define LexIndex_Get_Term LUCY_LexIndex_Get_Term
  #define LexIndex_Get_Term_t LUCY_LexIndex_Get_Term_t
  #define LexIndex_Get_Field LUCY_LexIndex_Get_Field
  #define LexIndex_Get_Field_t LUCY_LexIndex_Get_Field_t
  #define LexIndex_Get_Term_Num LUCY_LexIndex_Get_Term_Num
  #define LexIndex_Get_Term_Num_t LUCY_LexIndex_Get_Term_Num_t
  #define LexIndex_Get_Term_Info LUCY_LexIndex_Get_Term_Info
  #define LexIndex_Get_Term_Info_t LUCY_LexIndex_Get_Term_Info_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_LEXINDEX */




