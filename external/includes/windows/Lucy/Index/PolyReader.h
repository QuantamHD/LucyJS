/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_POLYREADER
#define H_LUCY_INDEX_POLYREADER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy\Index\IndexReader.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_POLYREADER
extern uint32_t lucy_PolyReader_IVARS_OFFSET;
typedef struct lucy_PolyReaderIVARS lucy_PolyReaderIVARS;
static CFISH_INLINE lucy_PolyReaderIVARS*
lucy_PolyReader_IVARS(lucy_PolyReader *self) {
   char *ptr = (char*)self + lucy_PolyReader_IVARS_OFFSET;
   return (lucy_PolyReaderIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define PolyReaderIVARS lucy_PolyReaderIVARS
  #define PolyReader_IVARS lucy_PolyReader_IVARS
#endif

struct lucy_PolyReaderIVARS {
    lucy_Schema* schema;
    lucy_Folder* folder;
    lucy_Snapshot* snapshot;
    cfish_Vector* segments;
    lucy_Segment* segment;
    int32_t seg_tick;
    cfish_Hash* components;
    lucy_IndexManager* manager;
    lucy_Lock* read_lock;
    lucy_Lock* deletion_lock;
    cfish_Vector* sub_readers;
    int32_t doc_max;
    int32_t del_count;
    lucy_I32Array* offsets;
};

#endif /* C_LUCY_POLYREADER */

/* Declare this class's inert variables.
 */

extern LUCY_VISIBLE cfish_String* lucy_PolyReader_race_condition_debug1;
extern LUCY_VISIBLE int32_t lucy_PolyReader_debug1_num_passes;


/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_PolyReader*
lucy_PolyReader_open(cfish_Obj* index, lucy_Snapshot* snapshot, lucy_IndexManager* manager);

LUCY_VISIBLE lucy_PolyReader*
lucy_PolyReader_do_open(lucy_PolyReader* self, cfish_Obj* index, lucy_Snapshot* snapshot, lucy_IndexManager* manager);

LUCY_VISIBLE lucy_PolyReader*
lucy_PolyReader_new(lucy_Schema* schema, lucy_Folder* folder, lucy_Snapshot* snapshot, lucy_IndexManager* manager, cfish_Vector* sub_readers);

LUCY_VISIBLE lucy_PolyReader*
lucy_PolyReader_init(lucy_PolyReader* self, lucy_Schema* schema, lucy_Folder* folder, lucy_Snapshot* snapshot, lucy_IndexManager* manager, cfish_Vector* sub_readers);

LUCY_VISIBLE uint32_t
lucy_PolyReader_sub_tick(lucy_I32Array* offsets, int32_t doc_id);

int32_t
LUCY_PolyReader_Doc_Max_IMP(lucy_PolyReader* self);

int32_t
LUCY_PolyReader_Doc_Count_IMP(lucy_PolyReader* self);

int32_t
LUCY_PolyReader_Del_Count_IMP(lucy_PolyReader* self);

lucy_I32Array*
LUCY_PolyReader_Offsets_IMP(lucy_PolyReader* self);

cfish_Vector*
LUCY_PolyReader_Seg_Readers_IMP(lucy_PolyReader* self);

cfish_Vector*
LUCY_PolyReader_Get_Seg_Readers_IMP(lucy_PolyReader* self);

void
LUCY_PolyReader_Close_IMP(lucy_PolyReader* self);

void
LUCY_PolyReader_Destroy_IMP(lucy_PolyReader* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_PolyReader_To_Host_t)(lucy_PolyReader* self, void* vcache);

typedef cfish_Obj*
(*LUCY_PolyReader_Clone_t)(lucy_PolyReader* self);

typedef bool
(*LUCY_PolyReader_Equals_t)(lucy_PolyReader* self, cfish_Obj* other);

typedef int32_t
(*LUCY_PolyReader_Compare_To_t)(lucy_PolyReader* self, cfish_Obj* other);

typedef void
(*LUCY_PolyReader_Destroy_t)(lucy_PolyReader* self);

typedef cfish_String*
(*LUCY_PolyReader_To_String_t)(lucy_PolyReader* self);

typedef lucy_DataReader*
(*LUCY_PolyReader_Aggregator_t)(lucy_PolyReader* self, cfish_Vector* readers, lucy_I32Array* offsets);

typedef lucy_Schema*
(*LUCY_PolyReader_Get_Schema_t)(lucy_PolyReader* self);

typedef lucy_Folder*
(*LUCY_PolyReader_Get_Folder_t)(lucy_PolyReader* self);

typedef lucy_Snapshot*
(*LUCY_PolyReader_Get_Snapshot_t)(lucy_PolyReader* self);

typedef cfish_Vector*
(*LUCY_PolyReader_Get_Segments_t)(lucy_PolyReader* self);

typedef lucy_Segment*
(*LUCY_PolyReader_Get_Segment_t)(lucy_PolyReader* self);

typedef int32_t
(*LUCY_PolyReader_Get_Seg_Tick_t)(lucy_PolyReader* self);

typedef void
(*LUCY_PolyReader_Close_t)(lucy_PolyReader* self);

typedef int32_t
(*LUCY_PolyReader_Doc_Max_t)(lucy_PolyReader* self);

typedef int32_t
(*LUCY_PolyReader_Doc_Count_t)(lucy_PolyReader* self);

typedef int32_t
(*LUCY_PolyReader_Del_Count_t)(lucy_PolyReader* self);

typedef lucy_I32Array*
(*LUCY_PolyReader_Offsets_t)(lucy_PolyReader* self);

typedef cfish_Vector*
(*LUCY_PolyReader_Seg_Readers_t)(lucy_PolyReader* self);

typedef lucy_DataReader*
(*LUCY_PolyReader_Obtain_t)(lucy_PolyReader* self, cfish_String* api);

typedef lucy_DataReader*
(*LUCY_PolyReader_Fetch_t)(lucy_PolyReader* self, cfish_String* api);

typedef cfish_Hash*
(*LUCY_PolyReader_Get_Components_t)(lucy_PolyReader* self);

typedef cfish_Vector*
(*LUCY_PolyReader_Get_Seg_Readers_t)(lucy_PolyReader* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_PolyReader_get_class(lucy_PolyReader *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_PolyReader_get_class_name(lucy_PolyReader *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_PolyReader_is_a(lucy_PolyReader *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_PolyReader_To_Host(lucy_PolyReader* self, void* vcache) {
    const LUCY_PolyReader_To_Host_t method = (LUCY_PolyReader_To_Host_t)cfish_obj_method(self, LUCY_PolyReader_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PolyReader_Clone(lucy_PolyReader* self) {
    const LUCY_PolyReader_Clone_t method = (LUCY_PolyReader_Clone_t)cfish_obj_method(self, LUCY_PolyReader_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_PolyReader_Equals(lucy_PolyReader* self, cfish_Obj* other) {
    const LUCY_PolyReader_Equals_t method = (LUCY_PolyReader_Equals_t)cfish_obj_method(self, LUCY_PolyReader_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_PolyReader_Compare_To(lucy_PolyReader* self, cfish_Obj* other) {
    const LUCY_PolyReader_Compare_To_t method = (LUCY_PolyReader_Compare_To_t)cfish_obj_method(self, LUCY_PolyReader_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_PolyReader_Destroy(lucy_PolyReader* self) {
    const LUCY_PolyReader_Destroy_t method = (LUCY_PolyReader_Destroy_t)cfish_obj_method(self, LUCY_PolyReader_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_PolyReader_To_String(lucy_PolyReader* self) {
    const LUCY_PolyReader_To_String_t method = (LUCY_PolyReader_To_String_t)cfish_obj_method(self, LUCY_PolyReader_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Aggregator_OFFSET;
static CFISH_INLINE lucy_DataReader*
LUCY_PolyReader_Aggregator(lucy_PolyReader* self, cfish_Vector* readers, lucy_I32Array* offsets) {
    const LUCY_PolyReader_Aggregator_t method = (LUCY_PolyReader_Aggregator_t)cfish_obj_method(self, LUCY_PolyReader_Aggregator_OFFSET);
    return method(self, readers, offsets);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Get_Schema_OFFSET;
static CFISH_INLINE lucy_Schema*
LUCY_PolyReader_Get_Schema(lucy_PolyReader* self) {
    const LUCY_PolyReader_Get_Schema_t method = (LUCY_PolyReader_Get_Schema_t)cfish_obj_method(self, LUCY_PolyReader_Get_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Get_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_PolyReader_Get_Folder(lucy_PolyReader* self) {
    const LUCY_PolyReader_Get_Folder_t method = (LUCY_PolyReader_Get_Folder_t)cfish_obj_method(self, LUCY_PolyReader_Get_Folder_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Get_Snapshot_OFFSET;
static CFISH_INLINE lucy_Snapshot*
LUCY_PolyReader_Get_Snapshot(lucy_PolyReader* self) {
    const LUCY_PolyReader_Get_Snapshot_t method = (LUCY_PolyReader_Get_Snapshot_t)cfish_obj_method(self, LUCY_PolyReader_Get_Snapshot_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Get_Segments_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_PolyReader_Get_Segments(lucy_PolyReader* self) {
    const LUCY_PolyReader_Get_Segments_t method = (LUCY_PolyReader_Get_Segments_t)cfish_obj_method(self, LUCY_PolyReader_Get_Segments_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Get_Segment_OFFSET;
static CFISH_INLINE lucy_Segment*
LUCY_PolyReader_Get_Segment(lucy_PolyReader* self) {
    const LUCY_PolyReader_Get_Segment_t method = (LUCY_PolyReader_Get_Segment_t)cfish_obj_method(self, LUCY_PolyReader_Get_Segment_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Get_Seg_Tick_OFFSET;
static CFISH_INLINE int32_t
LUCY_PolyReader_Get_Seg_Tick(lucy_PolyReader* self) {
    const LUCY_PolyReader_Get_Seg_Tick_t method = (LUCY_PolyReader_Get_Seg_Tick_t)cfish_obj_method(self, LUCY_PolyReader_Get_Seg_Tick_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Close_OFFSET;
static CFISH_INLINE void
LUCY_PolyReader_Close(lucy_PolyReader* self) {
    const LUCY_PolyReader_Close_t method = (LUCY_PolyReader_Close_t)cfish_obj_method(self, LUCY_PolyReader_Close_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Doc_Max_OFFSET;
static CFISH_INLINE int32_t
LUCY_PolyReader_Doc_Max(lucy_PolyReader* self) {
    const LUCY_PolyReader_Doc_Max_t method = (LUCY_PolyReader_Doc_Max_t)cfish_obj_method(self, LUCY_PolyReader_Doc_Max_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Doc_Count_OFFSET;
static CFISH_INLINE int32_t
LUCY_PolyReader_Doc_Count(lucy_PolyReader* self) {
    const LUCY_PolyReader_Doc_Count_t method = (LUCY_PolyReader_Doc_Count_t)cfish_obj_method(self, LUCY_PolyReader_Doc_Count_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Del_Count_OFFSET;
static CFISH_INLINE int32_t
LUCY_PolyReader_Del_Count(lucy_PolyReader* self) {
    const LUCY_PolyReader_Del_Count_t method = (LUCY_PolyReader_Del_Count_t)cfish_obj_method(self, LUCY_PolyReader_Del_Count_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Offsets_OFFSET;
static CFISH_INLINE lucy_I32Array*
LUCY_PolyReader_Offsets(lucy_PolyReader* self) {
    const LUCY_PolyReader_Offsets_t method = (LUCY_PolyReader_Offsets_t)cfish_obj_method(self, LUCY_PolyReader_Offsets_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Seg_Readers_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_PolyReader_Seg_Readers(lucy_PolyReader* self) {
    const LUCY_PolyReader_Seg_Readers_t method = (LUCY_PolyReader_Seg_Readers_t)cfish_obj_method(self, LUCY_PolyReader_Seg_Readers_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Obtain_OFFSET;
static CFISH_INLINE lucy_DataReader*
LUCY_PolyReader_Obtain(lucy_PolyReader* self, cfish_String* api) {
    const LUCY_PolyReader_Obtain_t method = (LUCY_PolyReader_Obtain_t)cfish_obj_method(self, LUCY_PolyReader_Obtain_OFFSET);
    return method(self, api);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Fetch_OFFSET;
static CFISH_INLINE lucy_DataReader*
LUCY_PolyReader_Fetch(lucy_PolyReader* self, cfish_String* api) {
    const LUCY_PolyReader_Fetch_t method = (LUCY_PolyReader_Fetch_t)cfish_obj_method(self, LUCY_PolyReader_Fetch_OFFSET);
    return method(self, api);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Get_Components_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_PolyReader_Get_Components(lucy_PolyReader* self) {
    const LUCY_PolyReader_Get_Components_t method = (LUCY_PolyReader_Get_Components_t)cfish_obj_method(self, LUCY_PolyReader_Get_Components_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyReader_Get_Seg_Readers_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_PolyReader_Get_Seg_Readers(lucy_PolyReader* self) {
    const LUCY_PolyReader_Get_Seg_Readers_t method = (LUCY_PolyReader_Get_Seg_Readers_t)cfish_obj_method(self, LUCY_PolyReader_Get_Seg_Readers_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_PolyReader_Get_Seg_Readers_OVERRIDE NULL
#else
cfish_Vector*
Lucy_PolyReader_Get_Seg_Readers_OVERRIDE(lucy_PolyReader* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define PolyReader lucy_PolyReader
  #define POLYREADER LUCY_POLYREADER
  #define PolyReader_open lucy_PolyReader_open
  #define PolyReader_do_open lucy_PolyReader_do_open
  #define PolyReader_new lucy_PolyReader_new
  #define PolyReader_init lucy_PolyReader_init
  #define PolyReader_sub_tick lucy_PolyReader_sub_tick
  #define PolyReader_race_condition_debug1 lucy_PolyReader_race_condition_debug1
  #define PolyReader_debug1_num_passes lucy_PolyReader_debug1_num_passes
  #define PolyReader_get_class lucy_PolyReader_get_class
  #define PolyReader_get_class_name lucy_PolyReader_get_class_name
  #define PolyReader_is_a lucy_PolyReader_is_a
  #define PolyReader_Doc_Max_IMP LUCY_PolyReader_Doc_Max_IMP
  #define PolyReader_Doc_Count_IMP LUCY_PolyReader_Doc_Count_IMP
  #define PolyReader_Del_Count_IMP LUCY_PolyReader_Del_Count_IMP
  #define PolyReader_Offsets_IMP LUCY_PolyReader_Offsets_IMP
  #define PolyReader_Seg_Readers_IMP LUCY_PolyReader_Seg_Readers_IMP
  #define PolyReader_Get_Seg_Readers_IMP LUCY_PolyReader_Get_Seg_Readers_IMP
  #define PolyReader_Close_IMP LUCY_PolyReader_Close_IMP
  #define PolyReader_Destroy_IMP LUCY_PolyReader_Destroy_IMP
  #define PolyReader_To_Host LUCY_PolyReader_To_Host
  #define PolyReader_To_Host_t LUCY_PolyReader_To_Host_t
  #define PolyReader_Clone LUCY_PolyReader_Clone
  #define PolyReader_Clone_t LUCY_PolyReader_Clone_t
  #define PolyReader_Equals LUCY_PolyReader_Equals
  #define PolyReader_Equals_t LUCY_PolyReader_Equals_t
  #define PolyReader_Compare_To LUCY_PolyReader_Compare_To
  #define PolyReader_Compare_To_t LUCY_PolyReader_Compare_To_t
  #define PolyReader_Destroy LUCY_PolyReader_Destroy
  #define PolyReader_Destroy_t LUCY_PolyReader_Destroy_t
  #define PolyReader_To_String LUCY_PolyReader_To_String
  #define PolyReader_To_String_t LUCY_PolyReader_To_String_t
  #define PolyReader_Aggregator LUCY_PolyReader_Aggregator
  #define PolyReader_Aggregator_t LUCY_PolyReader_Aggregator_t
  #define PolyReader_Get_Schema LUCY_PolyReader_Get_Schema
  #define PolyReader_Get_Schema_t LUCY_PolyReader_Get_Schema_t
  #define PolyReader_Get_Folder LUCY_PolyReader_Get_Folder
  #define PolyReader_Get_Folder_t LUCY_PolyReader_Get_Folder_t
  #define PolyReader_Get_Snapshot LUCY_PolyReader_Get_Snapshot
  #define PolyReader_Get_Snapshot_t LUCY_PolyReader_Get_Snapshot_t
  #define PolyReader_Get_Segments LUCY_PolyReader_Get_Segments
  #define PolyReader_Get_Segments_t LUCY_PolyReader_Get_Segments_t
  #define PolyReader_Get_Segment LUCY_PolyReader_Get_Segment
  #define PolyReader_Get_Segment_t LUCY_PolyReader_Get_Segment_t
  #define PolyReader_Get_Seg_Tick LUCY_PolyReader_Get_Seg_Tick
  #define PolyReader_Get_Seg_Tick_t LUCY_PolyReader_Get_Seg_Tick_t
  #define PolyReader_Close LUCY_PolyReader_Close
  #define PolyReader_Close_t LUCY_PolyReader_Close_t
  #define PolyReader_Doc_Max LUCY_PolyReader_Doc_Max
  #define PolyReader_Doc_Max_t LUCY_PolyReader_Doc_Max_t
  #define PolyReader_Doc_Count LUCY_PolyReader_Doc_Count
  #define PolyReader_Doc_Count_t LUCY_PolyReader_Doc_Count_t
  #define PolyReader_Del_Count LUCY_PolyReader_Del_Count
  #define PolyReader_Del_Count_t LUCY_PolyReader_Del_Count_t
  #define PolyReader_Offsets LUCY_PolyReader_Offsets
  #define PolyReader_Offsets_t LUCY_PolyReader_Offsets_t
  #define PolyReader_Seg_Readers LUCY_PolyReader_Seg_Readers
  #define PolyReader_Seg_Readers_t LUCY_PolyReader_Seg_Readers_t
  #define PolyReader_Obtain LUCY_PolyReader_Obtain
  #define PolyReader_Obtain_t LUCY_PolyReader_Obtain_t
  #define PolyReader_Fetch LUCY_PolyReader_Fetch
  #define PolyReader_Fetch_t LUCY_PolyReader_Fetch_t
  #define PolyReader_Get_Components LUCY_PolyReader_Get_Components
  #define PolyReader_Get_Components_t LUCY_PolyReader_Get_Components_t
  #define PolyReader_Get_Seg_Readers LUCY_PolyReader_Get_Seg_Readers
  #define PolyReader_Get_Seg_Readers_t LUCY_PolyReader_Get_Seg_Readers_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_POLYREADER */




