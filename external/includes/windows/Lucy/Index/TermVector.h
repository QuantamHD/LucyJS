/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_TERMVECTOR
#define H_LUCY_INDEX_TERMVECTOR 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish\Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_TERMVECTOR
extern uint32_t lucy_TV_IVARS_OFFSET;
typedef struct lucy_TermVectorIVARS lucy_TermVectorIVARS;
static CFISH_INLINE lucy_TermVectorIVARS*
lucy_TV_IVARS(lucy_TermVector *self) {
   char *ptr = (char*)self + lucy_TV_IVARS_OFFSET;
   return (lucy_TermVectorIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define TermVectorIVARS lucy_TermVectorIVARS
  #define TV_IVARS lucy_TV_IVARS
#endif

struct lucy_TermVectorIVARS {
    cfish_String* field;
    cfish_String* text;
    size_t num_pos;
    lucy_I32Array* positions;
    lucy_I32Array* start_offsets;
    lucy_I32Array* end_offsets;
};

#endif /* C_LUCY_TERMVECTOR */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_TermVector*
lucy_TV_new(cfish_String* field, cfish_String* text, lucy_I32Array* positions, lucy_I32Array* start_offsets, lucy_I32Array* end_offsets);

LUCY_VISIBLE lucy_TermVector*
lucy_TV_init(lucy_TermVector* self, cfish_String* field, cfish_String* text, lucy_I32Array* positions, lucy_I32Array* start_offsets, lucy_I32Array* end_offsets);

lucy_I32Array*
LUCY_TV_Get_Positions_IMP(lucy_TermVector* self);

lucy_I32Array*
LUCY_TV_Get_Start_Offsets_IMP(lucy_TermVector* self);

lucy_I32Array*
LUCY_TV_Get_End_Offsets_IMP(lucy_TermVector* self);

void
LUCY_TV_Serialize_IMP(lucy_TermVector* self, lucy_OutStream* outstream);

lucy_TermVector*
LUCY_TV_Deserialize_IMP(lucy_TermVector* self, lucy_InStream* instream);

bool
LUCY_TV_Equals_IMP(lucy_TermVector* self, cfish_Obj* other);

void
LUCY_TV_Destroy_IMP(lucy_TermVector* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_TV_To_Host_t)(lucy_TermVector* self, void* vcache);

typedef cfish_Obj*
(*LUCY_TV_Clone_t)(lucy_TermVector* self);

typedef bool
(*LUCY_TV_Equals_t)(lucy_TermVector* self, cfish_Obj* other);

typedef int32_t
(*LUCY_TV_Compare_To_t)(lucy_TermVector* self, cfish_Obj* other);

typedef void
(*LUCY_TV_Destroy_t)(lucy_TermVector* self);

typedef cfish_String*
(*LUCY_TV_To_String_t)(lucy_TermVector* self);

typedef lucy_I32Array*
(*LUCY_TV_Get_Positions_t)(lucy_TermVector* self);

typedef lucy_I32Array*
(*LUCY_TV_Get_Start_Offsets_t)(lucy_TermVector* self);

typedef lucy_I32Array*
(*LUCY_TV_Get_End_Offsets_t)(lucy_TermVector* self);

typedef void
(*LUCY_TV_Serialize_t)(lucy_TermVector* self, lucy_OutStream* outstream);

typedef lucy_TermVector*
(*LUCY_TV_Deserialize_t)(lucy_TermVector* self, lucy_InStream* instream);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_TV_get_class(lucy_TermVector *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_TV_get_class_name(lucy_TermVector *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_TV_is_a(lucy_TermVector *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_TV_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_TV_To_Host(lucy_TermVector* self, void* vcache) {
    const LUCY_TV_To_Host_t method = (LUCY_TV_To_Host_t)cfish_obj_method(self, LUCY_TV_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_TV_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_TV_Clone(lucy_TermVector* self) {
    const LUCY_TV_Clone_t method = (LUCY_TV_Clone_t)cfish_obj_method(self, LUCY_TV_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TV_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_TV_Equals(lucy_TermVector* self, cfish_Obj* other) {
    const LUCY_TV_Equals_t method = (LUCY_TV_Equals_t)cfish_obj_method(self, LUCY_TV_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_TV_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_TV_Compare_To(lucy_TermVector* self, cfish_Obj* other) {
    const LUCY_TV_Compare_To_t method = (LUCY_TV_Compare_To_t)cfish_obj_method(self, LUCY_TV_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_TV_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_TV_Destroy(lucy_TermVector* self) {
    const LUCY_TV_Destroy_t method = (LUCY_TV_Destroy_t)cfish_obj_method(self, LUCY_TV_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TV_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_TV_To_String(lucy_TermVector* self) {
    const LUCY_TV_To_String_t method = (LUCY_TV_To_String_t)cfish_obj_method(self, LUCY_TV_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TV_Get_Positions_OFFSET;
static CFISH_INLINE lucy_I32Array*
LUCY_TV_Get_Positions(lucy_TermVector* self) {
    const LUCY_TV_Get_Positions_t method = (LUCY_TV_Get_Positions_t)cfish_obj_method(self, LUCY_TV_Get_Positions_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TV_Get_Start_Offsets_OFFSET;
static CFISH_INLINE lucy_I32Array*
LUCY_TV_Get_Start_Offsets(lucy_TermVector* self) {
    const LUCY_TV_Get_Start_Offsets_t method = (LUCY_TV_Get_Start_Offsets_t)cfish_obj_method(self, LUCY_TV_Get_Start_Offsets_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TV_Get_End_Offsets_OFFSET;
static CFISH_INLINE lucy_I32Array*
LUCY_TV_Get_End_Offsets(lucy_TermVector* self) {
    const LUCY_TV_Get_End_Offsets_t method = (LUCY_TV_Get_End_Offsets_t)cfish_obj_method(self, LUCY_TV_Get_End_Offsets_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_TV_Serialize_OFFSET;
static CFISH_INLINE void
LUCY_TV_Serialize(lucy_TermVector* self, lucy_OutStream* outstream) {
    const LUCY_TV_Serialize_t method = (LUCY_TV_Serialize_t)cfish_obj_method(self, LUCY_TV_Serialize_OFFSET);
    method(self, outstream);
}

extern LUCY_VISIBLE uint32_t LUCY_TV_Deserialize_OFFSET;
static CFISH_INLINE lucy_TermVector*
LUCY_TV_Deserialize(lucy_TermVector* self, lucy_InStream* instream) {
    const LUCY_TV_Deserialize_t method = (LUCY_TV_Deserialize_t)cfish_obj_method(self, LUCY_TV_Deserialize_OFFSET);
    return method(self, instream);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_TV_Get_Positions_OVERRIDE NULL
#define Lucy_TV_Get_Start_Offsets_OVERRIDE NULL
#define Lucy_TV_Get_End_Offsets_OVERRIDE NULL
#define Lucy_TV_Serialize_OVERRIDE NULL
#define Lucy_TV_Deserialize_OVERRIDE NULL
#else
lucy_I32Array*
Lucy_TV_Get_Positions_OVERRIDE(lucy_TermVector* self);
lucy_I32Array*
Lucy_TV_Get_Start_Offsets_OVERRIDE(lucy_TermVector* self);
lucy_I32Array*
Lucy_TV_Get_End_Offsets_OVERRIDE(lucy_TermVector* self);
void
Lucy_TV_Serialize_OVERRIDE(lucy_TermVector* self, lucy_OutStream* outstream);
lucy_TermVector*
Lucy_TV_Deserialize_OVERRIDE(lucy_TermVector* self, lucy_InStream* instream);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define TermVector lucy_TermVector
  #define TERMVECTOR LUCY_TERMVECTOR
  #define TV_new lucy_TV_new
  #define TV_init lucy_TV_init
  #define TV_get_class lucy_TV_get_class
  #define TV_get_class_name lucy_TV_get_class_name
  #define TV_is_a lucy_TV_is_a
  #define TV_Get_Positions_IMP LUCY_TV_Get_Positions_IMP
  #define TV_Get_Start_Offsets_IMP LUCY_TV_Get_Start_Offsets_IMP
  #define TV_Get_End_Offsets_IMP LUCY_TV_Get_End_Offsets_IMP
  #define TV_Serialize_IMP LUCY_TV_Serialize_IMP
  #define TV_Deserialize_IMP LUCY_TV_Deserialize_IMP
  #define TV_Equals_IMP LUCY_TV_Equals_IMP
  #define TV_Destroy_IMP LUCY_TV_Destroy_IMP
  #define TV_To_Host LUCY_TV_To_Host
  #define TV_To_Host_t LUCY_TV_To_Host_t
  #define TV_Clone LUCY_TV_Clone
  #define TV_Clone_t LUCY_TV_Clone_t
  #define TV_Equals LUCY_TV_Equals
  #define TV_Equals_t LUCY_TV_Equals_t
  #define TV_Compare_To LUCY_TV_Compare_To
  #define TV_Compare_To_t LUCY_TV_Compare_To_t
  #define TV_Destroy LUCY_TV_Destroy
  #define TV_Destroy_t LUCY_TV_Destroy_t
  #define TV_To_String LUCY_TV_To_String
  #define TV_To_String_t LUCY_TV_To_String_t
  #define TV_Get_Positions LUCY_TV_Get_Positions
  #define TV_Get_Positions_t LUCY_TV_Get_Positions_t
  #define TV_Get_Start_Offsets LUCY_TV_Get_Start_Offsets
  #define TV_Get_Start_Offsets_t LUCY_TV_Get_Start_Offsets_t
  #define TV_Get_End_Offsets LUCY_TV_Get_End_Offsets
  #define TV_Get_End_Offsets_t LUCY_TV_Get_End_Offsets_t
  #define TV_Serialize LUCY_TV_Serialize
  #define TV_Serialize_t LUCY_TV_Serialize_t
  #define TV_Deserialize LUCY_TV_Deserialize
  #define TV_Deserialize_t LUCY_TV_Deserialize_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_TERMVECTOR */




