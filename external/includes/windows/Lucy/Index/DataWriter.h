/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_DATAWRITER
#define H_LUCY_INDEX_DATAWRITER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Clownfish\Obj.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_DATAWRITER
extern uint32_t lucy_DataWriter_IVARS_OFFSET;
typedef struct lucy_DataWriterIVARS lucy_DataWriterIVARS;
static CFISH_INLINE lucy_DataWriterIVARS*
lucy_DataWriter_IVARS(lucy_DataWriter *self) {
   char *ptr = (char*)self + lucy_DataWriter_IVARS_OFFSET;
   return (lucy_DataWriterIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define DataWriterIVARS lucy_DataWriterIVARS
  #define DataWriter_IVARS lucy_DataWriter_IVARS
#endif

struct lucy_DataWriterIVARS {
    lucy_Snapshot* snapshot;
    lucy_Segment* segment;
    lucy_PolyReader* polyreader;
    lucy_Schema* schema;
    lucy_Folder* folder;
};

#endif /* C_LUCY_DATAWRITER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_DataWriter*
lucy_DataWriter_init(lucy_DataWriter* self, lucy_Schema* schema, lucy_Snapshot* snapshot, lucy_Segment* segment, lucy_PolyReader* polyreader);

void
LUCY_DataWriter_Add_Inverted_Doc_IMP(lucy_DataWriter* self, lucy_Inverter* inverter, int32_t doc_id);

void
LUCY_DataWriter_Add_Segment_IMP(lucy_DataWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map);

void
LUCY_DataWriter_Delete_Segment_IMP(lucy_DataWriter* self, lucy_SegReader* reader);

void
LUCY_DataWriter_Merge_Segment_IMP(lucy_DataWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map);

void
LUCY_DataWriter_Finish_IMP(lucy_DataWriter* self);

cfish_Hash*
LUCY_DataWriter_Metadata_IMP(lucy_DataWriter* self);

int32_t
LUCY_DataWriter_Format_IMP(lucy_DataWriter* self);

lucy_Snapshot*
LUCY_DataWriter_Get_Snapshot_IMP(lucy_DataWriter* self);

lucy_Segment*
LUCY_DataWriter_Get_Segment_IMP(lucy_DataWriter* self);

lucy_PolyReader*
LUCY_DataWriter_Get_PolyReader_IMP(lucy_DataWriter* self);

lucy_Schema*
LUCY_DataWriter_Get_Schema_IMP(lucy_DataWriter* self);

lucy_Folder*
LUCY_DataWriter_Get_Folder_IMP(lucy_DataWriter* self);

void
LUCY_DataWriter_Destroy_IMP(lucy_DataWriter* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_DataWriter_To_Host_t)(lucy_DataWriter* self, void* vcache);

typedef cfish_Obj*
(*LUCY_DataWriter_Clone_t)(lucy_DataWriter* self);

typedef bool
(*LUCY_DataWriter_Equals_t)(lucy_DataWriter* self, cfish_Obj* other);

typedef int32_t
(*LUCY_DataWriter_Compare_To_t)(lucy_DataWriter* self, cfish_Obj* other);

typedef void
(*LUCY_DataWriter_Destroy_t)(lucy_DataWriter* self);

typedef cfish_String*
(*LUCY_DataWriter_To_String_t)(lucy_DataWriter* self);

typedef void
(*LUCY_DataWriter_Add_Inverted_Doc_t)(lucy_DataWriter* self, lucy_Inverter* inverter, int32_t doc_id);

typedef void
(*LUCY_DataWriter_Add_Segment_t)(lucy_DataWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map);

typedef void
(*LUCY_DataWriter_Delete_Segment_t)(lucy_DataWriter* self, lucy_SegReader* reader);

typedef void
(*LUCY_DataWriter_Merge_Segment_t)(lucy_DataWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map);

typedef void
(*LUCY_DataWriter_Finish_t)(lucy_DataWriter* self);

typedef cfish_Hash*
(*LUCY_DataWriter_Metadata_t)(lucy_DataWriter* self);

typedef int32_t
(*LUCY_DataWriter_Format_t)(lucy_DataWriter* self);

typedef lucy_Snapshot*
(*LUCY_DataWriter_Get_Snapshot_t)(lucy_DataWriter* self);

typedef lucy_Segment*
(*LUCY_DataWriter_Get_Segment_t)(lucy_DataWriter* self);

typedef lucy_PolyReader*
(*LUCY_DataWriter_Get_PolyReader_t)(lucy_DataWriter* self);

typedef lucy_Schema*
(*LUCY_DataWriter_Get_Schema_t)(lucy_DataWriter* self);

typedef lucy_Folder*
(*LUCY_DataWriter_Get_Folder_t)(lucy_DataWriter* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_DataWriter_get_class(lucy_DataWriter *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_DataWriter_get_class_name(lucy_DataWriter *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_DataWriter_is_a(lucy_DataWriter *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_DataWriter_To_Host(lucy_DataWriter* self, void* vcache) {
    const LUCY_DataWriter_To_Host_t method = (LUCY_DataWriter_To_Host_t)cfish_obj_method(self, LUCY_DataWriter_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_DataWriter_Clone(lucy_DataWriter* self) {
    const LUCY_DataWriter_Clone_t method = (LUCY_DataWriter_Clone_t)cfish_obj_method(self, LUCY_DataWriter_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_DataWriter_Equals(lucy_DataWriter* self, cfish_Obj* other) {
    const LUCY_DataWriter_Equals_t method = (LUCY_DataWriter_Equals_t)cfish_obj_method(self, LUCY_DataWriter_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_DataWriter_Compare_To(lucy_DataWriter* self, cfish_Obj* other) {
    const LUCY_DataWriter_Compare_To_t method = (LUCY_DataWriter_Compare_To_t)cfish_obj_method(self, LUCY_DataWriter_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_DataWriter_Destroy(lucy_DataWriter* self) {
    const LUCY_DataWriter_Destroy_t method = (LUCY_DataWriter_Destroy_t)cfish_obj_method(self, LUCY_DataWriter_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_DataWriter_To_String(lucy_DataWriter* self) {
    const LUCY_DataWriter_To_String_t method = (LUCY_DataWriter_To_String_t)cfish_obj_method(self, LUCY_DataWriter_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_Add_Inverted_Doc_OFFSET;
static CFISH_INLINE void
LUCY_DataWriter_Add_Inverted_Doc(lucy_DataWriter* self, lucy_Inverter* inverter, int32_t doc_id) {
    const LUCY_DataWriter_Add_Inverted_Doc_t method = (LUCY_DataWriter_Add_Inverted_Doc_t)cfish_obj_method(self, LUCY_DataWriter_Add_Inverted_Doc_OFFSET);
    method(self, inverter, doc_id);
}

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_Add_Segment_OFFSET;
static CFISH_INLINE void
LUCY_DataWriter_Add_Segment(lucy_DataWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map) {
    const LUCY_DataWriter_Add_Segment_t method = (LUCY_DataWriter_Add_Segment_t)cfish_obj_method(self, LUCY_DataWriter_Add_Segment_OFFSET);
    method(self, reader, doc_map);
}

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_Delete_Segment_OFFSET;
static CFISH_INLINE void
LUCY_DataWriter_Delete_Segment(lucy_DataWriter* self, lucy_SegReader* reader) {
    const LUCY_DataWriter_Delete_Segment_t method = (LUCY_DataWriter_Delete_Segment_t)cfish_obj_method(self, LUCY_DataWriter_Delete_Segment_OFFSET);
    method(self, reader);
}

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_Merge_Segment_OFFSET;
static CFISH_INLINE void
LUCY_DataWriter_Merge_Segment(lucy_DataWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map) {
    const LUCY_DataWriter_Merge_Segment_t method = (LUCY_DataWriter_Merge_Segment_t)cfish_obj_method(self, LUCY_DataWriter_Merge_Segment_OFFSET);
    method(self, reader, doc_map);
}

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_Finish_OFFSET;
static CFISH_INLINE void
LUCY_DataWriter_Finish(lucy_DataWriter* self) {
    const LUCY_DataWriter_Finish_t method = (LUCY_DataWriter_Finish_t)cfish_obj_method(self, LUCY_DataWriter_Finish_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_Metadata_OFFSET;
static CFISH_INLINE cfish_Hash*
LUCY_DataWriter_Metadata(lucy_DataWriter* self) {
    const LUCY_DataWriter_Metadata_t method = (LUCY_DataWriter_Metadata_t)cfish_obj_method(self, LUCY_DataWriter_Metadata_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_Format_OFFSET;
static CFISH_INLINE int32_t
LUCY_DataWriter_Format(lucy_DataWriter* self) {
    const LUCY_DataWriter_Format_t method = (LUCY_DataWriter_Format_t)cfish_obj_method(self, LUCY_DataWriter_Format_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_Get_Snapshot_OFFSET;
static CFISH_INLINE lucy_Snapshot*
LUCY_DataWriter_Get_Snapshot(lucy_DataWriter* self) {
    const LUCY_DataWriter_Get_Snapshot_t method = (LUCY_DataWriter_Get_Snapshot_t)cfish_obj_method(self, LUCY_DataWriter_Get_Snapshot_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_Get_Segment_OFFSET;
static CFISH_INLINE lucy_Segment*
LUCY_DataWriter_Get_Segment(lucy_DataWriter* self) {
    const LUCY_DataWriter_Get_Segment_t method = (LUCY_DataWriter_Get_Segment_t)cfish_obj_method(self, LUCY_DataWriter_Get_Segment_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_Get_PolyReader_OFFSET;
static CFISH_INLINE lucy_PolyReader*
LUCY_DataWriter_Get_PolyReader(lucy_DataWriter* self) {
    const LUCY_DataWriter_Get_PolyReader_t method = (LUCY_DataWriter_Get_PolyReader_t)cfish_obj_method(self, LUCY_DataWriter_Get_PolyReader_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_Get_Schema_OFFSET;
static CFISH_INLINE lucy_Schema*
LUCY_DataWriter_Get_Schema(lucy_DataWriter* self) {
    const LUCY_DataWriter_Get_Schema_t method = (LUCY_DataWriter_Get_Schema_t)cfish_obj_method(self, LUCY_DataWriter_Get_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DataWriter_Get_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_DataWriter_Get_Folder(lucy_DataWriter* self) {
    const LUCY_DataWriter_Get_Folder_t method = (LUCY_DataWriter_Get_Folder_t)cfish_obj_method(self, LUCY_DataWriter_Get_Folder_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_DataWriter_Add_Inverted_Doc_OVERRIDE NULL
#define Lucy_DataWriter_Add_Segment_OVERRIDE NULL
#define Lucy_DataWriter_Delete_Segment_OVERRIDE NULL
#define Lucy_DataWriter_Merge_Segment_OVERRIDE NULL
#define Lucy_DataWriter_Finish_OVERRIDE NULL
#define Lucy_DataWriter_Metadata_OVERRIDE NULL
#define Lucy_DataWriter_Format_OVERRIDE NULL
#define Lucy_DataWriter_Get_Snapshot_OVERRIDE NULL
#define Lucy_DataWriter_Get_Segment_OVERRIDE NULL
#define Lucy_DataWriter_Get_PolyReader_OVERRIDE NULL
#define Lucy_DataWriter_Get_Schema_OVERRIDE NULL
#define Lucy_DataWriter_Get_Folder_OVERRIDE NULL
#else
void
Lucy_DataWriter_Add_Inverted_Doc_OVERRIDE(lucy_DataWriter* self, lucy_Inverter* inverter, int32_t doc_id);
void
Lucy_DataWriter_Add_Segment_OVERRIDE(lucy_DataWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map);
void
Lucy_DataWriter_Delete_Segment_OVERRIDE(lucy_DataWriter* self, lucy_SegReader* reader);
void
Lucy_DataWriter_Merge_Segment_OVERRIDE(lucy_DataWriter* self, lucy_SegReader* reader, lucy_I32Array* doc_map);
void
Lucy_DataWriter_Finish_OVERRIDE(lucy_DataWriter* self);
cfish_Hash*
Lucy_DataWriter_Metadata_OVERRIDE(lucy_DataWriter* self);
int32_t
Lucy_DataWriter_Format_OVERRIDE(lucy_DataWriter* self);
lucy_Snapshot*
Lucy_DataWriter_Get_Snapshot_OVERRIDE(lucy_DataWriter* self);
lucy_Segment*
Lucy_DataWriter_Get_Segment_OVERRIDE(lucy_DataWriter* self);
lucy_PolyReader*
Lucy_DataWriter_Get_PolyReader_OVERRIDE(lucy_DataWriter* self);
lucy_Schema*
Lucy_DataWriter_Get_Schema_OVERRIDE(lucy_DataWriter* self);
lucy_Folder*
Lucy_DataWriter_Get_Folder_OVERRIDE(lucy_DataWriter* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define DataWriter lucy_DataWriter
  #define DATAWRITER LUCY_DATAWRITER
  #define DataWriter_init lucy_DataWriter_init
  #define DataWriter_get_class lucy_DataWriter_get_class
  #define DataWriter_get_class_name lucy_DataWriter_get_class_name
  #define DataWriter_is_a lucy_DataWriter_is_a
  #define DataWriter_Add_Inverted_Doc_IMP LUCY_DataWriter_Add_Inverted_Doc_IMP
  #define DataWriter_Add_Segment_IMP LUCY_DataWriter_Add_Segment_IMP
  #define DataWriter_Delete_Segment_IMP LUCY_DataWriter_Delete_Segment_IMP
  #define DataWriter_Merge_Segment_IMP LUCY_DataWriter_Merge_Segment_IMP
  #define DataWriter_Finish_IMP LUCY_DataWriter_Finish_IMP
  #define DataWriter_Metadata_IMP LUCY_DataWriter_Metadata_IMP
  #define DataWriter_Format_IMP LUCY_DataWriter_Format_IMP
  #define DataWriter_Get_Snapshot_IMP LUCY_DataWriter_Get_Snapshot_IMP
  #define DataWriter_Get_Segment_IMP LUCY_DataWriter_Get_Segment_IMP
  #define DataWriter_Get_PolyReader_IMP LUCY_DataWriter_Get_PolyReader_IMP
  #define DataWriter_Get_Schema_IMP LUCY_DataWriter_Get_Schema_IMP
  #define DataWriter_Get_Folder_IMP LUCY_DataWriter_Get_Folder_IMP
  #define DataWriter_Destroy_IMP LUCY_DataWriter_Destroy_IMP
  #define DataWriter_To_Host LUCY_DataWriter_To_Host
  #define DataWriter_To_Host_t LUCY_DataWriter_To_Host_t
  #define DataWriter_Clone LUCY_DataWriter_Clone
  #define DataWriter_Clone_t LUCY_DataWriter_Clone_t
  #define DataWriter_Equals LUCY_DataWriter_Equals
  #define DataWriter_Equals_t LUCY_DataWriter_Equals_t
  #define DataWriter_Compare_To LUCY_DataWriter_Compare_To
  #define DataWriter_Compare_To_t LUCY_DataWriter_Compare_To_t
  #define DataWriter_Destroy LUCY_DataWriter_Destroy
  #define DataWriter_Destroy_t LUCY_DataWriter_Destroy_t
  #define DataWriter_To_String LUCY_DataWriter_To_String
  #define DataWriter_To_String_t LUCY_DataWriter_To_String_t
  #define DataWriter_Add_Inverted_Doc LUCY_DataWriter_Add_Inverted_Doc
  #define DataWriter_Add_Inverted_Doc_t LUCY_DataWriter_Add_Inverted_Doc_t
  #define DataWriter_Add_Segment LUCY_DataWriter_Add_Segment
  #define DataWriter_Add_Segment_t LUCY_DataWriter_Add_Segment_t
  #define DataWriter_Delete_Segment LUCY_DataWriter_Delete_Segment
  #define DataWriter_Delete_Segment_t LUCY_DataWriter_Delete_Segment_t
  #define DataWriter_Merge_Segment LUCY_DataWriter_Merge_Segment
  #define DataWriter_Merge_Segment_t LUCY_DataWriter_Merge_Segment_t
  #define DataWriter_Finish LUCY_DataWriter_Finish
  #define DataWriter_Finish_t LUCY_DataWriter_Finish_t
  #define DataWriter_Metadata LUCY_DataWriter_Metadata
  #define DataWriter_Metadata_t LUCY_DataWriter_Metadata_t
  #define DataWriter_Format LUCY_DataWriter_Format
  #define DataWriter_Format_t LUCY_DataWriter_Format_t
  #define DataWriter_Get_Snapshot LUCY_DataWriter_Get_Snapshot
  #define DataWriter_Get_Snapshot_t LUCY_DataWriter_Get_Snapshot_t
  #define DataWriter_Get_Segment LUCY_DataWriter_Get_Segment
  #define DataWriter_Get_Segment_t LUCY_DataWriter_Get_Segment_t
  #define DataWriter_Get_PolyReader LUCY_DataWriter_Get_PolyReader
  #define DataWriter_Get_PolyReader_t LUCY_DataWriter_Get_PolyReader_t
  #define DataWriter_Get_Schema LUCY_DataWriter_Get_Schema
  #define DataWriter_Get_Schema_t LUCY_DataWriter_Get_Schema_t
  #define DataWriter_Get_Folder LUCY_DataWriter_Get_Folder
  #define DataWriter_Get_Folder_t LUCY_DataWriter_Get_Folder_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_DATAWRITER */




