/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_HIGHLIGHTREADER
#define H_LUCY_INDEX_HIGHLIGHTREADER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy\Index\DataReader.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_HIGHLIGHTREADER
extern uint32_t lucy_HLReader_IVARS_OFFSET;
typedef struct lucy_HighlightReaderIVARS lucy_HighlightReaderIVARS;
static CFISH_INLINE lucy_HighlightReaderIVARS*
lucy_HLReader_IVARS(lucy_HighlightReader *self) {
   char *ptr = (char*)self + lucy_HLReader_IVARS_OFFSET;
   return (lucy_HighlightReaderIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define HighlightReaderIVARS lucy_HighlightReaderIVARS
  #define HLReader_IVARS lucy_HLReader_IVARS
#endif

struct lucy_HighlightReaderIVARS {
    lucy_Schema* schema;
    lucy_Folder* folder;
    lucy_Snapshot* snapshot;
    cfish_Vector* segments;
    lucy_Segment* segment;
    int32_t seg_tick;
};

#endif /* C_LUCY_HIGHLIGHTREADER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_HighlightReader*
lucy_HLReader_init(lucy_HighlightReader* self, lucy_Schema* schema, lucy_Folder* folder, lucy_Snapshot* snapshot, cfish_Vector* segments, int32_t seg_tick);

lucy_DocVector*
LUCY_HLReader_Fetch_Doc_Vec_IMP(lucy_HighlightReader* self, int32_t doc_id);

lucy_HighlightReader*
LUCY_HLReader_Aggregator_IMP(lucy_HighlightReader* self, cfish_Vector* readers, lucy_I32Array* offsets);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_HLReader_To_Host_t)(lucy_HighlightReader* self, void* vcache);

typedef cfish_Obj*
(*LUCY_HLReader_Clone_t)(lucy_HighlightReader* self);

typedef bool
(*LUCY_HLReader_Equals_t)(lucy_HighlightReader* self, cfish_Obj* other);

typedef int32_t
(*LUCY_HLReader_Compare_To_t)(lucy_HighlightReader* self, cfish_Obj* other);

typedef void
(*LUCY_HLReader_Destroy_t)(lucy_HighlightReader* self);

typedef cfish_String*
(*LUCY_HLReader_To_String_t)(lucy_HighlightReader* self);

typedef lucy_HighlightReader*
(*LUCY_HLReader_Aggregator_t)(lucy_HighlightReader* self, cfish_Vector* readers, lucy_I32Array* offsets);

typedef lucy_Schema*
(*LUCY_HLReader_Get_Schema_t)(lucy_HighlightReader* self);

typedef lucy_Folder*
(*LUCY_HLReader_Get_Folder_t)(lucy_HighlightReader* self);

typedef lucy_Snapshot*
(*LUCY_HLReader_Get_Snapshot_t)(lucy_HighlightReader* self);

typedef cfish_Vector*
(*LUCY_HLReader_Get_Segments_t)(lucy_HighlightReader* self);

typedef lucy_Segment*
(*LUCY_HLReader_Get_Segment_t)(lucy_HighlightReader* self);

typedef int32_t
(*LUCY_HLReader_Get_Seg_Tick_t)(lucy_HighlightReader* self);

typedef void
(*LUCY_HLReader_Close_t)(lucy_HighlightReader* self);

typedef lucy_DocVector*
(*LUCY_HLReader_Fetch_Doc_Vec_t)(lucy_HighlightReader* self, int32_t doc_id);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_HLReader_get_class(lucy_HighlightReader *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_HLReader_get_class_name(lucy_HighlightReader *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_HLReader_is_a(lucy_HighlightReader *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_HLReader_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_HLReader_To_Host(lucy_HighlightReader* self, void* vcache) {
    const LUCY_HLReader_To_Host_t method = (LUCY_HLReader_To_Host_t)cfish_obj_method(self, LUCY_HLReader_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_HLReader_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_HLReader_Clone(lucy_HighlightReader* self) {
    const LUCY_HLReader_Clone_t method = (LUCY_HLReader_Clone_t)cfish_obj_method(self, LUCY_HLReader_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_HLReader_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_HLReader_Equals(lucy_HighlightReader* self, cfish_Obj* other) {
    const LUCY_HLReader_Equals_t method = (LUCY_HLReader_Equals_t)cfish_obj_method(self, LUCY_HLReader_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_HLReader_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_HLReader_Compare_To(lucy_HighlightReader* self, cfish_Obj* other) {
    const LUCY_HLReader_Compare_To_t method = (LUCY_HLReader_Compare_To_t)cfish_obj_method(self, LUCY_HLReader_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_HLReader_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_HLReader_Destroy(lucy_HighlightReader* self) {
    const LUCY_HLReader_Destroy_t method = (LUCY_HLReader_Destroy_t)cfish_obj_method(self, LUCY_HLReader_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_HLReader_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_HLReader_To_String(lucy_HighlightReader* self) {
    const LUCY_HLReader_To_String_t method = (LUCY_HLReader_To_String_t)cfish_obj_method(self, LUCY_HLReader_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_HLReader_Aggregator_OFFSET;
static CFISH_INLINE lucy_HighlightReader*
LUCY_HLReader_Aggregator(lucy_HighlightReader* self, cfish_Vector* readers, lucy_I32Array* offsets) {
    const LUCY_HLReader_Aggregator_t method = (LUCY_HLReader_Aggregator_t)cfish_obj_method(self, LUCY_HLReader_Aggregator_OFFSET);
    return method(self, readers, offsets);
}

extern LUCY_VISIBLE uint32_t LUCY_HLReader_Get_Schema_OFFSET;
static CFISH_INLINE lucy_Schema*
LUCY_HLReader_Get_Schema(lucy_HighlightReader* self) {
    const LUCY_HLReader_Get_Schema_t method = (LUCY_HLReader_Get_Schema_t)cfish_obj_method(self, LUCY_HLReader_Get_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_HLReader_Get_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_HLReader_Get_Folder(lucy_HighlightReader* self) {
    const LUCY_HLReader_Get_Folder_t method = (LUCY_HLReader_Get_Folder_t)cfish_obj_method(self, LUCY_HLReader_Get_Folder_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_HLReader_Get_Snapshot_OFFSET;
static CFISH_INLINE lucy_Snapshot*
LUCY_HLReader_Get_Snapshot(lucy_HighlightReader* self) {
    const LUCY_HLReader_Get_Snapshot_t method = (LUCY_HLReader_Get_Snapshot_t)cfish_obj_method(self, LUCY_HLReader_Get_Snapshot_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_HLReader_Get_Segments_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_HLReader_Get_Segments(lucy_HighlightReader* self) {
    const LUCY_HLReader_Get_Segments_t method = (LUCY_HLReader_Get_Segments_t)cfish_obj_method(self, LUCY_HLReader_Get_Segments_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_HLReader_Get_Segment_OFFSET;
static CFISH_INLINE lucy_Segment*
LUCY_HLReader_Get_Segment(lucy_HighlightReader* self) {
    const LUCY_HLReader_Get_Segment_t method = (LUCY_HLReader_Get_Segment_t)cfish_obj_method(self, LUCY_HLReader_Get_Segment_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_HLReader_Get_Seg_Tick_OFFSET;
static CFISH_INLINE int32_t
LUCY_HLReader_Get_Seg_Tick(lucy_HighlightReader* self) {
    const LUCY_HLReader_Get_Seg_Tick_t method = (LUCY_HLReader_Get_Seg_Tick_t)cfish_obj_method(self, LUCY_HLReader_Get_Seg_Tick_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_HLReader_Close_OFFSET;
static CFISH_INLINE void
LUCY_HLReader_Close(lucy_HighlightReader* self) {
    const LUCY_HLReader_Close_t method = (LUCY_HLReader_Close_t)cfish_obj_method(self, LUCY_HLReader_Close_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_HLReader_Fetch_Doc_Vec_OFFSET;
static CFISH_INLINE lucy_DocVector*
LUCY_HLReader_Fetch_Doc_Vec(lucy_HighlightReader* self, int32_t doc_id) {
    const LUCY_HLReader_Fetch_Doc_Vec_t method = (LUCY_HLReader_Fetch_Doc_Vec_t)cfish_obj_method(self, LUCY_HLReader_Fetch_Doc_Vec_OFFSET);
    return method(self, doc_id);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_HLReader_Fetch_Doc_Vec_OVERRIDE NULL
#else
lucy_DocVector*
Lucy_HLReader_Fetch_Doc_Vec_OVERRIDE(lucy_HighlightReader* self, int32_t doc_id);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define HighlightReader lucy_HighlightReader
  #define HIGHLIGHTREADER LUCY_HIGHLIGHTREADER
  #define HLReader_init lucy_HLReader_init
  #define HLReader_get_class lucy_HLReader_get_class
  #define HLReader_get_class_name lucy_HLReader_get_class_name
  #define HLReader_is_a lucy_HLReader_is_a
  #define HLReader_Fetch_Doc_Vec_IMP LUCY_HLReader_Fetch_Doc_Vec_IMP
  #define HLReader_Aggregator_IMP LUCY_HLReader_Aggregator_IMP
  #define HLReader_To_Host LUCY_HLReader_To_Host
  #define HLReader_To_Host_t LUCY_HLReader_To_Host_t
  #define HLReader_Clone LUCY_HLReader_Clone
  #define HLReader_Clone_t LUCY_HLReader_Clone_t
  #define HLReader_Equals LUCY_HLReader_Equals
  #define HLReader_Equals_t LUCY_HLReader_Equals_t
  #define HLReader_Compare_To LUCY_HLReader_Compare_To
  #define HLReader_Compare_To_t LUCY_HLReader_Compare_To_t
  #define HLReader_Destroy LUCY_HLReader_Destroy
  #define HLReader_Destroy_t LUCY_HLReader_Destroy_t
  #define HLReader_To_String LUCY_HLReader_To_String
  #define HLReader_To_String_t LUCY_HLReader_To_String_t
  #define HLReader_Aggregator LUCY_HLReader_Aggregator
  #define HLReader_Aggregator_t LUCY_HLReader_Aggregator_t
  #define HLReader_Get_Schema LUCY_HLReader_Get_Schema
  #define HLReader_Get_Schema_t LUCY_HLReader_Get_Schema_t
  #define HLReader_Get_Folder LUCY_HLReader_Get_Folder
  #define HLReader_Get_Folder_t LUCY_HLReader_Get_Folder_t
  #define HLReader_Get_Snapshot LUCY_HLReader_Get_Snapshot
  #define HLReader_Get_Snapshot_t LUCY_HLReader_Get_Snapshot_t
  #define HLReader_Get_Segments LUCY_HLReader_Get_Segments
  #define HLReader_Get_Segments_t LUCY_HLReader_Get_Segments_t
  #define HLReader_Get_Segment LUCY_HLReader_Get_Segment
  #define HLReader_Get_Segment_t LUCY_HLReader_Get_Segment_t
  #define HLReader_Get_Seg_Tick LUCY_HLReader_Get_Seg_Tick
  #define HLReader_Get_Seg_Tick_t LUCY_HLReader_Get_Seg_Tick_t
  #define HLReader_Close LUCY_HLReader_Close
  #define HLReader_Close_t LUCY_HLReader_Close_t
  #define HLReader_Fetch_Doc_Vec LUCY_HLReader_Fetch_Doc_Vec
  #define HLReader_Fetch_Doc_Vec_t LUCY_HLReader_Fetch_Doc_Vec_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy\Index\HighlightReader.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_POLYHIGHLIGHTREADER
extern uint32_t lucy_PolyHLReader_IVARS_OFFSET;
typedef struct lucy_PolyHighlightReaderIVARS lucy_PolyHighlightReaderIVARS;
static CFISH_INLINE lucy_PolyHighlightReaderIVARS*
lucy_PolyHLReader_IVARS(lucy_PolyHighlightReader *self) {
   char *ptr = (char*)self + lucy_PolyHLReader_IVARS_OFFSET;
   return (lucy_PolyHighlightReaderIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define PolyHighlightReaderIVARS lucy_PolyHighlightReaderIVARS
  #define PolyHLReader_IVARS lucy_PolyHLReader_IVARS
#endif

struct lucy_PolyHighlightReaderIVARS {
    lucy_Schema* schema;
    lucy_Folder* folder;
    lucy_Snapshot* snapshot;
    cfish_Vector* segments;
    lucy_Segment* segment;
    int32_t seg_tick;
    cfish_Vector* readers;
    lucy_I32Array* offsets;
};

#endif /* C_LUCY_POLYHIGHLIGHTREADER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_PolyHighlightReader*
lucy_PolyHLReader_new(cfish_Vector* readers, lucy_I32Array* offsets);

LUCY_VISIBLE lucy_PolyHighlightReader*
lucy_PolyHLReader_init(lucy_PolyHighlightReader* self, cfish_Vector* readers, lucy_I32Array* offsets);

lucy_DocVector*
LUCY_PolyHLReader_Fetch_Doc_Vec_IMP(lucy_PolyHighlightReader* self, int32_t doc_id);

void
LUCY_PolyHLReader_Close_IMP(lucy_PolyHighlightReader* self);

void
LUCY_PolyHLReader_Destroy_IMP(lucy_PolyHighlightReader* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_PolyHLReader_To_Host_t)(lucy_PolyHighlightReader* self, void* vcache);

typedef cfish_Obj*
(*LUCY_PolyHLReader_Clone_t)(lucy_PolyHighlightReader* self);

typedef bool
(*LUCY_PolyHLReader_Equals_t)(lucy_PolyHighlightReader* self, cfish_Obj* other);

typedef int32_t
(*LUCY_PolyHLReader_Compare_To_t)(lucy_PolyHighlightReader* self, cfish_Obj* other);

typedef void
(*LUCY_PolyHLReader_Destroy_t)(lucy_PolyHighlightReader* self);

typedef cfish_String*
(*LUCY_PolyHLReader_To_String_t)(lucy_PolyHighlightReader* self);

typedef lucy_HighlightReader*
(*LUCY_PolyHLReader_Aggregator_t)(lucy_PolyHighlightReader* self, cfish_Vector* readers, lucy_I32Array* offsets);

typedef lucy_Schema*
(*LUCY_PolyHLReader_Get_Schema_t)(lucy_PolyHighlightReader* self);

typedef lucy_Folder*
(*LUCY_PolyHLReader_Get_Folder_t)(lucy_PolyHighlightReader* self);

typedef lucy_Snapshot*
(*LUCY_PolyHLReader_Get_Snapshot_t)(lucy_PolyHighlightReader* self);

typedef cfish_Vector*
(*LUCY_PolyHLReader_Get_Segments_t)(lucy_PolyHighlightReader* self);

typedef lucy_Segment*
(*LUCY_PolyHLReader_Get_Segment_t)(lucy_PolyHighlightReader* self);

typedef int32_t
(*LUCY_PolyHLReader_Get_Seg_Tick_t)(lucy_PolyHighlightReader* self);

typedef void
(*LUCY_PolyHLReader_Close_t)(lucy_PolyHighlightReader* self);

typedef lucy_DocVector*
(*LUCY_PolyHLReader_Fetch_Doc_Vec_t)(lucy_PolyHighlightReader* self, int32_t doc_id);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_PolyHLReader_get_class(lucy_PolyHighlightReader *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_PolyHLReader_get_class_name(lucy_PolyHighlightReader *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_PolyHLReader_is_a(lucy_PolyHighlightReader *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_PolyHLReader_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_PolyHLReader_To_Host(lucy_PolyHighlightReader* self, void* vcache) {
    const LUCY_PolyHLReader_To_Host_t method = (LUCY_PolyHLReader_To_Host_t)cfish_obj_method(self, LUCY_PolyHLReader_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyHLReader_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PolyHLReader_Clone(lucy_PolyHighlightReader* self) {
    const LUCY_PolyHLReader_Clone_t method = (LUCY_PolyHLReader_Clone_t)cfish_obj_method(self, LUCY_PolyHLReader_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyHLReader_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_PolyHLReader_Equals(lucy_PolyHighlightReader* self, cfish_Obj* other) {
    const LUCY_PolyHLReader_Equals_t method = (LUCY_PolyHLReader_Equals_t)cfish_obj_method(self, LUCY_PolyHLReader_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyHLReader_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_PolyHLReader_Compare_To(lucy_PolyHighlightReader* self, cfish_Obj* other) {
    const LUCY_PolyHLReader_Compare_To_t method = (LUCY_PolyHLReader_Compare_To_t)cfish_obj_method(self, LUCY_PolyHLReader_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyHLReader_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_PolyHLReader_Destroy(lucy_PolyHighlightReader* self) {
    const LUCY_PolyHLReader_Destroy_t method = (LUCY_PolyHLReader_Destroy_t)cfish_obj_method(self, LUCY_PolyHLReader_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyHLReader_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_PolyHLReader_To_String(lucy_PolyHighlightReader* self) {
    const LUCY_PolyHLReader_To_String_t method = (LUCY_PolyHLReader_To_String_t)cfish_obj_method(self, LUCY_PolyHLReader_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyHLReader_Aggregator_OFFSET;
static CFISH_INLINE lucy_HighlightReader*
LUCY_PolyHLReader_Aggregator(lucy_PolyHighlightReader* self, cfish_Vector* readers, lucy_I32Array* offsets) {
    const LUCY_PolyHLReader_Aggregator_t method = (LUCY_PolyHLReader_Aggregator_t)cfish_obj_method(self, LUCY_PolyHLReader_Aggregator_OFFSET);
    return method(self, readers, offsets);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyHLReader_Get_Schema_OFFSET;
static CFISH_INLINE lucy_Schema*
LUCY_PolyHLReader_Get_Schema(lucy_PolyHighlightReader* self) {
    const LUCY_PolyHLReader_Get_Schema_t method = (LUCY_PolyHLReader_Get_Schema_t)cfish_obj_method(self, LUCY_PolyHLReader_Get_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyHLReader_Get_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_PolyHLReader_Get_Folder(lucy_PolyHighlightReader* self) {
    const LUCY_PolyHLReader_Get_Folder_t method = (LUCY_PolyHLReader_Get_Folder_t)cfish_obj_method(self, LUCY_PolyHLReader_Get_Folder_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyHLReader_Get_Snapshot_OFFSET;
static CFISH_INLINE lucy_Snapshot*
LUCY_PolyHLReader_Get_Snapshot(lucy_PolyHighlightReader* self) {
    const LUCY_PolyHLReader_Get_Snapshot_t method = (LUCY_PolyHLReader_Get_Snapshot_t)cfish_obj_method(self, LUCY_PolyHLReader_Get_Snapshot_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyHLReader_Get_Segments_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_PolyHLReader_Get_Segments(lucy_PolyHighlightReader* self) {
    const LUCY_PolyHLReader_Get_Segments_t method = (LUCY_PolyHLReader_Get_Segments_t)cfish_obj_method(self, LUCY_PolyHLReader_Get_Segments_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyHLReader_Get_Segment_OFFSET;
static CFISH_INLINE lucy_Segment*
LUCY_PolyHLReader_Get_Segment(lucy_PolyHighlightReader* self) {
    const LUCY_PolyHLReader_Get_Segment_t method = (LUCY_PolyHLReader_Get_Segment_t)cfish_obj_method(self, LUCY_PolyHLReader_Get_Segment_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyHLReader_Get_Seg_Tick_OFFSET;
static CFISH_INLINE int32_t
LUCY_PolyHLReader_Get_Seg_Tick(lucy_PolyHighlightReader* self) {
    const LUCY_PolyHLReader_Get_Seg_Tick_t method = (LUCY_PolyHLReader_Get_Seg_Tick_t)cfish_obj_method(self, LUCY_PolyHLReader_Get_Seg_Tick_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyHLReader_Close_OFFSET;
static CFISH_INLINE void
LUCY_PolyHLReader_Close(lucy_PolyHighlightReader* self) {
    const LUCY_PolyHLReader_Close_t method = (LUCY_PolyHLReader_Close_t)cfish_obj_method(self, LUCY_PolyHLReader_Close_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyHLReader_Fetch_Doc_Vec_OFFSET;
static CFISH_INLINE lucy_DocVector*
LUCY_PolyHLReader_Fetch_Doc_Vec(lucy_PolyHighlightReader* self, int32_t doc_id) {
    const LUCY_PolyHLReader_Fetch_Doc_Vec_t method = (LUCY_PolyHLReader_Fetch_Doc_Vec_t)cfish_obj_method(self, LUCY_PolyHLReader_Fetch_Doc_Vec_OFFSET);
    return method(self, doc_id);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define PolyHighlightReader lucy_PolyHighlightReader
  #define POLYHIGHLIGHTREADER LUCY_POLYHIGHLIGHTREADER
  #define PolyHLReader_new lucy_PolyHLReader_new
  #define PolyHLReader_init lucy_PolyHLReader_init
  #define PolyHLReader_get_class lucy_PolyHLReader_get_class
  #define PolyHLReader_get_class_name lucy_PolyHLReader_get_class_name
  #define PolyHLReader_is_a lucy_PolyHLReader_is_a
  #define PolyHLReader_Fetch_Doc_Vec_IMP LUCY_PolyHLReader_Fetch_Doc_Vec_IMP
  #define PolyHLReader_Close_IMP LUCY_PolyHLReader_Close_IMP
  #define PolyHLReader_Destroy_IMP LUCY_PolyHLReader_Destroy_IMP
  #define PolyHLReader_To_Host LUCY_PolyHLReader_To_Host
  #define PolyHLReader_To_Host_t LUCY_PolyHLReader_To_Host_t
  #define PolyHLReader_Clone LUCY_PolyHLReader_Clone
  #define PolyHLReader_Clone_t LUCY_PolyHLReader_Clone_t
  #define PolyHLReader_Equals LUCY_PolyHLReader_Equals
  #define PolyHLReader_Equals_t LUCY_PolyHLReader_Equals_t
  #define PolyHLReader_Compare_To LUCY_PolyHLReader_Compare_To
  #define PolyHLReader_Compare_To_t LUCY_PolyHLReader_Compare_To_t
  #define PolyHLReader_Destroy LUCY_PolyHLReader_Destroy
  #define PolyHLReader_Destroy_t LUCY_PolyHLReader_Destroy_t
  #define PolyHLReader_To_String LUCY_PolyHLReader_To_String
  #define PolyHLReader_To_String_t LUCY_PolyHLReader_To_String_t
  #define PolyHLReader_Aggregator LUCY_PolyHLReader_Aggregator
  #define PolyHLReader_Aggregator_t LUCY_PolyHLReader_Aggregator_t
  #define PolyHLReader_Get_Schema LUCY_PolyHLReader_Get_Schema
  #define PolyHLReader_Get_Schema_t LUCY_PolyHLReader_Get_Schema_t
  #define PolyHLReader_Get_Folder LUCY_PolyHLReader_Get_Folder
  #define PolyHLReader_Get_Folder_t LUCY_PolyHLReader_Get_Folder_t
  #define PolyHLReader_Get_Snapshot LUCY_PolyHLReader_Get_Snapshot
  #define PolyHLReader_Get_Snapshot_t LUCY_PolyHLReader_Get_Snapshot_t
  #define PolyHLReader_Get_Segments LUCY_PolyHLReader_Get_Segments
  #define PolyHLReader_Get_Segments_t LUCY_PolyHLReader_Get_Segments_t
  #define PolyHLReader_Get_Segment LUCY_PolyHLReader_Get_Segment
  #define PolyHLReader_Get_Segment_t LUCY_PolyHLReader_Get_Segment_t
  #define PolyHLReader_Get_Seg_Tick LUCY_PolyHLReader_Get_Seg_Tick
  #define PolyHLReader_Get_Seg_Tick_t LUCY_PolyHLReader_Get_Seg_Tick_t
  #define PolyHLReader_Close LUCY_PolyHLReader_Close
  #define PolyHLReader_Close_t LUCY_PolyHLReader_Close_t
  #define PolyHLReader_Fetch_Doc_Vec LUCY_PolyHLReader_Fetch_Doc_Vec
  #define PolyHLReader_Fetch_Doc_Vec_t LUCY_PolyHLReader_Fetch_Doc_Vec_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy\Index\HighlightReader.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_DEFAULTHIGHLIGHTREADER
extern uint32_t lucy_DefHLReader_IVARS_OFFSET;
typedef struct lucy_DefaultHighlightReaderIVARS lucy_DefaultHighlightReaderIVARS;
static CFISH_INLINE lucy_DefaultHighlightReaderIVARS*
lucy_DefHLReader_IVARS(lucy_DefaultHighlightReader *self) {
   char *ptr = (char*)self + lucy_DefHLReader_IVARS_OFFSET;
   return (lucy_DefaultHighlightReaderIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define DefaultHighlightReaderIVARS lucy_DefaultHighlightReaderIVARS
  #define DefHLReader_IVARS lucy_DefHLReader_IVARS
#endif

struct lucy_DefaultHighlightReaderIVARS {
    lucy_Schema* schema;
    lucy_Folder* folder;
    lucy_Snapshot* snapshot;
    cfish_Vector* segments;
    lucy_Segment* segment;
    int32_t seg_tick;
    lucy_InStream* ix_in;
    lucy_InStream* dat_in;
};

#endif /* C_LUCY_DEFAULTHIGHLIGHTREADER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_DefaultHighlightReader*
lucy_DefHLReader_new(lucy_Schema* schema, lucy_Folder* folder, lucy_Snapshot* snapshot, cfish_Vector* segments, int32_t seg_tick);

LUCY_VISIBLE lucy_DefaultHighlightReader*
lucy_DefHLReader_init(lucy_DefaultHighlightReader* self, lucy_Schema* schema, lucy_Folder* folder, lucy_Snapshot* snapshot, cfish_Vector* segments, int32_t seg_tick);

lucy_DocVector*
LUCY_DefHLReader_Fetch_Doc_Vec_IMP(lucy_DefaultHighlightReader* self, int32_t doc_id);

void
LUCY_DefHLReader_Read_Record_IMP(lucy_DefaultHighlightReader* self, int32_t doc_id, cfish_ByteBuf* buffer);

void
LUCY_DefHLReader_Close_IMP(lucy_DefaultHighlightReader* self);

void
LUCY_DefHLReader_Destroy_IMP(lucy_DefaultHighlightReader* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_DefHLReader_To_Host_t)(lucy_DefaultHighlightReader* self, void* vcache);

typedef cfish_Obj*
(*LUCY_DefHLReader_Clone_t)(lucy_DefaultHighlightReader* self);

typedef bool
(*LUCY_DefHLReader_Equals_t)(lucy_DefaultHighlightReader* self, cfish_Obj* other);

typedef int32_t
(*LUCY_DefHLReader_Compare_To_t)(lucy_DefaultHighlightReader* self, cfish_Obj* other);

typedef void
(*LUCY_DefHLReader_Destroy_t)(lucy_DefaultHighlightReader* self);

typedef cfish_String*
(*LUCY_DefHLReader_To_String_t)(lucy_DefaultHighlightReader* self);

typedef lucy_HighlightReader*
(*LUCY_DefHLReader_Aggregator_t)(lucy_DefaultHighlightReader* self, cfish_Vector* readers, lucy_I32Array* offsets);

typedef lucy_Schema*
(*LUCY_DefHLReader_Get_Schema_t)(lucy_DefaultHighlightReader* self);

typedef lucy_Folder*
(*LUCY_DefHLReader_Get_Folder_t)(lucy_DefaultHighlightReader* self);

typedef lucy_Snapshot*
(*LUCY_DefHLReader_Get_Snapshot_t)(lucy_DefaultHighlightReader* self);

typedef cfish_Vector*
(*LUCY_DefHLReader_Get_Segments_t)(lucy_DefaultHighlightReader* self);

typedef lucy_Segment*
(*LUCY_DefHLReader_Get_Segment_t)(lucy_DefaultHighlightReader* self);

typedef int32_t
(*LUCY_DefHLReader_Get_Seg_Tick_t)(lucy_DefaultHighlightReader* self);

typedef void
(*LUCY_DefHLReader_Close_t)(lucy_DefaultHighlightReader* self);

typedef lucy_DocVector*
(*LUCY_DefHLReader_Fetch_Doc_Vec_t)(lucy_DefaultHighlightReader* self, int32_t doc_id);

typedef void
(*LUCY_DefHLReader_Read_Record_t)(lucy_DefaultHighlightReader* self, int32_t doc_id, cfish_ByteBuf* buffer);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_DefHLReader_get_class(lucy_DefaultHighlightReader *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_DefHLReader_get_class_name(lucy_DefaultHighlightReader *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_DefHLReader_is_a(lucy_DefaultHighlightReader *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_DefHLReader_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_DefHLReader_To_Host(lucy_DefaultHighlightReader* self, void* vcache) {
    const LUCY_DefHLReader_To_Host_t method = (LUCY_DefHLReader_To_Host_t)cfish_obj_method(self, LUCY_DefHLReader_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_DefHLReader_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_DefHLReader_Clone(lucy_DefaultHighlightReader* self) {
    const LUCY_DefHLReader_Clone_t method = (LUCY_DefHLReader_Clone_t)cfish_obj_method(self, LUCY_DefHLReader_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefHLReader_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_DefHLReader_Equals(lucy_DefaultHighlightReader* self, cfish_Obj* other) {
    const LUCY_DefHLReader_Equals_t method = (LUCY_DefHLReader_Equals_t)cfish_obj_method(self, LUCY_DefHLReader_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_DefHLReader_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_DefHLReader_Compare_To(lucy_DefaultHighlightReader* self, cfish_Obj* other) {
    const LUCY_DefHLReader_Compare_To_t method = (LUCY_DefHLReader_Compare_To_t)cfish_obj_method(self, LUCY_DefHLReader_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_DefHLReader_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_DefHLReader_Destroy(lucy_DefaultHighlightReader* self) {
    const LUCY_DefHLReader_Destroy_t method = (LUCY_DefHLReader_Destroy_t)cfish_obj_method(self, LUCY_DefHLReader_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefHLReader_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_DefHLReader_To_String(lucy_DefaultHighlightReader* self) {
    const LUCY_DefHLReader_To_String_t method = (LUCY_DefHLReader_To_String_t)cfish_obj_method(self, LUCY_DefHLReader_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefHLReader_Aggregator_OFFSET;
static CFISH_INLINE lucy_HighlightReader*
LUCY_DefHLReader_Aggregator(lucy_DefaultHighlightReader* self, cfish_Vector* readers, lucy_I32Array* offsets) {
    const LUCY_DefHLReader_Aggregator_t method = (LUCY_DefHLReader_Aggregator_t)cfish_obj_method(self, LUCY_DefHLReader_Aggregator_OFFSET);
    return method(self, readers, offsets);
}

extern LUCY_VISIBLE uint32_t LUCY_DefHLReader_Get_Schema_OFFSET;
static CFISH_INLINE lucy_Schema*
LUCY_DefHLReader_Get_Schema(lucy_DefaultHighlightReader* self) {
    const LUCY_DefHLReader_Get_Schema_t method = (LUCY_DefHLReader_Get_Schema_t)cfish_obj_method(self, LUCY_DefHLReader_Get_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefHLReader_Get_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_DefHLReader_Get_Folder(lucy_DefaultHighlightReader* self) {
    const LUCY_DefHLReader_Get_Folder_t method = (LUCY_DefHLReader_Get_Folder_t)cfish_obj_method(self, LUCY_DefHLReader_Get_Folder_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefHLReader_Get_Snapshot_OFFSET;
static CFISH_INLINE lucy_Snapshot*
LUCY_DefHLReader_Get_Snapshot(lucy_DefaultHighlightReader* self) {
    const LUCY_DefHLReader_Get_Snapshot_t method = (LUCY_DefHLReader_Get_Snapshot_t)cfish_obj_method(self, LUCY_DefHLReader_Get_Snapshot_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefHLReader_Get_Segments_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_DefHLReader_Get_Segments(lucy_DefaultHighlightReader* self) {
    const LUCY_DefHLReader_Get_Segments_t method = (LUCY_DefHLReader_Get_Segments_t)cfish_obj_method(self, LUCY_DefHLReader_Get_Segments_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefHLReader_Get_Segment_OFFSET;
static CFISH_INLINE lucy_Segment*
LUCY_DefHLReader_Get_Segment(lucy_DefaultHighlightReader* self) {
    const LUCY_DefHLReader_Get_Segment_t method = (LUCY_DefHLReader_Get_Segment_t)cfish_obj_method(self, LUCY_DefHLReader_Get_Segment_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefHLReader_Get_Seg_Tick_OFFSET;
static CFISH_INLINE int32_t
LUCY_DefHLReader_Get_Seg_Tick(lucy_DefaultHighlightReader* self) {
    const LUCY_DefHLReader_Get_Seg_Tick_t method = (LUCY_DefHLReader_Get_Seg_Tick_t)cfish_obj_method(self, LUCY_DefHLReader_Get_Seg_Tick_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefHLReader_Close_OFFSET;
static CFISH_INLINE void
LUCY_DefHLReader_Close(lucy_DefaultHighlightReader* self) {
    const LUCY_DefHLReader_Close_t method = (LUCY_DefHLReader_Close_t)cfish_obj_method(self, LUCY_DefHLReader_Close_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefHLReader_Fetch_Doc_Vec_OFFSET;
static CFISH_INLINE lucy_DocVector*
LUCY_DefHLReader_Fetch_Doc_Vec(lucy_DefaultHighlightReader* self, int32_t doc_id) {
    const LUCY_DefHLReader_Fetch_Doc_Vec_t method = (LUCY_DefHLReader_Fetch_Doc_Vec_t)cfish_obj_method(self, LUCY_DefHLReader_Fetch_Doc_Vec_OFFSET);
    return method(self, doc_id);
}

extern LUCY_VISIBLE uint32_t LUCY_DefHLReader_Read_Record_OFFSET;
static CFISH_INLINE void
LUCY_DefHLReader_Read_Record(lucy_DefaultHighlightReader* self, int32_t doc_id, cfish_ByteBuf* buffer) {
    const LUCY_DefHLReader_Read_Record_t method = (LUCY_DefHLReader_Read_Record_t)cfish_obj_method(self, LUCY_DefHLReader_Read_Record_OFFSET);
    method(self, doc_id, buffer);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_DefHLReader_Read_Record_OVERRIDE NULL
#else
void
Lucy_DefHLReader_Read_Record_OVERRIDE(lucy_DefaultHighlightReader* self, int32_t doc_id, cfish_ByteBuf* buffer);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define DefaultHighlightReader lucy_DefaultHighlightReader
  #define DEFAULTHIGHLIGHTREADER LUCY_DEFAULTHIGHLIGHTREADER
  #define DefHLReader_new lucy_DefHLReader_new
  #define DefHLReader_init lucy_DefHLReader_init
  #define DefHLReader_get_class lucy_DefHLReader_get_class
  #define DefHLReader_get_class_name lucy_DefHLReader_get_class_name
  #define DefHLReader_is_a lucy_DefHLReader_is_a
  #define DefHLReader_Fetch_Doc_Vec_IMP LUCY_DefHLReader_Fetch_Doc_Vec_IMP
  #define DefHLReader_Read_Record_IMP LUCY_DefHLReader_Read_Record_IMP
  #define DefHLReader_Close_IMP LUCY_DefHLReader_Close_IMP
  #define DefHLReader_Destroy_IMP LUCY_DefHLReader_Destroy_IMP
  #define DefHLReader_To_Host LUCY_DefHLReader_To_Host
  #define DefHLReader_To_Host_t LUCY_DefHLReader_To_Host_t
  #define DefHLReader_Clone LUCY_DefHLReader_Clone
  #define DefHLReader_Clone_t LUCY_DefHLReader_Clone_t
  #define DefHLReader_Equals LUCY_DefHLReader_Equals
  #define DefHLReader_Equals_t LUCY_DefHLReader_Equals_t
  #define DefHLReader_Compare_To LUCY_DefHLReader_Compare_To
  #define DefHLReader_Compare_To_t LUCY_DefHLReader_Compare_To_t
  #define DefHLReader_Destroy LUCY_DefHLReader_Destroy
  #define DefHLReader_Destroy_t LUCY_DefHLReader_Destroy_t
  #define DefHLReader_To_String LUCY_DefHLReader_To_String
  #define DefHLReader_To_String_t LUCY_DefHLReader_To_String_t
  #define DefHLReader_Aggregator LUCY_DefHLReader_Aggregator
  #define DefHLReader_Aggregator_t LUCY_DefHLReader_Aggregator_t
  #define DefHLReader_Get_Schema LUCY_DefHLReader_Get_Schema
  #define DefHLReader_Get_Schema_t LUCY_DefHLReader_Get_Schema_t
  #define DefHLReader_Get_Folder LUCY_DefHLReader_Get_Folder
  #define DefHLReader_Get_Folder_t LUCY_DefHLReader_Get_Folder_t
  #define DefHLReader_Get_Snapshot LUCY_DefHLReader_Get_Snapshot
  #define DefHLReader_Get_Snapshot_t LUCY_DefHLReader_Get_Snapshot_t
  #define DefHLReader_Get_Segments LUCY_DefHLReader_Get_Segments
  #define DefHLReader_Get_Segments_t LUCY_DefHLReader_Get_Segments_t
  #define DefHLReader_Get_Segment LUCY_DefHLReader_Get_Segment
  #define DefHLReader_Get_Segment_t LUCY_DefHLReader_Get_Segment_t
  #define DefHLReader_Get_Seg_Tick LUCY_DefHLReader_Get_Seg_Tick
  #define DefHLReader_Get_Seg_Tick_t LUCY_DefHLReader_Get_Seg_Tick_t
  #define DefHLReader_Close LUCY_DefHLReader_Close
  #define DefHLReader_Close_t LUCY_DefHLReader_Close_t
  #define DefHLReader_Fetch_Doc_Vec LUCY_DefHLReader_Fetch_Doc_Vec
  #define DefHLReader_Fetch_Doc_Vec_t LUCY_DefHLReader_Fetch_Doc_Vec_t
  #define DefHLReader_Read_Record LUCY_DefHLReader_Read_Record
  #define DefHLReader_Read_Record_t LUCY_DefHLReader_Read_Record_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_HIGHLIGHTREADER */




