/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_LEXICONREADER
#define H_LUCY_INDEX_LEXICONREADER 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy\Index\DataReader.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_LEXICONREADER
extern uint32_t lucy_LexReader_IVARS_OFFSET;
typedef struct lucy_LexiconReaderIVARS lucy_LexiconReaderIVARS;
static CFISH_INLINE lucy_LexiconReaderIVARS*
lucy_LexReader_IVARS(lucy_LexiconReader *self) {
   char *ptr = (char*)self + lucy_LexReader_IVARS_OFFSET;
   return (lucy_LexiconReaderIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define LexiconReaderIVARS lucy_LexiconReaderIVARS
  #define LexReader_IVARS lucy_LexReader_IVARS
#endif

struct lucy_LexiconReaderIVARS {
    lucy_Schema* schema;
    lucy_Folder* folder;
    lucy_Snapshot* snapshot;
    cfish_Vector* segments;
    lucy_Segment* segment;
    int32_t seg_tick;
};

#endif /* C_LUCY_LEXICONREADER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_LexiconReader*
lucy_LexReader_init(lucy_LexiconReader* self, lucy_Schema* schema, lucy_Folder* folder, lucy_Snapshot* snapshot, cfish_Vector* segments, int32_t seg_tick);

lucy_Lexicon*
LUCY_LexReader_Lexicon_IMP(lucy_LexiconReader* self, cfish_String* field, cfish_Obj* term);

uint32_t
LUCY_LexReader_Doc_Freq_IMP(lucy_LexiconReader* self, cfish_String* field, cfish_Obj* term);

lucy_TermInfo*
LUCY_LexReader_Fetch_Term_Info_IMP(lucy_LexiconReader* self, cfish_String* field, cfish_Obj* term);

lucy_LexiconReader*
LUCY_LexReader_Aggregator_IMP(lucy_LexiconReader* self, cfish_Vector* readers, lucy_I32Array* offsets);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_LexReader_To_Host_t)(lucy_LexiconReader* self, void* vcache);

typedef cfish_Obj*
(*LUCY_LexReader_Clone_t)(lucy_LexiconReader* self);

typedef bool
(*LUCY_LexReader_Equals_t)(lucy_LexiconReader* self, cfish_Obj* other);

typedef int32_t
(*LUCY_LexReader_Compare_To_t)(lucy_LexiconReader* self, cfish_Obj* other);

typedef void
(*LUCY_LexReader_Destroy_t)(lucy_LexiconReader* self);

typedef cfish_String*
(*LUCY_LexReader_To_String_t)(lucy_LexiconReader* self);

typedef lucy_LexiconReader*
(*LUCY_LexReader_Aggregator_t)(lucy_LexiconReader* self, cfish_Vector* readers, lucy_I32Array* offsets);

typedef lucy_Schema*
(*LUCY_LexReader_Get_Schema_t)(lucy_LexiconReader* self);

typedef lucy_Folder*
(*LUCY_LexReader_Get_Folder_t)(lucy_LexiconReader* self);

typedef lucy_Snapshot*
(*LUCY_LexReader_Get_Snapshot_t)(lucy_LexiconReader* self);

typedef cfish_Vector*
(*LUCY_LexReader_Get_Segments_t)(lucy_LexiconReader* self);

typedef lucy_Segment*
(*LUCY_LexReader_Get_Segment_t)(lucy_LexiconReader* self);

typedef int32_t
(*LUCY_LexReader_Get_Seg_Tick_t)(lucy_LexiconReader* self);

typedef void
(*LUCY_LexReader_Close_t)(lucy_LexiconReader* self);

typedef lucy_Lexicon*
(*LUCY_LexReader_Lexicon_t)(lucy_LexiconReader* self, cfish_String* field, cfish_Obj* term);

typedef uint32_t
(*LUCY_LexReader_Doc_Freq_t)(lucy_LexiconReader* self, cfish_String* field, cfish_Obj* term);

typedef lucy_TermInfo*
(*LUCY_LexReader_Fetch_Term_Info_t)(lucy_LexiconReader* self, cfish_String* field, cfish_Obj* term);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_LexReader_get_class(lucy_LexiconReader *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_LexReader_get_class_name(lucy_LexiconReader *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_LexReader_is_a(lucy_LexiconReader *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_LexReader_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_LexReader_To_Host(lucy_LexiconReader* self, void* vcache) {
    const LUCY_LexReader_To_Host_t method = (LUCY_LexReader_To_Host_t)cfish_obj_method(self, LUCY_LexReader_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_LexReader_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_LexReader_Clone(lucy_LexiconReader* self) {
    const LUCY_LexReader_Clone_t method = (LUCY_LexReader_Clone_t)cfish_obj_method(self, LUCY_LexReader_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexReader_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_LexReader_Equals(lucy_LexiconReader* self, cfish_Obj* other) {
    const LUCY_LexReader_Equals_t method = (LUCY_LexReader_Equals_t)cfish_obj_method(self, LUCY_LexReader_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_LexReader_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_LexReader_Compare_To(lucy_LexiconReader* self, cfish_Obj* other) {
    const LUCY_LexReader_Compare_To_t method = (LUCY_LexReader_Compare_To_t)cfish_obj_method(self, LUCY_LexReader_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_LexReader_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_LexReader_Destroy(lucy_LexiconReader* self) {
    const LUCY_LexReader_Destroy_t method = (LUCY_LexReader_Destroy_t)cfish_obj_method(self, LUCY_LexReader_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexReader_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_LexReader_To_String(lucy_LexiconReader* self) {
    const LUCY_LexReader_To_String_t method = (LUCY_LexReader_To_String_t)cfish_obj_method(self, LUCY_LexReader_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexReader_Aggregator_OFFSET;
static CFISH_INLINE lucy_LexiconReader*
LUCY_LexReader_Aggregator(lucy_LexiconReader* self, cfish_Vector* readers, lucy_I32Array* offsets) {
    const LUCY_LexReader_Aggregator_t method = (LUCY_LexReader_Aggregator_t)cfish_obj_method(self, LUCY_LexReader_Aggregator_OFFSET);
    return method(self, readers, offsets);
}

extern LUCY_VISIBLE uint32_t LUCY_LexReader_Get_Schema_OFFSET;
static CFISH_INLINE lucy_Schema*
LUCY_LexReader_Get_Schema(lucy_LexiconReader* self) {
    const LUCY_LexReader_Get_Schema_t method = (LUCY_LexReader_Get_Schema_t)cfish_obj_method(self, LUCY_LexReader_Get_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexReader_Get_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_LexReader_Get_Folder(lucy_LexiconReader* self) {
    const LUCY_LexReader_Get_Folder_t method = (LUCY_LexReader_Get_Folder_t)cfish_obj_method(self, LUCY_LexReader_Get_Folder_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexReader_Get_Snapshot_OFFSET;
static CFISH_INLINE lucy_Snapshot*
LUCY_LexReader_Get_Snapshot(lucy_LexiconReader* self) {
    const LUCY_LexReader_Get_Snapshot_t method = (LUCY_LexReader_Get_Snapshot_t)cfish_obj_method(self, LUCY_LexReader_Get_Snapshot_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexReader_Get_Segments_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_LexReader_Get_Segments(lucy_LexiconReader* self) {
    const LUCY_LexReader_Get_Segments_t method = (LUCY_LexReader_Get_Segments_t)cfish_obj_method(self, LUCY_LexReader_Get_Segments_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexReader_Get_Segment_OFFSET;
static CFISH_INLINE lucy_Segment*
LUCY_LexReader_Get_Segment(lucy_LexiconReader* self) {
    const LUCY_LexReader_Get_Segment_t method = (LUCY_LexReader_Get_Segment_t)cfish_obj_method(self, LUCY_LexReader_Get_Segment_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexReader_Get_Seg_Tick_OFFSET;
static CFISH_INLINE int32_t
LUCY_LexReader_Get_Seg_Tick(lucy_LexiconReader* self) {
    const LUCY_LexReader_Get_Seg_Tick_t method = (LUCY_LexReader_Get_Seg_Tick_t)cfish_obj_method(self, LUCY_LexReader_Get_Seg_Tick_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexReader_Close_OFFSET;
static CFISH_INLINE void
LUCY_LexReader_Close(lucy_LexiconReader* self) {
    const LUCY_LexReader_Close_t method = (LUCY_LexReader_Close_t)cfish_obj_method(self, LUCY_LexReader_Close_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_LexReader_Lexicon_OFFSET;
static CFISH_INLINE lucy_Lexicon*
LUCY_LexReader_Lexicon(lucy_LexiconReader* self, cfish_String* field, cfish_Obj* term) {
    const LUCY_LexReader_Lexicon_t method = (LUCY_LexReader_Lexicon_t)cfish_obj_method(self, LUCY_LexReader_Lexicon_OFFSET);
    return method(self, field, term);
}

extern LUCY_VISIBLE uint32_t LUCY_LexReader_Doc_Freq_OFFSET;
static CFISH_INLINE uint32_t
LUCY_LexReader_Doc_Freq(lucy_LexiconReader* self, cfish_String* field, cfish_Obj* term) {
    const LUCY_LexReader_Doc_Freq_t method = (LUCY_LexReader_Doc_Freq_t)cfish_obj_method(self, LUCY_LexReader_Doc_Freq_OFFSET);
    return method(self, field, term);
}

extern LUCY_VISIBLE uint32_t LUCY_LexReader_Fetch_Term_Info_OFFSET;
static CFISH_INLINE lucy_TermInfo*
LUCY_LexReader_Fetch_Term_Info(lucy_LexiconReader* self, cfish_String* field, cfish_Obj* term) {
    const LUCY_LexReader_Fetch_Term_Info_t method = (LUCY_LexReader_Fetch_Term_Info_t)cfish_obj_method(self, LUCY_LexReader_Fetch_Term_Info_OFFSET);
    return method(self, field, term);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_LexReader_Lexicon_OVERRIDE NULL
#define Lucy_LexReader_Doc_Freq_OVERRIDE NULL
#define Lucy_LexReader_Fetch_Term_Info_OVERRIDE NULL
#else
lucy_Lexicon*
Lucy_LexReader_Lexicon_OVERRIDE(lucy_LexiconReader* self, cfish_String* field, cfish_Obj* term);
uint32_t
Lucy_LexReader_Doc_Freq_OVERRIDE(lucy_LexiconReader* self, cfish_String* field, cfish_Obj* term);
lucy_TermInfo*
Lucy_LexReader_Fetch_Term_Info_OVERRIDE(lucy_LexiconReader* self, cfish_String* field, cfish_Obj* term);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define LexiconReader lucy_LexiconReader
  #define LEXICONREADER LUCY_LEXICONREADER
  #define LexReader_init lucy_LexReader_init
  #define LexReader_get_class lucy_LexReader_get_class
  #define LexReader_get_class_name lucy_LexReader_get_class_name
  #define LexReader_is_a lucy_LexReader_is_a
  #define LexReader_Lexicon_IMP LUCY_LexReader_Lexicon_IMP
  #define LexReader_Doc_Freq_IMP LUCY_LexReader_Doc_Freq_IMP
  #define LexReader_Fetch_Term_Info_IMP LUCY_LexReader_Fetch_Term_Info_IMP
  #define LexReader_Aggregator_IMP LUCY_LexReader_Aggregator_IMP
  #define LexReader_To_Host LUCY_LexReader_To_Host
  #define LexReader_To_Host_t LUCY_LexReader_To_Host_t
  #define LexReader_Clone LUCY_LexReader_Clone
  #define LexReader_Clone_t LUCY_LexReader_Clone_t
  #define LexReader_Equals LUCY_LexReader_Equals
  #define LexReader_Equals_t LUCY_LexReader_Equals_t
  #define LexReader_Compare_To LUCY_LexReader_Compare_To
  #define LexReader_Compare_To_t LUCY_LexReader_Compare_To_t
  #define LexReader_Destroy LUCY_LexReader_Destroy
  #define LexReader_Destroy_t LUCY_LexReader_Destroy_t
  #define LexReader_To_String LUCY_LexReader_To_String
  #define LexReader_To_String_t LUCY_LexReader_To_String_t
  #define LexReader_Aggregator LUCY_LexReader_Aggregator
  #define LexReader_Aggregator_t LUCY_LexReader_Aggregator_t
  #define LexReader_Get_Schema LUCY_LexReader_Get_Schema
  #define LexReader_Get_Schema_t LUCY_LexReader_Get_Schema_t
  #define LexReader_Get_Folder LUCY_LexReader_Get_Folder
  #define LexReader_Get_Folder_t LUCY_LexReader_Get_Folder_t
  #define LexReader_Get_Snapshot LUCY_LexReader_Get_Snapshot
  #define LexReader_Get_Snapshot_t LUCY_LexReader_Get_Snapshot_t
  #define LexReader_Get_Segments LUCY_LexReader_Get_Segments
  #define LexReader_Get_Segments_t LUCY_LexReader_Get_Segments_t
  #define LexReader_Get_Segment LUCY_LexReader_Get_Segment
  #define LexReader_Get_Segment_t LUCY_LexReader_Get_Segment_t
  #define LexReader_Get_Seg_Tick LUCY_LexReader_Get_Seg_Tick
  #define LexReader_Get_Seg_Tick_t LUCY_LexReader_Get_Seg_Tick_t
  #define LexReader_Close LUCY_LexReader_Close
  #define LexReader_Close_t LUCY_LexReader_Close_t
  #define LexReader_Lexicon LUCY_LexReader_Lexicon
  #define LexReader_Lexicon_t LUCY_LexReader_Lexicon_t
  #define LexReader_Doc_Freq LUCY_LexReader_Doc_Freq
  #define LexReader_Doc_Freq_t LUCY_LexReader_Doc_Freq_t
  #define LexReader_Fetch_Term_Info LUCY_LexReader_Fetch_Term_Info
  #define LexReader_Fetch_Term_Info_t LUCY_LexReader_Fetch_Term_Info_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy\Index\LexiconReader.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_POLYLEXICONREADER
extern uint32_t lucy_PolyLexReader_IVARS_OFFSET;
typedef struct lucy_PolyLexiconReaderIVARS lucy_PolyLexiconReaderIVARS;
static CFISH_INLINE lucy_PolyLexiconReaderIVARS*
lucy_PolyLexReader_IVARS(lucy_PolyLexiconReader *self) {
   char *ptr = (char*)self + lucy_PolyLexReader_IVARS_OFFSET;
   return (lucy_PolyLexiconReaderIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define PolyLexiconReaderIVARS lucy_PolyLexiconReaderIVARS
  #define PolyLexReader_IVARS lucy_PolyLexReader_IVARS
#endif

struct lucy_PolyLexiconReaderIVARS {
    lucy_Schema* schema;
    lucy_Folder* folder;
    lucy_Snapshot* snapshot;
    cfish_Vector* segments;
    lucy_Segment* segment;
    int32_t seg_tick;
    cfish_Vector* readers;
    lucy_I32Array* offsets;
};

#endif /* C_LUCY_POLYLEXICONREADER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_PolyLexiconReader*
lucy_PolyLexReader_new(cfish_Vector* readers, lucy_I32Array* offsets);

LUCY_VISIBLE lucy_PolyLexiconReader*
lucy_PolyLexReader_init(lucy_PolyLexiconReader* self, cfish_Vector* readers, lucy_I32Array* offsets);

lucy_Lexicon*
LUCY_PolyLexReader_Lexicon_IMP(lucy_PolyLexiconReader* self, cfish_String* field, cfish_Obj* term);

uint32_t
LUCY_PolyLexReader_Doc_Freq_IMP(lucy_PolyLexiconReader* self, cfish_String* field, cfish_Obj* term);

void
LUCY_PolyLexReader_Close_IMP(lucy_PolyLexiconReader* self);

void
LUCY_PolyLexReader_Destroy_IMP(lucy_PolyLexiconReader* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_PolyLexReader_To_Host_t)(lucy_PolyLexiconReader* self, void* vcache);

typedef cfish_Obj*
(*LUCY_PolyLexReader_Clone_t)(lucy_PolyLexiconReader* self);

typedef bool
(*LUCY_PolyLexReader_Equals_t)(lucy_PolyLexiconReader* self, cfish_Obj* other);

typedef int32_t
(*LUCY_PolyLexReader_Compare_To_t)(lucy_PolyLexiconReader* self, cfish_Obj* other);

typedef void
(*LUCY_PolyLexReader_Destroy_t)(lucy_PolyLexiconReader* self);

typedef cfish_String*
(*LUCY_PolyLexReader_To_String_t)(lucy_PolyLexiconReader* self);

typedef lucy_LexiconReader*
(*LUCY_PolyLexReader_Aggregator_t)(lucy_PolyLexiconReader* self, cfish_Vector* readers, lucy_I32Array* offsets);

typedef lucy_Schema*
(*LUCY_PolyLexReader_Get_Schema_t)(lucy_PolyLexiconReader* self);

typedef lucy_Folder*
(*LUCY_PolyLexReader_Get_Folder_t)(lucy_PolyLexiconReader* self);

typedef lucy_Snapshot*
(*LUCY_PolyLexReader_Get_Snapshot_t)(lucy_PolyLexiconReader* self);

typedef cfish_Vector*
(*LUCY_PolyLexReader_Get_Segments_t)(lucy_PolyLexiconReader* self);

typedef lucy_Segment*
(*LUCY_PolyLexReader_Get_Segment_t)(lucy_PolyLexiconReader* self);

typedef int32_t
(*LUCY_PolyLexReader_Get_Seg_Tick_t)(lucy_PolyLexiconReader* self);

typedef void
(*LUCY_PolyLexReader_Close_t)(lucy_PolyLexiconReader* self);

typedef lucy_Lexicon*
(*LUCY_PolyLexReader_Lexicon_t)(lucy_PolyLexiconReader* self, cfish_String* field, cfish_Obj* term);

typedef uint32_t
(*LUCY_PolyLexReader_Doc_Freq_t)(lucy_PolyLexiconReader* self, cfish_String* field, cfish_Obj* term);

typedef lucy_TermInfo*
(*LUCY_PolyLexReader_Fetch_Term_Info_t)(lucy_PolyLexiconReader* self, cfish_String* field, cfish_Obj* term);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_PolyLexReader_get_class(lucy_PolyLexiconReader *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_PolyLexReader_get_class_name(lucy_PolyLexiconReader *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_PolyLexReader_is_a(lucy_PolyLexiconReader *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_PolyLexReader_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_PolyLexReader_To_Host(lucy_PolyLexiconReader* self, void* vcache) {
    const LUCY_PolyLexReader_To_Host_t method = (LUCY_PolyLexReader_To_Host_t)cfish_obj_method(self, LUCY_PolyLexReader_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLexReader_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PolyLexReader_Clone(lucy_PolyLexiconReader* self) {
    const LUCY_PolyLexReader_Clone_t method = (LUCY_PolyLexReader_Clone_t)cfish_obj_method(self, LUCY_PolyLexReader_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLexReader_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_PolyLexReader_Equals(lucy_PolyLexiconReader* self, cfish_Obj* other) {
    const LUCY_PolyLexReader_Equals_t method = (LUCY_PolyLexReader_Equals_t)cfish_obj_method(self, LUCY_PolyLexReader_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLexReader_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_PolyLexReader_Compare_To(lucy_PolyLexiconReader* self, cfish_Obj* other) {
    const LUCY_PolyLexReader_Compare_To_t method = (LUCY_PolyLexReader_Compare_To_t)cfish_obj_method(self, LUCY_PolyLexReader_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLexReader_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_PolyLexReader_Destroy(lucy_PolyLexiconReader* self) {
    const LUCY_PolyLexReader_Destroy_t method = (LUCY_PolyLexReader_Destroy_t)cfish_obj_method(self, LUCY_PolyLexReader_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLexReader_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_PolyLexReader_To_String(lucy_PolyLexiconReader* self) {
    const LUCY_PolyLexReader_To_String_t method = (LUCY_PolyLexReader_To_String_t)cfish_obj_method(self, LUCY_PolyLexReader_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLexReader_Aggregator_OFFSET;
static CFISH_INLINE lucy_LexiconReader*
LUCY_PolyLexReader_Aggregator(lucy_PolyLexiconReader* self, cfish_Vector* readers, lucy_I32Array* offsets) {
    const LUCY_PolyLexReader_Aggregator_t method = (LUCY_PolyLexReader_Aggregator_t)cfish_obj_method(self, LUCY_PolyLexReader_Aggregator_OFFSET);
    return method(self, readers, offsets);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLexReader_Get_Schema_OFFSET;
static CFISH_INLINE lucy_Schema*
LUCY_PolyLexReader_Get_Schema(lucy_PolyLexiconReader* self) {
    const LUCY_PolyLexReader_Get_Schema_t method = (LUCY_PolyLexReader_Get_Schema_t)cfish_obj_method(self, LUCY_PolyLexReader_Get_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLexReader_Get_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_PolyLexReader_Get_Folder(lucy_PolyLexiconReader* self) {
    const LUCY_PolyLexReader_Get_Folder_t method = (LUCY_PolyLexReader_Get_Folder_t)cfish_obj_method(self, LUCY_PolyLexReader_Get_Folder_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLexReader_Get_Snapshot_OFFSET;
static CFISH_INLINE lucy_Snapshot*
LUCY_PolyLexReader_Get_Snapshot(lucy_PolyLexiconReader* self) {
    const LUCY_PolyLexReader_Get_Snapshot_t method = (LUCY_PolyLexReader_Get_Snapshot_t)cfish_obj_method(self, LUCY_PolyLexReader_Get_Snapshot_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLexReader_Get_Segments_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_PolyLexReader_Get_Segments(lucy_PolyLexiconReader* self) {
    const LUCY_PolyLexReader_Get_Segments_t method = (LUCY_PolyLexReader_Get_Segments_t)cfish_obj_method(self, LUCY_PolyLexReader_Get_Segments_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLexReader_Get_Segment_OFFSET;
static CFISH_INLINE lucy_Segment*
LUCY_PolyLexReader_Get_Segment(lucy_PolyLexiconReader* self) {
    const LUCY_PolyLexReader_Get_Segment_t method = (LUCY_PolyLexReader_Get_Segment_t)cfish_obj_method(self, LUCY_PolyLexReader_Get_Segment_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLexReader_Get_Seg_Tick_OFFSET;
static CFISH_INLINE int32_t
LUCY_PolyLexReader_Get_Seg_Tick(lucy_PolyLexiconReader* self) {
    const LUCY_PolyLexReader_Get_Seg_Tick_t method = (LUCY_PolyLexReader_Get_Seg_Tick_t)cfish_obj_method(self, LUCY_PolyLexReader_Get_Seg_Tick_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLexReader_Close_OFFSET;
static CFISH_INLINE void
LUCY_PolyLexReader_Close(lucy_PolyLexiconReader* self) {
    const LUCY_PolyLexReader_Close_t method = (LUCY_PolyLexReader_Close_t)cfish_obj_method(self, LUCY_PolyLexReader_Close_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLexReader_Lexicon_OFFSET;
static CFISH_INLINE lucy_Lexicon*
LUCY_PolyLexReader_Lexicon(lucy_PolyLexiconReader* self, cfish_String* field, cfish_Obj* term) {
    const LUCY_PolyLexReader_Lexicon_t method = (LUCY_PolyLexReader_Lexicon_t)cfish_obj_method(self, LUCY_PolyLexReader_Lexicon_OFFSET);
    return method(self, field, term);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLexReader_Doc_Freq_OFFSET;
static CFISH_INLINE uint32_t
LUCY_PolyLexReader_Doc_Freq(lucy_PolyLexiconReader* self, cfish_String* field, cfish_Obj* term) {
    const LUCY_PolyLexReader_Doc_Freq_t method = (LUCY_PolyLexReader_Doc_Freq_t)cfish_obj_method(self, LUCY_PolyLexReader_Doc_Freq_OFFSET);
    return method(self, field, term);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLexReader_Fetch_Term_Info_OFFSET;
static CFISH_INLINE lucy_TermInfo*
LUCY_PolyLexReader_Fetch_Term_Info(lucy_PolyLexiconReader* self, cfish_String* field, cfish_Obj* term) {
    const LUCY_PolyLexReader_Fetch_Term_Info_t method = (LUCY_PolyLexReader_Fetch_Term_Info_t)cfish_obj_method(self, LUCY_PolyLexReader_Fetch_Term_Info_OFFSET);
    return method(self, field, term);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define PolyLexiconReader lucy_PolyLexiconReader
  #define POLYLEXICONREADER LUCY_POLYLEXICONREADER
  #define PolyLexReader_new lucy_PolyLexReader_new
  #define PolyLexReader_init lucy_PolyLexReader_init
  #define PolyLexReader_get_class lucy_PolyLexReader_get_class
  #define PolyLexReader_get_class_name lucy_PolyLexReader_get_class_name
  #define PolyLexReader_is_a lucy_PolyLexReader_is_a
  #define PolyLexReader_Lexicon_IMP LUCY_PolyLexReader_Lexicon_IMP
  #define PolyLexReader_Doc_Freq_IMP LUCY_PolyLexReader_Doc_Freq_IMP
  #define PolyLexReader_Close_IMP LUCY_PolyLexReader_Close_IMP
  #define PolyLexReader_Destroy_IMP LUCY_PolyLexReader_Destroy_IMP
  #define PolyLexReader_To_Host LUCY_PolyLexReader_To_Host
  #define PolyLexReader_To_Host_t LUCY_PolyLexReader_To_Host_t
  #define PolyLexReader_Clone LUCY_PolyLexReader_Clone
  #define PolyLexReader_Clone_t LUCY_PolyLexReader_Clone_t
  #define PolyLexReader_Equals LUCY_PolyLexReader_Equals
  #define PolyLexReader_Equals_t LUCY_PolyLexReader_Equals_t
  #define PolyLexReader_Compare_To LUCY_PolyLexReader_Compare_To
  #define PolyLexReader_Compare_To_t LUCY_PolyLexReader_Compare_To_t
  #define PolyLexReader_Destroy LUCY_PolyLexReader_Destroy
  #define PolyLexReader_Destroy_t LUCY_PolyLexReader_Destroy_t
  #define PolyLexReader_To_String LUCY_PolyLexReader_To_String
  #define PolyLexReader_To_String_t LUCY_PolyLexReader_To_String_t
  #define PolyLexReader_Aggregator LUCY_PolyLexReader_Aggregator
  #define PolyLexReader_Aggregator_t LUCY_PolyLexReader_Aggregator_t
  #define PolyLexReader_Get_Schema LUCY_PolyLexReader_Get_Schema
  #define PolyLexReader_Get_Schema_t LUCY_PolyLexReader_Get_Schema_t
  #define PolyLexReader_Get_Folder LUCY_PolyLexReader_Get_Folder
  #define PolyLexReader_Get_Folder_t LUCY_PolyLexReader_Get_Folder_t
  #define PolyLexReader_Get_Snapshot LUCY_PolyLexReader_Get_Snapshot
  #define PolyLexReader_Get_Snapshot_t LUCY_PolyLexReader_Get_Snapshot_t
  #define PolyLexReader_Get_Segments LUCY_PolyLexReader_Get_Segments
  #define PolyLexReader_Get_Segments_t LUCY_PolyLexReader_Get_Segments_t
  #define PolyLexReader_Get_Segment LUCY_PolyLexReader_Get_Segment
  #define PolyLexReader_Get_Segment_t LUCY_PolyLexReader_Get_Segment_t
  #define PolyLexReader_Get_Seg_Tick LUCY_PolyLexReader_Get_Seg_Tick
  #define PolyLexReader_Get_Seg_Tick_t LUCY_PolyLexReader_Get_Seg_Tick_t
  #define PolyLexReader_Close LUCY_PolyLexReader_Close
  #define PolyLexReader_Close_t LUCY_PolyLexReader_Close_t
  #define PolyLexReader_Lexicon LUCY_PolyLexReader_Lexicon
  #define PolyLexReader_Lexicon_t LUCY_PolyLexReader_Lexicon_t
  #define PolyLexReader_Doc_Freq LUCY_PolyLexReader_Doc_Freq
  #define PolyLexReader_Doc_Freq_t LUCY_PolyLexReader_Doc_Freq_t
  #define PolyLexReader_Fetch_Term_Info LUCY_PolyLexReader_Fetch_Term_Info
  #define PolyLexReader_Fetch_Term_Info_t LUCY_PolyLexReader_Fetch_Term_Info_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy\Index\LexiconReader.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_DEFAULTLEXICONREADER
extern uint32_t lucy_DefLexReader_IVARS_OFFSET;
typedef struct lucy_DefaultLexiconReaderIVARS lucy_DefaultLexiconReaderIVARS;
static CFISH_INLINE lucy_DefaultLexiconReaderIVARS*
lucy_DefLexReader_IVARS(lucy_DefaultLexiconReader *self) {
   char *ptr = (char*)self + lucy_DefLexReader_IVARS_OFFSET;
   return (lucy_DefaultLexiconReaderIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define DefaultLexiconReaderIVARS lucy_DefaultLexiconReaderIVARS
  #define DefLexReader_IVARS lucy_DefLexReader_IVARS
#endif

struct lucy_DefaultLexiconReaderIVARS {
    lucy_Schema* schema;
    lucy_Folder* folder;
    lucy_Snapshot* snapshot;
    cfish_Vector* segments;
    lucy_Segment* segment;
    int32_t seg_tick;
    cfish_Vector* lexicons;
};

#endif /* C_LUCY_DEFAULTLEXICONREADER */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_DefaultLexiconReader*
lucy_DefLexReader_new(lucy_Schema* schema, lucy_Folder* folder, lucy_Snapshot* snapshot, cfish_Vector* segments, int32_t seg_tick);

LUCY_VISIBLE lucy_DefaultLexiconReader*
lucy_DefLexReader_init(lucy_DefaultLexiconReader* self, lucy_Schema* schema, lucy_Folder* folder, lucy_Snapshot* snapshot, cfish_Vector* segments, int32_t seg_tick);

lucy_Lexicon*
LUCY_DefLexReader_Lexicon_IMP(lucy_DefaultLexiconReader* self, cfish_String* field, cfish_Obj* term);

uint32_t
LUCY_DefLexReader_Doc_Freq_IMP(lucy_DefaultLexiconReader* self, cfish_String* field, cfish_Obj* term);

lucy_TermInfo*
LUCY_DefLexReader_Fetch_Term_Info_IMP(lucy_DefaultLexiconReader* self, cfish_String* field, cfish_Obj* term);

void
LUCY_DefLexReader_Close_IMP(lucy_DefaultLexiconReader* self);

void
LUCY_DefLexReader_Destroy_IMP(lucy_DefaultLexiconReader* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_DefLexReader_To_Host_t)(lucy_DefaultLexiconReader* self, void* vcache);

typedef cfish_Obj*
(*LUCY_DefLexReader_Clone_t)(lucy_DefaultLexiconReader* self);

typedef bool
(*LUCY_DefLexReader_Equals_t)(lucy_DefaultLexiconReader* self, cfish_Obj* other);

typedef int32_t
(*LUCY_DefLexReader_Compare_To_t)(lucy_DefaultLexiconReader* self, cfish_Obj* other);

typedef void
(*LUCY_DefLexReader_Destroy_t)(lucy_DefaultLexiconReader* self);

typedef cfish_String*
(*LUCY_DefLexReader_To_String_t)(lucy_DefaultLexiconReader* self);

typedef lucy_LexiconReader*
(*LUCY_DefLexReader_Aggregator_t)(lucy_DefaultLexiconReader* self, cfish_Vector* readers, lucy_I32Array* offsets);

typedef lucy_Schema*
(*LUCY_DefLexReader_Get_Schema_t)(lucy_DefaultLexiconReader* self);

typedef lucy_Folder*
(*LUCY_DefLexReader_Get_Folder_t)(lucy_DefaultLexiconReader* self);

typedef lucy_Snapshot*
(*LUCY_DefLexReader_Get_Snapshot_t)(lucy_DefaultLexiconReader* self);

typedef cfish_Vector*
(*LUCY_DefLexReader_Get_Segments_t)(lucy_DefaultLexiconReader* self);

typedef lucy_Segment*
(*LUCY_DefLexReader_Get_Segment_t)(lucy_DefaultLexiconReader* self);

typedef int32_t
(*LUCY_DefLexReader_Get_Seg_Tick_t)(lucy_DefaultLexiconReader* self);

typedef void
(*LUCY_DefLexReader_Close_t)(lucy_DefaultLexiconReader* self);

typedef lucy_Lexicon*
(*LUCY_DefLexReader_Lexicon_t)(lucy_DefaultLexiconReader* self, cfish_String* field, cfish_Obj* term);

typedef uint32_t
(*LUCY_DefLexReader_Doc_Freq_t)(lucy_DefaultLexiconReader* self, cfish_String* field, cfish_Obj* term);

typedef lucy_TermInfo*
(*LUCY_DefLexReader_Fetch_Term_Info_t)(lucy_DefaultLexiconReader* self, cfish_String* field, cfish_Obj* term);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_DefLexReader_get_class(lucy_DefaultLexiconReader *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_DefLexReader_get_class_name(lucy_DefaultLexiconReader *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_DefLexReader_is_a(lucy_DefaultLexiconReader *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_DefLexReader_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_DefLexReader_To_Host(lucy_DefaultLexiconReader* self, void* vcache) {
    const LUCY_DefLexReader_To_Host_t method = (LUCY_DefLexReader_To_Host_t)cfish_obj_method(self, LUCY_DefLexReader_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_DefLexReader_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_DefLexReader_Clone(lucy_DefaultLexiconReader* self) {
    const LUCY_DefLexReader_Clone_t method = (LUCY_DefLexReader_Clone_t)cfish_obj_method(self, LUCY_DefLexReader_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefLexReader_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_DefLexReader_Equals(lucy_DefaultLexiconReader* self, cfish_Obj* other) {
    const LUCY_DefLexReader_Equals_t method = (LUCY_DefLexReader_Equals_t)cfish_obj_method(self, LUCY_DefLexReader_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_DefLexReader_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_DefLexReader_Compare_To(lucy_DefaultLexiconReader* self, cfish_Obj* other) {
    const LUCY_DefLexReader_Compare_To_t method = (LUCY_DefLexReader_Compare_To_t)cfish_obj_method(self, LUCY_DefLexReader_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_DefLexReader_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_DefLexReader_Destroy(lucy_DefaultLexiconReader* self) {
    const LUCY_DefLexReader_Destroy_t method = (LUCY_DefLexReader_Destroy_t)cfish_obj_method(self, LUCY_DefLexReader_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefLexReader_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_DefLexReader_To_String(lucy_DefaultLexiconReader* self) {
    const LUCY_DefLexReader_To_String_t method = (LUCY_DefLexReader_To_String_t)cfish_obj_method(self, LUCY_DefLexReader_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefLexReader_Aggregator_OFFSET;
static CFISH_INLINE lucy_LexiconReader*
LUCY_DefLexReader_Aggregator(lucy_DefaultLexiconReader* self, cfish_Vector* readers, lucy_I32Array* offsets) {
    const LUCY_DefLexReader_Aggregator_t method = (LUCY_DefLexReader_Aggregator_t)cfish_obj_method(self, LUCY_DefLexReader_Aggregator_OFFSET);
    return method(self, readers, offsets);
}

extern LUCY_VISIBLE uint32_t LUCY_DefLexReader_Get_Schema_OFFSET;
static CFISH_INLINE lucy_Schema*
LUCY_DefLexReader_Get_Schema(lucy_DefaultLexiconReader* self) {
    const LUCY_DefLexReader_Get_Schema_t method = (LUCY_DefLexReader_Get_Schema_t)cfish_obj_method(self, LUCY_DefLexReader_Get_Schema_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefLexReader_Get_Folder_OFFSET;
static CFISH_INLINE lucy_Folder*
LUCY_DefLexReader_Get_Folder(lucy_DefaultLexiconReader* self) {
    const LUCY_DefLexReader_Get_Folder_t method = (LUCY_DefLexReader_Get_Folder_t)cfish_obj_method(self, LUCY_DefLexReader_Get_Folder_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefLexReader_Get_Snapshot_OFFSET;
static CFISH_INLINE lucy_Snapshot*
LUCY_DefLexReader_Get_Snapshot(lucy_DefaultLexiconReader* self) {
    const LUCY_DefLexReader_Get_Snapshot_t method = (LUCY_DefLexReader_Get_Snapshot_t)cfish_obj_method(self, LUCY_DefLexReader_Get_Snapshot_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefLexReader_Get_Segments_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_DefLexReader_Get_Segments(lucy_DefaultLexiconReader* self) {
    const LUCY_DefLexReader_Get_Segments_t method = (LUCY_DefLexReader_Get_Segments_t)cfish_obj_method(self, LUCY_DefLexReader_Get_Segments_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefLexReader_Get_Segment_OFFSET;
static CFISH_INLINE lucy_Segment*
LUCY_DefLexReader_Get_Segment(lucy_DefaultLexiconReader* self) {
    const LUCY_DefLexReader_Get_Segment_t method = (LUCY_DefLexReader_Get_Segment_t)cfish_obj_method(self, LUCY_DefLexReader_Get_Segment_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefLexReader_Get_Seg_Tick_OFFSET;
static CFISH_INLINE int32_t
LUCY_DefLexReader_Get_Seg_Tick(lucy_DefaultLexiconReader* self) {
    const LUCY_DefLexReader_Get_Seg_Tick_t method = (LUCY_DefLexReader_Get_Seg_Tick_t)cfish_obj_method(self, LUCY_DefLexReader_Get_Seg_Tick_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefLexReader_Close_OFFSET;
static CFISH_INLINE void
LUCY_DefLexReader_Close(lucy_DefaultLexiconReader* self) {
    const LUCY_DefLexReader_Close_t method = (LUCY_DefLexReader_Close_t)cfish_obj_method(self, LUCY_DefLexReader_Close_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_DefLexReader_Lexicon_OFFSET;
static CFISH_INLINE lucy_Lexicon*
LUCY_DefLexReader_Lexicon(lucy_DefaultLexiconReader* self, cfish_String* field, cfish_Obj* term) {
    const LUCY_DefLexReader_Lexicon_t method = (LUCY_DefLexReader_Lexicon_t)cfish_obj_method(self, LUCY_DefLexReader_Lexicon_OFFSET);
    return method(self, field, term);
}

extern LUCY_VISIBLE uint32_t LUCY_DefLexReader_Doc_Freq_OFFSET;
static CFISH_INLINE uint32_t
LUCY_DefLexReader_Doc_Freq(lucy_DefaultLexiconReader* self, cfish_String* field, cfish_Obj* term) {
    const LUCY_DefLexReader_Doc_Freq_t method = (LUCY_DefLexReader_Doc_Freq_t)cfish_obj_method(self, LUCY_DefLexReader_Doc_Freq_OFFSET);
    return method(self, field, term);
}

extern LUCY_VISIBLE uint32_t LUCY_DefLexReader_Fetch_Term_Info_OFFSET;
static CFISH_INLINE lucy_TermInfo*
LUCY_DefLexReader_Fetch_Term_Info(lucy_DefaultLexiconReader* self, cfish_String* field, cfish_Obj* term) {
    const LUCY_DefLexReader_Fetch_Term_Info_t method = (LUCY_DefLexReader_Fetch_Term_Info_t)cfish_obj_method(self, LUCY_DefLexReader_Fetch_Term_Info_OFFSET);
    return method(self, field, term);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define DefaultLexiconReader lucy_DefaultLexiconReader
  #define DEFAULTLEXICONREADER LUCY_DEFAULTLEXICONREADER
  #define DefLexReader_new lucy_DefLexReader_new
  #define DefLexReader_init lucy_DefLexReader_init
  #define DefLexReader_get_class lucy_DefLexReader_get_class
  #define DefLexReader_get_class_name lucy_DefLexReader_get_class_name
  #define DefLexReader_is_a lucy_DefLexReader_is_a
  #define DefLexReader_Lexicon_IMP LUCY_DefLexReader_Lexicon_IMP
  #define DefLexReader_Doc_Freq_IMP LUCY_DefLexReader_Doc_Freq_IMP
  #define DefLexReader_Fetch_Term_Info_IMP LUCY_DefLexReader_Fetch_Term_Info_IMP
  #define DefLexReader_Close_IMP LUCY_DefLexReader_Close_IMP
  #define DefLexReader_Destroy_IMP LUCY_DefLexReader_Destroy_IMP
  #define DefLexReader_To_Host LUCY_DefLexReader_To_Host
  #define DefLexReader_To_Host_t LUCY_DefLexReader_To_Host_t
  #define DefLexReader_Clone LUCY_DefLexReader_Clone
  #define DefLexReader_Clone_t LUCY_DefLexReader_Clone_t
  #define DefLexReader_Equals LUCY_DefLexReader_Equals
  #define DefLexReader_Equals_t LUCY_DefLexReader_Equals_t
  #define DefLexReader_Compare_To LUCY_DefLexReader_Compare_To
  #define DefLexReader_Compare_To_t LUCY_DefLexReader_Compare_To_t
  #define DefLexReader_Destroy LUCY_DefLexReader_Destroy
  #define DefLexReader_Destroy_t LUCY_DefLexReader_Destroy_t
  #define DefLexReader_To_String LUCY_DefLexReader_To_String
  #define DefLexReader_To_String_t LUCY_DefLexReader_To_String_t
  #define DefLexReader_Aggregator LUCY_DefLexReader_Aggregator
  #define DefLexReader_Aggregator_t LUCY_DefLexReader_Aggregator_t
  #define DefLexReader_Get_Schema LUCY_DefLexReader_Get_Schema
  #define DefLexReader_Get_Schema_t LUCY_DefLexReader_Get_Schema_t
  #define DefLexReader_Get_Folder LUCY_DefLexReader_Get_Folder
  #define DefLexReader_Get_Folder_t LUCY_DefLexReader_Get_Folder_t
  #define DefLexReader_Get_Snapshot LUCY_DefLexReader_Get_Snapshot
  #define DefLexReader_Get_Snapshot_t LUCY_DefLexReader_Get_Snapshot_t
  #define DefLexReader_Get_Segments LUCY_DefLexReader_Get_Segments
  #define DefLexReader_Get_Segments_t LUCY_DefLexReader_Get_Segments_t
  #define DefLexReader_Get_Segment LUCY_DefLexReader_Get_Segment
  #define DefLexReader_Get_Segment_t LUCY_DefLexReader_Get_Segment_t
  #define DefLexReader_Get_Seg_Tick LUCY_DefLexReader_Get_Seg_Tick
  #define DefLexReader_Get_Seg_Tick_t LUCY_DefLexReader_Get_Seg_Tick_t
  #define DefLexReader_Close LUCY_DefLexReader_Close
  #define DefLexReader_Close_t LUCY_DefLexReader_Close_t
  #define DefLexReader_Lexicon LUCY_DefLexReader_Lexicon
  #define DefLexReader_Lexicon_t LUCY_DefLexReader_Lexicon_t
  #define DefLexReader_Doc_Freq LUCY_DefLexReader_Doc_Freq
  #define DefLexReader_Doc_Freq_t LUCY_DefLexReader_Doc_Freq_t
  #define DefLexReader_Fetch_Term_Info LUCY_DefLexReader_Fetch_Term_Info
  #define DefLexReader_Fetch_Term_Info_t LUCY_DefLexReader_Fetch_Term_Info_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_LEXICONREADER */




