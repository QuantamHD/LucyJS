/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_POLYLEXICON
#define H_LUCY_INDEX_POLYLEXICON 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy\Index\Lexicon.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_POLYLEXICON
extern uint32_t lucy_PolyLex_IVARS_OFFSET;
typedef struct lucy_PolyLexiconIVARS lucy_PolyLexiconIVARS;
static CFISH_INLINE lucy_PolyLexiconIVARS*
lucy_PolyLex_IVARS(lucy_PolyLexicon *self) {
   char *ptr = (char*)self + lucy_PolyLex_IVARS_OFFSET;
   return (lucy_PolyLexiconIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define PolyLexiconIVARS lucy_PolyLexiconIVARS
  #define PolyLex_IVARS lucy_PolyLex_IVARS
#endif

struct lucy_PolyLexiconIVARS {
    cfish_String* field;
    cfish_Obj* term;
    lucy_SegLexQueue* lex_q;
    cfish_Vector* seg_lexicons;
    int32_t size;
};

#endif /* C_LUCY_POLYLEXICON */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_PolyLexicon*
lucy_PolyLex_new(cfish_String* field, cfish_Vector* sub_readers);

LUCY_VISIBLE lucy_PolyLexicon*
lucy_PolyLex_init(lucy_PolyLexicon* self, cfish_String* field, cfish_Vector* sub_readers);

void
LUCY_PolyLex_Seek_IMP(lucy_PolyLexicon* self, cfish_Obj* target);

bool
LUCY_PolyLex_Next_IMP(lucy_PolyLexicon* self);

void
LUCY_PolyLex_Reset_IMP(lucy_PolyLexicon* self);

cfish_Obj*
LUCY_PolyLex_Get_Term_IMP(lucy_PolyLexicon* self);

uint32_t
LUCY_PolyLex_Get_Num_Seg_Lexicons_IMP(lucy_PolyLexicon* self);

void
LUCY_PolyLex_Destroy_IMP(lucy_PolyLexicon* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_PolyLex_To_Host_t)(lucy_PolyLexicon* self, void* vcache);

typedef cfish_Obj*
(*LUCY_PolyLex_Clone_t)(lucy_PolyLexicon* self);

typedef bool
(*LUCY_PolyLex_Equals_t)(lucy_PolyLexicon* self, cfish_Obj* other);

typedef int32_t
(*LUCY_PolyLex_Compare_To_t)(lucy_PolyLexicon* self, cfish_Obj* other);

typedef void
(*LUCY_PolyLex_Destroy_t)(lucy_PolyLexicon* self);

typedef cfish_String*
(*LUCY_PolyLex_To_String_t)(lucy_PolyLexicon* self);

typedef void
(*LUCY_PolyLex_Seek_t)(lucy_PolyLexicon* self, cfish_Obj* target);

typedef bool
(*LUCY_PolyLex_Next_t)(lucy_PolyLexicon* self);

typedef void
(*LUCY_PolyLex_Reset_t)(lucy_PolyLexicon* self);

typedef int32_t
(*LUCY_PolyLex_Doc_Freq_t)(lucy_PolyLexicon* self);

typedef cfish_Obj*
(*LUCY_PolyLex_Get_Term_t)(lucy_PolyLexicon* self);

typedef cfish_String*
(*LUCY_PolyLex_Get_Field_t)(lucy_PolyLexicon* self);

typedef uint32_t
(*LUCY_PolyLex_Get_Num_Seg_Lexicons_t)(lucy_PolyLexicon* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_PolyLex_get_class(lucy_PolyLexicon *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_PolyLex_get_class_name(lucy_PolyLexicon *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_PolyLex_is_a(lucy_PolyLexicon *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_PolyLex_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_PolyLex_To_Host(lucy_PolyLexicon* self, void* vcache) {
    const LUCY_PolyLex_To_Host_t method = (LUCY_PolyLex_To_Host_t)cfish_obj_method(self, LUCY_PolyLex_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLex_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PolyLex_Clone(lucy_PolyLexicon* self) {
    const LUCY_PolyLex_Clone_t method = (LUCY_PolyLex_Clone_t)cfish_obj_method(self, LUCY_PolyLex_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLex_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_PolyLex_Equals(lucy_PolyLexicon* self, cfish_Obj* other) {
    const LUCY_PolyLex_Equals_t method = (LUCY_PolyLex_Equals_t)cfish_obj_method(self, LUCY_PolyLex_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLex_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_PolyLex_Compare_To(lucy_PolyLexicon* self, cfish_Obj* other) {
    const LUCY_PolyLex_Compare_To_t method = (LUCY_PolyLex_Compare_To_t)cfish_obj_method(self, LUCY_PolyLex_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLex_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_PolyLex_Destroy(lucy_PolyLexicon* self) {
    const LUCY_PolyLex_Destroy_t method = (LUCY_PolyLex_Destroy_t)cfish_obj_method(self, LUCY_PolyLex_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLex_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_PolyLex_To_String(lucy_PolyLexicon* self) {
    const LUCY_PolyLex_To_String_t method = (LUCY_PolyLex_To_String_t)cfish_obj_method(self, LUCY_PolyLex_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLex_Seek_OFFSET;
static CFISH_INLINE void
LUCY_PolyLex_Seek(lucy_PolyLexicon* self, cfish_Obj* target) {
    const LUCY_PolyLex_Seek_t method = (LUCY_PolyLex_Seek_t)cfish_obj_method(self, LUCY_PolyLex_Seek_OFFSET);
    method(self, target);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLex_Next_OFFSET;
static CFISH_INLINE bool
LUCY_PolyLex_Next(lucy_PolyLexicon* self) {
    const LUCY_PolyLex_Next_t method = (LUCY_PolyLex_Next_t)cfish_obj_method(self, LUCY_PolyLex_Next_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLex_Reset_OFFSET;
static CFISH_INLINE void
LUCY_PolyLex_Reset(lucy_PolyLexicon* self) {
    const LUCY_PolyLex_Reset_t method = (LUCY_PolyLex_Reset_t)cfish_obj_method(self, LUCY_PolyLex_Reset_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLex_Doc_Freq_OFFSET;
static CFISH_INLINE int32_t
LUCY_PolyLex_Doc_Freq(lucy_PolyLexicon* self) {
    const LUCY_PolyLex_Doc_Freq_t method = (LUCY_PolyLex_Doc_Freq_t)cfish_obj_method(self, LUCY_PolyLex_Doc_Freq_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLex_Get_Term_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PolyLex_Get_Term(lucy_PolyLexicon* self) {
    const LUCY_PolyLex_Get_Term_t method = (LUCY_PolyLex_Get_Term_t)cfish_obj_method(self, LUCY_PolyLex_Get_Term_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLex_Get_Field_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_PolyLex_Get_Field(lucy_PolyLexicon* self) {
    const LUCY_PolyLex_Get_Field_t method = (LUCY_PolyLex_Get_Field_t)cfish_obj_method(self, LUCY_PolyLex_Get_Field_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PolyLex_Get_Num_Seg_Lexicons_OFFSET;
static CFISH_INLINE uint32_t
LUCY_PolyLex_Get_Num_Seg_Lexicons(lucy_PolyLexicon* self) {
    const LUCY_PolyLex_Get_Num_Seg_Lexicons_t method = (LUCY_PolyLex_Get_Num_Seg_Lexicons_t)cfish_obj_method(self, LUCY_PolyLex_Get_Num_Seg_Lexicons_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_PolyLex_Get_Num_Seg_Lexicons_OVERRIDE NULL
#else
uint32_t
Lucy_PolyLex_Get_Num_Seg_Lexicons_OVERRIDE(lucy_PolyLexicon* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define PolyLexicon lucy_PolyLexicon
  #define POLYLEXICON LUCY_POLYLEXICON
  #define PolyLex_new lucy_PolyLex_new
  #define PolyLex_init lucy_PolyLex_init
  #define PolyLex_get_class lucy_PolyLex_get_class
  #define PolyLex_get_class_name lucy_PolyLex_get_class_name
  #define PolyLex_is_a lucy_PolyLex_is_a
  #define PolyLex_Seek_IMP LUCY_PolyLex_Seek_IMP
  #define PolyLex_Next_IMP LUCY_PolyLex_Next_IMP
  #define PolyLex_Reset_IMP LUCY_PolyLex_Reset_IMP
  #define PolyLex_Get_Term_IMP LUCY_PolyLex_Get_Term_IMP
  #define PolyLex_Get_Num_Seg_Lexicons_IMP LUCY_PolyLex_Get_Num_Seg_Lexicons_IMP
  #define PolyLex_Destroy_IMP LUCY_PolyLex_Destroy_IMP
  #define PolyLex_To_Host LUCY_PolyLex_To_Host
  #define PolyLex_To_Host_t LUCY_PolyLex_To_Host_t
  #define PolyLex_Clone LUCY_PolyLex_Clone
  #define PolyLex_Clone_t LUCY_PolyLex_Clone_t
  #define PolyLex_Equals LUCY_PolyLex_Equals
  #define PolyLex_Equals_t LUCY_PolyLex_Equals_t
  #define PolyLex_Compare_To LUCY_PolyLex_Compare_To
  #define PolyLex_Compare_To_t LUCY_PolyLex_Compare_To_t
  #define PolyLex_Destroy LUCY_PolyLex_Destroy
  #define PolyLex_Destroy_t LUCY_PolyLex_Destroy_t
  #define PolyLex_To_String LUCY_PolyLex_To_String
  #define PolyLex_To_String_t LUCY_PolyLex_To_String_t
  #define PolyLex_Seek LUCY_PolyLex_Seek
  #define PolyLex_Seek_t LUCY_PolyLex_Seek_t
  #define PolyLex_Next LUCY_PolyLex_Next
  #define PolyLex_Next_t LUCY_PolyLex_Next_t
  #define PolyLex_Reset LUCY_PolyLex_Reset
  #define PolyLex_Reset_t LUCY_PolyLex_Reset_t
  #define PolyLex_Doc_Freq LUCY_PolyLex_Doc_Freq
  #define PolyLex_Doc_Freq_t LUCY_PolyLex_Doc_Freq_t
  #define PolyLex_Get_Term LUCY_PolyLex_Get_Term
  #define PolyLex_Get_Term_t LUCY_PolyLex_Get_Term_t
  #define PolyLex_Get_Field LUCY_PolyLex_Get_Field
  #define PolyLex_Get_Field_t LUCY_PolyLex_Get_Field_t
  #define PolyLex_Get_Num_Seg_Lexicons LUCY_PolyLex_Get_Num_Seg_Lexicons
  #define PolyLex_Get_Num_Seg_Lexicons_t LUCY_PolyLex_Get_Num_Seg_Lexicons_t
#endif /* LUCY_USE_SHORT_NAMES */



/* Include the header for this class's parent. 
 */

#include "Lucy\Util\PriorityQueue.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_SEGLEXQUEUE
extern uint32_t lucy_SegLexQ_IVARS_OFFSET;
typedef struct lucy_SegLexQueueIVARS lucy_SegLexQueueIVARS;
static CFISH_INLINE lucy_SegLexQueueIVARS*
lucy_SegLexQ_IVARS(lucy_SegLexQueue *self) {
   char *ptr = (char*)self + lucy_SegLexQ_IVARS_OFFSET;
   return (lucy_SegLexQueueIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define SegLexQueueIVARS lucy_SegLexQueueIVARS
  #define SegLexQ_IVARS lucy_SegLexQ_IVARS
#endif

struct lucy_SegLexQueueIVARS {
    uint32_t size;
    uint32_t max_size;
    cfish_Obj** heap;
};

#endif /* C_LUCY_SEGLEXQUEUE */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_SegLexQueue*
lucy_SegLexQ_new(uint32_t max_size);

bool
LUCY_SegLexQ_Less_Than_IMP(lucy_SegLexQueue* self, cfish_Obj* a, cfish_Obj* b);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_SegLexQ_To_Host_t)(lucy_SegLexQueue* self, void* vcache);

typedef cfish_Obj*
(*LUCY_SegLexQ_Clone_t)(lucy_SegLexQueue* self);

typedef bool
(*LUCY_SegLexQ_Equals_t)(lucy_SegLexQueue* self, cfish_Obj* other);

typedef int32_t
(*LUCY_SegLexQ_Compare_To_t)(lucy_SegLexQueue* self, cfish_Obj* other);

typedef void
(*LUCY_SegLexQ_Destroy_t)(lucy_SegLexQueue* self);

typedef cfish_String*
(*LUCY_SegLexQ_To_String_t)(lucy_SegLexQueue* self);

typedef bool
(*LUCY_SegLexQ_Less_Than_t)(lucy_SegLexQueue* self, cfish_Obj* a, cfish_Obj* b);

typedef bool
(*LUCY_SegLexQ_Insert_t)(lucy_SegLexQueue* self, cfish_Obj* element);

typedef cfish_Obj*
(*LUCY_SegLexQ_Jostle_t)(lucy_SegLexQueue* self, cfish_Obj* element);

typedef cfish_Obj*
(*LUCY_SegLexQ_Pop_t)(lucy_SegLexQueue* self);

typedef cfish_Vector*
(*LUCY_SegLexQ_Pop_All_t)(lucy_SegLexQueue* self);

typedef cfish_Obj*
(*LUCY_SegLexQ_Peek_t)(lucy_SegLexQueue* self);

typedef uint32_t
(*LUCY_SegLexQ_Get_Size_t)(lucy_SegLexQueue* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_SegLexQ_get_class(lucy_SegLexQueue *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_SegLexQ_get_class_name(lucy_SegLexQueue *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_SegLexQ_is_a(lucy_SegLexQueue *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_SegLexQ_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_SegLexQ_To_Host(lucy_SegLexQueue* self, void* vcache) {
    const LUCY_SegLexQ_To_Host_t method = (LUCY_SegLexQ_To_Host_t)cfish_obj_method(self, LUCY_SegLexQ_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_SegLexQ_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_SegLexQ_Clone(lucy_SegLexQueue* self) {
    const LUCY_SegLexQ_Clone_t method = (LUCY_SegLexQ_Clone_t)cfish_obj_method(self, LUCY_SegLexQ_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegLexQ_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_SegLexQ_Equals(lucy_SegLexQueue* self, cfish_Obj* other) {
    const LUCY_SegLexQ_Equals_t method = (LUCY_SegLexQ_Equals_t)cfish_obj_method(self, LUCY_SegLexQ_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_SegLexQ_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_SegLexQ_Compare_To(lucy_SegLexQueue* self, cfish_Obj* other) {
    const LUCY_SegLexQ_Compare_To_t method = (LUCY_SegLexQ_Compare_To_t)cfish_obj_method(self, LUCY_SegLexQ_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_SegLexQ_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_SegLexQ_Destroy(lucy_SegLexQueue* self) {
    const LUCY_SegLexQ_Destroy_t method = (LUCY_SegLexQ_Destroy_t)cfish_obj_method(self, LUCY_SegLexQ_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegLexQ_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_SegLexQ_To_String(lucy_SegLexQueue* self) {
    const LUCY_SegLexQ_To_String_t method = (LUCY_SegLexQ_To_String_t)cfish_obj_method(self, LUCY_SegLexQ_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegLexQ_Less_Than_OFFSET;
static CFISH_INLINE bool
LUCY_SegLexQ_Less_Than(lucy_SegLexQueue* self, cfish_Obj* a, cfish_Obj* b) {
    const LUCY_SegLexQ_Less_Than_t method = (LUCY_SegLexQ_Less_Than_t)cfish_obj_method(self, LUCY_SegLexQ_Less_Than_OFFSET);
    return method(self, a, b);
}

extern LUCY_VISIBLE uint32_t LUCY_SegLexQ_Insert_OFFSET;
static CFISH_INLINE bool
LUCY_SegLexQ_Insert(lucy_SegLexQueue* self, cfish_Obj* element) {
    const LUCY_SegLexQ_Insert_t method = (LUCY_SegLexQ_Insert_t)cfish_obj_method(self, LUCY_SegLexQ_Insert_OFFSET);
    return method(self, element);
}

extern LUCY_VISIBLE uint32_t LUCY_SegLexQ_Jostle_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_SegLexQ_Jostle(lucy_SegLexQueue* self, cfish_Obj* element) {
    const LUCY_SegLexQ_Jostle_t method = (LUCY_SegLexQ_Jostle_t)cfish_obj_method(self, LUCY_SegLexQ_Jostle_OFFSET);
    return method(self, element);
}

extern LUCY_VISIBLE uint32_t LUCY_SegLexQ_Pop_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_SegLexQ_Pop(lucy_SegLexQueue* self) {
    const LUCY_SegLexQ_Pop_t method = (LUCY_SegLexQ_Pop_t)cfish_obj_method(self, LUCY_SegLexQ_Pop_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegLexQ_Pop_All_OFFSET;
static CFISH_INLINE cfish_Vector*
LUCY_SegLexQ_Pop_All(lucy_SegLexQueue* self) {
    const LUCY_SegLexQ_Pop_All_t method = (LUCY_SegLexQ_Pop_All_t)cfish_obj_method(self, LUCY_SegLexQ_Pop_All_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegLexQ_Peek_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_SegLexQ_Peek(lucy_SegLexQueue* self) {
    const LUCY_SegLexQ_Peek_t method = (LUCY_SegLexQ_Peek_t)cfish_obj_method(self, LUCY_SegLexQ_Peek_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_SegLexQ_Get_Size_OFFSET;
static CFISH_INLINE uint32_t
LUCY_SegLexQ_Get_Size(lucy_SegLexQueue* self) {
    const LUCY_SegLexQ_Get_Size_t method = (LUCY_SegLexQ_Get_Size_t)cfish_obj_method(self, LUCY_SegLexQ_Get_Size_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define SegLexQueue lucy_SegLexQueue
  #define SEGLEXQUEUE LUCY_SEGLEXQUEUE
  #define SegLexQ_new lucy_SegLexQ_new
  #define SegLexQ_get_class lucy_SegLexQ_get_class
  #define SegLexQ_get_class_name lucy_SegLexQ_get_class_name
  #define SegLexQ_is_a lucy_SegLexQ_is_a
  #define SegLexQ_Less_Than_IMP LUCY_SegLexQ_Less_Than_IMP
  #define SegLexQ_To_Host LUCY_SegLexQ_To_Host
  #define SegLexQ_To_Host_t LUCY_SegLexQ_To_Host_t
  #define SegLexQ_Clone LUCY_SegLexQ_Clone
  #define SegLexQ_Clone_t LUCY_SegLexQ_Clone_t
  #define SegLexQ_Equals LUCY_SegLexQ_Equals
  #define SegLexQ_Equals_t LUCY_SegLexQ_Equals_t
  #define SegLexQ_Compare_To LUCY_SegLexQ_Compare_To
  #define SegLexQ_Compare_To_t LUCY_SegLexQ_Compare_To_t
  #define SegLexQ_Destroy LUCY_SegLexQ_Destroy
  #define SegLexQ_Destroy_t LUCY_SegLexQ_Destroy_t
  #define SegLexQ_To_String LUCY_SegLexQ_To_String
  #define SegLexQ_To_String_t LUCY_SegLexQ_To_String_t
  #define SegLexQ_Less_Than LUCY_SegLexQ_Less_Than
  #define SegLexQ_Less_Than_t LUCY_SegLexQ_Less_Than_t
  #define SegLexQ_Insert LUCY_SegLexQ_Insert
  #define SegLexQ_Insert_t LUCY_SegLexQ_Insert_t
  #define SegLexQ_Jostle LUCY_SegLexQ_Jostle
  #define SegLexQ_Jostle_t LUCY_SegLexQ_Jostle_t
  #define SegLexQ_Pop LUCY_SegLexQ_Pop
  #define SegLexQ_Pop_t LUCY_SegLexQ_Pop_t
  #define SegLexQ_Pop_All LUCY_SegLexQ_Pop_All
  #define SegLexQ_Pop_All_t LUCY_SegLexQ_Pop_All_t
  #define SegLexQ_Peek LUCY_SegLexQ_Peek
  #define SegLexQ_Peek_t LUCY_SegLexQ_Peek_t
  #define SegLexQ_Get_Size LUCY_SegLexQ_Get_Size
  #define SegLexQ_Get_Size_t LUCY_SegLexQ_Get_Size_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_POLYLEXICON */




