/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_POSTINGPOOL
#define H_LUCY_INDEX_POSTINGPOOL 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy\Util\SortExternal.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_POSTINGPOOL
extern uint32_t lucy_PostPool_IVARS_OFFSET;
typedef struct lucy_PostingPoolIVARS lucy_PostingPoolIVARS;
static CFISH_INLINE lucy_PostingPoolIVARS*
lucy_PostPool_IVARS(lucy_PostingPool *self) {
   char *ptr = (char*)self + lucy_PostPool_IVARS_OFFSET;
   return (lucy_PostingPoolIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define PostingPoolIVARS lucy_PostingPoolIVARS
  #define PostPool_IVARS lucy_PostPool_IVARS
#endif

struct lucy_PostingPoolIVARS {
    cfish_Obj** buffer;
    uint32_t buf_cap;
    uint32_t buf_max;
    uint32_t buf_tick;
    cfish_Obj** scratch;
    uint32_t scratch_cap;
    cfish_Vector* runs;
    cfish_Obj*** slice_starts;
    uint32_t* slice_sizes;
    uint32_t mem_thresh;
    bool flipped;
    lucy_Schema* schema;
    lucy_Snapshot* snapshot;
    lucy_Segment* segment;
    lucy_PolyReader* polyreader;
    cfish_String* field;
    lucy_LexiconWriter* lex_writer;
    lucy_Lexicon* lexicon;
    lucy_PostingList* plist;
    lucy_MemoryPool* mem_pool;
    lucy_I32Array* doc_map;
    int32_t field_num;
    int32_t doc_base;
    int32_t last_doc_id;
    uint32_t post_count;
    lucy_OutStream* lex_temp_out;
    lucy_OutStream* post_temp_out;
    lucy_OutStream* skip_out;
    lucy_InStream* lex_temp_in;
    lucy_InStream* post_temp_in;
    lucy_FieldType* type;
    lucy_Posting* posting;
    lucy_SkipStepper* skip_stepper;
    int64_t lex_start;
    int64_t post_start;
    int64_t lex_end;
    int64_t post_end;
};

#endif /* C_LUCY_POSTINGPOOL */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_PostingPool*
lucy_PostPool_new(lucy_Schema* schema, lucy_Snapshot* snapshot, lucy_Segment* segment, lucy_PolyReader* polyreader, cfish_String* field, lucy_LexiconWriter* lex_writer, lucy_MemoryPool* mem_pool, lucy_OutStream* lex_temp_out, lucy_OutStream* post_temp_out, lucy_OutStream* skip_out);

LUCY_VISIBLE lucy_PostingPool*
lucy_PostPool_init(lucy_PostingPool* self, lucy_Schema* schema, lucy_Snapshot* snapshot, lucy_Segment* segment, lucy_PolyReader* polyreader, cfish_String* field, lucy_LexiconWriter* lex_writer, lucy_MemoryPool* mem_pool, lucy_OutStream* lex_temp_out, lucy_OutStream* post_temp_out, lucy_OutStream* skip_out);

void
LUCY_PostPool_Add_Inversion_IMP(lucy_PostingPool* self, lucy_Inversion* inversion, int32_t doc_id, float doc_boost, float length_norm);

lucy_MemoryPool*
LUCY_PostPool_Get_Mem_Pool_IMP(lucy_PostingPool* self);

void
LUCY_PostPool_Add_Segment_IMP(lucy_PostingPool* self, lucy_SegReader* reader, lucy_I32Array* doc_map, int32_t doc_base);

void
LUCY_PostPool_Flip_IMP(lucy_PostingPool* self);

uint32_t
LUCY_PostPool_Refill_IMP(lucy_PostingPool* self);

int
LUCY_PostPool_Compare_IMP(lucy_PostingPool* self, cfish_Obj** ptr_a, cfish_Obj** ptr_b);

void
LUCY_PostPool_Finish_IMP(lucy_PostingPool* self);

void
LUCY_PostPool_Flush_IMP(lucy_PostingPool* self);

void
LUCY_PostPool_Destroy_IMP(lucy_PostingPool* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_PostPool_To_Host_t)(lucy_PostingPool* self, void* vcache);

typedef cfish_Obj*
(*LUCY_PostPool_Clone_t)(lucy_PostingPool* self);

typedef bool
(*LUCY_PostPool_Equals_t)(lucy_PostingPool* self, cfish_Obj* other);

typedef int32_t
(*LUCY_PostPool_Compare_To_t)(lucy_PostingPool* self, cfish_Obj* other);

typedef void
(*LUCY_PostPool_Destroy_t)(lucy_PostingPool* self);

typedef cfish_String*
(*LUCY_PostPool_To_String_t)(lucy_PostingPool* self);

typedef int
(*LUCY_PostPool_Compare_t)(lucy_PostingPool* self, cfish_Obj** ptr_a, cfish_Obj** ptr_b);

typedef void
(*LUCY_PostPool_Flush_t)(lucy_PostingPool* self);

typedef void
(*LUCY_PostPool_Feed_t)(lucy_PostingPool* self, cfish_Obj* item);

typedef void
(*LUCY_PostPool_Flip_t)(lucy_PostingPool* self);

typedef cfish_Obj*
(*LUCY_PostPool_Fetch_t)(lucy_PostingPool* self);

typedef cfish_Obj*
(*LUCY_PostPool_Peek_t)(lucy_PostingPool* self);

typedef void
(*LUCY_PostPool_Add_Run_t)(lucy_PostingPool* self, lucy_SortExternal* run);

typedef void
(*LUCY_PostPool_Shrink_t)(lucy_PostingPool* self);

typedef uint32_t
(*LUCY_PostPool_Refill_t)(lucy_PostingPool* self);

typedef void
(*LUCY_PostPool_Sort_Buffer_t)(lucy_PostingPool* self);

typedef void
(*LUCY_PostPool_Clear_Buffer_t)(lucy_PostingPool* self);

typedef uint32_t
(*LUCY_PostPool_Buffer_Count_t)(lucy_PostingPool* self);

typedef void
(*LUCY_PostPool_Grow_Buffer_t)(lucy_PostingPool* self, uint32_t cap);

typedef void
(*LUCY_PostPool_Set_Mem_Thresh_t)(lucy_PostingPool* self, uint32_t mem_thresh);

typedef void
(*LUCY_PostPool_Add_Inversion_t)(lucy_PostingPool* self, lucy_Inversion* inversion, int32_t doc_id, float doc_boost, float length_norm);

typedef lucy_MemoryPool*
(*LUCY_PostPool_Get_Mem_Pool_t)(lucy_PostingPool* self);

typedef void
(*LUCY_PostPool_Add_Segment_t)(lucy_PostingPool* self, lucy_SegReader* reader, lucy_I32Array* doc_map, int32_t doc_base);

typedef void
(*LUCY_PostPool_Finish_t)(lucy_PostingPool* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_PostPool_get_class(lucy_PostingPool *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_PostPool_get_class_name(lucy_PostingPool *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_PostPool_is_a(lucy_PostingPool *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_PostPool_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_PostPool_To_Host(lucy_PostingPool* self, void* vcache) {
    const LUCY_PostPool_To_Host_t method = (LUCY_PostPool_To_Host_t)cfish_obj_method(self, LUCY_PostPool_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Clone_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PostPool_Clone(lucy_PostingPool* self) {
    const LUCY_PostPool_Clone_t method = (LUCY_PostPool_Clone_t)cfish_obj_method(self, LUCY_PostPool_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_PostPool_Equals(lucy_PostingPool* self, cfish_Obj* other) {
    const LUCY_PostPool_Equals_t method = (LUCY_PostPool_Equals_t)cfish_obj_method(self, LUCY_PostPool_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_PostPool_Compare_To(lucy_PostingPool* self, cfish_Obj* other) {
    const LUCY_PostPool_Compare_To_t method = (LUCY_PostPool_Compare_To_t)cfish_obj_method(self, LUCY_PostPool_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_PostPool_Destroy(lucy_PostingPool* self) {
    const LUCY_PostPool_Destroy_t method = (LUCY_PostPool_Destroy_t)cfish_obj_method(self, LUCY_PostPool_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_PostPool_To_String(lucy_PostingPool* self) {
    const LUCY_PostPool_To_String_t method = (LUCY_PostPool_To_String_t)cfish_obj_method(self, LUCY_PostPool_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Compare_OFFSET;
static CFISH_INLINE int
LUCY_PostPool_Compare(lucy_PostingPool* self, cfish_Obj** ptr_a, cfish_Obj** ptr_b) {
    const LUCY_PostPool_Compare_t method = (LUCY_PostPool_Compare_t)cfish_obj_method(self, LUCY_PostPool_Compare_OFFSET);
    return method(self, ptr_a, ptr_b);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Flush_OFFSET;
static CFISH_INLINE void
LUCY_PostPool_Flush(lucy_PostingPool* self) {
    const LUCY_PostPool_Flush_t method = (LUCY_PostPool_Flush_t)cfish_obj_method(self, LUCY_PostPool_Flush_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Feed_OFFSET;
static CFISH_INLINE void
LUCY_PostPool_Feed(lucy_PostingPool* self, cfish_Obj* item) {
    const LUCY_PostPool_Feed_t method = (LUCY_PostPool_Feed_t)cfish_obj_method(self, LUCY_PostPool_Feed_OFFSET);
    method(self, item);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Flip_OFFSET;
static CFISH_INLINE void
LUCY_PostPool_Flip(lucy_PostingPool* self) {
    const LUCY_PostPool_Flip_t method = (LUCY_PostPool_Flip_t)cfish_obj_method(self, LUCY_PostPool_Flip_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Fetch_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PostPool_Fetch(lucy_PostingPool* self) {
    const LUCY_PostPool_Fetch_t method = (LUCY_PostPool_Fetch_t)cfish_obj_method(self, LUCY_PostPool_Fetch_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Peek_OFFSET;
static CFISH_INLINE cfish_Obj*
LUCY_PostPool_Peek(lucy_PostingPool* self) {
    const LUCY_PostPool_Peek_t method = (LUCY_PostPool_Peek_t)cfish_obj_method(self, LUCY_PostPool_Peek_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Add_Run_OFFSET;
static CFISH_INLINE void
LUCY_PostPool_Add_Run(lucy_PostingPool* self, lucy_SortExternal* run) {
    const LUCY_PostPool_Add_Run_t method = (LUCY_PostPool_Add_Run_t)cfish_obj_method(self, LUCY_PostPool_Add_Run_OFFSET);
    method(self, run);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Shrink_OFFSET;
static CFISH_INLINE void
LUCY_PostPool_Shrink(lucy_PostingPool* self) {
    const LUCY_PostPool_Shrink_t method = (LUCY_PostPool_Shrink_t)cfish_obj_method(self, LUCY_PostPool_Shrink_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Refill_OFFSET;
static CFISH_INLINE uint32_t
LUCY_PostPool_Refill(lucy_PostingPool* self) {
    const LUCY_PostPool_Refill_t method = (LUCY_PostPool_Refill_t)cfish_obj_method(self, LUCY_PostPool_Refill_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Sort_Buffer_OFFSET;
static CFISH_INLINE void
LUCY_PostPool_Sort_Buffer(lucy_PostingPool* self) {
    const LUCY_PostPool_Sort_Buffer_t method = (LUCY_PostPool_Sort_Buffer_t)cfish_obj_method(self, LUCY_PostPool_Sort_Buffer_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Clear_Buffer_OFFSET;
static CFISH_INLINE void
LUCY_PostPool_Clear_Buffer(lucy_PostingPool* self) {
    const LUCY_PostPool_Clear_Buffer_t method = (LUCY_PostPool_Clear_Buffer_t)cfish_obj_method(self, LUCY_PostPool_Clear_Buffer_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Buffer_Count_OFFSET;
static CFISH_INLINE uint32_t
LUCY_PostPool_Buffer_Count(lucy_PostingPool* self) {
    const LUCY_PostPool_Buffer_Count_t method = (LUCY_PostPool_Buffer_Count_t)cfish_obj_method(self, LUCY_PostPool_Buffer_Count_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Grow_Buffer_OFFSET;
static CFISH_INLINE void
LUCY_PostPool_Grow_Buffer(lucy_PostingPool* self, uint32_t cap) {
    const LUCY_PostPool_Grow_Buffer_t method = (LUCY_PostPool_Grow_Buffer_t)cfish_obj_method(self, LUCY_PostPool_Grow_Buffer_OFFSET);
    method(self, cap);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Set_Mem_Thresh_OFFSET;
static CFISH_INLINE void
LUCY_PostPool_Set_Mem_Thresh(lucy_PostingPool* self, uint32_t mem_thresh) {
    const LUCY_PostPool_Set_Mem_Thresh_t method = (LUCY_PostPool_Set_Mem_Thresh_t)cfish_obj_method(self, LUCY_PostPool_Set_Mem_Thresh_OFFSET);
    method(self, mem_thresh);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Add_Inversion_OFFSET;
static CFISH_INLINE void
LUCY_PostPool_Add_Inversion(lucy_PostingPool* self, lucy_Inversion* inversion, int32_t doc_id, float doc_boost, float length_norm) {
    const LUCY_PostPool_Add_Inversion_t method = (LUCY_PostPool_Add_Inversion_t)cfish_obj_method(self, LUCY_PostPool_Add_Inversion_OFFSET);
    method(self, inversion, doc_id, doc_boost, length_norm);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Get_Mem_Pool_OFFSET;
static CFISH_INLINE lucy_MemoryPool*
LUCY_PostPool_Get_Mem_Pool(lucy_PostingPool* self) {
    const LUCY_PostPool_Get_Mem_Pool_t method = (LUCY_PostPool_Get_Mem_Pool_t)cfish_obj_method(self, LUCY_PostPool_Get_Mem_Pool_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Add_Segment_OFFSET;
static CFISH_INLINE void
LUCY_PostPool_Add_Segment(lucy_PostingPool* self, lucy_SegReader* reader, lucy_I32Array* doc_map, int32_t doc_base) {
    const LUCY_PostPool_Add_Segment_t method = (LUCY_PostPool_Add_Segment_t)cfish_obj_method(self, LUCY_PostPool_Add_Segment_OFFSET);
    method(self, reader, doc_map, doc_base);
}

extern LUCY_VISIBLE uint32_t LUCY_PostPool_Finish_OFFSET;
static CFISH_INLINE void
LUCY_PostPool_Finish(lucy_PostingPool* self) {
    const LUCY_PostPool_Finish_t method = (LUCY_PostPool_Finish_t)cfish_obj_method(self, LUCY_PostPool_Finish_OFFSET);
    method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#define Lucy_PostPool_Add_Inversion_OVERRIDE NULL
#define Lucy_PostPool_Get_Mem_Pool_OVERRIDE NULL
#define Lucy_PostPool_Add_Segment_OVERRIDE NULL
#define Lucy_PostPool_Finish_OVERRIDE NULL
#else
void
Lucy_PostPool_Add_Inversion_OVERRIDE(lucy_PostingPool* self, lucy_Inversion* inversion, int32_t doc_id, float doc_boost, float length_norm);
lucy_MemoryPool*
Lucy_PostPool_Get_Mem_Pool_OVERRIDE(lucy_PostingPool* self);
void
Lucy_PostPool_Add_Segment_OVERRIDE(lucy_PostingPool* self, lucy_SegReader* reader, lucy_I32Array* doc_map, int32_t doc_base);
void
Lucy_PostPool_Finish_OVERRIDE(lucy_PostingPool* self);
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define PostingPool lucy_PostingPool
  #define POSTINGPOOL LUCY_POSTINGPOOL
  #define PostPool_new lucy_PostPool_new
  #define PostPool_init lucy_PostPool_init
  #define PostPool_get_class lucy_PostPool_get_class
  #define PostPool_get_class_name lucy_PostPool_get_class_name
  #define PostPool_is_a lucy_PostPool_is_a
  #define PostPool_Add_Inversion_IMP LUCY_PostPool_Add_Inversion_IMP
  #define PostPool_Get_Mem_Pool_IMP LUCY_PostPool_Get_Mem_Pool_IMP
  #define PostPool_Add_Segment_IMP LUCY_PostPool_Add_Segment_IMP
  #define PostPool_Flip_IMP LUCY_PostPool_Flip_IMP
  #define PostPool_Refill_IMP LUCY_PostPool_Refill_IMP
  #define PostPool_Compare_IMP LUCY_PostPool_Compare_IMP
  #define PostPool_Finish_IMP LUCY_PostPool_Finish_IMP
  #define PostPool_Flush_IMP LUCY_PostPool_Flush_IMP
  #define PostPool_Destroy_IMP LUCY_PostPool_Destroy_IMP
  #define PostPool_To_Host LUCY_PostPool_To_Host
  #define PostPool_To_Host_t LUCY_PostPool_To_Host_t
  #define PostPool_Clone LUCY_PostPool_Clone
  #define PostPool_Clone_t LUCY_PostPool_Clone_t
  #define PostPool_Equals LUCY_PostPool_Equals
  #define PostPool_Equals_t LUCY_PostPool_Equals_t
  #define PostPool_Compare_To LUCY_PostPool_Compare_To
  #define PostPool_Compare_To_t LUCY_PostPool_Compare_To_t
  #define PostPool_Destroy LUCY_PostPool_Destroy
  #define PostPool_Destroy_t LUCY_PostPool_Destroy_t
  #define PostPool_To_String LUCY_PostPool_To_String
  #define PostPool_To_String_t LUCY_PostPool_To_String_t
  #define PostPool_Compare LUCY_PostPool_Compare
  #define PostPool_Compare_t LUCY_PostPool_Compare_t
  #define PostPool_Flush LUCY_PostPool_Flush
  #define PostPool_Flush_t LUCY_PostPool_Flush_t
  #define PostPool_Feed LUCY_PostPool_Feed
  #define PostPool_Feed_t LUCY_PostPool_Feed_t
  #define PostPool_Flip LUCY_PostPool_Flip
  #define PostPool_Flip_t LUCY_PostPool_Flip_t
  #define PostPool_Fetch LUCY_PostPool_Fetch
  #define PostPool_Fetch_t LUCY_PostPool_Fetch_t
  #define PostPool_Peek LUCY_PostPool_Peek
  #define PostPool_Peek_t LUCY_PostPool_Peek_t
  #define PostPool_Add_Run LUCY_PostPool_Add_Run
  #define PostPool_Add_Run_t LUCY_PostPool_Add_Run_t
  #define PostPool_Shrink LUCY_PostPool_Shrink
  #define PostPool_Shrink_t LUCY_PostPool_Shrink_t
  #define PostPool_Refill LUCY_PostPool_Refill
  #define PostPool_Refill_t LUCY_PostPool_Refill_t
  #define PostPool_Sort_Buffer LUCY_PostPool_Sort_Buffer
  #define PostPool_Sort_Buffer_t LUCY_PostPool_Sort_Buffer_t
  #define PostPool_Clear_Buffer LUCY_PostPool_Clear_Buffer
  #define PostPool_Clear_Buffer_t LUCY_PostPool_Clear_Buffer_t
  #define PostPool_Buffer_Count LUCY_PostPool_Buffer_Count
  #define PostPool_Buffer_Count_t LUCY_PostPool_Buffer_Count_t
  #define PostPool_Grow_Buffer LUCY_PostPool_Grow_Buffer
  #define PostPool_Grow_Buffer_t LUCY_PostPool_Grow_Buffer_t
  #define PostPool_Set_Mem_Thresh LUCY_PostPool_Set_Mem_Thresh
  #define PostPool_Set_Mem_Thresh_t LUCY_PostPool_Set_Mem_Thresh_t
  #define PostPool_Add_Inversion LUCY_PostPool_Add_Inversion
  #define PostPool_Add_Inversion_t LUCY_PostPool_Add_Inversion_t
  #define PostPool_Get_Mem_Pool LUCY_PostPool_Get_Mem_Pool
  #define PostPool_Get_Mem_Pool_t LUCY_PostPool_Get_Mem_Pool_t
  #define PostPool_Add_Segment LUCY_PostPool_Add_Segment
  #define PostPool_Add_Segment_t LUCY_PostPool_Add_Segment_t
  #define PostPool_Finish LUCY_PostPool_Finish
  #define PostPool_Finish_t LUCY_PostPool_Finish_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_POSTINGPOOL */




