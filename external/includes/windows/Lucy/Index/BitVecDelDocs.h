/*
 * ***********************************************
 * 
 * !!!! DO NOT EDIT !!!!
 * 
 * This file was auto-generated by cfc.
 * 
 * ***********************************************
 * 
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef H_LUCY_INDEX_BITVECDELDOCS
#define H_LUCY_INDEX_BITVECDELDOCS 1


#ifdef __cplusplus
extern "C" {
#endif

#include "lucy_parcel.h"

/* Include the header for this class's parent. 
 */

#include "Lucy\Object\BitVector.h"

/* Define the struct layout for instances of this class.
 */

#ifdef C_LUCY_BITVECDELDOCS
extern uint32_t lucy_BitVecDelDocs_IVARS_OFFSET;
typedef struct lucy_BitVecDelDocsIVARS lucy_BitVecDelDocsIVARS;
static CFISH_INLINE lucy_BitVecDelDocsIVARS*
lucy_BitVecDelDocs_IVARS(lucy_BitVecDelDocs *self) {
   char *ptr = (char*)self + lucy_BitVecDelDocs_IVARS_OFFSET;
   return (lucy_BitVecDelDocsIVARS*)ptr;
}
#ifdef LUCY_USE_SHORT_NAMES
  #define BitVecDelDocsIVARS lucy_BitVecDelDocsIVARS
  #define BitVecDelDocs_IVARS lucy_BitVecDelDocs_IVARS
#endif

struct lucy_BitVecDelDocsIVARS {
    size_t cap;
    uint8_t* bits;
    lucy_InStream* instream;
    cfish_String* filename;
};

#endif /* C_LUCY_BITVECDELDOCS */

/* Declare this class's inert variables.
 */



/* Declare both this class's inert functions and the C functions which
 * implement this class's dynamic methods.
 */

LUCY_VISIBLE lucy_BitVecDelDocs*
lucy_BitVecDelDocs_new(lucy_Folder* folder, cfish_String* filename);

LUCY_VISIBLE lucy_BitVecDelDocs*
lucy_BitVecDelDocs_init(lucy_BitVecDelDocs* self, lucy_Folder* folder, cfish_String* filename);

void
LUCY_BitVecDelDocs_Destroy_IMP(lucy_BitVecDelDocs* self);



/* Define typedefs for each dynamic method, allowing us to cast generic
 * pointers to the appropriate function pointer type more cleanly.
 */

typedef void*
(*LUCY_BitVecDelDocs_To_Host_t)(lucy_BitVecDelDocs* self, void* vcache);

typedef lucy_BitVector*
(*LUCY_BitVecDelDocs_Clone_t)(lucy_BitVecDelDocs* self);

typedef bool
(*LUCY_BitVecDelDocs_Equals_t)(lucy_BitVecDelDocs* self, cfish_Obj* other);

typedef int32_t
(*LUCY_BitVecDelDocs_Compare_To_t)(lucy_BitVecDelDocs* self, cfish_Obj* other);

typedef void
(*LUCY_BitVecDelDocs_Destroy_t)(lucy_BitVecDelDocs* self);

typedef cfish_String*
(*LUCY_BitVecDelDocs_To_String_t)(lucy_BitVecDelDocs* self);

typedef bool
(*LUCY_BitVecDelDocs_Get_t)(lucy_BitVecDelDocs* self, size_t tick);

typedef void
(*LUCY_BitVecDelDocs_Set_t)(lucy_BitVecDelDocs* self, size_t tick);

typedef uint8_t*
(*LUCY_BitVecDelDocs_Get_Raw_Bits_t)(lucy_BitVecDelDocs* self);

typedef size_t
(*LUCY_BitVecDelDocs_Get_Capacity_t)(lucy_BitVecDelDocs* self);

typedef int32_t
(*LUCY_BitVecDelDocs_Next_Hit_t)(lucy_BitVecDelDocs* self, size_t tick);

typedef void
(*LUCY_BitVecDelDocs_Clear_t)(lucy_BitVecDelDocs* self, size_t tick);

typedef void
(*LUCY_BitVecDelDocs_Clear_All_t)(lucy_BitVecDelDocs* self);

typedef void
(*LUCY_BitVecDelDocs_Grow_t)(lucy_BitVecDelDocs* self, size_t capacity);

typedef void
(*LUCY_BitVecDelDocs_Mimic_t)(lucy_BitVecDelDocs* self, cfish_Obj* other);

typedef void
(*LUCY_BitVecDelDocs_And_t)(lucy_BitVecDelDocs* self, const lucy_BitVector* other);

typedef void
(*LUCY_BitVecDelDocs_Or_t)(lucy_BitVecDelDocs* self, const lucy_BitVector* other);

typedef void
(*LUCY_BitVecDelDocs_Xor_t)(lucy_BitVecDelDocs* self, const lucy_BitVector* other);

typedef void
(*LUCY_BitVecDelDocs_And_Not_t)(lucy_BitVecDelDocs* self, const lucy_BitVector* other);

typedef void
(*LUCY_BitVecDelDocs_Flip_t)(lucy_BitVecDelDocs* self, size_t tick);

typedef void
(*LUCY_BitVecDelDocs_Flip_Block_t)(lucy_BitVecDelDocs* self, size_t offset, size_t length);

typedef size_t
(*LUCY_BitVecDelDocs_Count_t)(lucy_BitVecDelDocs* self);

typedef lucy_I32Array*
(*LUCY_BitVecDelDocs_To_Array_t)(lucy_BitVecDelDocs* self);



/* Define type-safe wrappers for inert functions of Obj.
 */

static CFISH_INLINE cfish_Class*
lucy_BitVecDelDocs_get_class(lucy_BitVecDelDocs *self) {
    return cfish_Obj_get_class((cfish_Obj*)self);
}

static CFISH_INLINE cfish_String*
lucy_BitVecDelDocs_get_class_name(lucy_BitVecDelDocs *self) {
    return cfish_Obj_get_class_name((cfish_Obj*)self);
}

static CFISH_INLINE bool
lucy_BitVecDelDocs_is_a(lucy_BitVecDelDocs *self, cfish_Class *ancestor) {
    return cfish_Obj_is_a((cfish_Obj*)self, ancestor);
}


/* Define the inline functions which implement this class's virtual methods.
 */

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_To_Host_OFFSET;
static CFISH_INLINE void*
LUCY_BitVecDelDocs_To_Host(lucy_BitVecDelDocs* self, void* vcache) {
    const LUCY_BitVecDelDocs_To_Host_t method = (LUCY_BitVecDelDocs_To_Host_t)cfish_obj_method(self, LUCY_BitVecDelDocs_To_Host_OFFSET);
    return method(self, vcache);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Clone_OFFSET;
static CFISH_INLINE lucy_BitVector*
LUCY_BitVecDelDocs_Clone(lucy_BitVecDelDocs* self) {
    const LUCY_BitVecDelDocs_Clone_t method = (LUCY_BitVecDelDocs_Clone_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Clone_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Equals_OFFSET;
static CFISH_INLINE bool
LUCY_BitVecDelDocs_Equals(lucy_BitVecDelDocs* self, cfish_Obj* other) {
    const LUCY_BitVecDelDocs_Equals_t method = (LUCY_BitVecDelDocs_Equals_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Equals_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Compare_To_OFFSET;
static CFISH_INLINE int32_t
LUCY_BitVecDelDocs_Compare_To(lucy_BitVecDelDocs* self, cfish_Obj* other) {
    const LUCY_BitVecDelDocs_Compare_To_t method = (LUCY_BitVecDelDocs_Compare_To_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Compare_To_OFFSET);
    return method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Destroy_OFFSET;
static CFISH_INLINE void
LUCY_BitVecDelDocs_Destroy(lucy_BitVecDelDocs* self) {
    const LUCY_BitVecDelDocs_Destroy_t method = (LUCY_BitVecDelDocs_Destroy_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Destroy_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_To_String_OFFSET;
static CFISH_INLINE cfish_String*
LUCY_BitVecDelDocs_To_String(lucy_BitVecDelDocs* self) {
    const LUCY_BitVecDelDocs_To_String_t method = (LUCY_BitVecDelDocs_To_String_t)cfish_obj_method(self, LUCY_BitVecDelDocs_To_String_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Get_OFFSET;
static CFISH_INLINE bool
LUCY_BitVecDelDocs_Get(lucy_BitVecDelDocs* self, size_t tick) {
    const LUCY_BitVecDelDocs_Get_t method = (LUCY_BitVecDelDocs_Get_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Get_OFFSET);
    return method(self, tick);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Set_OFFSET;
static CFISH_INLINE void
LUCY_BitVecDelDocs_Set(lucy_BitVecDelDocs* self, size_t tick) {
    const LUCY_BitVecDelDocs_Set_t method = (LUCY_BitVecDelDocs_Set_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Set_OFFSET);
    method(self, tick);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Get_Raw_Bits_OFFSET;
static CFISH_INLINE uint8_t*
LUCY_BitVecDelDocs_Get_Raw_Bits(lucy_BitVecDelDocs* self) {
    const LUCY_BitVecDelDocs_Get_Raw_Bits_t method = (LUCY_BitVecDelDocs_Get_Raw_Bits_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Get_Raw_Bits_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Get_Capacity_OFFSET;
static CFISH_INLINE size_t
LUCY_BitVecDelDocs_Get_Capacity(lucy_BitVecDelDocs* self) {
    const LUCY_BitVecDelDocs_Get_Capacity_t method = (LUCY_BitVecDelDocs_Get_Capacity_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Get_Capacity_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Next_Hit_OFFSET;
static CFISH_INLINE int32_t
LUCY_BitVecDelDocs_Next_Hit(lucy_BitVecDelDocs* self, size_t tick) {
    const LUCY_BitVecDelDocs_Next_Hit_t method = (LUCY_BitVecDelDocs_Next_Hit_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Next_Hit_OFFSET);
    return method(self, tick);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Clear_OFFSET;
static CFISH_INLINE void
LUCY_BitVecDelDocs_Clear(lucy_BitVecDelDocs* self, size_t tick) {
    const LUCY_BitVecDelDocs_Clear_t method = (LUCY_BitVecDelDocs_Clear_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Clear_OFFSET);
    method(self, tick);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Clear_All_OFFSET;
static CFISH_INLINE void
LUCY_BitVecDelDocs_Clear_All(lucy_BitVecDelDocs* self) {
    const LUCY_BitVecDelDocs_Clear_All_t method = (LUCY_BitVecDelDocs_Clear_All_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Clear_All_OFFSET);
    method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Grow_OFFSET;
static CFISH_INLINE void
LUCY_BitVecDelDocs_Grow(lucy_BitVecDelDocs* self, size_t capacity) {
    const LUCY_BitVecDelDocs_Grow_t method = (LUCY_BitVecDelDocs_Grow_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Grow_OFFSET);
    method(self, capacity);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Mimic_OFFSET;
static CFISH_INLINE void
LUCY_BitVecDelDocs_Mimic(lucy_BitVecDelDocs* self, cfish_Obj* other) {
    const LUCY_BitVecDelDocs_Mimic_t method = (LUCY_BitVecDelDocs_Mimic_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Mimic_OFFSET);
    method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_And_OFFSET;
static CFISH_INLINE void
LUCY_BitVecDelDocs_And(lucy_BitVecDelDocs* self, const lucy_BitVector* other) {
    const LUCY_BitVecDelDocs_And_t method = (LUCY_BitVecDelDocs_And_t)cfish_obj_method(self, LUCY_BitVecDelDocs_And_OFFSET);
    method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Or_OFFSET;
static CFISH_INLINE void
LUCY_BitVecDelDocs_Or(lucy_BitVecDelDocs* self, const lucy_BitVector* other) {
    const LUCY_BitVecDelDocs_Or_t method = (LUCY_BitVecDelDocs_Or_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Or_OFFSET);
    method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Xor_OFFSET;
static CFISH_INLINE void
LUCY_BitVecDelDocs_Xor(lucy_BitVecDelDocs* self, const lucy_BitVector* other) {
    const LUCY_BitVecDelDocs_Xor_t method = (LUCY_BitVecDelDocs_Xor_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Xor_OFFSET);
    method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_And_Not_OFFSET;
static CFISH_INLINE void
LUCY_BitVecDelDocs_And_Not(lucy_BitVecDelDocs* self, const lucy_BitVector* other) {
    const LUCY_BitVecDelDocs_And_Not_t method = (LUCY_BitVecDelDocs_And_Not_t)cfish_obj_method(self, LUCY_BitVecDelDocs_And_Not_OFFSET);
    method(self, other);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Flip_OFFSET;
static CFISH_INLINE void
LUCY_BitVecDelDocs_Flip(lucy_BitVecDelDocs* self, size_t tick) {
    const LUCY_BitVecDelDocs_Flip_t method = (LUCY_BitVecDelDocs_Flip_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Flip_OFFSET);
    method(self, tick);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Flip_Block_OFFSET;
static CFISH_INLINE void
LUCY_BitVecDelDocs_Flip_Block(lucy_BitVecDelDocs* self, size_t offset, size_t length) {
    const LUCY_BitVecDelDocs_Flip_Block_t method = (LUCY_BitVecDelDocs_Flip_Block_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Flip_Block_OFFSET);
    method(self, offset, length);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_Count_OFFSET;
static CFISH_INLINE size_t
LUCY_BitVecDelDocs_Count(lucy_BitVecDelDocs* self) {
    const LUCY_BitVecDelDocs_Count_t method = (LUCY_BitVecDelDocs_Count_t)cfish_obj_method(self, LUCY_BitVecDelDocs_Count_OFFSET);
    return method(self);
}

extern LUCY_VISIBLE uint32_t LUCY_BitVecDelDocs_To_Array_OFFSET;
static CFISH_INLINE lucy_I32Array*
LUCY_BitVecDelDocs_To_Array(lucy_BitVecDelDocs* self) {
    const LUCY_BitVecDelDocs_To_Array_t method = (LUCY_BitVecDelDocs_To_Array_t)cfish_obj_method(self, LUCY_BitVecDelDocs_To_Array_OFFSET);
    return method(self);
}



/* Declare callbacks for wrapping host overrides.
 */

#ifdef CFISH_NO_DYNAMIC_OVERRIDES
#else
#endif


/* Define "short names" for this class's symbols.
 */

#ifdef LUCY_USE_SHORT_NAMES
  #define BitVecDelDocs lucy_BitVecDelDocs
  #define BITVECDELDOCS LUCY_BITVECDELDOCS
  #define BitVecDelDocs_new lucy_BitVecDelDocs_new
  #define BitVecDelDocs_init lucy_BitVecDelDocs_init
  #define BitVecDelDocs_get_class lucy_BitVecDelDocs_get_class
  #define BitVecDelDocs_get_class_name lucy_BitVecDelDocs_get_class_name
  #define BitVecDelDocs_is_a lucy_BitVecDelDocs_is_a
  #define BitVecDelDocs_Destroy_IMP LUCY_BitVecDelDocs_Destroy_IMP
  #define BitVecDelDocs_To_Host LUCY_BitVecDelDocs_To_Host
  #define BitVecDelDocs_To_Host_t LUCY_BitVecDelDocs_To_Host_t
  #define BitVecDelDocs_Clone LUCY_BitVecDelDocs_Clone
  #define BitVecDelDocs_Clone_t LUCY_BitVecDelDocs_Clone_t
  #define BitVecDelDocs_Equals LUCY_BitVecDelDocs_Equals
  #define BitVecDelDocs_Equals_t LUCY_BitVecDelDocs_Equals_t
  #define BitVecDelDocs_Compare_To LUCY_BitVecDelDocs_Compare_To
  #define BitVecDelDocs_Compare_To_t LUCY_BitVecDelDocs_Compare_To_t
  #define BitVecDelDocs_Destroy LUCY_BitVecDelDocs_Destroy
  #define BitVecDelDocs_Destroy_t LUCY_BitVecDelDocs_Destroy_t
  #define BitVecDelDocs_To_String LUCY_BitVecDelDocs_To_String
  #define BitVecDelDocs_To_String_t LUCY_BitVecDelDocs_To_String_t
  #define BitVecDelDocs_Get LUCY_BitVecDelDocs_Get
  #define BitVecDelDocs_Get_t LUCY_BitVecDelDocs_Get_t
  #define BitVecDelDocs_Set LUCY_BitVecDelDocs_Set
  #define BitVecDelDocs_Set_t LUCY_BitVecDelDocs_Set_t
  #define BitVecDelDocs_Get_Raw_Bits LUCY_BitVecDelDocs_Get_Raw_Bits
  #define BitVecDelDocs_Get_Raw_Bits_t LUCY_BitVecDelDocs_Get_Raw_Bits_t
  #define BitVecDelDocs_Get_Capacity LUCY_BitVecDelDocs_Get_Capacity
  #define BitVecDelDocs_Get_Capacity_t LUCY_BitVecDelDocs_Get_Capacity_t
  #define BitVecDelDocs_Next_Hit LUCY_BitVecDelDocs_Next_Hit
  #define BitVecDelDocs_Next_Hit_t LUCY_BitVecDelDocs_Next_Hit_t
  #define BitVecDelDocs_Clear LUCY_BitVecDelDocs_Clear
  #define BitVecDelDocs_Clear_t LUCY_BitVecDelDocs_Clear_t
  #define BitVecDelDocs_Clear_All LUCY_BitVecDelDocs_Clear_All
  #define BitVecDelDocs_Clear_All_t LUCY_BitVecDelDocs_Clear_All_t
  #define BitVecDelDocs_Grow LUCY_BitVecDelDocs_Grow
  #define BitVecDelDocs_Grow_t LUCY_BitVecDelDocs_Grow_t
  #define BitVecDelDocs_Mimic LUCY_BitVecDelDocs_Mimic
  #define BitVecDelDocs_Mimic_t LUCY_BitVecDelDocs_Mimic_t
  #define BitVecDelDocs_And LUCY_BitVecDelDocs_And
  #define BitVecDelDocs_And_t LUCY_BitVecDelDocs_And_t
  #define BitVecDelDocs_Or LUCY_BitVecDelDocs_Or
  #define BitVecDelDocs_Or_t LUCY_BitVecDelDocs_Or_t
  #define BitVecDelDocs_Xor LUCY_BitVecDelDocs_Xor
  #define BitVecDelDocs_Xor_t LUCY_BitVecDelDocs_Xor_t
  #define BitVecDelDocs_And_Not LUCY_BitVecDelDocs_And_Not
  #define BitVecDelDocs_And_Not_t LUCY_BitVecDelDocs_And_Not_t
  #define BitVecDelDocs_Flip LUCY_BitVecDelDocs_Flip
  #define BitVecDelDocs_Flip_t LUCY_BitVecDelDocs_Flip_t
  #define BitVecDelDocs_Flip_Block LUCY_BitVecDelDocs_Flip_Block
  #define BitVecDelDocs_Flip_Block_t LUCY_BitVecDelDocs_Flip_Block_t
  #define BitVecDelDocs_Count LUCY_BitVecDelDocs_Count
  #define BitVecDelDocs_Count_t LUCY_BitVecDelDocs_Count_t
  #define BitVecDelDocs_To_Array LUCY_BitVecDelDocs_To_Array
  #define BitVecDelDocs_To_Array_t LUCY_BitVecDelDocs_To_Array_t
#endif /* LUCY_USE_SHORT_NAMES */





#ifdef __cplusplus
}
#endif

#endif /* H_LUCY_INDEX_BITVECDELDOCS */




